
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000e17 memsz 0x00000e17 flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000800 memsz 0x00000800 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000217  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000800  00008000  00008000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00001818  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e0  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007e  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000084  00000000  00000000  000019ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cd  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00008000 l    d  .data	00000000 .data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c0f l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e11 l       .text	00000000 gdt_desc
00000000 l    df *ABS*	00000000 os.c
00008000 g     O .data	00000800 gdt_table
00007c00 g       .text	00000000 _start
00008800 g       .data	00000000 __bss_start
00008800 g       .data	00000000 _edata
00008800 g       .data	00000000 _end



Disassembly of section .text:

00007c00 <_start>:

	//  以下是代码区
 	.text
_start: 
	//  x86 使用段寄存器中的内容作为内存访问的基址，因此以下预先置好
	mov $0, %ax  // 设置代码段
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax,%ds  // 设置数据段
	mov %ax,%es  // 设置数据段
    7c05:	8e c0                	mov    %eax,%es
	mov %ax,%ss  // 设置栈段
    7c07:	8e d0                	mov    %eax,%ss
	mov $_start,%esp // 设置栈的起始地址
    7c09:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c0f <read_self_all>:

	// 计算机上电启动后，只读取磁盘的第一个扇区(即512字节)到内存0x7c00处，即相当与自己只有个头在内存，
	// 为了能够读取更多的内容，需要自己读取磁盘的更多内容到内存中，下面将自己的其余部分读取到0x7e00处,即0x7c00后的512字节
read_self_all:
	mov $_start_32, %bx // 读取到的内存地址
    7c0f:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx	// ch:磁头号，cl:扇区号
    7c14:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax // ah:0x42读磁盘命令，al=0x40 64个扇区,多读一些，32kb
	mov $0x80, %dx // dh:磁盘号，dl:驱动器号0x80(磁盘1)
    7c1a:	00 cd                	add    %cl,%ch
	int $0x0013		// 调用BIOS中断，读取磁盘扇区
    7c1c:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all	// 读取失败则重试

	// 加载idt表和gdt表，进入保护模式
	cli  // 关中断
    7c1f:	fa                   	cli    
	lgdt gdt_desc // 加载gdt表
    7c20:	0f 01 16             	lgdtl  (%esi)
    7c23:	11 7e 66             	adc    %edi,0x66(%esi)
	mov $1, %eax
    7c26:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax // 设置PE位，进入保护模式
    7c2b:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG,$_start_32 // 进入32位保护模式，可以运行32位指令
    7c2e:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfd:	00 55 aa             	add    %dl,-0x56(%ebp)

00007e00 <_start_32>:
	// 32位保护模式，位于512字节后
	.code32
	.text
_start_32:
	// 重新加载数据段寄存器
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	jmp .
    7e0f:	eb fe                	jmp    7e0f <_start_32+0xf>

00007e11 <gdt_desc>:
    7e11:	ff 07                	incl   (%edi)
    7e13:	00                   	.byte 0x0
    7e14:	80 00 00             	addb   $0x0,(%eax)
