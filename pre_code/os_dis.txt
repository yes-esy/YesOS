
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001268 memsz 0x00001268 flags r-x
    LOAD off    0x00002000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x00003110 memsz 0x00009000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055d  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000018  0000815d  0000815d  0000115d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  00008178  00008178  00001178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00003110  0000a000  0000a000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00005000  0000e000  0000e000  00005110  2**12
                  ALLOC
  5 .comment      00000011  00000000  00000000  00005110  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00005128  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004bd  00000000  00000000  00005168  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001a1  00000000  00000000  00005625  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000014e  00000000  00000000  000057c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000204  00000000  00000000  00005914  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
0000815d l    d  .rodata	00000000 .rodata
00008178 l    d  .eh_frame	00000000 .eh_frame
0000a000 l    d  .data	00000000 .data
0000e000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c0f l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e96 l       .text	00000000 gdt_desc
00007e9c l       .text	00000000 idt_desc
00007e86 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000d108 l     O .data	00000004 row.1736
0000a000 l     O .data	00001000 pg_table
0000d10c l     O .data	00000004 task_tss.1802
0000c908 g     O .data	00000800 gdt_table
0000e000 g     O .bss	00001000 task0_dpl3_stack
0000f000 g     O .bss	00001000 task1_dpl3_stack
00007f36 g     F .text	0000002e sys_show
0000c010 g     O .data	00000010 task1_ldt_table
00007f64 g     F .text	0000002c task_0
0000c020 g     O .data	00000068 task0_tss
00010000 g     O .bss	00001000 map_phy_buffer
00008013 g     F .text	0000014a os_init
00007e52 g       .text	00000000 timer_init
00011000 g     O .bss	00001000 task1_dpl0_stack
0000c0a0 g     O .data	00000068 task1_tss
0000c000 g     O .data	00000010 task0_ldt_table
00007ea2 g     F .text	00000094 do_syscall
00007c00 g       .text	00000000 _start
00007fbc g     F .text	0000001f outb
0000d110 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000d110 g       .data	00000000 _edata
00013000 g       .bss	00000000 _end
00007e66 g       .text	00000000 syscall_handler
00007f90 g     F .text	0000002c task_1
0000c108 g     O .data	00000800 idt_table
00012000 g     O .bss	00001000 task0_dpl0_stack
00007fdb g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	//  以下是代码区
 	.text
_start: 
	//  x86 使用段寄存器中的内容作为内存访问的基址，因此以下预先置好
	mov $0, %ax  // 设置代码段
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax,%ds  // 设置数据段
	mov %ax,%es  // 设置数据段
    7c05:	8e c0                	mov    %eax,%es
	mov %ax,%ss  // 设置栈段
    7c07:	8e d0                	mov    %eax,%ss
	mov $_start,%esp // 设置栈的起始地址
    7c09:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c0f <read_self_all>:

	// 计算机上电启动后，只读取磁盘的第一个扇区(即512字节)到内存0x7c00处，即相当与自己只有个头在内存，
	// 为了能够读取更多的内容，需要自己读取磁盘的更多内容到内存中，下面将自己的其余部分读取到0x7e00处,即0x7c00后的512字节
read_self_all:
	mov $_start_32, %bx // 读取到的内存地址
    7c0f:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2, %cx	// ch:磁头号，cl:扇区号
    7c14:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x240, %ax // ah:0x42读磁盘命令，al=0x40 64个扇区,多读一些，32kb
	mov $0x80, %dx // dh:磁盘号，dl:驱动器号0x80(磁盘1)
    7c1a:	00 cd                	add    %cl,%ch
	int $0x0013		// 调用BIOS中断，读取磁盘扇区
    7c1c:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all	// 读取失败则重试

	// 加载idt表和gdt表，进入保护模式
	cli  // 关中断
    7c1f:	fa                   	cli    
	lgdt gdt_desc // 加载gdt表
    7c20:	0f 01 16             	lgdtl  (%esi)
    7c23:	96                   	xchg   %eax,%esi
    7c24:	7e 0f                	jle    7c35 <read_self_all+0x26>
	lidt idt_desc // 加载idt表
    7c26:	01 1e                	add    %ebx,(%esi)
    7c28:	9c                   	pushf  
    7c29:	7e 66                	jle    7c91 <read_self_all+0x82>
	mov $1, %eax
    7c2b:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax // 设置PE位，进入保护模式
    7c30:	0f 01 f0             	lmsw   %ax
	jmp $KERNEL_CODE_SEG,$_start_32 // 进入32位保护模式，可以运行32位指令
    7c33:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	// 32位保护模式，位于512字节后
	.code32
	.text
_start_32:
	// 重新加载数据段寄存器
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov $_start, %esp
    7e0a:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	
	//跳转到c语言中运行
	call os_init
    7e0f:	e8 ff 01 00 00       	call   8013 <os_init>

	// 打开分页机制
	mov $pg_dir, %eax
    7e14:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e19:	0f 22 d8             	mov    %eax,%cr3

	mov %cr4, %eax
    7e1c:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4), %eax  // PSE位,支持4MB分页
    7e1f:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e22:	0f 22 e0             	mov    %eax,%cr4


	mov %cr0, %eax
    7e25:	0f 20 c0             	mov    %cr0,%eax
	orl $(1 << 31), %eax  // PG位,开启分页机制
    7e28:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e2d:	0f 22 c0             	mov    %eax,%cr0

	mov $TASK0_TSS_SEG, %ax
    7e30:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax // 加载TSS
    7e34:	0f 00 d8             	ltr    %ax

	mov $TASK0_LDT_SEG, %ax
    7e37:	66 b8 40 00          	mov    $0x40,%ax
	lldt %ax
    7e3b:	0f 00 d0             	lldt   %ax

	// 下面模拟中断返回，从而实现从特权级0到特权级3的变换
	// 中断发生时，会自动压入原SS, ESP, EFLAGS, CS, EIP到栈中
	push $TASK_DATA_SEG 
    7e3e:	6a 0f                	push   $0xf
	push $task0_dpl3_stack + 1024 //特权级3的栈
    7e40:	68 00 e4 00 00       	push   $0xe400
	push $0x202 //0中断暂时关掉
    7e45:	68 02 02 00 00       	push   $0x202
	push $TASK_CODE_SEG  // CPL=3时的选择子
    7e4a:	6a 07                	push   $0x7
	push $task_0_entry  // EIP
    7e4c:	68 86 7e 00 00       	push   $0x7e86
	iret // 从中断返回，切换至任务0
    7e51:	cf                   	iret   

00007e52 <timer_init>:

timer_init:
	// 保护现场
	push %ds
    7e52:	1e                   	push   %ds
	pusha // 保存通用寄存器
    7e53:	60                   	pusha  

	mov $0x20, %al
    7e54:	b0 20                	mov    $0x20,%al
	outb %al, $0x20  // 发送EOI
    7e56:	e6 20                	out    %al,$0x20

	mov $KERNEL_DATA_SEG, %ax
    7e58:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e5c:	8e d8                	mov    %eax,%ds

	call task_sched // 任务切换
    7e5e:	e8 78 01 00 00       	call   7fdb <task_sched>

	//恢复现场
	popa
    7e63:	61                   	popa   
	pop %ds
    7e64:	1f                   	pop    %ds
	iret  // 从中断返回
    7e65:	cf                   	iret   

00007e66 <syscall_handler>:


syscall_handler:
	push %ds
    7e66:	1e                   	push   %ds
	pusha
    7e67:	60                   	pusha  

	mov $KERNEL_DATA_SEG, %ax
    7e68:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e6c:	8e d8                	mov    %eax,%ds

	mov %esp, %ebp // 保存栈指针
    7e6e:	89 e5                	mov    %esp,%ebp
	push 13 * 4(%ebp)
    7e70:	ff 75 34             	pushl  0x34(%ebp)
	push 12 * 4(%ebp)	
    7e73:	ff 75 30             	pushl  0x30(%ebp)
	push 11 * 4(%ebp)
    7e76:	ff 75 2c             	pushl  0x2c(%ebp)
	call do_syscall
    7e79:	e8 24 00 00 00       	call   7ea2 <do_syscall>

	add $(3 * 4), %esp 
    7e7e:	83 c4 0c             	add    $0xc,%esp

	popa
    7e81:	61                   	popa   
	pop %ds
    7e82:	1f                   	pop    %ds
	ret $(3 * 4) // 3个参数，每个4字节
    7e83:	c2 0c 00             	ret    $0xc

00007e86 <task_0_entry>:

// 创建一个进程，使其工作在特权级三之下
task_0_entry:  // 进程0 
	mov %ss, %ax
    7e86:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e89:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e8b:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e8d:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e8f:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e91:	e9 ce 00 00 00       	jmp    7f64 <task_0>

00007e96 <gdt_desc>:
    7e96:	ff 07                	incl   (%edi)
    7e98:	08 c9                	or     %cl,%cl
	...

00007e9c <idt_desc>:
    7e9c:	ff 07                	incl   (%edi)
    7e9e:	08 c1                	or     %al,%cl
	...

00007ea2 <do_syscall>:
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;


void do_syscall(int func, char * str,char color)
{
    7ea2:	55                   	push   %ebp
    7ea3:	89 e5                	mov    %esp,%ebp
    7ea5:	83 ec 14             	sub    $0x14,%esp
    7ea8:	8b 45 10             	mov    0x10(%ebp),%eax
    7eab:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row = 1;
    if(func ==2)
    7eae:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7eb2:	75 7f                	jne    7f33 <do_syscall+0x91>
    {
        unsigned short * dest = (unsigned short *) 0xb8000 + 80 * row; 
    7eb4:	8b 15 08 d1 00 00    	mov    0xd108,%edx
    7eba:	89 d0                	mov    %edx,%eax
    7ebc:	c1 e0 02             	shl    $0x2,%eax
    7ebf:	01 d0                	add    %edx,%eax
    7ec1:	c1 e0 05             	shl    $0x5,%eax
    7ec4:	05 00 80 0b 00       	add    $0xb8000,%eax
    7ec9:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (*str)
    7ecc:	eb 27                	jmp    7ef5 <do_syscall+0x53>
        {
            *dest++ = *str++ | (color<<8);
    7ece:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ed1:	8d 50 01             	lea    0x1(%eax),%edx
    7ed4:	89 55 0c             	mov    %edx,0xc(%ebp)
    7ed7:	0f b6 00             	movzbl (%eax),%eax
    7eda:	66 98                	cbtw   
    7edc:	0f be 55 ec          	movsbl -0x14(%ebp),%edx
    7ee0:	c1 e2 08             	shl    $0x8,%edx
    7ee3:	09 d0                	or     %edx,%eax
    7ee5:	89 c1                	mov    %eax,%ecx
    7ee7:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7eea:	8d 50 02             	lea    0x2(%eax),%edx
    7eed:	89 55 fc             	mov    %edx,-0x4(%ebp)
    7ef0:	89 ca                	mov    %ecx,%edx
    7ef2:	66 89 10             	mov    %dx,(%eax)
        while (*str)
    7ef5:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ef8:	0f b6 00             	movzbl (%eax),%eax
    7efb:	84 c0                	test   %al,%al
    7efd:	75 cf                	jne    7ece <do_syscall+0x2c>
        }
        row = (row >= 25) ? 0 : row + 1;
    7eff:	a1 08 d1 00 00       	mov    0xd108,%eax
    7f04:	83 f8 18             	cmp    $0x18,%eax
    7f07:	7f 0a                	jg     7f13 <do_syscall+0x71>
    7f09:	a1 08 d1 00 00       	mov    0xd108,%eax
    7f0e:	83 c0 01             	add    $0x1,%eax
    7f11:	eb 05                	jmp    7f18 <do_syscall+0x76>
    7f13:	b8 00 00 00 00       	mov    $0x0,%eax
    7f18:	a3 08 d1 00 00       	mov    %eax,0xd108
        // 加点延时，让显示慢下来
        for (int i = 0; i < 0xFFFFFF; i++)
    7f1d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f24:	eb 04                	jmp    7f2a <do_syscall+0x88>
    7f26:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    7f2a:	81 7d f8 fe ff ff 00 	cmpl   $0xfffffe,-0x8(%ebp)
    7f31:	7e f3                	jle    7f26 <do_syscall+0x84>
            ;
    }
    
}
    7f33:	90                   	nop
    7f34:	c9                   	leave  
    7f35:	c3                   	ret    

00007f36 <sys_show>:
void sys_show(char * str,char color)
{
    7f36:	55                   	push   %ebp
    7f37:	89 e5                	mov    %esp,%ebp
    7f39:	83 ec 14             	sub    $0x14,%esp
    7f3c:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f3f:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint32_t addr[] = {0, SYSCALL_SEG};
    7f42:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f49:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)

    __asm__ __volatile__("push %[color]; push %[str]; push %[id];lcalll *(%[a])" 
    7f50:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f53:	ba 02 00 00 00       	mov    $0x2,%edx
    7f58:	ff 75 ec             	pushl  -0x14(%ebp)
    7f5b:	ff 75 08             	pushl  0x8(%ebp)
    7f5e:	52                   	push   %edx
    7f5f:	ff 18                	lcall  *(%eax)
    ::[a] "r"(addr),[color] "m"(color),[str] "m"(str),[id] "r"(2));
}
    7f61:	90                   	nop
    7f62:	c9                   	leave  
    7f63:	c3                   	ret    

00007f64 <task_0>:
/**
 * @brief 任务0 特权级3
 */
void task_0(void)
{
    7f64:	55                   	push   %ebp
    7f65:	89 e5                	mov    %esp,%ebp
    7f67:	83 ec 10             	sub    $0x10,%esp
    char * message = "task 0:1234";
    7f6a:	c7 45 f8 5d 81 00 00 	movl   $0x815d,-0x8(%ebp)
    uint8_t color = 0;
    7f71:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    for(;;)
    {
        sys_show(message,color++);
    7f75:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7f79:	8d 50 01             	lea    0x1(%eax),%edx
    7f7c:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7f7f:	0f be c0             	movsbl %al,%eax
    7f82:	50                   	push   %eax
    7f83:	ff 75 f8             	pushl  -0x8(%ebp)
    7f86:	e8 ab ff ff ff       	call   7f36 <sys_show>
    7f8b:	83 c4 08             	add    $0x8,%esp
    7f8e:	eb e5                	jmp    7f75 <task_0+0x11>

00007f90 <task_1>:

/**
 * @brief 任务1
 */
void task_1(void)
{
    7f90:	55                   	push   %ebp
    7f91:	89 e5                	mov    %esp,%ebp
    7f93:	83 ec 10             	sub    $0x10,%esp
    char *message = "task 1:5678";
    7f96:	c7 45 f8 69 81 00 00 	movl   $0x8169,-0x8(%ebp)
    uint8_t color = 0;
    7f9d:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)
    for (;;)
    {
        sys_show(message, color--);
    7fa1:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7fa5:	8d 50 ff             	lea    -0x1(%eax),%edx
    7fa8:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7fab:	0f be c0             	movsbl %al,%eax
    7fae:	50                   	push   %eax
    7faf:	ff 75 f8             	pushl  -0x8(%ebp)
    7fb2:	e8 7f ff ff ff       	call   7f36 <sys_show>
    7fb7:	83 c4 08             	add    $0x8,%esp
    7fba:	eb e5                	jmp    7fa1 <task_1+0x11>

00007fbc <outb>:
    [TASK1_LDT_SEG / 8] = {sizeof(task1_ldt_table) - 1, 0X0, 0xe200, 0x00cf},

};

void outb(uint8_t data, uint16_t port)
{
    7fbc:	55                   	push   %ebp
    7fbd:	89 e5                	mov    %esp,%ebp
    7fbf:	83 ec 08             	sub    $0x8,%esp
    7fc2:	8b 55 08             	mov    0x8(%ebp),%edx
    7fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
    7fc8:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7fcb:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
    7fcf:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7fd3:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7fd7:	ee                   	out    %al,(%dx)
}
    7fd8:	90                   	nop
    7fd9:	c9                   	leave  
    7fda:	c3                   	ret    

00007fdb <task_sched>:

void task_sched(void)
{
    7fdb:	55                   	push   %ebp
    7fdc:	89 e5                	mov    %esp,%ebp
    7fde:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;

    // 更换当前任务的tss，然后切换过去
    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG;
    7fe1:	a1 0c d1 00 00       	mov    0xd10c,%eax
    7fe6:	83 f8 28             	cmp    $0x28,%eax
    7fe9:	75 07                	jne    7ff2 <task_sched+0x17>
    7feb:	b8 30 00 00 00       	mov    $0x30,%eax
    7ff0:	eb 05                	jmp    7ff7 <task_sched+0x1c>
    7ff2:	b8 28 00 00 00       	mov    $0x28,%eax
    7ff7:	a3 0c d1 00 00       	mov    %eax,0xd10c
    uint32_t addr[] = {0, task_tss};
    7ffc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    8003:	a1 0c d1 00 00       	mov    0xd10c,%eax
    8008:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a]"r"(addr));
    800b:	8d 45 f8             	lea    -0x8(%ebp),%eax
    800e:	ff 28                	ljmp   *(%eax)
}
    8010:	90                   	nop
    8011:	c9                   	leave  
    8012:	c3                   	ret    

00008013 <os_init>:

//申明函数
void syscall_handler(void);
void timer_init(void);

void os_init (void) {
    8013:	55                   	push   %ebp
    8014:	89 e5                	mov    %esp,%ebp
    8016:	83 ec 10             	sub    $0x10,%esp
    // 初始化8259中断控制器，打开定时器中断
    outb(0x11, 0x20);       // 开始初始化主芯片
    8019:	6a 20                	push   $0x20
    801b:	6a 11                	push   $0x11
    801d:	e8 9a ff ff ff       	call   7fbc <outb>
    8022:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);       // 初始化从芯片
    8025:	68 a0 00 00 00       	push   $0xa0
    802a:	6a 11                	push   $0x11
    802c:	e8 8b ff ff ff       	call   7fbc <outb>
    8031:	83 c4 08             	add    $0x8,%esp
    outb(0x20, 0x21);       // 写ICW2，告诉主芯片中断向量从0x20开始
    8034:	6a 21                	push   $0x21
    8036:	6a 20                	push   $0x20
    8038:	e8 7f ff ff ff       	call   7fbc <outb>
    803d:	83 c4 08             	add    $0x8,%esp
    outb(0x28, 0xa1);       // 写ICW2，告诉从芯片中断向量从0x28开始
    8040:	68 a1 00 00 00       	push   $0xa1
    8045:	6a 28                	push   $0x28
    8047:	e8 70 ff ff ff       	call   7fbc <outb>
    804c:	83 c4 08             	add    $0x8,%esp
    outb((1 << 2), 0x21);   // 写ICW3，告诉主芯片IRQ2上连接有从芯片
    804f:	6a 21                	push   $0x21
    8051:	6a 04                	push   $0x4
    8053:	e8 64 ff ff ff       	call   7fbc <outb>
    8058:	83 c4 08             	add    $0x8,%esp
    outb(2, 0xa1);          // 写ICW3，告诉从芯片连接g到主芯片的IRQ2上
    805b:	68 a1 00 00 00       	push   $0xa1
    8060:	6a 02                	push   $0x2
    8062:	e8 55 ff ff ff       	call   7fbc <outb>
    8067:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0x21);        // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    806a:	6a 21                	push   $0x21
    806c:	6a 01                	push   $0x1
    806e:	e8 49 ff ff ff       	call   7fbc <outb>
    8073:	83 c4 08             	add    $0x8,%esp
    outb(0x1, 0xa1);        // 写ICW4，告诉主芯片8086、普通EOI、非缓冲模式
    8076:	68 a1 00 00 00       	push   $0xa1
    807b:	6a 01                	push   $0x1
    807d:	e8 3a ff ff ff       	call   7fbc <outb>
    8082:	83 c4 08             	add    $0x8,%esp
    outb(0xfe, 0x21);       // 开定时中断，其它屏幕
    8085:	6a 21                	push   $0x21
    8087:	68 fe 00 00 00       	push   $0xfe
    808c:	e8 2b ff ff ff       	call   7fbc <outb>
    8091:	83 c4 08             	add    $0x8,%esp
    outb(0xff, 0xa1);       // 屏幕所有中断
    8094:	68 a1 00 00 00       	push   $0xa1
    8099:	68 ff 00 00 00       	push   $0xff
    809e:	e8 19 ff ff ff       	call   7fbc <outb>
    80a3:	83 c4 08             	add    $0x8,%esp

    // 设置定时器，每100ms中断一次
    int tmo = (1193180 / 10);      // 时钟频率为1193180
    80a6:	c7 45 fc 16 d2 01 00 	movl   $0x1d216,-0x4(%ebp)
    outb(0x36, 0x43);               // 二进制计数、模式3、通道0
    80ad:	6a 43                	push   $0x43
    80af:	6a 36                	push   $0x36
    80b1:	e8 06 ff ff ff       	call   7fbc <outb>
    80b6:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo, 0x40);
    80b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80bc:	0f b6 c0             	movzbl %al,%eax
    80bf:	6a 40                	push   $0x40
    80c1:	50                   	push   %eax
    80c2:	e8 f5 fe ff ff       	call   7fbc <outb>
    80c7:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8, 0x40);
    80ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80cd:	c1 f8 08             	sar    $0x8,%eax
    80d0:	0f b6 c0             	movzbl %al,%eax
    80d3:	6a 40                	push   $0x40
    80d5:	50                   	push   %eax
    80d6:	e8 e1 fe ff ff       	call   7fbc <outb>
    80db:	83 c4 08             	add    $0x8,%esp

    // 添加中断
    idt_table[0x20].offset_h = (uint32_t)timer_init >> 16;
    80de:	b8 52 7e 00 00       	mov    $0x7e52,%eax
    80e3:	c1 e8 10             	shr    $0x10,%eax
    80e6:	66 a3 0e c2 00 00    	mov    %ax,0xc20e
    idt_table[0x20].offset_l = (uint32_t)timer_init & 0xffff;
    80ec:	b8 52 7e 00 00       	mov    $0x7e52,%eax
    80f1:	66 a3 08 c2 00 00    	mov    %ax,0xc208
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    80f7:	66 c7 05 0a c2 00 00 	movw   $0x8,0xc20a
    80fe:	08 00 
    idt_table[0x20].attr = 0x8E00;      // 存在，DPL=0, 中断门
    8100:	66 c7 05 0c c2 00 00 	movw   $0x8e00,0xc20c
    8107:	00 8e 

    // 添加任务和系统调用
    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    8109:	b8 20 c0 00 00       	mov    $0xc020,%eax
    810e:	66 a3 32 c9 00 00    	mov    %ax,0xc932
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    8114:	b8 a0 c0 00 00       	mov    $0xc0a0,%eax
    8119:	66 a3 3a c9 00 00    	mov    %ax,0xc93a
    gdt_table[SYSCALL_SEG / 8].limit_l = (uint16_t)(uint32_t)syscall_handler;
    811f:	b8 66 7e 00 00       	mov    $0x7e66,%eax
    8124:	66 a3 40 c9 00 00    	mov    %ax,0xc940

    gdt_table[TASK0_LDT_SEG / 8].base_l = (uint16_t)(uint32_t)task0_ldt_table;
    812a:	b8 00 c0 00 00       	mov    $0xc000,%eax
    812f:	66 a3 4a c9 00 00    	mov    %ax,0xc94a
    gdt_table[TASK1_LDT_SEG / 8].base_l = (uint32_t)task1_ldt_table;
    8135:	b8 10 c0 00 00       	mov    $0xc010,%eax
    813a:	66 a3 52 c9 00 00    	mov    %ax,0xc952

    // 虚拟内存
    // 0x80000000开始的4MB区域的映射
    pg_dir[MAP_ADDR >> 22] = (uint32_t)pg_table | PDE_P | PDE_W | PDE_U;
    8140:	b8 00 a0 00 00       	mov    $0xa000,%eax
    8145:	83 c8 07             	or     $0x7,%eax
    8148:	a3 00 b8 00 00       	mov    %eax,0xb800
    pg_table[(MAP_ADDR >> 12) & 0x3FF] = (uint32_t)map_phy_buffer| PDE_P | PDE_W|PDE_U;
    814d:	b8 00 00 01 00       	mov    $0x10000,%eax
    8152:	83 c8 07             	or     $0x7,%eax
    8155:	a3 00 a0 00 00       	mov    %eax,0xa000
    815a:	90                   	nop
    815b:	c9                   	leave  
    815c:	c3                   	ret    
