
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000028e0 memsz 0x00007900 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ae  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  000123b0  000123b0  000033b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       0000052c  000123b4  000123b4  000033b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00005020  000128e0  000128e0  000038e0  2**5
                  ALLOC
  4 .debug_line   000016eb  00000000  00000000  000038e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032ef  00000000  00000000  00004fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e15  00000000  00000000  000082ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000160  00000000  00000000  000090d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000d54  00000000  00000000  00009230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  00009f84  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000f00  00000000  00000000  00009f98  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000123b0 l    d  .data	00000000 .data
000123b4 l    d  .rodata	00000000 .rodata
000128e0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102da l     F .text	0000001b list_node_init
000102f5 l     F .text	0000000b list_node_next
00010300 l     F .text	0000000a list_first
0001030a l     F .text	0000000b list_count
00010315 l     F .text	00000007 hlt
0001031c l     F .text	00000017 write_tr
000128e0 l     O .bss	000001d0 task_manager
0001049b l     F .text	00000117 tss_init
0001244c l     O .rodata	0000000a __func__.2114
00012ac0 l     O .bss	00001000 idle_task_stack
000106c4 l     F .text	0000001d idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
0001091a l     F .text	00000028 lgdt
00010942 l     F .text	0000001a far_jump
00013ac0 l     O .bss	00000800 gdt_table
000142c0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00010b3c l     F .text	00000007 cli
00010b43 l     F .text	00000007 sti
00010b4a l     F .text	0000001d inb
00010b67 l     F .text	0000001f outb
00010b86 l     F .text	00000028 lidt
00010bae l     F .text	00000007 hlt
00010bb5 l     F .text	00000010 read_eflags
00010bc5 l     F .text	0000000b write_eflags
000142e0 l     O .bss	00000400 idt_table
00010bd0 l     F .text	000000d9 dump_core_regs
00010ca9 l     F .text	0000003e do_default_handler
00010f33 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
0001132a l     F .text	0000001f outb
000146e0 l     O .bss	00000004 sys_tick
00011371 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000113e9 l     F .text	0000000a list_first
000113f3 l     F .text	0000000b list_last
000113fe l     F .text	0000000b list_count
00014700 l     O .bss	00000004 init_boot_info
00014704 l     O .bss	00000010 sem
00014720 l     O .bss	000000d4 init_task
00014800 l     O .bss	000000d4 first_task
000148e0 l     O .bss	00001000 first_task_stack
00000000 l    df *ABS*	00000000 mutex.c
000117e3 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011964 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 klib.c
00011aa8 l     F .text	00000007 hlt
000123b0 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
00011ffd l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
000121f7 l     F .text	0000001d inb
00012214 l     F .text	0000001f outb
000158e0 l     O .bss	00000014 mutex
00011c16 g     F .text	0000004f kernel_memcpy
00010376 g     F .text	0000000a task_current
000112f6 g     F .text	0000000b irq_enable_global
00012095 g     F .text	00000064 list_insert_last
00010e1b g     F .text	0000001c do_handler_segment_not_present
000103db g     F .text	00000034 task_set_ready
00011c65 g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010b1e g     F .text	0000001e cpu_init
00012233 g     F .text	0000009d log_init
0001174b g     F .text	00000098 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
00011aaf g     F .text	0000003b kernel_strcpy
000111d9 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00010d73 g     F .text	0000001c do_handler_overflow
00010ea7 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010e53 g     F .text	0000001c do_handler_general_protection
00010f17 g     F .text	0000001c do_handler_control_exception
00011a7f g     F .text	00000029 sem_count
00010d03 g     F .text	0000001c do_handler_divider
00010de3 g     F .text	0000001c do_handler_double_fault
00010e6f g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010fc6 g     F .text	0000002b pic_send_eoi
0001078b g     F .text	0000000a task_first_task
00011992 g     F .text	0000006b sem_wait
00011349 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00011433 g     F .text	00000039 first_task_entry
00010efb g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102c5 g       .text	00000000 simple_switch
00015900 g     O .bss	00002000 stack
000108c3 g     F .text	00000057 sys_sleep
0001146c g     F .text	000002df list_test
00010289 g       .text	00000000 exception_handler_control_exception
00010795 g     F .text	000000d4 task_time_ticks
000100e5 g       .text	00000000 exception_handler_bound_range
00010dab g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010e8b g     F .text	0000001c do_handler_fpu_error
0001074e g     F .text	0000003d task_first_init
00010ec3 g     F .text	0000001c do_handler_machine_check
00010d1f g     F .text	0000001c do_handler_Debug
00012035 g     F .text	00000060 list_insert_first
000108a3 g     F .text	00000020 task_set_wakeup
00010d3b g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
00011aea g     F .text	00000070 kernel_strncpy
000112eb g     F .text	0000000b irq_disable_global
0001040f g     F .text	00000061 sys_sched_yield
00011409 g     F .text	0000002a kernel_init
0001196f g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00011e7c g     F .text	0000014b kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001181a g     F .text	00000090 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
00010dff g     F .text	0000001c do_handler_invalid_tss
00010869 g     F .text	0000003a task_set_sleep
000102a6 g       .text	00000000 exception_handler_timer
0001119f g     F .text	0000003a irq_install
00010a9e g     F .text	0000006d init_gdt
00011301 g     F .text	00000018 irq_enter_protection
000117ee g     F .text	0000002c mutex_init
00011264 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010dc7 g     F .text	0000001c do_handler_device_unavailable
00010380 g     F .text	0000005b task_dispatch
00010b0b g     F .text	00000013 switch_to_tss
00010333 g     F .text	00000043 task_next_run
00011ca6 g     F .text	00000064 kernel_memcmp
00012010 g     F .text	00000025 list_init
00010edf g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010470 g     F .text	0000002b task_set_block
00010ce7 g     F .text	0000001c do_handler_unknown
000101f0 g       .text	00000000 exception_handler_fpu_error
000106a6 g     F .text	0000001e task_switch_from_to
00010ff1 g     F .text	000001ae irq_init
000118aa g     F .text	000000ba mutex_unlock
00011319 g     F .text	00000011 irq_leave_protection
00011bdb g     F .text	0000003b kernel_strlen
0001095c g     F .text	00000086 segment_desc_set
00010d8f g     F .text	0000001c do_handler_bound_range
000120f9 g     F .text	00000079 list_remove_first
00011b5a g     F .text	00000081 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
000119fd g     F .text	00000082 sem_signal
00010088 g       .text	00000000 exception_handler_NMI
000106e1 g     F .text	0000006d task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00011fc7 g     F .text	00000036 pannic
00010e37 g     F .text	0000001c do_handler_stack_segment_fault
00010d57 g     F .text	0000001c do_handler_breakpoint
000122d0 g     F .text	000000de log_printf
000105b2 g     F .text	000000f4 task_init
00011d0a g     F .text	00000033 kernel_sprintf
00010a29 g     F .text	00000075 gdt_alloc_desc
00011d3d g     F .text	0000013f kernel_itoa
00012172 g     F .text	00000085 list_remove
000109e2 g     F .text	00000047 gate_desc_set
000113d1 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern init_main
    .extern kernel_init
    # void start(boot_info_t * boot_info)

_start:
    push %ebp # 保存返回地址
   10000:	55                   	push   %ebp
    mov %esp, %ebp # 使ebp指向栈底
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp),%eax # 将boot_info 传递给 eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    # mov 4(%esp),%eax

    # kernel_init(boot_info)
    push %eax # boot_info 压栈
   10006:	50                   	push   %eax

    call kernel_init # 调用C函数
   10007:	e8 fd 13 00 00       	call   11409 <kernel_init>
    
    # 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		# 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	# 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 00 79 01 00       	mov    $0x17900,%esp

	# 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 20 17 00 00       	jmp    1174b <init_main>

0001002b <exception_handler_unknown>:
    add $(2*4) , %esp

    iret
.endm

exception_handler unknown            , -1    , 0 # 未知异常
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 ab 0c 00 00       	call   10ce7 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider            ,  0    , 0 # 除0异常
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 a8 0c 00 00       	call   10d03 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug              ,  0    , 0 # Debug异常
   10069:	6a 00                	push   $0x0
   1006b:	6a 00                	push   $0x0
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 a5 0c 00 00       	call   10d1f <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI                ,  2    , 0 #
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 a2 0c 00 00       	call   10d3b <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint         ,  3    , 0 # 断点异常
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 9f 0c 00 00       	call   10d57 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow           ,  4    , 0 # 溢出
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 9c 0c 00 00       	call   10d73 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range        ,  5    , 0 # 越界
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 99 0c 00 00       	call   10d8f <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode     ,  6    , 0 # 无效操作码
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 96 0c 00 00       	call   10dab <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable ,  7    , 0 # 设备不可用
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 93 0c 00 00       	call   10dc7 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault       ,  8    , 1 #
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 92 0c 00 00       	call   10de3 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss        ,  10   , 1 # 无效TSS
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 91 0c 00 00       	call   10dff <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11   , 1 # 段不存在
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 90 0c 00 00       	call   10e1b <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12   , 1 #
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 8f 0c 00 00       	call   10e37 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection ,  13   , 1 #
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 8e 0c 00 00       	call   10e53 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault         ,  14   , 1 # 页错误
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 8d 0c 00 00       	call   10e6f <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error          ,  16   , 0 # 浮点运算单元
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 8a 0c 00 00       	call   10e8b <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check    ,  17   , 1 # 对齐检查
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 89 0c 00 00       	call   10ea7 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check      ,  18   , 0 #
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 86 0c 00 00       	call   10ec3 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception      ,  19   , 0 #
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 83 0c 00 00       	call   10edf <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception  ,  20   , 0 #
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 80 0c 00 00       	call   10efb <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_control_exception>:
exception_handler control_exception  ,  21   , 1 #
   10289:	6a 15                	push   $0x15
   1028b:	60                   	pusha  
   1028c:	1e                   	push   %ds
   1028d:	06                   	push   %es
   1028e:	0f a0                	push   %fs
   10290:	0f a8                	push   %gs
   10292:	54                   	push   %esp
   10293:	e8 7f 0c 00 00       	call   10f17 <do_handler_control_exception>
   10298:	83 c4 04             	add    $0x4,%esp
   1029b:	0f a9                	pop    %gs
   1029d:	0f a1                	pop    %fs
   1029f:	07                   	pop    %es
   102a0:	1f                   	pop    %ds
   102a1:	61                   	popa   
   102a2:	83 c4 08             	add    $0x8,%esp
   102a5:	cf                   	iret   

000102a6 <exception_handler_timer>:
exception_handler timer              ,  0x20 , 0 #
   102a6:	6a 00                	push   $0x0
   102a8:	6a 20                	push   $0x20
   102aa:	60                   	pusha  
   102ab:	1e                   	push   %ds
   102ac:	06                   	push   %es
   102ad:	0f a0                	push   %fs
   102af:	0f a8                	push   %gs
   102b1:	54                   	push   %esp
   102b2:	e8 92 10 00 00       	call   11349 <do_handler_timer>
   102b7:	83 c4 04             	add    $0x4,%esp
   102ba:	0f a9                	pop    %gs
   102bc:	0f a1                	pop    %fs
   102be:	07                   	pop    %es
   102bf:	1f                   	pop    %ds
   102c0:	61                   	popa   
   102c1:	83 c4 08             	add    $0x8,%esp
   102c4:	cf                   	iret   

000102c5 <simple_switch>:

    .text
    .global simple_switch
    # simple_switch(&from,&to)
simple_switch:
    mov 4(%esp),%eax  # 取from->stack 
   102c5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp),%edx  # 取to->stack
   102c9:	8b 54 24 08          	mov    0x8(%esp),%edx

    # 压栈,保存当前任务的状态
    push %ebp
   102cd:	55                   	push   %ebp
    push %ebx
   102ce:	53                   	push   %ebx
    push %esi
   102cf:	56                   	push   %esi
    push %edi
   102d0:	57                   	push   %edi

    # 切换当前栈
    mov %esp,(%eax)  # from->stack = esp
   102d1:	89 20                	mov    %esp,(%eax)
    mov %edx , %esp  # esp = to->stack
   102d3:	89 d4                	mov    %edx,%esp
    
    # 加载下一任务的栈
    pop %edi
   102d5:	5f                   	pop    %edi
    pop %esi
   102d6:	5e                   	pop    %esi
    pop %ebx
   102d7:	5b                   	pop    %ebx
    pop %ebp
   102d8:	5d                   	pop    %ebp

   102d9:	c3                   	ret    

000102da <list_node_init>:
 * @brief        : 链表节点初始化;
 * @param         {list_node_t *} node: 需要初始化的节点
 * @return        {*}
 **/
static inline void list_node_init(list_node_t *node)
{
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102dd:	8b 45 08             	mov    0x8(%ebp),%eax
   102e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102e7:	8b 45 08             	mov    0x8(%ebp),%eax
   102ea:	8b 50 04             	mov    0x4(%eax),%edx
   102ed:	8b 45 08             	mov    0x8(%ebp),%eax
   102f0:	89 10                	mov    %edx,(%eax)
}
   102f2:	90                   	nop
   102f3:	5d                   	pop    %ebp
   102f4:	c3                   	ret    

000102f5 <list_node_next>:
 * @brief        : 链表的后继节点
 * @param         {list_node_t *} node: 当前节点
 * @return        {list_node_t *} 当前节点的后继节点
 **/
static inline list_node_t *list_node_next(list_node_t *node)
{
   102f5:	55                   	push   %ebp
   102f6:	89 e5                	mov    %esp,%ebp
    return node->next;
   102f8:	8b 45 08             	mov    0x8(%ebp),%eax
   102fb:	8b 40 04             	mov    0x4(%eax),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <list_first>:
 * @brief        : 返回链表的头结点
 * @param         {list_t} *list: 链表
 * @return        {list_node_t*}: 链表的头结点
 **/
static inline list_node_t *list_first(list_t *list)
{
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    return list->first;
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	8b 00                	mov    (%eax),%eax
}
   10308:	5d                   	pop    %ebp
   10309:	c3                   	ret    

0001030a <list_count>:
 * @brief        : 返回链表的结点数量
 * @param         {list_t} *list: 对应链表
 * @return        {int}: 链表数量
**/
static inline int list_count(list_t *list)
{
   1030a:	55                   	push   %ebp
   1030b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1030d:	8b 45 08             	mov    0x8(%ebp),%eax
   10310:	8b 40 08             	mov    0x8(%eax),%eax
}
   10313:	5d                   	pop    %ebp
   10314:	c3                   	ret    

00010315 <hlt>:
/**
 * @brief        : 停机指令
 * @return        {*}
 **/
static inline void hlt(void)
{
   10315:	55                   	push   %ebp
   10316:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10318:	f4                   	hlt    
}
   10319:	90                   	nop
   1031a:	5d                   	pop    %ebp
   1031b:	c3                   	ret    

0001031c <write_tr>:
 * @brief        : 写task register寄存器于lgdt类似
 * @param         {uint16_t} tss_selector: 对应的tss选择子
 * @return        {*}
 **/
static inline void write_tr(uint16_t tss_selector)
{
   1031c:	55                   	push   %ebp
   1031d:	89 e5                	mov    %esp,%ebp
   1031f:	83 ec 04             	sub    $0x4,%esp
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10329:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1032d:	0f 00 d8             	ltr    %ax
}
   10330:	90                   	nop
   10331:	c9                   	leave  
   10332:	c3                   	ret    

00010333 <task_next_run>:
/**
 * @brief        : 返回下一个将要运行的进程,从就绪对列中取，若为空则运行空闲进程
 * @return        {task_t*} 下一运行任务的指针
 **/
task_t *task_next_run(void)
{
   10333:	55                   	push   %ebp
   10334:	89 e5                	mov    %esp,%ebp
   10336:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   10339:	68 e0 28 01 00       	push   $0x128e0
   1033e:	e8 c7 ff ff ff       	call   1030a <list_count>
   10343:	83 c4 04             	add    $0x4,%esp
   10346:	85 c0                	test   %eax,%eax
   10348:	75 07                	jne    10351 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   1034a:	b8 dc 29 01 00       	mov    $0x129dc,%eax
   1034f:	eb 23                	jmp    10374 <task_next_run+0x41>
    }
    list_node_t *task_node = list_first(&task_manager.ready_list);
   10351:	68 e0 28 01 00       	push   $0x128e0
   10356:	e8 a5 ff ff ff       	call   10300 <list_first>
   1035b:	83 c4 04             	add    $0x4,%esp
   1035e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node); // 取出对应的队列头部进程
   10361:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10365:	74 08                	je     1036f <task_next_run+0x3c>
   10367:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1036a:	83 e8 50             	sub    $0x50,%eax
   1036d:	eb 05                	jmp    10374 <task_next_run+0x41>
   1036f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10374:	c9                   	leave  
   10375:	c3                   	ret    

00010376 <task_current>:
/**
 * @brief        : 返回当前进程的指针
 * @return        {task_t*}
 **/
task_t *task_current(void)
{
   10376:	55                   	push   %ebp
   10377:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10379:	a1 cc 29 01 00       	mov    0x129cc,%eax
}
   1037e:	5d                   	pop    %ebp
   1037f:	c3                   	ret    

00010380 <task_dispatch>:
 * @brief        : 从队列头部取进程执行
 * @return        {*}
 * @todo         : 后续改进
 **/
void task_dispatch(void)
{
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   10386:	e8 76 0f 00 00       	call   11301 <irq_enter_protection>
   1038b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   1038e:	e8 a0 ff ff ff       	call   10333 <task_next_run>
   10393:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) // 接下来需要运行的进程是否为当前进程
   10396:	a1 cc 29 01 00       	mov    0x129cc,%eax
   1039b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1039e:	74 2a                	je     103ca <task_dispatch+0x4a>
    {
        task_t *from = task_current();
   103a0:	e8 d1 ff ff ff       	call   10376 <task_current>
   103a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   103a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103ab:	a3 cc 29 01 00       	mov    %eax,0x129cc
        to->state = TASK_RUNNING;
   103b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103b3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   103b9:	83 ec 08             	sub    $0x8,%esp
   103bc:	ff 75 f0             	pushl  -0x10(%ebp)
   103bf:	ff 75 ec             	pushl  -0x14(%ebp)
   103c2:	e8 df 02 00 00       	call   106a6 <task_switch_from_to>
   103c7:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   103ca:	83 ec 0c             	sub    $0xc,%esp
   103cd:	ff 75 f4             	pushl  -0xc(%ebp)
   103d0:	e8 44 0f 00 00       	call   11319 <irq_leave_protection>
   103d5:	83 c4 10             	add    $0x10,%esp
}
   103d8:	90                   	nop
   103d9:	c9                   	leave  
   103da:	c3                   	ret    

000103db <task_set_ready>:
 * @brief        : 将进程设为就绪状态,将当前进程插入到就绪队列,修改进程状态为就绪态
 * @param         {task_t} *task:
 * @return        {*}
 **/
void task_set_ready(task_t *task)
{
   103db:	55                   	push   %ebp
   103dc:	89 e5                	mov    %esp,%ebp
   103de:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) // 非空闲进程
   103e1:	81 7d 08 dc 29 01 00 	cmpl   $0x129dc,0x8(%ebp)
   103e8:	74 22                	je     1040c <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	83 c0 50             	add    $0x50,%eax
   103f0:	83 ec 08             	sub    $0x8,%esp
   103f3:	50                   	push   %eax
   103f4:	68 e0 28 01 00       	push   $0x128e0
   103f9:	e8 97 1c 00 00       	call   12095 <list_insert_last>
   103fe:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1040a:	eb 01                	jmp    1040d <task_set_ready+0x32>
        return;
   1040c:	90                   	nop
}
   1040d:	c9                   	leave  
   1040e:	c3                   	ret    

0001040f <sys_sched_yield>:
/**
 * @brief        : 当前进程放弃cpu的使用权，将当前进程加入到就绪队列尾部，调度下一进程
 * @return        {*}
 **/
int sys_sched_yield(void)
{
   1040f:	55                   	push   %ebp
   10410:	89 e5                	mov    %esp,%ebp
   10412:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10415:	e8 e7 0e 00 00       	call   11301 <irq_enter_protection>
   1041a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1) // 是否有进程
   1041d:	83 ec 0c             	sub    $0xc,%esp
   10420:	68 e0 28 01 00       	push   $0x128e0
   10425:	e8 e0 fe ff ff       	call   1030a <list_count>
   1042a:	83 c4 10             	add    $0x10,%esp
   1042d:	83 f8 01             	cmp    $0x1,%eax
   10430:	7e 29                	jle    1045b <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current(); // 当前运行进程
   10432:	e8 3f ff ff ff       	call   10376 <task_current>
   10437:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task); // 阻塞当前进程
   1043a:	83 ec 0c             	sub    $0xc,%esp
   1043d:	ff 75 f0             	pushl  -0x10(%ebp)
   10440:	e8 2b 00 00 00       	call   10470 <task_set_block>
   10445:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task); // 当前进程加入就绪队列
   10448:	83 ec 0c             	sub    $0xc,%esp
   1044b:	ff 75 f0             	pushl  -0x10(%ebp)
   1044e:	e8 88 ff ff ff       	call   103db <task_set_ready>
   10453:	83 c4 10             	add    $0x10,%esp
        task_dispatch();           // 切换到队列头部的进程运行
   10456:	e8 25 ff ff ff       	call   10380 <task_dispatch>
    }

    irq_leave_protection(state);
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	ff 75 f4             	pushl  -0xc(%ebp)
   10461:	e8 b3 0e 00 00       	call   11319 <irq_leave_protection>
   10466:	83 c4 10             	add    $0x10,%esp
    return 0;
   10469:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1046e:	c9                   	leave  
   1046f:	c3                   	ret    

00010470 <task_set_block>:
 * @brief        : 阻塞当前进程，将当前进程从就绪队列中移除
 * @param         {task_t} *task:
 * @return        {*}
 **/
void task_set_block(task_t *task)
{
   10470:	55                   	push   %ebp
   10471:	89 e5                	mov    %esp,%ebp
   10473:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) // 空闲进程
   10476:	81 7d 08 dc 29 01 00 	cmpl   $0x129dc,0x8(%ebp)
   1047d:	74 19                	je     10498 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   1047f:	8b 45 08             	mov    0x8(%ebp),%eax
   10482:	83 c0 50             	add    $0x50,%eax
   10485:	83 ec 08             	sub    $0x8,%esp
   10488:	50                   	push   %eax
   10489:	68 e0 28 01 00       	push   $0x128e0
   1048e:	e8 df 1c 00 00       	call   12172 <list_remove>
   10493:	83 c4 10             	add    $0x10,%esp
   10496:	eb 01                	jmp    10499 <task_set_block+0x29>
        return;
   10498:	90                   	nop
}
   10499:	c9                   	leave  
   1049a:	c3                   	ret    

0001049b <tss_init>:
 * @param         {uint32_t} entry: 入口地址
 * @param         {uint32_t} esp: 栈顶指针
 * @return        {int} 成功为0 ,失败为-1
 **/
static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   1049b:	55                   	push   %ebp
   1049c:	89 e5                	mov    %esp,%ebp
   1049e:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc(); // 分配一个空闲表项
   104a1:	e8 83 05 00 00       	call   10a29 <gdt_alloc_desc>
   104a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   104a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   104ad:	79 1a                	jns    104c9 <tss_init+0x2e>
    {
        log_printf("alloc tss failed!!!\n");
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	68 b4 23 01 00       	push   $0x123b4
   104b7:	e8 14 1e 00 00       	call   122d0 <log_printf>
   104bc:	83 c4 10             	add    $0x10,%esp
        return -1;
   104bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   104c4:	e9 e7 00 00 00       	jmp    105b0 <tss_init+0x115>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   104c9:	8b 45 08             	mov    0x8(%ebp),%eax
   104cc:	83 c0 68             	add    $0x68,%eax
   104cf:	68 89 00 00 00       	push   $0x89
   104d4:	6a 68                	push   $0x68
   104d6:	50                   	push   %eax
   104d7:	ff 75 f4             	pushl  -0xc(%ebp)
   104da:	e8 7d 04 00 00       	call   1095c <segment_desc_set>
   104df:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t)); // 清零 , 第一次运行无关紧要
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	83 c0 68             	add    $0x68,%eax
   104e8:	83 ec 04             	sub    $0x4,%esp
   104eb:	6a 68                	push   $0x68
   104ed:	6a 00                	push   $0x0
   104ef:	50                   	push   %eax
   104f0:	e8 70 17 00 00       	call   11c65 <kernel_memset>
   104f5:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;                       // 当前任务没有运行过,所以eip为当前任务的入口地址
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   104fe:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.esp = task->tss.esp0 = esp;        // esp0特权级0 , 设置栈地址
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	8b 55 10             	mov    0x10(%ebp),%edx
   1050a:	89 50 6c             	mov    %edx,0x6c(%eax)
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	8b 50 6c             	mov    0x6c(%eax),%edx
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

    // 平坦模型只有两个段cs和ds 其中ss , es , ds , fs , gs 设置为ds
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1051c:	8b 45 08             	mov    0x8(%ebp),%eax
   1051f:	c7 40 70 10 00 00 00 	movl   $0x10,0x70(%eax)
   10526:	8b 45 08             	mov    0x8(%ebp),%eax
   10529:	8b 50 70             	mov    0x70(%eax),%edx
   1052c:	8b 45 08             	mov    0x8(%ebp),%eax
   1052f:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10535:	8b 45 08             	mov    0x8(%ebp),%eax
   10538:	c7 80 c4 00 00 00 10 	movl   $0x10,0xc4(%eax)
   1053f:	00 00 00 
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 90 c4 00 00 00    	mov    0xc4(%eax),%edx
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
   10554:	8b 45 08             	mov    0x8(%ebp),%eax
   10557:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
   1055d:	8b 45 08             	mov    0x8(%ebp),%eax
   10560:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
   10566:	8b 45 08             	mov    0x8(%ebp),%eax
   10569:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

    // 设置cs
    task->tss.cs = KERNEL_SELECTOR_CS;
   10578:	8b 45 08             	mov    0x8(%ebp),%eax
   1057b:	c7 80 b4 00 00 00 08 	movl   $0x8,0xb4(%eax)
   10582:	00 00 00 
    task->tss.iomap = 0;
   10585:	8b 45 08             	mov    0x8(%ebp),%eax
   10588:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%eax)
   1058f:	00 00 00 
    // eflags
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10592:	8b 45 08             	mov    0x8(%ebp),%eax
   10595:	c7 80 8c 00 00 00 02 	movl   $0x202,0x8c(%eax)
   1059c:	02 00 00 
    task->tss_sel = tss_sel;
   1059f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   105a2:	8b 45 08             	mov    0x8(%ebp),%eax
   105a5:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
    return 0;
   105ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105b0:	c9                   	leave  
   105b1:	c3                   	ret    

000105b2 <task_init>:
 * @param         {uint32_t}       esp: 栈顶指针
 * @return        {*}
 **/
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)

{
   105b2:	55                   	push   %ebp
   105b3:	89 e5                	mov    %esp,%ebp
   105b5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   105b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105bc:	75 1c                	jne    105da <task_init+0x28>
   105be:	68 c9 23 01 00       	push   $0x123c9
   105c3:	68 4c 24 01 00       	push   $0x1244c
   105c8:	68 9b 00 00 00       	push   $0x9b
   105cd:	68 e0 23 01 00       	push   $0x123e0
   105d2:	e8 f0 19 00 00       	call   11fc7 <pannic>
   105d7:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   105da:	83 ec 04             	sub    $0x4,%esp
   105dd:	ff 75 14             	pushl  0x14(%ebp)
   105e0:	ff 75 10             	pushl  0x10(%ebp)
   105e3:	ff 75 08             	pushl  0x8(%ebp)
   105e6:	e8 b0 fe ff ff       	call   1049b <tss_init>
   105eb:	83 c4 10             	add    $0x10,%esp

    kernel_memcpy((void *)task->name, (void *)name, TASK_NAME_SIZE);
   105ee:	8b 45 08             	mov    0x8(%ebp),%eax
   105f1:	83 c0 10             	add    $0x10,%eax
   105f4:	83 ec 04             	sub    $0x4,%esp
   105f7:	6a 40                	push   $0x40
   105f9:	ff 75 0c             	pushl  0xc(%ebp)
   105fc:	50                   	push   %eax
   105fd:	e8 14 16 00 00       	call   11c16 <kernel_memcpy>
   10602:	83 c4 10             	add    $0x10,%esp

    task->state = TASK_CREATED;
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1060e:	8b 45 08             	mov    0x8(%ebp),%eax
   10611:	c7 40 04 0a 00 00 00 	movl   $0xa,0x4(%eax)
    task->slice_ticks = task->time_ticks;
   10618:	8b 45 08             	mov    0x8(%ebp),%eax
   1061b:	8b 50 04             	mov    0x4(%eax),%edx
   1061e:	8b 45 08             	mov    0x8(%ebp),%eax
   10621:	89 50 08             	mov    %edx,0x8(%eax)
    task->sleep_ticks = 0; // 没有延时
   10624:	8b 45 08             	mov    0x8(%ebp),%eax
   10627:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    list_node_init(&task->all_node);
   1062e:	8b 45 08             	mov    0x8(%ebp),%eax
   10631:	83 c0 58             	add    $0x58,%eax
   10634:	83 ec 0c             	sub    $0xc,%esp
   10637:	50                   	push   %eax
   10638:	e8 9d fc ff ff       	call   102da <list_node_init>
   1063d:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10640:	8b 45 08             	mov    0x8(%ebp),%eax
   10643:	83 c0 50             	add    $0x50,%eax
   10646:	83 ec 0c             	sub    $0xc,%esp
   10649:	50                   	push   %eax
   1064a:	e8 8b fc ff ff       	call   102da <list_node_init>
   1064f:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10652:	8b 45 08             	mov    0x8(%ebp),%eax
   10655:	83 c0 60             	add    $0x60,%eax
   10658:	83 ec 0c             	sub    $0xc,%esp
   1065b:	50                   	push   %eax
   1065c:	e8 79 fc ff ff       	call   102da <list_node_init>
   10661:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10664:	e8 98 0c 00 00       	call   11301 <irq_enter_protection>
   10669:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task); // 将进程设置为就绪状态
   1066c:	83 ec 0c             	sub    $0xc,%esp
   1066f:	ff 75 08             	pushl  0x8(%ebp)
   10672:	e8 64 fd ff ff       	call   103db <task_set_ready>
   10677:	83 c4 10             	add    $0x10,%esp

    list_insert_last(&task_manager.task_list, &task->all_node);
   1067a:	8b 45 08             	mov    0x8(%ebp),%eax
   1067d:	83 c0 58             	add    $0x58,%eax
   10680:	83 ec 08             	sub    $0x8,%esp
   10683:	50                   	push   %eax
   10684:	68 ec 28 01 00       	push   $0x128ec
   10689:	e8 07 1a 00 00       	call   12095 <list_insert_last>
   1068e:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10691:	83 ec 0c             	sub    $0xc,%esp
   10694:	ff 75 f4             	pushl  -0xc(%ebp)
   10697:	e8 7d 0c 00 00       	call   11319 <irq_leave_protection>
   1069c:	83 c4 10             	add    $0x10,%esp
    //     *(--p_esp) = 0;
    //     *(--p_esp) = 0;
    //     *(--p_esp) = 0;
    //     task->stack = p_esp;
    // }
    return 0;
   1069f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106a4:	c9                   	leave  
   106a5:	c3                   	ret    

000106a6 <task_switch_from_to>:
 * @param         {task_t *} from: 当前任务
 * @param         {task_t *} to: 切换到的任务
 * @return        {*}
 **/
void task_switch_from_to(task_t *from, task_t *to)
{
   106a6:	55                   	push   %ebp
   106a7:	89 e5                	mov    %esp,%ebp
   106a9:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   106ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   106af:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
   106b5:	83 ec 0c             	sub    $0xc,%esp
   106b8:	50                   	push   %eax
   106b9:	e8 4d 04 00 00       	call   10b0b <switch_to_tss>
   106be:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   106c1:	90                   	nop
   106c2:	c9                   	leave  
   106c3:	c3                   	ret    

000106c4 <idle_task_entry>:
/**
 * @brief        : 空闲进程所运行的任务
 * @return        {*}
 **/
static void idle_task_entry()
{
   106c4:	55                   	push   %ebp
   106c5:	89 e5                	mov    %esp,%ebp
   106c7:	83 ec 08             	sub    $0x8,%esp
    log_printf("idle task running");
   106ca:	83 ec 0c             	sub    $0xc,%esp
   106cd:	68 25 24 01 00       	push   $0x12425
   106d2:	e8 f9 1b 00 00       	call   122d0 <log_printf>
   106d7:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   106da:	e8 36 fc ff ff       	call   10315 <hlt>
   106df:	eb f9                	jmp    106da <idle_task_entry+0x16>

000106e1 <task_manager_init>:
/**
 * @brief        : 初始化任务(进程)管理器,包括初始化就绪,延时,进程队列,初始化空闲进程,将当前进程设为null
 * @return        {*}
 **/
void task_manager_init(void)
{
   106e1:	55                   	push   %ebp
   106e2:	89 e5                	mov    %esp,%ebp
   106e4:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list); // 就绪队列
   106e7:	83 ec 0c             	sub    $0xc,%esp
   106ea:	68 e0 28 01 00       	push   $0x128e0
   106ef:	e8 1c 19 00 00       	call   12010 <list_init>
   106f4:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);  // 进程队列
   106f7:	83 ec 0c             	sub    $0xc,%esp
   106fa:	68 ec 28 01 00       	push   $0x128ec
   106ff:	e8 0c 19 00 00       	call   12010 <list_init>
   10704:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list); // 延时队列
   10707:	83 ec 0c             	sub    $0xc,%esp
   1070a:	68 d0 29 01 00       	push   $0x129d0
   1070f:	e8 fc 18 00 00       	call   12010 <list_init>
   10714:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10717:	c7 05 cc 29 01 00 00 	movl   $0x0,0x129cc
   1071e:	00 00 00 
    task_init(&task_manager.idle_task,
              "idle task",
              (uint32_t)idle_task_entry,
              (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
   10721:	b8 c0 3a 01 00       	mov    $0x13ac0,%eax
    task_init(&task_manager.idle_task,
   10726:	89 c2                	mov    %eax,%edx
   10728:	b8 c4 06 01 00       	mov    $0x106c4,%eax
   1072d:	52                   	push   %edx
   1072e:	50                   	push   %eax
   1072f:	68 37 24 01 00       	push   $0x12437
   10734:	68 dc 29 01 00       	push   $0x129dc
   10739:	e8 74 fe ff ff       	call   105b2 <task_init>
   1073e:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10741:	c7 05 cc 29 01 00 00 	movl   $0x0,0x129cc
   10748:	00 00 00 
}
   1074b:	90                   	nop
   1074c:	c9                   	leave  
   1074d:	c3                   	ret    

0001074e <task_first_init>:
/**
 * @brief        : 初始化OS中的第一个任务
 * @return        {*}
 **/
void task_first_init(void)
{
   1074e:	55                   	push   %ebp
   1074f:	89 e5                	mov    %esp,%ebp
   10751:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0);
   10754:	6a 00                	push   $0x0
   10756:	6a 00                	push   $0x0
   10758:	68 41 24 01 00       	push   $0x12441
   1075d:	68 f8 28 01 00       	push   $0x128f8
   10762:	e8 4b fe ff ff       	call   105b2 <task_init>
   10767:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   1076a:	a1 c8 29 01 00       	mov    0x129c8,%eax
   1076f:	0f b7 c0             	movzwl %ax,%eax
   10772:	83 ec 0c             	sub    $0xc,%esp
   10775:	50                   	push   %eax
   10776:	e8 a1 fb ff ff       	call   1031c <write_tr>
   1077b:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   1077e:	c7 05 cc 29 01 00 f8 	movl   $0x128f8,0x129cc
   10785:	28 01 00 
}
   10788:	90                   	nop
   10789:	c9                   	leave  
   1078a:	c3                   	ret    

0001078b <task_first_task>:
/**
 * @brief        : 返回OS中的第一个任务
 * @return        {*}
 **/
task_t *task_first_task(void)
{
   1078b:	55                   	push   %ebp
   1078c:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1078e:	b8 f8 28 01 00       	mov    $0x128f8,%eax
}
   10793:	5d                   	pop    %ebp
   10794:	c3                   	ret    

00010795 <task_time_ticks>:
/**
 * @brief        :
 * @return        {*}
 **/
void task_time_ticks(void)
{
   10795:	55                   	push   %ebp
   10796:	89 e5                	mov    %esp,%ebp
   10798:	83 ec 18             	sub    $0x18,%esp
    task_t *curr_task = task_current();
   1079b:	e8 d6 fb ff ff       	call   10376 <task_current>
   107a0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) // 当前进程运行时间片已到达
   107a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a6:	8b 40 08             	mov    0x8(%eax),%eax
   107a9:	8d 50 ff             	lea    -0x1(%eax),%edx
   107ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107af:	89 50 08             	mov    %edx,0x8(%eax)
   107b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107b5:	8b 40 08             	mov    0x8(%eax),%eax
   107b8:	85 c0                	test   %eax,%eax
   107ba:	75 28                	jne    107e4 <task_time_ticks+0x4f>
    {
        curr_task->slice_ticks = curr_task->time_ticks;
   107bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107bf:	8b 50 04             	mov    0x4(%eax),%edx
   107c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107c5:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_block(curr_task); //
   107c8:	83 ec 0c             	sub    $0xc,%esp
   107cb:	ff 75 f0             	pushl  -0x10(%ebp)
   107ce:	e8 9d fc ff ff       	call   10470 <task_set_block>
   107d3:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   107d6:	83 ec 0c             	sub    $0xc,%esp
   107d9:	ff 75 f0             	pushl  -0x10(%ebp)
   107dc:	e8 fa fb ff ff       	call   103db <task_set_ready>
   107e1:	83 c4 10             	add    $0x10,%esp
    }

    // 扫描延时队列
    list_node_t *curr = list_first(&task_manager.sleep_list);
   107e4:	83 ec 0c             	sub    $0xc,%esp
   107e7:	68 d0 29 01 00       	push   $0x129d0
   107ec:	e8 0f fb ff ff       	call   10300 <list_first>
   107f1:	83 c4 10             	add    $0x10,%esp
   107f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   107f7:	eb 62                	jmp    1085b <task_time_ticks+0xc6>
    {
        task_t *task = list_node_parent(curr, task_t, run_node);
   107f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107fd:	74 08                	je     10807 <task_time_ticks+0x72>
   107ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10802:	83 e8 50             	sub    $0x50,%eax
   10805:	eb 05                	jmp    1080c <task_time_ticks+0x77>
   10807:	b8 00 00 00 00       	mov    $0x0,%eax
   1080c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        list_node_t *next = list_node_next(curr);
   1080f:	83 ec 0c             	sub    $0xc,%esp
   10812:	ff 75 f4             	pushl  -0xc(%ebp)
   10815:	e8 db fa ff ff       	call   102f5 <list_node_next>
   1081a:	83 c4 10             	add    $0x10,%esp
   1081d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) // 如果当前进程的延时已经到达
   10820:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10823:	8b 40 0c             	mov    0xc(%eax),%eax
   10826:	8d 50 ff             	lea    -0x1(%eax),%edx
   10829:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1082c:	89 50 0c             	mov    %edx,0xc(%eax)
   1082f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10832:	8b 40 0c             	mov    0xc(%eax),%eax
   10835:	85 c0                	test   %eax,%eax
   10837:	75 1c                	jne    10855 <task_time_ticks+0xc0>
        {
            task_set_wakeup(task); // 唤醒
   10839:	83 ec 0c             	sub    $0xc,%esp
   1083c:	ff 75 ec             	pushl  -0x14(%ebp)
   1083f:	e8 5f 00 00 00       	call   108a3 <task_set_wakeup>
   10844:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);  // 状态设置为就绪
   10847:	83 ec 0c             	sub    $0xc,%esp
   1084a:	ff 75 ec             	pushl  -0x14(%ebp)
   1084d:	e8 89 fb ff ff       	call   103db <task_set_ready>
   10852:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   10855:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10858:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   1085b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1085f:	75 98                	jne    107f9 <task_time_ticks+0x64>
    }
    task_dispatch();
   10861:	e8 1a fb ff ff       	call   10380 <task_dispatch>
}
   10866:	90                   	nop
   10867:	c9                   	leave  
   10868:	c3                   	ret    

00010869 <task_set_sleep>:
 * @param         {task_t} *task: 需要延时的进程(任务)
 * @param         {uint32_t} ticks: 延时(睡眠)的时间
 * @return        {*}
 **/
void task_set_sleep(task_t *task, uint32_t ticks)
{
   10869:	55                   	push   %ebp
   1086a:	89 e5                	mov    %esp,%ebp
   1086c:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0)
   1086f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10873:	74 2b                	je     108a0 <task_set_sleep+0x37>
    {
        return;
    }
    task->sleep_ticks = ticks; // 设置延时时间
   10875:	8b 55 0c             	mov    0xc(%ebp),%edx
   10878:	8b 45 08             	mov    0x8(%ebp),%eax
   1087b:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;  // 设置进程状态
   1087e:	8b 45 08             	mov    0x8(%ebp),%eax
   10881:	c7 00 02 00 00 00    	movl   $0x2,(%eax)

    list_insert_last(&task_manager.sleep_list, &task->run_node); // 插入延时队列
   10887:	8b 45 08             	mov    0x8(%ebp),%eax
   1088a:	83 c0 50             	add    $0x50,%eax
   1088d:	83 ec 08             	sub    $0x8,%esp
   10890:	50                   	push   %eax
   10891:	68 d0 29 01 00       	push   $0x129d0
   10896:	e8 fa 17 00 00       	call   12095 <list_insert_last>
   1089b:	83 c4 10             	add    $0x10,%esp
   1089e:	eb 01                	jmp    108a1 <task_set_sleep+0x38>
        return;
   108a0:	90                   	nop
}
   108a1:	c9                   	leave  
   108a2:	c3                   	ret    

000108a3 <task_set_wakeup>:
 * @brief        : 唤醒进程,从延时队列中移除该进程
 * @param         {task_t} *task: 需要唤醒的进程(任务)
 * @return        {*}
 **/
void task_set_wakeup(task_t *task) // 唤醒进程
{
   108a3:	55                   	push   %ebp
   108a4:	89 e5                	mov    %esp,%ebp
   108a6:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node); // 从延时队列中移除该结点
   108a9:	8b 45 08             	mov    0x8(%ebp),%eax
   108ac:	83 c0 50             	add    $0x50,%eax
   108af:	83 ec 08             	sub    $0x8,%esp
   108b2:	50                   	push   %eax
   108b3:	68 d0 29 01 00       	push   $0x129d0
   108b8:	e8 b5 18 00 00       	call   12172 <list_remove>
   108bd:	83 c4 10             	add    $0x10,%esp
}
   108c0:	90                   	nop
   108c1:	c9                   	leave  
   108c2:	c3                   	ret    

000108c3 <sys_sleep>:
 * @brief        : 将当前进程延时
 * @param         {uint32_t} ms: 需要延时的时间
 * @return        {*}
 **/
void sys_sleep(uint32_t ms) // 进程延时
{
   108c3:	55                   	push   %ebp
   108c4:	89 e5                	mov    %esp,%ebp
   108c6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   108c9:	e8 33 0a 00 00       	call   11301 <irq_enter_protection>
   108ce:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_block(task_manager.curr_task); // 阻塞当前进程（从就绪队列中移除当前进程）
   108d1:	a1 cc 29 01 00       	mov    0x129cc,%eax
   108d6:	83 ec 0c             	sub    $0xc,%esp
   108d9:	50                   	push   %eax
   108da:	e8 91 fb ff ff       	call   10470 <task_set_block>
   108df:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 将当前进程设置为延时
   108e2:	8b 45 08             	mov    0x8(%ebp),%eax
   108e5:	83 c0 09             	add    $0x9,%eax
   108e8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   108ed:	f7 e2                	mul    %edx
   108ef:	c1 ea 03             	shr    $0x3,%edx
   108f2:	a1 cc 29 01 00       	mov    0x129cc,%eax
   108f7:	83 ec 08             	sub    $0x8,%esp
   108fa:	52                   	push   %edx
   108fb:	50                   	push   %eax
   108fc:	e8 68 ff ff ff       	call   10869 <task_set_sleep>
   10901:	83 c4 10             	add    $0x10,%esp

    // 进程切换
    task_dispatch();
   10904:	e8 77 fa ff ff       	call   10380 <task_dispatch>

    irq_leave_protection(state);
   10909:	83 ec 0c             	sub    $0xc,%esp
   1090c:	ff 75 f4             	pushl  -0xc(%ebp)
   1090f:	e8 05 0a 00 00       	call   11319 <irq_leave_protection>
   10914:	83 c4 10             	add    $0x10,%esp
}
   10917:	90                   	nop
   10918:	c9                   	leave  
   10919:	c3                   	ret    

0001091a <lgdt>:
{
   1091a:	55                   	push   %ebp
   1091b:	89 e5                	mov    %esp,%ebp
   1091d:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;   // 获取高16位
   10920:	8b 45 08             	mov    0x8(%ebp),%eax
   10923:	c1 e8 10             	shr    $0x10,%eax
   10926:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF; // 获取低16位
   1092a:	8b 45 08             	mov    0x8(%ebp),%eax
   1092d:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;           // 大小
   10931:	8b 45 0c             	mov    0xc(%ebp),%eax
   10934:	83 e8 01             	sub    $0x1,%eax
   10937:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   1093b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1093f:	90                   	nop
   10940:	c9                   	leave  
   10941:	c3                   	ret    

00010942 <far_jump>:
{
   10942:	55                   	push   %ebp
   10943:	89 e5                	mov    %esp,%ebp
   10945:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   10948:	8b 45 0c             	mov    0xc(%ebp),%eax
   1094b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1094e:	8b 45 08             	mov    0x8(%ebp),%eax
   10951:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   10954:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10957:	ff 28                	ljmp   *(%eax)
}
   10959:	90                   	nop
   1095a:	c9                   	leave  
   1095b:	c3                   	ret    

0001095c <segment_desc_set>:
 * @param         {uint32_t} limit: 界限 20位
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   1095c:	55                   	push   %ebp
   1095d:	89 e5                	mov    %esp,%ebp
   1095f:	83 ec 14             	sub    $0x14,%esp
   10962:	8b 45 14             	mov    0x14(%ebp),%eax
   10965:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	c1 f8 03             	sar    $0x3,%eax
   1096f:	c1 e0 03             	shl    $0x3,%eax
   10972:	05 c0 3a 01 00       	add    $0x13ac0,%eax
   10977:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    if (limit > 0xFFFFF)
   1097a:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10981:	76 0f                	jbe    10992 <segment_desc_set+0x36>
    {
        attr |= 0x8000;
   10983:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10989:	8b 45 10             	mov    0x10(%ebp),%eax
   1098c:	c1 e8 0c             	shr    $0xc,%eax
   1098f:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xFFFF;
   10992:	8b 45 10             	mov    0x10(%ebp),%eax
   10995:	89 c2                	mov    %eax,%edx
   10997:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1099a:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   1099d:	8b 45 0c             	mov    0xc(%ebp),%eax
   109a0:	89 c2                	mov    %eax,%edx
   109a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109a5:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   109a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   109ac:	c1 e8 10             	shr    $0x10,%eax
   109af:	89 c2                	mov    %eax,%edx
   109b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109b4:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   109b7:	8b 45 10             	mov    0x10(%ebp),%eax
   109ba:	c1 e8 10             	shr    $0x10,%eax
   109bd:	c1 e0 08             	shl    $0x8,%eax
   109c0:	66 25 00 0f          	and    $0xf00,%ax
   109c4:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   109c8:	89 c2                	mov    %eax,%edx
   109ca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109cd:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   109d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   109d4:	c1 e8 18             	shr    $0x18,%eax
   109d7:	89 c2                	mov    %eax,%edx
   109d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109dc:	88 50 07             	mov    %dl,0x7(%eax)
}
   109df:	90                   	nop
   109e0:	c9                   	leave  
   109e1:	c3                   	ret    

000109e2 <gate_desc_set>:
 * @param         {uint32_t} offset: 地址偏移量
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   109e2:	55                   	push   %ebp
   109e3:	89 e5                	mov    %esp,%ebp
   109e5:	83 ec 08             	sub    $0x8,%esp
   109e8:	8b 55 0c             	mov    0xc(%ebp),%edx
   109eb:	8b 45 14             	mov    0x14(%ebp),%eax
   109ee:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   109f2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   109f6:	8b 45 10             	mov    0x10(%ebp),%eax
   109f9:	89 c2                	mov    %eax,%edx
   109fb:	8b 45 08             	mov    0x8(%ebp),%eax
   109fe:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10a01:	8b 45 08             	mov    0x8(%ebp),%eax
   10a04:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10a08:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10a0c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a0f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a13:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10a17:	8b 45 10             	mov    0x10(%ebp),%eax
   10a1a:	c1 e8 10             	shr    $0x10,%eax
   10a1d:	89 c2                	mov    %eax,%edx
   10a1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a22:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a26:	90                   	nop
   10a27:	c9                   	leave  
   10a28:	c3                   	ret    

00010a29 <gdt_alloc_desc>:
/**
 * @brief        : 分配一个空闲gdt表项
 * @return        {int} 选择子
 **/
int gdt_alloc_desc(void)
{
   10a29:	55                   	push   %ebp
   10a2a:	89 e5                	mov    %esp,%ebp
   10a2c:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   10a2f:	83 ec 0c             	sub    $0xc,%esp
   10a32:	68 c0 42 01 00       	push   $0x142c0
   10a37:	e8 de 0d 00 00       	call   1181a <mutex_lock>
   10a3c:	83 c4 10             	add    $0x10,%esp
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a3f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a46:	eb 36                	jmp    10a7e <gdt_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   10a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a4b:	c1 e0 03             	shl    $0x3,%eax
   10a4e:	05 c0 3a 01 00       	add    $0x13ac0,%eax
   10a53:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 该表项为空闲
   10a56:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10a59:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a5d:	66 85 c0             	test   %ax,%ax
   10a60:	75 18                	jne    10a7a <gdt_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   10a62:	83 ec 0c             	sub    $0xc,%esp
   10a65:	68 c0 42 01 00       	push   $0x142c0
   10a6a:	e8 3b 0e 00 00       	call   118aa <mutex_unlock>
   10a6f:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a72:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a75:	c1 e0 03             	shl    $0x3,%eax
   10a78:	eb 22                	jmp    10a9c <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a7a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a7e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a85:	7e c1                	jle    10a48 <gdt_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   10a87:	83 ec 0c             	sub    $0xc,%esp
   10a8a:	68 c0 42 01 00       	push   $0x142c0
   10a8f:	e8 16 0e 00 00       	call   118aa <mutex_unlock>
   10a94:	83 c4 10             	add    $0x10,%esp
    return -1;
   10a97:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a9c:	c9                   	leave  
   10a9d:	c3                   	ret    

00010a9e <init_gdt>:
/**
 * @brief        : gdt表初始化
 * @return        {*}
 **/
void init_gdt(void)
{
   10a9e:	55                   	push   %ebp
   10a9f:	89 e5                	mov    %esp,%ebp
   10aa1:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10aa4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10aab:	eb 19                	jmp    10ac6 <init_gdt+0x28>
    {
        segment_desc_set(i << 3, 0, 0, 0);
   10aad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ab0:	c1 e0 03             	shl    $0x3,%eax
   10ab3:	6a 00                	push   $0x0
   10ab5:	6a 00                	push   $0x0
   10ab7:	6a 00                	push   $0x0
   10ab9:	50                   	push   %eax
   10aba:	e8 9d fe ff ff       	call   1095c <segment_desc_set>
   10abf:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10ac2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10ac6:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10acd:	7e de                	jle    10aad <init_gdt+0xf>
    }

    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10acf:	68 92 c0 00 00       	push   $0xc092
   10ad4:	6a ff                	push   $0xffffffff
   10ad6:	6a 00                	push   $0x0
   10ad8:	6a 10                	push   $0x10
   10ada:	e8 7d fe ff ff       	call   1095c <segment_desc_set>
   10adf:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYE_RW | SEG_D | SEG_G);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10ae2:	68 9a c0 00 00       	push   $0xc09a
   10ae7:	6a ff                	push   $0xffffffff
   10ae9:	6a 00                	push   $0x0
   10aeb:	6a 08                	push   $0x8
   10aed:	e8 6a fe ff ff       	call   1095c <segment_desc_set>
   10af2:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYE_RW | SEG_D | SEG_G);
    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10af5:	b8 c0 3a 01 00       	mov    $0x13ac0,%eax
   10afa:	68 00 08 00 00       	push   $0x800
   10aff:	50                   	push   %eax
   10b00:	e8 15 fe ff ff       	call   1091a <lgdt>
   10b05:	83 c4 08             	add    $0x8,%esp
}
   10b08:	90                   	nop
   10b09:	c9                   	leave  
   10b0a:	c3                   	ret    

00010b0b <switch_to_tss>:
 * @brief        : 切换至TSS,即跳转实现任务切换
 * @param         {uint16_t} tss_selector: 对应的tss选择子
 * @return        {*}
 **/
void switch_to_tss(uint32_t tss_selector)
{
   10b0b:	55                   	push   %ebp
   10b0c:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   10b0e:	6a 00                	push   $0x0
   10b10:	ff 75 08             	pushl  0x8(%ebp)
   10b13:	e8 2a fe ff ff       	call   10942 <far_jump>
   10b18:	83 c4 08             	add    $0x8,%esp
}
   10b1b:	90                   	nop
   10b1c:	c9                   	leave  
   10b1d:	c3                   	ret    

00010b1e <cpu_init>:
/**
 * @brief        : cpu初始化
 * @return        {*}
 **/
void cpu_init(void)
{
   10b1e:	55                   	push   %ebp
   10b1f:	89 e5                	mov    %esp,%ebp
   10b21:	83 ec 08             	sub    $0x8,%esp
    init_gdt();         // gdt表初始化
   10b24:	e8 75 ff ff ff       	call   10a9e <init_gdt>
    mutex_init(&mutex); // 互斥锁初始化
   10b29:	83 ec 0c             	sub    $0xc,%esp
   10b2c:	68 c0 42 01 00       	push   $0x142c0
   10b31:	e8 b8 0c 00 00       	call   117ee <mutex_init>
   10b36:	83 c4 10             	add    $0x10,%esp
   10b39:	90                   	nop
   10b3a:	c9                   	leave  
   10b3b:	c3                   	ret    

00010b3c <cli>:
{
   10b3c:	55                   	push   %ebp
   10b3d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   10b3f:	fa                   	cli    
}
   10b40:	90                   	nop
   10b41:	5d                   	pop    %ebp
   10b42:	c3                   	ret    

00010b43 <sti>:
{
   10b43:	55                   	push   %ebp
   10b44:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   10b46:	fb                   	sti    
}
   10b47:	90                   	nop
   10b48:	5d                   	pop    %ebp
   10b49:	c3                   	ret    

00010b4a <inb>:
{
   10b4a:	55                   	push   %ebp
   10b4b:	89 e5                	mov    %esp,%ebp
   10b4d:	83 ec 14             	sub    $0x14,%esp
   10b50:	8b 45 08             	mov    0x8(%ebp),%eax
   10b53:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   10b57:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10b5b:	89 c2                	mov    %eax,%edx
   10b5d:	ec                   	in     (%dx),%al
   10b5e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10b61:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10b65:	c9                   	leave  
   10b66:	c3                   	ret    

00010b67 <outb>:
{
   10b67:	55                   	push   %ebp
   10b68:	89 e5                	mov    %esp,%ebp
   10b6a:	83 ec 08             	sub    $0x8,%esp
   10b6d:	8b 55 08             	mov    0x8(%ebp),%edx
   10b70:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b73:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10b77:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   10b7a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b7e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10b82:	ee                   	out    %al,(%dx)
}
   10b83:	90                   	nop
   10b84:	c9                   	leave  
   10b85:	c3                   	ret    

00010b86 <lidt>:
{
   10b86:	55                   	push   %ebp
   10b87:	89 e5                	mov    %esp,%ebp
   10b89:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;   // 获取高16位
   10b8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b8f:	c1 e8 10             	shr    $0x10,%eax
   10b92:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF; // 获取低16位
   10b96:	8b 45 08             	mov    0x8(%ebp),%eax
   10b99:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;           // 大小
   10b9d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ba0:	83 e8 01             	sub    $0x1,%eax
   10ba3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   10ba7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10bab:	90                   	nop
   10bac:	c9                   	leave  
   10bad:	c3                   	ret    

00010bae <hlt>:
{
   10bae:	55                   	push   %ebp
   10baf:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10bb1:	f4                   	hlt    
}
   10bb2:	90                   	nop
   10bb3:	5d                   	pop    %ebp
   10bb4:	c3                   	ret    

00010bb5 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   10bb5:	55                   	push   %ebp
   10bb6:	89 e5                	mov    %esp,%ebp
   10bb8:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushf \n\tpop %%eax" : "=a"(eflags));
   10bbb:	9c                   	pushf  
   10bbc:	58                   	pop    %eax
   10bbd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10bc0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10bc3:	c9                   	leave  
   10bc4:	c3                   	ret    

00010bc5 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   10bc5:	55                   	push   %ebp
   10bc6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf" ::"a"(eflags));
   10bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bcb:	50                   	push   %eax
   10bcc:	9d                   	popf   
}
   10bcd:	90                   	nop
   10bce:	5d                   	pop    %ebp
   10bcf:	c3                   	ret    

00010bd0 <dump_core_regs>:
 * @brief        :  打印寄存器异常信息
 * @param         {exception_frame_t} *frame: 寄存器信息
 * @return        {*}
 **/
static void dump_core_regs(exception_frame_t *frame)
{
   10bd0:	55                   	push   %ebp
   10bd1:	89 e5                	mov    %esp,%ebp
   10bd3:	57                   	push   %edi
   10bd4:	56                   	push   %esi
   10bd5:	53                   	push   %ebx
   10bd6:	83 ec 1c             	sub    $0x1c,%esp
    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   10bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdc:	8b 50 34             	mov    0x34(%eax),%edx
   10bdf:	8b 45 08             	mov    0x8(%ebp),%eax
   10be2:	8b 40 30             	mov    0x30(%eax),%eax
   10be5:	83 ec 04             	sub    $0x4,%esp
   10be8:	52                   	push   %edx
   10be9:	50                   	push   %eax
   10bea:	68 58 24 01 00       	push   $0x12458
   10bef:	e8 dc 16 00 00       	call   122d0 <log_printf>
   10bf4:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS:%d",
   10bf7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfa:	8b 38                	mov    (%eax),%edi
   10bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bff:	8b 70 04             	mov    0x4(%eax),%esi
   10c02:	8b 45 08             	mov    0x8(%ebp),%eax
   10c05:	8b 58 0c             	mov    0xc(%eax),%ebx
   10c08:	8b 45 08             	mov    0x8(%ebp),%eax
   10c0b:	8b 48 08             	mov    0x8(%eax),%ecx
   10c0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c11:	8b 50 0c             	mov    0xc(%eax),%edx
   10c14:	8b 45 08             	mov    0x8(%ebp),%eax
   10c17:	8b 40 3c             	mov    0x3c(%eax),%eax
   10c1a:	83 ec 04             	sub    $0x4,%esp
   10c1d:	57                   	push   %edi
   10c1e:	56                   	push   %esi
   10c1f:	53                   	push   %ebx
   10c20:	51                   	push   %ecx
   10c21:	52                   	push   %edx
   10c22:	50                   	push   %eax
   10c23:	68 74 24 01 00       	push   $0x12474
   10c28:	e8 a3 16 00 00       	call   122d0 <log_printf>
   10c2d:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
    log_printf("EAX: 0x%x\n"
   10c30:	8b 45 08             	mov    0x8(%ebp),%eax
   10c33:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10c36:	8b 45 08             	mov    0x8(%ebp),%eax
   10c39:	8b 40 18             	mov    0x18(%eax),%eax
   10c3c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10c3f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c42:	8b 58 14             	mov    0x14(%eax),%ebx
   10c45:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10c48:	8b 45 08             	mov    0x8(%ebp),%eax
   10c4b:	8b 78 10             	mov    0x10(%eax),%edi
   10c4e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c51:	8b 70 24             	mov    0x24(%eax),%esi
   10c54:	8b 45 08             	mov    0x8(%ebp),%eax
   10c57:	8b 58 28             	mov    0x28(%eax),%ebx
   10c5a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5d:	8b 50 20             	mov    0x20(%eax),%edx
   10c60:	8b 45 08             	mov    0x8(%ebp),%eax
   10c63:	8b 40 2c             	mov    0x2c(%eax),%eax
   10c66:	83 ec 0c             	sub    $0xc,%esp
   10c69:	51                   	push   %ecx
   10c6a:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c6d:	ff 75 e0             	pushl  -0x20(%ebp)
   10c70:	57                   	push   %edi
   10c71:	56                   	push   %esi
   10c72:	53                   	push   %ebx
   10c73:	52                   	push   %edx
   10c74:	50                   	push   %eax
   10c75:	68 a0 24 01 00       	push   $0x124a0
   10c7a:	e8 51 16 00 00       	call   122d0 <log_printf>
   10c7f:	83 c4 30             	add    $0x30,%esp
               "ESI: 0x%x\n"
               "EBP: 0x%x\n"
               "ESP: 0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP: 0x%x\nEFLAGS: 0x%x\n", frame->eip, frame->eflags);
   10c82:	8b 45 08             	mov    0x8(%ebp),%eax
   10c85:	8b 50 40             	mov    0x40(%eax),%edx
   10c88:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8b:	8b 40 38             	mov    0x38(%eax),%eax
   10c8e:	83 ec 04             	sub    $0x4,%esp
   10c91:	52                   	push   %edx
   10c92:	50                   	push   %eax
   10c93:	68 f1 24 01 00       	push   $0x124f1
   10c98:	e8 33 16 00 00       	call   122d0 <log_printf>
   10c9d:	83 c4 10             	add    $0x10,%esp
}
   10ca0:	90                   	nop
   10ca1:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10ca4:	5b                   	pop    %ebx
   10ca5:	5e                   	pop    %esi
   10ca6:	5f                   	pop    %edi
   10ca7:	5d                   	pop    %ebp
   10ca8:	c3                   	ret    

00010ca9 <do_default_handler>:
 * @param         {exception_frame_t} *frame:保存一些寄存器的值(异常信息)
 * @param         {char} *msg: 异常提示
 * @return        {*}
 **/
static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   10ca9:	55                   	push   %ebp
   10caa:	89 e5                	mov    %esp,%ebp
   10cac:	83 ec 08             	sub    $0x8,%esp
    log_printf("----------------------------------------");
   10caf:	83 ec 0c             	sub    $0xc,%esp
   10cb2:	68 0c 25 01 00       	push   $0x1250c
   10cb7:	e8 14 16 00 00       	call   122d0 <log_printf>
   10cbc:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/EXCEPTION HAPPEND: %s", msg);
   10cbf:	83 ec 08             	sub    $0x8,%esp
   10cc2:	ff 75 0c             	pushl  0xc(%ebp)
   10cc5:	68 35 25 01 00       	push   $0x12535
   10cca:	e8 01 16 00 00       	call   122d0 <log_printf>
   10ccf:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10cd2:	83 ec 0c             	sub    $0xc,%esp
   10cd5:	ff 75 08             	pushl  0x8(%ebp)
   10cd8:	e8 f3 fe ff ff       	call   10bd0 <dump_core_regs>
   10cdd:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10ce0:	e8 c9 fe ff ff       	call   10bae <hlt>
   10ce5:	eb f9                	jmp    10ce0 <do_default_handler+0x37>

00010ce7 <do_handler_unknown>:
 * @brief        : 未知的异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_unknown(exception_frame_t *frame)
{
   10ce7:	55                   	push   %ebp
   10ce8:	89 e5                	mov    %esp,%ebp
   10cea:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception!!!");
   10ced:	83 ec 08             	sub    $0x8,%esp
   10cf0:	68 4f 25 01 00       	push   $0x1254f
   10cf5:	ff 75 08             	pushl  0x8(%ebp)
   10cf8:	e8 ac ff ff ff       	call   10ca9 <do_default_handler>
   10cfd:	83 c4 10             	add    $0x10,%esp
}
   10d00:	90                   	nop
   10d01:	c9                   	leave  
   10d02:	c3                   	ret    

00010d03 <do_handler_divider>:
 * @brief        : 除0异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_divider(exception_frame_t *frame)
{
   10d03:	55                   	push   %ebp
   10d04:	89 e5                	mov    %esp,%ebp
   10d06:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divder exception!!!");
   10d09:	83 ec 08             	sub    $0x8,%esp
   10d0c:	68 64 25 01 00       	push   $0x12564
   10d11:	ff 75 08             	pushl  0x8(%ebp)
   10d14:	e8 90 ff ff ff       	call   10ca9 <do_default_handler>
   10d19:	83 c4 10             	add    $0x10,%esp
}
   10d1c:	90                   	nop
   10d1d:	c9                   	leave  
   10d1e:	c3                   	ret    

00010d1f <do_handler_Debug>:
 * @brief        : 调试异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_Debug(exception_frame_t *frame)
{
   10d1f:	55                   	push   %ebp
   10d20:	89 e5                	mov    %esp,%ebp
   10d22:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug exception!!!");
   10d25:	83 ec 08             	sub    $0x8,%esp
   10d28:	68 78 25 01 00       	push   $0x12578
   10d2d:	ff 75 08             	pushl  0x8(%ebp)
   10d30:	e8 74 ff ff ff       	call   10ca9 <do_default_handler>
   10d35:	83 c4 10             	add    $0x10,%esp
}
   10d38:	90                   	nop
   10d39:	c9                   	leave  
   10d3a:	c3                   	ret    

00010d3b <do_handler_NMI>:
 * @brief        : NMI异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_NMI(exception_frame_t *frame)
{
   10d3b:	55                   	push   %ebp
   10d3c:	89 e5                	mov    %esp,%ebp
   10d3e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI exception!!!");
   10d41:	83 ec 08             	sub    $0x8,%esp
   10d44:	68 8b 25 01 00       	push   $0x1258b
   10d49:	ff 75 08             	pushl  0x8(%ebp)
   10d4c:	e8 58 ff ff ff       	call   10ca9 <do_default_handler>
   10d51:	83 c4 10             	add    $0x10,%esp
}
   10d54:	90                   	nop
   10d55:	c9                   	leave  
   10d56:	c3                   	ret    

00010d57 <do_handler_breakpoint>:
 * @brief        : 断点异常(?)处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_breakpoint(exception_frame_t *frame)
{
   10d57:	55                   	push   %ebp
   10d58:	89 e5                	mov    %esp,%ebp
   10d5a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "breakpoint exception!!!");
   10d5d:	83 ec 08             	sub    $0x8,%esp
   10d60:	68 9c 25 01 00       	push   $0x1259c
   10d65:	ff 75 08             	pushl  0x8(%ebp)
   10d68:	e8 3c ff ff ff       	call   10ca9 <do_default_handler>
   10d6d:	83 c4 10             	add    $0x10,%esp
}
   10d70:	90                   	nop
   10d71:	c9                   	leave  
   10d72:	c3                   	ret    

00010d73 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   10d73:	55                   	push   %ebp
   10d74:	89 e5                	mov    %esp,%ebp
   10d76:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "overflow exception!!!");
   10d79:	83 ec 08             	sub    $0x8,%esp
   10d7c:	68 b4 25 01 00       	push   $0x125b4
   10d81:	ff 75 08             	pushl  0x8(%ebp)
   10d84:	e8 20 ff ff ff       	call   10ca9 <do_default_handler>
   10d89:	83 c4 10             	add    $0x10,%esp
}
   10d8c:	90                   	nop
   10d8d:	c9                   	leave  
   10d8e:	c3                   	ret    

00010d8f <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t *frame)
{
   10d8f:	55                   	push   %ebp
   10d90:	89 e5                	mov    %esp,%ebp
   10d92:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "bound range exception!!!");
   10d95:	83 ec 08             	sub    $0x8,%esp
   10d98:	68 ca 25 01 00       	push   $0x125ca
   10d9d:	ff 75 08             	pushl  0x8(%ebp)
   10da0:	e8 04 ff ff ff       	call   10ca9 <do_default_handler>
   10da5:	83 c4 10             	add    $0x10,%esp
}
   10da8:	90                   	nop
   10da9:	c9                   	leave  
   10daa:	c3                   	ret    

00010dab <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t *frame)
{
   10dab:	55                   	push   %ebp
   10dac:	89 e5                	mov    %esp,%ebp
   10dae:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "invalid opcode exception!!!");
   10db1:	83 ec 08             	sub    $0x8,%esp
   10db4:	68 e3 25 01 00       	push   $0x125e3
   10db9:	ff 75 08             	pushl  0x8(%ebp)
   10dbc:	e8 e8 fe ff ff       	call   10ca9 <do_default_handler>
   10dc1:	83 c4 10             	add    $0x10,%esp
}
   10dc4:	90                   	nop
   10dc5:	c9                   	leave  
   10dc6:	c3                   	ret    

00010dc7 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t *frame)
{
   10dc7:	55                   	push   %ebp
   10dc8:	89 e5                	mov    %esp,%ebp
   10dca:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "device unavailable exception!!!");
   10dcd:	83 ec 08             	sub    $0x8,%esp
   10dd0:	68 00 26 01 00       	push   $0x12600
   10dd5:	ff 75 08             	pushl  0x8(%ebp)
   10dd8:	e8 cc fe ff ff       	call   10ca9 <do_default_handler>
   10ddd:	83 c4 10             	add    $0x10,%esp
}
   10de0:	90                   	nop
   10de1:	c9                   	leave  
   10de2:	c3                   	ret    

00010de3 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   10de3:	55                   	push   %ebp
   10de4:	89 e5                	mov    %esp,%ebp
   10de6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "double fault exception!!!");
   10de9:	83 ec 08             	sub    $0x8,%esp
   10dec:	68 20 26 01 00       	push   $0x12620
   10df1:	ff 75 08             	pushl  0x8(%ebp)
   10df4:	e8 b0 fe ff ff       	call   10ca9 <do_default_handler>
   10df9:	83 c4 10             	add    $0x10,%esp
}
   10dfc:	90                   	nop
   10dfd:	c9                   	leave  
   10dfe:	c3                   	ret    

00010dff <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   10dff:	55                   	push   %ebp
   10e00:	89 e5                	mov    %esp,%ebp
   10e02:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "invalid tss exception!!!");
   10e05:	83 ec 08             	sub    $0x8,%esp
   10e08:	68 3a 26 01 00       	push   $0x1263a
   10e0d:	ff 75 08             	pushl  0x8(%ebp)
   10e10:	e8 94 fe ff ff       	call   10ca9 <do_default_handler>
   10e15:	83 c4 10             	add    $0x10,%esp
}
   10e18:	90                   	nop
   10e19:	c9                   	leave  
   10e1a:	c3                   	ret    

00010e1b <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   10e1b:	55                   	push   %ebp
   10e1c:	89 e5                	mov    %esp,%ebp
   10e1e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "segment not present exception!!!");
   10e21:	83 ec 08             	sub    $0x8,%esp
   10e24:	68 54 26 01 00       	push   $0x12654
   10e29:	ff 75 08             	pushl  0x8(%ebp)
   10e2c:	e8 78 fe ff ff       	call   10ca9 <do_default_handler>
   10e31:	83 c4 10             	add    $0x10,%esp
}
   10e34:	90                   	nop
   10e35:	c9                   	leave  
   10e36:	c3                   	ret    

00010e37 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10e37:	55                   	push   %ebp
   10e38:	89 e5                	mov    %esp,%ebp
   10e3a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "segment fault exception!!!");
   10e3d:	83 ec 08             	sub    $0x8,%esp
   10e40:	68 75 26 01 00       	push   $0x12675
   10e45:	ff 75 08             	pushl  0x8(%ebp)
   10e48:	e8 5c fe ff ff       	call   10ca9 <do_default_handler>
   10e4d:	83 c4 10             	add    $0x10,%esp
}
   10e50:	90                   	nop
   10e51:	c9                   	leave  
   10e52:	c3                   	ret    

00010e53 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   10e53:	55                   	push   %ebp
   10e54:	89 e5                	mov    %esp,%ebp
   10e56:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "general protection exception!!!");
   10e59:	83 ec 08             	sub    $0x8,%esp
   10e5c:	68 90 26 01 00       	push   $0x12690
   10e61:	ff 75 08             	pushl  0x8(%ebp)
   10e64:	e8 40 fe ff ff       	call   10ca9 <do_default_handler>
   10e69:	83 c4 10             	add    $0x10,%esp
}
   10e6c:	90                   	nop
   10e6d:	c9                   	leave  
   10e6e:	c3                   	ret    

00010e6f <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   10e6f:	55                   	push   %ebp
   10e70:	89 e5                	mov    %esp,%ebp
   10e72:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "page fault exception!!!");
   10e75:	83 ec 08             	sub    $0x8,%esp
   10e78:	68 b0 26 01 00       	push   $0x126b0
   10e7d:	ff 75 08             	pushl  0x8(%ebp)
   10e80:	e8 24 fe ff ff       	call   10ca9 <do_default_handler>
   10e85:	83 c4 10             	add    $0x10,%esp
}
   10e88:	90                   	nop
   10e89:	c9                   	leave  
   10e8a:	c3                   	ret    

00010e8b <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t *frame)
{
   10e8b:	55                   	push   %ebp
   10e8c:	89 e5                	mov    %esp,%ebp
   10e8e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "fpu error exception!!!");
   10e91:	83 ec 08             	sub    $0x8,%esp
   10e94:	68 c8 26 01 00       	push   $0x126c8
   10e99:	ff 75 08             	pushl  0x8(%ebp)
   10e9c:	e8 08 fe ff ff       	call   10ca9 <do_default_handler>
   10ea1:	83 c4 10             	add    $0x10,%esp
}
   10ea4:	90                   	nop
   10ea5:	c9                   	leave  
   10ea6:	c3                   	ret    

00010ea7 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   10ea7:	55                   	push   %ebp
   10ea8:	89 e5                	mov    %esp,%ebp
   10eaa:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "alignment check exception!!!");
   10ead:	83 ec 08             	sub    $0x8,%esp
   10eb0:	68 df 26 01 00       	push   $0x126df
   10eb5:	ff 75 08             	pushl  0x8(%ebp)
   10eb8:	e8 ec fd ff ff       	call   10ca9 <do_default_handler>
   10ebd:	83 c4 10             	add    $0x10,%esp
}
   10ec0:	90                   	nop
   10ec1:	c9                   	leave  
   10ec2:	c3                   	ret    

00010ec3 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   10ec3:	55                   	push   %ebp
   10ec4:	89 e5                	mov    %esp,%ebp
   10ec6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "machine check exception!!!");
   10ec9:	83 ec 08             	sub    $0x8,%esp
   10ecc:	68 fc 26 01 00       	push   $0x126fc
   10ed1:	ff 75 08             	pushl  0x8(%ebp)
   10ed4:	e8 d0 fd ff ff       	call   10ca9 <do_default_handler>
   10ed9:	83 c4 10             	add    $0x10,%esp
}
   10edc:	90                   	nop
   10edd:	c9                   	leave  
   10ede:	c3                   	ret    

00010edf <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t *frame)
{
   10edf:	55                   	push   %ebp
   10ee0:	89 e5                	mov    %esp,%ebp
   10ee2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "smd exception!!!");
   10ee5:	83 ec 08             	sub    $0x8,%esp
   10ee8:	68 17 27 01 00       	push   $0x12717
   10eed:	ff 75 08             	pushl  0x8(%ebp)
   10ef0:	e8 b4 fd ff ff       	call   10ca9 <do_default_handler>
   10ef5:	83 c4 10             	add    $0x10,%esp
}
   10ef8:	90                   	nop
   10ef9:	c9                   	leave  
   10efa:	c3                   	ret    

00010efb <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t *frame)
{
   10efb:	55                   	push   %ebp
   10efc:	89 e5                	mov    %esp,%ebp
   10efe:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "virtual exception!!!");
   10f01:	83 ec 08             	sub    $0x8,%esp
   10f04:	68 28 27 01 00       	push   $0x12728
   10f09:	ff 75 08             	pushl  0x8(%ebp)
   10f0c:	e8 98 fd ff ff       	call   10ca9 <do_default_handler>
   10f11:	83 c4 10             	add    $0x10,%esp
}
   10f14:	90                   	nop
   10f15:	c9                   	leave  
   10f16:	c3                   	ret    

00010f17 <do_handler_control_exception>:
void do_handler_control_exception(exception_frame_t *frame)
{
   10f17:	55                   	push   %ebp
   10f18:	89 e5                	mov    %esp,%ebp
   10f1a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "control exception!!!");
   10f1d:	83 ec 08             	sub    $0x8,%esp
   10f20:	68 3d 27 01 00       	push   $0x1273d
   10f25:	ff 75 08             	pushl  0x8(%ebp)
   10f28:	e8 7c fd ff ff       	call   10ca9 <do_default_handler>
   10f2d:	83 c4 10             	add    $0x10,%esp
}
   10f30:	90                   	nop
   10f31:	c9                   	leave  
   10f32:	c3                   	ret    

00010f33 <init_pic>:
/**
 * @brief        : 初始化8259芯片,实现定时器中断。
 * @return        {*}
 **/
static void init_pic()
{
   10f33:	55                   	push   %ebp
   10f34:	89 e5                	mov    %esp,%ebp
    // 第一块8259配置 边缘触发,级联需要配置icw4，8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10f36:	6a 11                	push   $0x11
   10f38:	6a 20                	push   $0x20
   10f3a:	e8 28 fc ff ff       	call   10b67 <outb>
   10f3f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START); // 起始序号从0x20开始
   10f42:	6a 20                	push   $0x20
   10f44:	6a 21                	push   $0x21
   10f46:	e8 1c fc ff ff       	call   10b67 <outb>
   10f4b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);        // 主片PIC0_ICW3 有从片
   10f4e:	6a 04                	push   $0x4
   10f50:	6a 21                	push   $0x21
   10f52:	e8 10 fc ff ff       	call   10b67 <outb>
   10f57:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086); // 普通全嵌套、非缓冲、自动结束8086模式
   10f5a:	6a 01                	push   $0x1
   10f5c:	6a 21                	push   $0x21
   10f5e:	e8 04 fc ff ff       	call   10b67 <outb>
   10f63:	83 c4 08             	add    $0x8,%esp

    // 第二块8259配置
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10f66:	6a 11                	push   $0x11
   10f68:	68 a0 00 00 00       	push   $0xa0
   10f6d:	e8 f5 fb ff ff       	call   10b67 <outb>
   10f72:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8); // 从0x28开始
   10f75:	6a 28                	push   $0x28
   10f77:	68 a1 00 00 00       	push   $0xa1
   10f7c:	e8 e6 fb ff ff       	call   10b67 <outb>
   10f81:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);                 // 没有从片，连接到主片的IRQ2上
   10f84:	6a 02                	push   $0x2
   10f86:	68 a1 00 00 00       	push   $0xa1
   10f8b:	e8 d7 fb ff ff       	call   10b67 <outb>
   10f90:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);     // 普通全嵌套、非缓冲、非自动结束、8086模式
   10f93:	6a 01                	push   $0x1
   10f95:	68 a1 00 00 00       	push   $0xa1
   10f9a:	e8 c8 fb ff ff       	call   10b67 <outb>
   10f9f:	83 c4 08             	add    $0x8,%esp

    // // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10fa2:	68 fb 00 00 00       	push   $0xfb
   10fa7:	6a 21                	push   $0x21
   10fa9:	e8 b9 fb ff ff       	call   10b67 <outb>
   10fae:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10fb1:	68 ff 00 00 00       	push   $0xff
   10fb6:	68 a1 00 00 00       	push   $0xa1
   10fbb:	e8 a7 fb ff ff       	call   10b67 <outb>
   10fc0:	83 c4 08             	add    $0x8,%esp
}
   10fc3:	90                   	nop
   10fc4:	c9                   	leave  
   10fc5:	c3                   	ret    

00010fc6 <pic_send_eoi>:
 * @brief        : 通过写8259的ocw端口，来告诉操作系统irq_num对应的中断已经响应完了
 * @param         {int} irq_num: 中断号
 * @return        {*}
 **/
void pic_send_eoi(int irq_num)
{
   10fc6:	55                   	push   %ebp
   10fc7:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10fc9:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8)
   10fcd:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10fd1:	7e 0f                	jle    10fe2 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10fd3:	6a 20                	push   $0x20
   10fd5:	68 a0 00 00 00       	push   $0xa0
   10fda:	e8 88 fb ff ff       	call   10b67 <outb>
   10fdf:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10fe2:	6a 20                	push   $0x20
   10fe4:	6a 20                	push   $0x20
   10fe6:	e8 7c fb ff ff       	call   10b67 <outb>
   10feb:	83 c4 08             	add    $0x8,%esp
}
   10fee:	90                   	nop
   10fef:	c9                   	leave  
   10ff0:	c3                   	ret    

00010ff1 <irq_init>:
/**
 * @brief        : 中断初始化,初始化中断向量表
 * @return        {*}
 **/
void irq_init(void)
{
   10ff1:	55                   	push   %ebp
   10ff2:	89 e5                	mov    %esp,%ebp
   10ff4:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10ff7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10ffe:	eb 25                	jmp    11025 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   11000:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11005:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11008:	c1 e0 03             	shl    $0x3,%eax
   1100b:	05 e0 42 01 00       	add    $0x142e0,%eax
   11010:	68 00 8e 00 00       	push   $0x8e00
   11015:	52                   	push   %edx
   11016:	6a 08                	push   $0x8
   11018:	50                   	push   %eax
   11019:	e8 c4 f9 ff ff       	call   109e2 <gate_desc_set>
   1101e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   11021:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11025:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11029:	7e d5                	jle    11000 <irq_init+0xf>
                      GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
    }

    // 安装异常处理函数
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider); // 除0异常
   1102b:	83 ec 08             	sub    $0x8,%esp
   1102e:	68 4a 00 01 00       	push   $0x1004a
   11033:	6a 00                	push   $0x0
   11035:	e8 65 01 00 00       	call   1119f <irq_install>
   1103a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   1103d:	83 ec 08             	sub    $0x8,%esp
   11040:	68 69 00 01 00       	push   $0x10069
   11045:	6a 01                	push   $0x1
   11047:	e8 53 01 00 00       	call   1119f <irq_install>
   1104c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   1104f:	83 ec 08             	sub    $0x8,%esp
   11052:	68 88 00 01 00       	push   $0x10088
   11057:	6a 02                	push   $0x2
   11059:	e8 41 01 00 00       	call   1119f <irq_install>
   1105e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11061:	83 ec 08             	sub    $0x8,%esp
   11064:	68 a7 00 01 00       	push   $0x100a7
   11069:	6a 03                	push   $0x3
   1106b:	e8 2f 01 00 00       	call   1119f <irq_install>
   11070:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11073:	83 ec 08             	sub    $0x8,%esp
   11076:	68 c6 00 01 00       	push   $0x100c6
   1107b:	6a 04                	push   $0x4
   1107d:	e8 1d 01 00 00       	call   1119f <irq_install>
   11082:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   11085:	83 ec 08             	sub    $0x8,%esp
   11088:	68 e5 00 01 00       	push   $0x100e5
   1108d:	6a 05                	push   $0x5
   1108f:	e8 0b 01 00 00       	call   1119f <irq_install>
   11094:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   11097:	83 ec 08             	sub    $0x8,%esp
   1109a:	68 04 01 01 00       	push   $0x10104
   1109f:	6a 06                	push   $0x6
   110a1:	e8 f9 00 00 00       	call   1119f <irq_install>
   110a6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   110a9:	83 ec 08             	sub    $0x8,%esp
   110ac:	68 23 01 01 00       	push   $0x10123
   110b1:	6a 07                	push   $0x7
   110b3:	e8 e7 00 00 00       	call   1119f <irq_install>
   110b8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   110bb:	83 ec 08             	sub    $0x8,%esp
   110be:	68 42 01 01 00       	push   $0x10142
   110c3:	6a 08                	push   $0x8
   110c5:	e8 d5 00 00 00       	call   1119f <irq_install>
   110ca:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   110cd:	83 ec 08             	sub    $0x8,%esp
   110d0:	68 5f 01 01 00       	push   $0x1015f
   110d5:	6a 0a                	push   $0xa
   110d7:	e8 c3 00 00 00       	call   1119f <irq_install>
   110dc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   110df:	83 ec 08             	sub    $0x8,%esp
   110e2:	68 7c 01 01 00       	push   $0x1017c
   110e7:	6a 0b                	push   $0xb
   110e9:	e8 b1 00 00 00       	call   1119f <irq_install>
   110ee:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   110f1:	83 ec 08             	sub    $0x8,%esp
   110f4:	68 99 01 01 00       	push   $0x10199
   110f9:	6a 0c                	push   $0xc
   110fb:	e8 9f 00 00 00       	call   1119f <irq_install>
   11100:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   11103:	83 ec 08             	sub    $0x8,%esp
   11106:	68 b6 01 01 00       	push   $0x101b6
   1110b:	6a 0d                	push   $0xd
   1110d:	e8 8d 00 00 00       	call   1119f <irq_install>
   11112:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   11115:	83 ec 08             	sub    $0x8,%esp
   11118:	68 d3 01 01 00       	push   $0x101d3
   1111d:	6a 0e                	push   $0xe
   1111f:	e8 7b 00 00 00       	call   1119f <irq_install>
   11124:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   11127:	83 ec 08             	sub    $0x8,%esp
   1112a:	68 f0 01 01 00       	push   $0x101f0
   1112f:	6a 10                	push   $0x10
   11131:	e8 69 00 00 00       	call   1119f <irq_install>
   11136:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11139:	83 ec 08             	sub    $0x8,%esp
   1113c:	68 0f 02 01 00       	push   $0x1020f
   11141:	6a 11                	push   $0x11
   11143:	e8 57 00 00 00       	call   1119f <irq_install>
   11148:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   1114b:	83 ec 08             	sub    $0x8,%esp
   1114e:	68 2c 02 01 00       	push   $0x1022c
   11153:	6a 12                	push   $0x12
   11155:	e8 45 00 00 00       	call   1119f <irq_install>
   1115a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   1115d:	83 ec 08             	sub    $0x8,%esp
   11160:	68 4b 02 01 00       	push   $0x1024b
   11165:	6a 13                	push   $0x13
   11167:	e8 33 00 00 00       	call   1119f <irq_install>
   1116c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   1116f:	83 ec 08             	sub    $0x8,%esp
   11172:	68 6a 02 01 00       	push   $0x1026a
   11177:	6a 14                	push   $0x14
   11179:	e8 21 00 00 00       	call   1119f <irq_install>
   1117e:	83 c4 10             	add    $0x10,%esp

    // 加载IDT表
    lidt((uint32_t)idt_table, sizeof(idt_table));
   11181:	b8 e0 42 01 00       	mov    $0x142e0,%eax
   11186:	83 ec 08             	sub    $0x8,%esp
   11189:	68 00 04 00 00       	push   $0x400
   1118e:	50                   	push   %eax
   1118f:	e8 f2 f9 ff ff       	call   10b86 <lidt>
   11194:	83 c4 10             	add    $0x10,%esp

    init_pic(); // 初始化8259芯片
   11197:	e8 97 fd ff ff       	call   10f33 <init_pic>
}
   1119c:	90                   	nop
   1119d:	c9                   	leave  
   1119e:	c3                   	ret    

0001119f <irq_install>:
 * @param         {int} irq_num:
 * @param         {irq_handler_t} handler:
 * @return        {*}
 **/
int irq_install(int irq_num, irq_handler_t handler)
{
   1119f:	55                   	push   %ebp
   111a0:	89 e5                	mov    %esp,%ebp
   111a2:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   111a5:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   111a9:	7e 07                	jle    111b2 <irq_install+0x13>
    {
        return -1;
   111ab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   111b0:	eb 25                	jmp    111d7 <irq_install+0x38>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   111b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   111b5:	8b 55 08             	mov    0x8(%ebp),%edx
   111b8:	c1 e2 03             	shl    $0x3,%edx
   111bb:	81 c2 e0 42 01 00    	add    $0x142e0,%edx
   111c1:	68 00 8e 00 00       	push   $0x8e00
   111c6:	50                   	push   %eax
   111c7:	6a 08                	push   $0x8
   111c9:	52                   	push   %edx
   111ca:	e8 13 f8 ff ff       	call   109e2 <gate_desc_set>
   111cf:	83 c4 10             	add    $0x10,%esp
    return 0;
   111d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111d7:	c9                   	leave  
   111d8:	c3                   	ret    

000111d9 <irq_enable>:
 * @brief        : 开启特定中断
 * @param         {int} irq_num: 特定中断号
 * @return        {*}
 **/
void irq_enable(int irq_num)
{
   111d9:	55                   	push   %ebp
   111da:	89 e5                	mov    %esp,%ebp
   111dc:	53                   	push   %ebx
   111dd:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   111e0:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   111e4:	7e 78                	jle    1125e <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   111e6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   111ea:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111ee:	7f 32                	jg     11222 <irq_enable+0x49>
    {
        // 第一块8259中的中断
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   111f0:	6a 21                	push   $0x21
   111f2:	e8 53 f9 ff ff       	call   10b4a <inb>
   111f7:	83 c4 04             	add    $0x4,%esp
   111fa:	89 c2                	mov    %eax,%edx
   111fc:	8b 45 08             	mov    0x8(%ebp),%eax
   111ff:	bb 01 00 00 00       	mov    $0x1,%ebx
   11204:	89 c1                	mov    %eax,%ecx
   11206:	d3 e3                	shl    %cl,%ebx
   11208:	89 d8                	mov    %ebx,%eax
   1120a:	f7 d0                	not    %eax
   1120c:	21 d0                	and    %edx,%eax
   1120e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11211:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11215:	50                   	push   %eax
   11216:	6a 21                	push   $0x21
   11218:	e8 4a f9 ff ff       	call   10b67 <outb>
   1121d:	83 c4 08             	add    $0x8,%esp
   11220:	eb 3d                	jmp    1125f <irq_enable+0x86>
    }
    else
    {
        // 第二块8259的中断
        irq_num -= 8;
   11222:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11226:	68 a1 00 00 00       	push   $0xa1
   1122b:	e8 1a f9 ff ff       	call   10b4a <inb>
   11230:	83 c4 04             	add    $0x4,%esp
   11233:	89 c2                	mov    %eax,%edx
   11235:	8b 45 08             	mov    0x8(%ebp),%eax
   11238:	bb 01 00 00 00       	mov    $0x1,%ebx
   1123d:	89 c1                	mov    %eax,%ecx
   1123f:	d3 e3                	shl    %cl,%ebx
   11241:	89 d8                	mov    %ebx,%eax
   11243:	f7 d0                	not    %eax
   11245:	21 d0                	and    %edx,%eax
   11247:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1124a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1124e:	50                   	push   %eax
   1124f:	68 a1 00 00 00       	push   $0xa1
   11254:	e8 0e f9 ff ff       	call   10b67 <outb>
   11259:	83 c4 08             	add    $0x8,%esp
   1125c:	eb 01                	jmp    1125f <irq_enable+0x86>
        return;
   1125e:	90                   	nop
    }
}
   1125f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11262:	c9                   	leave  
   11263:	c3                   	ret    

00011264 <irq_disable>:
 * @brief        : 关闭特定中断
 * @param         {int} irq_num: 特定中断号
 * @return        {*}
 **/
void irq_disable(int irq_num)
{
   11264:	55                   	push   %ebp
   11265:	89 e5                	mov    %esp,%ebp
   11267:	53                   	push   %ebx
   11268:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   1126b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1126f:	7e 74                	jle    112e5 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11271:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11275:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11279:	7f 30                	jg     112ab <irq_disable+0x47>
    {
        // 第一块8259中的中断
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1127b:	6a 21                	push   $0x21
   1127d:	e8 c8 f8 ff ff       	call   10b4a <inb>
   11282:	83 c4 04             	add    $0x4,%esp
   11285:	89 c3                	mov    %eax,%ebx
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	ba 01 00 00 00       	mov    $0x1,%edx
   1128f:	89 c1                	mov    %eax,%ecx
   11291:	d3 e2                	shl    %cl,%edx
   11293:	89 d0                	mov    %edx,%eax
   11295:	09 d8                	or     %ebx,%eax
   11297:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   1129a:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1129e:	50                   	push   %eax
   1129f:	6a 21                	push   $0x21
   112a1:	e8 c1 f8 ff ff       	call   10b67 <outb>
   112a6:	83 c4 08             	add    $0x8,%esp
   112a9:	eb 3b                	jmp    112e6 <irq_disable+0x82>
    }
    else
    {
        // 第二块8259的中断
        irq_num -= 8;
   112ab:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   112af:	68 a1 00 00 00       	push   $0xa1
   112b4:	e8 91 f8 ff ff       	call   10b4a <inb>
   112b9:	83 c4 04             	add    $0x4,%esp
   112bc:	89 c3                	mov    %eax,%ebx
   112be:	8b 45 08             	mov    0x8(%ebp),%eax
   112c1:	ba 01 00 00 00       	mov    $0x1,%edx
   112c6:	89 c1                	mov    %eax,%ecx
   112c8:	d3 e2                	shl    %cl,%edx
   112ca:	89 d0                	mov    %edx,%eax
   112cc:	09 d8                	or     %ebx,%eax
   112ce:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   112d1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   112d5:	50                   	push   %eax
   112d6:	68 a1 00 00 00       	push   $0xa1
   112db:	e8 87 f8 ff ff       	call   10b67 <outb>
   112e0:	83 c4 08             	add    $0x8,%esp
   112e3:	eb 01                	jmp    112e6 <irq_disable+0x82>
        return;
   112e5:	90                   	nop
    }
}
   112e6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   112e9:	c9                   	leave  
   112ea:	c3                   	ret    

000112eb <irq_disable_global>:
/**
 * @brief        : 全局中断关闭eflags置0
 * @return        {*}
 **/
void irq_disable_global(void)
{
   112eb:	55                   	push   %ebp
   112ec:	89 e5                	mov    %esp,%ebp
    cli();
   112ee:	e8 49 f8 ff ff       	call   10b3c <cli>
}
   112f3:	90                   	nop
   112f4:	5d                   	pop    %ebp
   112f5:	c3                   	ret    

000112f6 <irq_enable_global>:
/**
 * @brief        : 全局中断开启eflags置1
 * @return        {*}
 **/
void irq_enable_global(void)
{
   112f6:	55                   	push   %ebp
   112f7:	89 e5                	mov    %esp,%ebp
    sti();
   112f9:	e8 45 f8 ff ff       	call   10b43 <sti>
}
   112fe:	90                   	nop
   112ff:	5d                   	pop    %ebp
   11300:	c3                   	ret    

00011301 <irq_enter_protection>:
/**
 * @brief        : 进入临界区,读取eflags的值，关中断
 * @return        {irq_state_t}eflags的值
 **/
irq_state_t irq_enter_protection(void)
{
   11301:	55                   	push   %ebp
   11302:	89 e5                	mov    %esp,%ebp
   11304:	83 ec 10             	sub    $0x10,%esp

    irq_state_t state = read_eflags();
   11307:	e8 a9 f8 ff ff       	call   10bb5 <read_eflags>
   1130c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    irq_disable_global();
   1130f:	e8 d7 ff ff ff       	call   112eb <irq_disable_global>

    return state;
   11314:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11317:	c9                   	leave  
   11318:	c3                   	ret    

00011319 <irq_leave_protection>:
 * @brief        : 退出临界区,将eflags原来的值写回
 * @param         {irq_state_t} state: 原eflags的值
 * @return        {*}
 **/
void irq_leave_protection(irq_state_t state)
{
   11319:	55                   	push   %ebp
   1131a:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1131c:	ff 75 08             	pushl  0x8(%ebp)
   1131f:	e8 a1 f8 ff ff       	call   10bc5 <write_eflags>
   11324:	83 c4 04             	add    $0x4,%esp
}
   11327:	90                   	nop
   11328:	c9                   	leave  
   11329:	c3                   	ret    

0001132a <outb>:
{
   1132a:	55                   	push   %ebp
   1132b:	89 e5                	mov    %esp,%ebp
   1132d:	83 ec 08             	sub    $0x8,%esp
   11330:	8b 55 08             	mov    0x8(%ebp),%edx
   11333:	8b 45 0c             	mov    0xc(%ebp),%eax
   11336:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1133a:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   1133d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11341:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11345:	ee                   	out    %al,(%dx)
}
   11346:	90                   	nop
   11347:	c9                   	leave  
   11348:	c3                   	ret    

00011349 <do_handler_timer>:
 * @brief        : 定时器中断处理函数
 * @param         {exception_frame_t} *frame: 异常信息
 * @return        {*}
**/
void do_handler_timer(exception_frame_t *frame)
{
   11349:	55                   	push   %ebp
   1134a:	89 e5                	mov    %esp,%ebp
   1134c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1134f:	a1 e0 46 01 00       	mov    0x146e0,%eax
   11354:	83 c0 01             	add    $0x1,%eax
   11357:	a3 e0 46 01 00       	mov    %eax,0x146e0

    pic_send_eoi(IRQ0_TIMER);
   1135c:	83 ec 0c             	sub    $0xc,%esp
   1135f:	6a 20                	push   $0x20
   11361:	e8 60 fc ff ff       	call   10fc6 <pic_send_eoi>
   11366:	83 c4 10             	add    $0x10,%esp

    task_time_ticks();
   11369:	e8 27 f4 ff ff       	call   10795 <task_time_ticks>
}
   1136e:	90                   	nop
   1136f:	c9                   	leave  
   11370:	c3                   	ret    

00011371 <init_pit>:
/**
 * @brief        : 初始化
 * @return        {*}
 **/
static void init_pit()
{
   11371:	55                   	push   %ebp
   11372:	89 e5                	mov    %esp,%ebp
   11374:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 * OS_TICKS_MS);
   11377:	c7 45 f4 77 00 00 00 	movl   $0x77,-0xc(%ebp)

    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   1137e:	6a 36                	push   $0x36
   11380:	6a 43                	push   $0x43
   11382:	e8 a3 ff ff ff       	call   1132a <outb>
   11387:	83 c4 08             	add    $0x8,%esp

    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF); // 加载低8位
   1138a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1138d:	0f b6 c0             	movzbl %al,%eax
   11390:	50                   	push   %eax
   11391:	6a 40                	push   $0x40
   11393:	e8 92 ff ff ff       	call   1132a <outb>
   11398:	83 c4 08             	add    $0x8,%esp

    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 加载高8位
   1139b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1139e:	c1 e8 08             	shr    $0x8,%eax
   113a1:	0f b6 c0             	movzbl %al,%eax
   113a4:	50                   	push   %eax
   113a5:	6a 40                	push   $0x40
   113a7:	e8 7e ff ff ff       	call   1132a <outb>
   113ac:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   113af:	83 ec 08             	sub    $0x8,%esp
   113b2:	68 a6 02 01 00       	push   $0x102a6
   113b7:	6a 20                	push   $0x20
   113b9:	e8 e1 fd ff ff       	call   1119f <irq_install>
   113be:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   113c1:	83 ec 0c             	sub    $0xc,%esp
   113c4:	6a 20                	push   $0x20
   113c6:	e8 0e fe ff ff       	call   111d9 <irq_enable>
   113cb:	83 c4 10             	add    $0x10,%esp
}
   113ce:	90                   	nop
   113cf:	c9                   	leave  
   113d0:	c3                   	ret    

000113d1 <time_init>:
/**
 * @brief        : 定时器初始化函数
 * @return        {*}
 **/
void time_init(void)
{
   113d1:	55                   	push   %ebp
   113d2:	89 e5                	mov    %esp,%ebp
   113d4:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   113d7:	c7 05 e0 46 01 00 00 	movl   $0x0,0x146e0
   113de:	00 00 00 
    init_pit();
   113e1:	e8 8b ff ff ff       	call   11371 <init_pit>
   113e6:	90                   	nop
   113e7:	c9                   	leave  
   113e8:	c3                   	ret    

000113e9 <list_first>:
{
   113e9:	55                   	push   %ebp
   113ea:	89 e5                	mov    %esp,%ebp
    return list->first;
   113ec:	8b 45 08             	mov    0x8(%ebp),%eax
   113ef:	8b 00                	mov    (%eax),%eax
}
   113f1:	5d                   	pop    %ebp
   113f2:	c3                   	ret    

000113f3 <list_last>:
{
   113f3:	55                   	push   %ebp
   113f4:	89 e5                	mov    %esp,%ebp
    return list->last;
   113f6:	8b 45 08             	mov    0x8(%ebp),%eax
   113f9:	8b 40 04             	mov    0x4(%eax),%eax
}
   113fc:	5d                   	pop    %ebp
   113fd:	c3                   	ret    

000113fe <list_count>:
{
   113fe:	55                   	push   %ebp
   113ff:	89 e5                	mov    %esp,%ebp
    return list->count;
   11401:	8b 45 08             	mov    0x8(%ebp),%eax
   11404:	8b 40 08             	mov    0x8(%eax),%eax
}
   11407:	5d                   	pop    %ebp
   11408:	c3                   	ret    

00011409 <kernel_init>:
 * @brief        : 内核初始化
 * @param         {boot_info_t} *boot_info: 启动信息
 * @return        {*}
 **/
void kernel_init(boot_info_t *boot_info)
{
   11409:	55                   	push   %ebp
   1140a:	89 e5                	mov    %esp,%ebp
   1140c:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   1140f:	8b 45 08             	mov    0x8(%ebp),%eax
   11412:	a3 00 47 01 00       	mov    %eax,0x14700
    cpu_init();
   11417:	e8 02 f7 ff ff       	call   10b1e <cpu_init>

    log_init();
   1141c:	e8 12 0e 00 00       	call   12233 <log_init>
    irq_init();
   11421:	e8 cb fb ff ff       	call   10ff1 <irq_init>
    time_init();
   11426:	e8 a6 ff ff ff       	call   113d1 <time_init>
    task_manager_init();
   1142b:	e8 b1 f2 ff ff       	call   106e1 <task_manager_init>
}
   11430:	90                   	nop
   11431:	c9                   	leave  
   11432:	c3                   	ret    

00011433 <first_task_entry>:

static task_t init_task;  // 初始任务
static task_t first_task; // 第一个任务
static uint32_t first_task_stack[1024];
void first_task_entry(void)
{
   11433:	55                   	push   %ebp
   11434:	89 e5                	mov    %esp,%ebp
   11436:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11439:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        sem_wait(&sem);
   11440:	83 ec 0c             	sub    $0xc,%esp
   11443:	68 04 47 01 00       	push   $0x14704
   11448:	e8 45 05 00 00       	call   11992 <sem_wait>
   1144d:	83 c4 10             	add    $0x10,%esp
        log_printf("first_task_entry , count is %d", count++);
   11450:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11453:	8d 50 01             	lea    0x1(%eax),%edx
   11456:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11459:	83 ec 08             	sub    $0x8,%esp
   1145c:	50                   	push   %eax
   1145d:	68 54 27 01 00       	push   $0x12754
   11462:	e8 69 0e 00 00       	call   122d0 <log_printf>
   11467:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem);
   1146a:	eb d4                	jmp    11440 <first_task_entry+0xd>

0001146c <list_test>:
        // sys_sleep(10000);
    }
}

void list_test()
{
   1146c:	55                   	push   %ebp
   1146d:	89 e5                	mov    %esp,%ebp
   1146f:	56                   	push   %esi
   11470:	53                   	push   %ebx
   11471:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_init(&list);
   11474:	83 ec 0c             	sub    $0xc,%esp
   11477:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1147a:	50                   	push   %eax
   1147b:	e8 90 0b 00 00       	call   12010 <list_init>
   11480:	83 c4 10             	add    $0x10,%esp

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11483:	83 ec 0c             	sub    $0xc,%esp
   11486:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11489:	50                   	push   %eax
   1148a:	e8 6f ff ff ff       	call   113fe <list_count>
   1148f:	83 c4 10             	add    $0x10,%esp
   11492:	89 c6                	mov    %eax,%esi
   11494:	83 ec 0c             	sub    $0xc,%esp
   11497:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1149a:	50                   	push   %eax
   1149b:	e8 53 ff ff ff       	call   113f3 <list_last>
   114a0:	83 c4 10             	add    $0x10,%esp
   114a3:	89 c3                	mov    %eax,%ebx
   114a5:	83 ec 0c             	sub    $0xc,%esp
   114a8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114ab:	50                   	push   %eax
   114ac:	e8 38 ff ff ff       	call   113e9 <list_first>
   114b1:	83 c4 10             	add    $0x10,%esp
   114b4:	56                   	push   %esi
   114b5:	53                   	push   %ebx
   114b6:	50                   	push   %eax
   114b7:	68 74 27 01 00       	push   $0x12774
   114bc:	e8 0f 0e 00 00       	call   122d0 <log_printf>
   114c1:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    list_node_t nodes[5];

    for (int i = 0; i < 5; i++)
   114c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   114cb:	eb 3f                	jmp    1150c <list_test+0xa0>
    {
        list_node_t *node = nodes + i;
   114cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114d0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   114d7:	8d 45 9c             	lea    -0x64(%ebp),%eax
   114da:	01 d0                	add    %edx,%eax
   114dc:	89 45 d0             	mov    %eax,-0x30(%ebp)
        log_printf("insert head to list : %d , 0x%x \n", i, (uint32_t)node);
   114df:	8b 45 d0             	mov    -0x30(%ebp),%eax
   114e2:	83 ec 04             	sub    $0x4,%esp
   114e5:	50                   	push   %eax
   114e6:	ff 75 f4             	pushl  -0xc(%ebp)
   114e9:	68 a4 27 01 00       	push   $0x127a4
   114ee:	e8 dd 0d 00 00       	call   122d0 <log_printf>
   114f3:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   114f6:	83 ec 08             	sub    $0x8,%esp
   114f9:	ff 75 d0             	pushl  -0x30(%ebp)
   114fc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114ff:	50                   	push   %eax
   11500:	e8 30 0b 00 00       	call   12035 <list_insert_first>
   11505:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11508:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1150c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11510:	7e bb                	jle    114cd <list_test+0x61>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11512:	83 ec 0c             	sub    $0xc,%esp
   11515:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11518:	50                   	push   %eax
   11519:	e8 e0 fe ff ff       	call   113fe <list_count>
   1151e:	83 c4 10             	add    $0x10,%esp
   11521:	89 c6                	mov    %eax,%esi
   11523:	83 ec 0c             	sub    $0xc,%esp
   11526:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11529:	50                   	push   %eax
   1152a:	e8 c4 fe ff ff       	call   113f3 <list_last>
   1152f:	83 c4 10             	add    $0x10,%esp
   11532:	89 c3                	mov    %eax,%ebx
   11534:	83 ec 0c             	sub    $0xc,%esp
   11537:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1153a:	50                   	push   %eax
   1153b:	e8 a9 fe ff ff       	call   113e9 <list_first>
   11540:	83 c4 10             	add    $0x10,%esp
   11543:	56                   	push   %esi
   11544:	53                   	push   %ebx
   11545:	50                   	push   %eax
   11546:	68 74 27 01 00       	push   $0x12774
   1154b:	e8 80 0d 00 00       	call   122d0 <log_printf>
   11550:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    list_init(&list);
   11553:	83 ec 0c             	sub    $0xc,%esp
   11556:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11559:	50                   	push   %eax
   1155a:	e8 b1 0a 00 00       	call   12010 <list_init>
   1155f:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11562:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11569:	eb 3f                	jmp    115aa <list_test+0x13e>
    {
        list_node_t *node = nodes + i;
   1156b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1156e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11575:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11578:	01 d0                	add    %edx,%eax
   1157a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("insert last to list : %d , 0x%x \n", i, (uint32_t)node);
   1157d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11580:	83 ec 04             	sub    $0x4,%esp
   11583:	50                   	push   %eax
   11584:	ff 75 f0             	pushl  -0x10(%ebp)
   11587:	68 c8 27 01 00       	push   $0x127c8
   1158c:	e8 3f 0d 00 00       	call   122d0 <log_printf>
   11591:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11594:	83 ec 08             	sub    $0x8,%esp
   11597:	ff 75 d4             	pushl  -0x2c(%ebp)
   1159a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1159d:	50                   	push   %eax
   1159e:	e8 f2 0a 00 00       	call   12095 <list_insert_last>
   115a3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   115a6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   115aa:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   115ae:	7e bb                	jle    1156b <list_test+0xff>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   115b0:	83 ec 0c             	sub    $0xc,%esp
   115b3:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115b6:	50                   	push   %eax
   115b7:	e8 42 fe ff ff       	call   113fe <list_count>
   115bc:	83 c4 10             	add    $0x10,%esp
   115bf:	89 c6                	mov    %eax,%esi
   115c1:	83 ec 0c             	sub    $0xc,%esp
   115c4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115c7:	50                   	push   %eax
   115c8:	e8 26 fe ff ff       	call   113f3 <list_last>
   115cd:	83 c4 10             	add    $0x10,%esp
   115d0:	89 c3                	mov    %eax,%ebx
   115d2:	83 ec 0c             	sub    $0xc,%esp
   115d5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115d8:	50                   	push   %eax
   115d9:	e8 0b fe ff ff       	call   113e9 <list_first>
   115de:	83 c4 10             	add    $0x10,%esp
   115e1:	56                   	push   %esi
   115e2:	53                   	push   %ebx
   115e3:	50                   	push   %eax
   115e4:	68 74 27 01 00       	push   $0x12774
   115e9:	e8 e2 0c 00 00       	call   122d0 <log_printf>
   115ee:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    // remove first
    for (int i = 0; i < 5; i++)
   115f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   115f8:	eb 2d                	jmp    11627 <list_test+0x1bb>
    {
        list_node_t *node = list_remove_first(&list);
   115fa:	83 ec 0c             	sub    $0xc,%esp
   115fd:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11600:	50                   	push   %eax
   11601:	e8 f3 0a 00 00       	call   120f9 <list_remove_first>
   11606:	83 c4 10             	add    $0x10,%esp
   11609:	89 45 d8             	mov    %eax,-0x28(%ebp)
        log_printf("remove head to list : %d , 0x%x \n", i, (uint32_t)node);
   1160c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1160f:	83 ec 04             	sub    $0x4,%esp
   11612:	50                   	push   %eax
   11613:	ff 75 ec             	pushl  -0x14(%ebp)
   11616:	68 ec 27 01 00       	push   $0x127ec
   1161b:	e8 b0 0c 00 00       	call   122d0 <log_printf>
   11620:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11623:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11627:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   1162b:	7e cd                	jle    115fa <list_test+0x18e>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   1162d:	83 ec 0c             	sub    $0xc,%esp
   11630:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11633:	50                   	push   %eax
   11634:	e8 c5 fd ff ff       	call   113fe <list_count>
   11639:	83 c4 10             	add    $0x10,%esp
   1163c:	89 c6                	mov    %eax,%esi
   1163e:	83 ec 0c             	sub    $0xc,%esp
   11641:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11644:	50                   	push   %eax
   11645:	e8 a9 fd ff ff       	call   113f3 <list_last>
   1164a:	83 c4 10             	add    $0x10,%esp
   1164d:	89 c3                	mov    %eax,%ebx
   1164f:	83 ec 0c             	sub    $0xc,%esp
   11652:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11655:	50                   	push   %eax
   11656:	e8 8e fd ff ff       	call   113e9 <list_first>
   1165b:	83 c4 10             	add    $0x10,%esp
   1165e:	56                   	push   %esi
   1165f:	53                   	push   %ebx
   11660:	50                   	push   %eax
   11661:	68 74 27 01 00       	push   $0x12774
   11666:	e8 65 0c 00 00       	call   122d0 <log_printf>
   1166b:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    // remove node
    list_init(&list);
   1166e:	83 ec 0c             	sub    $0xc,%esp
   11671:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11674:	50                   	push   %eax
   11675:	e8 96 09 00 00       	call   12010 <list_init>
   1167a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   1167d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11684:	eb 28                	jmp    116ae <list_test+0x242>
    {
        list_node_t *node = nodes + i;
   11686:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11689:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11690:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11693:	01 d0                	add    %edx,%eax
   11695:	89 45 dc             	mov    %eax,-0x24(%ebp)
        list_insert_last(&list, node);
   11698:	83 ec 08             	sub    $0x8,%esp
   1169b:	ff 75 dc             	pushl  -0x24(%ebp)
   1169e:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116a1:	50                   	push   %eax
   116a2:	e8 ee 09 00 00       	call   12095 <list_insert_last>
   116a7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   116aa:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   116ae:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   116b2:	7e d2                	jle    11686 <list_test+0x21a>
    }

    for (int i = 0; i < 5; i++)
   116b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   116bb:	eb 3f                	jmp    116fc <list_test+0x290>
    {
        list_node_t *node = nodes + i;
   116bd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   116c0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   116c7:	8d 45 9c             	lea    -0x64(%ebp),%eax
   116ca:	01 d0                	add    %edx,%eax
   116cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_remove(&list, node);
   116cf:	83 ec 08             	sub    $0x8,%esp
   116d2:	ff 75 e0             	pushl  -0x20(%ebp)
   116d5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116d8:	50                   	push   %eax
   116d9:	e8 94 0a 00 00       	call   12172 <list_remove>
   116de:	83 c4 10             	add    $0x10,%esp
        log_printf("remove node to list : %d , 0x%x \n", i, (uint32_t)node);
   116e1:	8b 45 e0             	mov    -0x20(%ebp),%eax
   116e4:	83 ec 04             	sub    $0x4,%esp
   116e7:	50                   	push   %eax
   116e8:	ff 75 e4             	pushl  -0x1c(%ebp)
   116eb:	68 10 28 01 00       	push   $0x12810
   116f0:	e8 db 0b 00 00       	call   122d0 <log_printf>
   116f5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   116f8:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
   116fc:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
   11700:	7e bb                	jle    116bd <list_test+0x251>
    }
    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11702:	83 ec 0c             	sub    $0xc,%esp
   11705:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11708:	50                   	push   %eax
   11709:	e8 f0 fc ff ff       	call   113fe <list_count>
   1170e:	83 c4 10             	add    $0x10,%esp
   11711:	89 c6                	mov    %eax,%esi
   11713:	83 ec 0c             	sub    $0xc,%esp
   11716:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11719:	50                   	push   %eax
   1171a:	e8 d4 fc ff ff       	call   113f3 <list_last>
   1171f:	83 c4 10             	add    $0x10,%esp
   11722:	89 c3                	mov    %eax,%ebx
   11724:	83 ec 0c             	sub    $0xc,%esp
   11727:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1172a:	50                   	push   %eax
   1172b:	e8 b9 fc ff ff       	call   113e9 <list_first>
   11730:	83 c4 10             	add    $0x10,%esp
   11733:	56                   	push   %esi
   11734:	53                   	push   %ebx
   11735:	50                   	push   %eax
   11736:	68 74 27 01 00       	push   $0x12774
   1173b:	e8 90 0b 00 00       	call   122d0 <log_printf>
   11740:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));
}
   11743:	90                   	nop
   11744:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11747:	5b                   	pop    %ebx
   11748:	5e                   	pop    %esi
   11749:	5d                   	pop    %ebp
   1174a:	c3                   	ret    

0001174b <init_main>:

void init_main()
{
   1174b:	55                   	push   %ebp
   1174c:	89 e5                	mov    %esp,%ebp
   1174e:	83 ec 18             	sub    $0x18,%esp
    // int a = 3 / 0;
    log_printf("Kernel is running . . .");
   11751:	83 ec 0c             	sub    $0xc,%esp
   11754:	68 32 28 01 00       	push   $0x12832
   11759:	e8 72 0b 00 00       	call   122d0 <log_printf>
   1175e:	83 c4 10             	add    $0x10,%esp
    log_printf("Version:%s", OS_VERSION);
   11761:	83 ec 08             	sub    $0x8,%esp
   11764:	68 4a 28 01 00       	push   $0x1284a
   11769:	68 50 28 01 00       	push   $0x12850
   1176e:	e8 5d 0b 00 00       	call   122d0 <log_printf>
   11773:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, "init task", (uint32_t)first_task_entry, (uint32_t)&first_task_stack[1024]); // x86栈地址由高到低增长 ,同时init_task需要一个单独的栈空间。
   11776:	ba e0 58 01 00       	mov    $0x158e0,%edx
   1177b:	b8 33 14 01 00       	mov    $0x11433,%eax
   11780:	52                   	push   %edx
   11781:	50                   	push   %eax
   11782:	68 5b 28 01 00       	push   $0x1285b
   11787:	68 00 48 01 00       	push   $0x14800
   1178c:	e8 21 ee ff ff       	call   105b2 <task_init>
   11791:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11794:	e8 b5 ef ff ff       	call   1074e <task_first_init>
    // list_test();

    sem_init(&sem, 0);   // 初始化信号量
   11799:	83 ec 08             	sub    $0x8,%esp
   1179c:	6a 00                	push   $0x0
   1179e:	68 04 47 01 00       	push   $0x14704
   117a3:	e8 c7 01 00 00       	call   1196f <sem_init>
   117a8:	83 c4 10             	add    $0x10,%esp
    irq_enable_global(); // 测试打开全局中断
   117ab:	e8 46 fb ff ff       	call   112f6 <irq_enable_global>

    int count = 0;
   117b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("init main , count is %d", count++);
   117b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   117ba:	8d 50 01             	lea    0x1(%eax),%edx
   117bd:	89 55 f4             	mov    %edx,-0xc(%ebp)
   117c0:	83 ec 08             	sub    $0x8,%esp
   117c3:	50                   	push   %eax
   117c4:	68 65 28 01 00       	push   $0x12865
   117c9:	e8 02 0b 00 00       	call   122d0 <log_printf>
   117ce:	83 c4 10             	add    $0x10,%esp
        sem_signal(&sem);
   117d1:	83 ec 0c             	sub    $0xc,%esp
   117d4:	68 04 47 01 00       	push   $0x14704
   117d9:	e8 1f 02 00 00       	call   119fd <sem_signal>
   117de:	83 c4 10             	add    $0x10,%esp
        log_printf("init main , count is %d", count++);
   117e1:	eb d4                	jmp    117b7 <init_main+0x6c>

000117e3 <list_count>:
{
   117e3:	55                   	push   %ebp
   117e4:	89 e5                	mov    %esp,%ebp
    return list->count;
   117e6:	8b 45 08             	mov    0x8(%ebp),%eax
   117e9:	8b 40 08             	mov    0x8(%eax),%eax
}
   117ec:	5d                   	pop    %ebp
   117ed:	c3                   	ret    

000117ee <mutex_init>:
 * @brief        : 互斥锁的初始化，包括上锁次数，锁的拥有进程为空，初始化等待队列
 * @param         {mutex_t} *mutex: 待初始化的互斥锁
 * @return        {*}
 **/
void mutex_init(mutex_t *mutex)
{
   117ee:	55                   	push   %ebp
   117ef:	89 e5                	mov    %esp,%ebp
   117f1:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   117f4:	8b 45 08             	mov    0x8(%ebp),%eax
   117f7:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    mutex->owner = (task_t *)0;
   117fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11801:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    list_init(&mutex->wait_list);
   11808:	8b 45 08             	mov    0x8(%ebp),%eax
   1180b:	83 ec 0c             	sub    $0xc,%esp
   1180e:	50                   	push   %eax
   1180f:	e8 fc 07 00 00       	call   12010 <list_init>
   11814:	83 c4 10             	add    $0x10,%esp
}
   11817:	90                   	nop
   11818:	c9                   	leave  
   11819:	c3                   	ret    

0001181a <mutex_lock>:
 * @brief        : 对互斥锁进行上锁，未上锁则上锁（次数加1，拥有者为上锁进程）；已上锁，且为当前进程上的锁，次数增加即可；已上锁，但非当前进程所上的，
 * @param         {mutex_t} *mutex: 需要上锁的互斥锁
 * @return        {*}
 **/
void mutex_lock(mutex_t *mutex)
{
   1181a:	55                   	push   %ebp
   1181b:	89 e5                	mov    %esp,%ebp
   1181d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11820:	e8 dc fa ff ff       	call   11301 <irq_enter_protection>
   11825:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11828:	e8 49 eb ff ff       	call   10376 <task_current>
   1182d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) // 未上锁
   11830:	8b 45 08             	mov    0x8(%ebp),%eax
   11833:	8b 40 10             	mov    0x10(%eax),%eax
   11836:	85 c0                	test   %eax,%eax
   11838:	75 1a                	jne    11854 <mutex_lock+0x3a>
    {
        mutex->locked_count++; // 上锁
   1183a:	8b 45 08             	mov    0x8(%ebp),%eax
   1183d:	8b 40 10             	mov    0x10(%eax),%eax
   11840:	8d 50 01             	lea    0x1(%eax),%edx
   11843:	8b 45 08             	mov    0x8(%ebp),%eax
   11846:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;   // 锁的拥有者为当前执行的进程
   11849:	8b 45 08             	mov    0x8(%ebp),%eax
   1184c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1184f:	89 50 0c             	mov    %edx,0xc(%eax)
   11852:	eb 45                	jmp    11899 <mutex_lock+0x7f>
    }
    else if (mutex->owner == curr) // 已经上锁，且为当前进程再次上锁
   11854:	8b 45 08             	mov    0x8(%ebp),%eax
   11857:	8b 40 0c             	mov    0xc(%eax),%eax
   1185a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1185d:	75 11                	jne    11870 <mutex_lock+0x56>
    {
        mutex->locked_count++; // 上锁次数增加即可
   1185f:	8b 45 08             	mov    0x8(%ebp),%eax
   11862:	8b 40 10             	mov    0x10(%eax),%eax
   11865:	8d 50 01             	lea    0x1(%eax),%edx
   11868:	8b 45 08             	mov    0x8(%ebp),%eax
   1186b:	89 50 10             	mov    %edx,0x10(%eax)
   1186e:	eb 29                	jmp    11899 <mutex_lock+0x7f>
    }
    else // 已经上锁，且为非当前进程再次上锁
    {
        task_set_block(curr);                                  // 当前进程需要等待，等待锁释放
   11870:	83 ec 0c             	sub    $0xc,%esp
   11873:	ff 75 f0             	pushl  -0x10(%ebp)
   11876:	e8 f5 eb ff ff       	call   10470 <task_set_block>
   1187b:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node); // 插入到等待队列
   1187e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11881:	8d 50 60             	lea    0x60(%eax),%edx
   11884:	8b 45 08             	mov    0x8(%ebp),%eax
   11887:	83 ec 08             	sub    $0x8,%esp
   1188a:	52                   	push   %edx
   1188b:	50                   	push   %eax
   1188c:	e8 04 08 00 00       	call   12095 <list_insert_last>
   11891:	83 c4 10             	add    $0x10,%esp
        task_dispatch();                                       // 调度下一个任务
   11894:	e8 e7 ea ff ff       	call   10380 <task_dispatch>
    }
    irq_leave_protection(state);
   11899:	83 ec 0c             	sub    $0xc,%esp
   1189c:	ff 75 f4             	pushl  -0xc(%ebp)
   1189f:	e8 75 fa ff ff       	call   11319 <irq_leave_protection>
   118a4:	83 c4 10             	add    $0x10,%esp
}
   118a7:	90                   	nop
   118a8:	c9                   	leave  
   118a9:	c3                   	ret    

000118aa <mutex_unlock>:
 * @param         {mutex_t} *mutex: 待解锁的互斥锁
 * @return        {void}
 * @note         : 此函数在中断保护状态下执行，确保操作的原子性
 **/
void mutex_unlock(mutex_t *mutex)
{
   118aa:	55                   	push   %ebp
   118ab:	89 e5                	mov    %esp,%ebp
   118ad:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   118b0:	e8 4c fa ff ff       	call   11301 <irq_enter_protection>
   118b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current(); // 获取当前进程
   118b8:	e8 b9 ea ff ff       	call   10376 <task_current>
   118bd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (mutex->owner == curr) // 只有锁的持有者才能解锁
   118c0:	8b 45 08             	mov    0x8(%ebp),%eax
   118c3:	8b 40 0c             	mov    0xc(%eax),%eax
   118c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   118c9:	0f 85 84 00 00 00    	jne    11953 <mutex_unlock+0xa9>
    {
        if (--mutex->locked_count == 0) // 锁完全释放
   118cf:	8b 45 08             	mov    0x8(%ebp),%eax
   118d2:	8b 40 10             	mov    0x10(%eax),%eax
   118d5:	8d 50 ff             	lea    -0x1(%eax),%edx
   118d8:	8b 45 08             	mov    0x8(%ebp),%eax
   118db:	89 50 10             	mov    %edx,0x10(%eax)
   118de:	8b 45 08             	mov    0x8(%ebp),%eax
   118e1:	8b 40 10             	mov    0x10(%eax),%eax
   118e4:	85 c0                	test   %eax,%eax
   118e6:	75 6b                	jne    11953 <mutex_unlock+0xa9>
        {
            mutex->owner = (task_t *)0; // 锁的拥有者清空
   118e8:	8b 45 08             	mov    0x8(%ebp),%eax
   118eb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            if (list_count(&mutex->wait_list)) // 等待队列非空
   118f2:	8b 45 08             	mov    0x8(%ebp),%eax
   118f5:	83 ec 0c             	sub    $0xc,%esp
   118f8:	50                   	push   %eax
   118f9:	e8 e5 fe ff ff       	call   117e3 <list_count>
   118fe:	83 c4 10             	add    $0x10,%esp
   11901:	85 c0                	test   %eax,%eax
   11903:	74 4e                	je     11953 <mutex_unlock+0xa9>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list); // 取出等待队列头节点（第一个进程）
   11905:	8b 45 08             	mov    0x8(%ebp),%eax
   11908:	83 ec 0c             	sub    $0xc,%esp
   1190b:	50                   	push   %eax
   1190c:	e8 e8 07 00 00       	call   120f9 <list_remove_first>
   11911:	83 c4 10             	add    $0x10,%esp
   11914:	89 45 ec             	mov    %eax,-0x14(%ebp)

                task_t *task = list_node_parent(task_node, task_t, wait_node); // // 从节点获取对应的进程
   11917:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1191b:	74 08                	je     11925 <mutex_unlock+0x7b>
   1191d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11920:	83 e8 60             	sub    $0x60,%eax
   11923:	eb 05                	jmp    1192a <mutex_unlock+0x80>
   11925:	b8 00 00 00 00       	mov    $0x0,%eax
   1192a:	89 45 e8             	mov    %eax,-0x18(%ebp)

                task_set_ready(task); // // 将任务从阻塞状态改为就绪状态
   1192d:	83 ec 0c             	sub    $0xc,%esp
   11930:	ff 75 e8             	pushl  -0x18(%ebp)
   11933:	e8 a3 ea ff ff       	call   103db <task_set_ready>
   11938:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1; // 当前进程获得该所，即上锁一次
   1193b:	8b 45 08             	mov    0x8(%ebp),%eax
   1193e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)

                mutex->owner = task; // 更新锁的拥有者为当前进程
   11945:	8b 45 08             	mov    0x8(%ebp),%eax
   11948:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1194b:	89 50 0c             	mov    %edx,0xc(%eax)

                task_dispatch(); // 调度该进程
   1194e:	e8 2d ea ff ff       	call   10380 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   11953:	83 ec 0c             	sub    $0xc,%esp
   11956:	ff 75 f4             	pushl  -0xc(%ebp)
   11959:	e8 bb f9 ff ff       	call   11319 <irq_leave_protection>
   1195e:	83 c4 10             	add    $0x10,%esp
   11961:	90                   	nop
   11962:	c9                   	leave  
   11963:	c3                   	ret    

00011964 <list_count>:
{
   11964:	55                   	push   %ebp
   11965:	89 e5                	mov    %esp,%ebp
    return list->count;
   11967:	8b 45 08             	mov    0x8(%ebp),%eax
   1196a:	8b 40 08             	mov    0x8(%eax),%eax
}
   1196d:	5d                   	pop    %ebp
   1196e:	c3                   	ret    

0001196f <sem_init>:
 * @param         {sem_t} *sem: 待初始化的信号量
 * @param         {int} init_count: 初始计数值
 * @return        {*}
 **/
void sem_init(sem_t *sem, int init_count)
{
   1196f:	55                   	push   %ebp
   11970:	89 e5                	mov    %esp,%ebp
   11972:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11975:	8b 45 08             	mov    0x8(%ebp),%eax
   11978:	8b 55 0c             	mov    0xc(%ebp),%edx
   1197b:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1197d:	8b 45 08             	mov    0x8(%ebp),%eax
   11980:	83 c0 04             	add    $0x4,%eax
   11983:	83 ec 0c             	sub    $0xc,%esp
   11986:	50                   	push   %eax
   11987:	e8 84 06 00 00       	call   12010 <list_init>
   1198c:	83 c4 10             	add    $0x10,%esp
}
   1198f:	90                   	nop
   11990:	c9                   	leave  
   11991:	c3                   	ret    

00011992 <sem_wait>:
 * @brief        : 等信号（p，wait)，如果当前信号量的计数值为0，则当前进程需等待，调度下一进程执行；反之。计数值减一，并继续执行
 * @param         {sem_t} *sem: 信号量
 * @return        {*}
 **/
void sem_wait(sem_t *sem)
{
   11992:	55                   	push   %ebp
   11993:	89 e5                	mov    %esp,%ebp
   11995:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11998:	e8 64 f9 ff ff       	call   11301 <irq_enter_protection>
   1199d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0)
   119a0:	8b 45 08             	mov    0x8(%ebp),%eax
   119a3:	8b 00                	mov    (%eax),%eax
   119a5:	85 c0                	test   %eax,%eax
   119a7:	7e 0f                	jle    119b8 <sem_wait+0x26>
    {
        sem->count--;
   119a9:	8b 45 08             	mov    0x8(%ebp),%eax
   119ac:	8b 00                	mov    (%eax),%eax
   119ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   119b1:	8b 45 08             	mov    0x8(%ebp),%eax
   119b4:	89 10                	mov    %edx,(%eax)
   119b6:	eb 34                	jmp    119ec <sem_wait+0x5a>
    }
    else
    {
        task_t *curr = task_current();
   119b8:	e8 b9 e9 ff ff       	call   10376 <task_current>
   119bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);                                // 阻塞当前进程
   119c0:	83 ec 0c             	sub    $0xc,%esp
   119c3:	ff 75 f0             	pushl  -0x10(%ebp)
   119c6:	e8 a5 ea ff ff       	call   10470 <task_set_block>
   119cb:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node); // 插入到等待队列中
   119ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119d1:	8d 50 60             	lea    0x60(%eax),%edx
   119d4:	8b 45 08             	mov    0x8(%ebp),%eax
   119d7:	83 c0 04             	add    $0x4,%eax
   119da:	83 ec 08             	sub    $0x8,%esp
   119dd:	52                   	push   %edx
   119de:	50                   	push   %eax
   119df:	e8 b1 06 00 00       	call   12095 <list_insert_last>
   119e4:	83 c4 10             	add    $0x10,%esp
        task_dispatch();                                     // 调度下一进程
   119e7:	e8 94 e9 ff ff       	call   10380 <task_dispatch>
    }
    irq_leave_protection(state);
   119ec:	83 ec 0c             	sub    $0xc,%esp
   119ef:	ff 75 f4             	pushl  -0xc(%ebp)
   119f2:	e8 22 f9 ff ff       	call   11319 <irq_leave_protection>
   119f7:	83 c4 10             	add    $0x10,%esp
}
   119fa:	90                   	nop
   119fb:	c9                   	leave  
   119fc:	c3                   	ret    

000119fd <sem_signal>:
/**
 * @brief        : 发信号（v,signal），某些事件完成或某些资源到达，等待队列中有进程则插入就绪队列，否则，信号量计数值加1，
 * @return        {*}
 **/
void sem_signal(sem_t *sem)
{
   119fd:	55                   	push   %ebp
   119fe:	89 e5                	mov    %esp,%ebp
   11a00:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11a03:	e8 f9 f8 ff ff       	call   11301 <irq_enter_protection>
   11a08:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) // 等待队列中是否有进程在等待
   11a0b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0e:	83 c0 04             	add    $0x4,%eax
   11a11:	83 ec 0c             	sub    $0xc,%esp
   11a14:	50                   	push   %eax
   11a15:	e8 4a ff ff ff       	call   11964 <list_count>
   11a1a:	83 c4 10             	add    $0x10,%esp
   11a1d:	85 c0                	test   %eax,%eax
   11a1f:	74 40                	je     11a61 <sem_signal+0x64>
    {
        list_node_t *node = list_remove_first(&sem->wait_list);   // 有则将取出等待队列中第一个进程
   11a21:	8b 45 08             	mov    0x8(%ebp),%eax
   11a24:	83 c0 04             	add    $0x4,%eax
   11a27:	83 ec 0c             	sub    $0xc,%esp
   11a2a:	50                   	push   %eax
   11a2b:	e8 c9 06 00 00       	call   120f9 <list_remove_first>
   11a30:	83 c4 10             	add    $0x10,%esp
   11a33:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node); // 找到该进程
   11a36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a3a:	74 08                	je     11a44 <sem_signal+0x47>
   11a3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a3f:	83 e8 60             	sub    $0x60,%eax
   11a42:	eb 05                	jmp    11a49 <sem_signal+0x4c>
   11a44:	b8 00 00 00 00       	mov    $0x0,%eax
   11a49:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);                                     // 插入就绪队列
   11a4c:	83 ec 0c             	sub    $0xc,%esp
   11a4f:	ff 75 ec             	pushl  -0x14(%ebp)
   11a52:	e8 84 e9 ff ff       	call   103db <task_set_ready>
   11a57:	83 c4 10             	add    $0x10,%esp
        task_dispatch();                                          // 调度下一个进程
   11a5a:	e8 21 e9 ff ff       	call   10380 <task_dispatch>
   11a5f:	eb 0d                	jmp    11a6e <sem_signal+0x71>
    }
    else // 等待队列没有进程等待
    {
        sem->count++; // 计数值++，表示有新的资源
   11a61:	8b 45 08             	mov    0x8(%ebp),%eax
   11a64:	8b 00                	mov    (%eax),%eax
   11a66:	8d 50 01             	lea    0x1(%eax),%edx
   11a69:	8b 45 08             	mov    0x8(%ebp),%eax
   11a6c:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   11a6e:	83 ec 0c             	sub    $0xc,%esp
   11a71:	ff 75 f4             	pushl  -0xc(%ebp)
   11a74:	e8 a0 f8 ff ff       	call   11319 <irq_leave_protection>
   11a79:	83 c4 10             	add    $0x10,%esp
}
   11a7c:	90                   	nop
   11a7d:	c9                   	leave  
   11a7e:	c3                   	ret    

00011a7f <sem_count>:
 * @brief        : 返回当前信号量的计数值
 * @param         {sem_t} *sem: 须知晓计数值的信号量
 * @return        {int} 当前信号量的计数值
 **/
int sem_count(sem_t *sem)
{
   11a7f:	55                   	push   %ebp
   11a80:	89 e5                	mov    %esp,%ebp
   11a82:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11a85:	e8 77 f8 ff ff       	call   11301 <irq_enter_protection>
   11a8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   11a8d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a90:	8b 00                	mov    (%eax),%eax
   11a92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   11a95:	83 ec 0c             	sub    $0xc,%esp
   11a98:	ff 75 f4             	pushl  -0xc(%ebp)
   11a9b:	e8 79 f8 ff ff       	call   11319 <irq_leave_protection>
   11aa0:	83 c4 10             	add    $0x10,%esp
    return count;
   11aa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   11aa6:	c9                   	leave  
   11aa7:	c3                   	ret    

00011aa8 <hlt>:
{
   11aa8:	55                   	push   %ebp
   11aa9:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   11aab:	f4                   	hlt    
}
   11aac:	90                   	nop
   11aad:	5d                   	pop    %ebp
   11aae:	c3                   	ret    

00011aaf <kernel_strcpy>:
 * @param         {char *} dest:目的地址
 * @param         {char *} src:源字符串地址
 * @return        {*}
 **/
void kernel_strcpy(char *dest, const char *src)
{
   11aaf:	55                   	push   %ebp
   11ab0:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   11ab2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11ab6:	74 2f                	je     11ae7 <kernel_strcpy+0x38>
   11ab8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11abc:	74 29                	je     11ae7 <kernel_strcpy+0x38>
    {
        return;
    }
    while (*dest && *src)
   11abe:	eb 0b                	jmp    11acb <kernel_strcpy+0x1c>
    {
        *dest = *src;
   11ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ac3:	0f b6 10             	movzbl (%eax),%edx
   11ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ac9:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   11acb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ace:	0f b6 00             	movzbl (%eax),%eax
   11ad1:	84 c0                	test   %al,%al
   11ad3:	74 0a                	je     11adf <kernel_strcpy+0x30>
   11ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ad8:	0f b6 00             	movzbl (%eax),%eax
   11adb:	84 c0                	test   %al,%al
   11add:	75 e1                	jne    11ac0 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   11adf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae2:	c6 00 00             	movb   $0x0,(%eax)
   11ae5:	eb 01                	jmp    11ae8 <kernel_strcpy+0x39>
        return;
   11ae7:	90                   	nop
}
   11ae8:	5d                   	pop    %ebp
   11ae9:	c3                   	ret    

00011aea <kernel_strncpy>:
 * @param         {char *} src:源字符串地址
 * @param         {int} size:大小
 * @return        {*}
 **/
void kernel_strncpy(char *dest, const char *src, int size)
{
   11aea:	55                   	push   %ebp
   11aeb:	89 e5                	mov    %esp,%ebp
   11aed:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11af0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11af4:	74 61                	je     11b57 <kernel_strncpy+0x6d>
   11af6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11afa:	74 5b                	je     11b57 <kernel_strncpy+0x6d>
   11afc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b00:	74 55                	je     11b57 <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   11b02:	8b 45 08             	mov    0x8(%ebp),%eax
   11b05:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   11b08:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b0b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   11b0e:	eb 17                	jmp    11b27 <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   11b10:	8b 55 f8             	mov    -0x8(%ebp),%edx
   11b13:	8d 42 01             	lea    0x1(%edx),%eax
   11b16:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11b19:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b1c:	8d 48 01             	lea    0x1(%eax),%ecx
   11b1f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   11b22:	0f b6 12             	movzbl (%edx),%edx
   11b25:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   11b27:	8b 45 10             	mov    0x10(%ebp),%eax
   11b2a:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b2d:	89 55 10             	mov    %edx,0x10(%ebp)
   11b30:	85 c0                	test   %eax,%eax
   11b32:	7e 0a                	jle    11b3e <kernel_strncpy+0x54>
   11b34:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b37:	0f b6 00             	movzbl (%eax),%eax
   11b3a:	84 c0                	test   %al,%al
   11b3c:	75 d2                	jne    11b10 <kernel_strncpy+0x26>
    }

    if (size == 0)
   11b3e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11b42:	75 0b                	jne    11b4f <kernel_strncpy+0x65>
    {

        *(d - 1) = '\0';
   11b44:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b47:	83 e8 01             	sub    $0x1,%eax
   11b4a:	c6 00 00             	movb   $0x0,(%eax)
   11b4d:	eb 09                	jmp    11b58 <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   11b4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b52:	c6 00 00             	movb   $0x0,(%eax)
   11b55:	eb 01                	jmp    11b58 <kernel_strncpy+0x6e>
        return;
   11b57:	90                   	nop
    }
}
   11b58:	c9                   	leave  
   11b59:	c3                   	ret    

00011b5a <kernel_strncmp>:
 * @param         {char *} s2: 字符串2
 * @param         {int} size: 需要比较的字符串长度
 * @return        {*}相等返回0 ,否则返回-1
 **/
int kernel_strncmp(const char *s1, const char *s2, int size)
{
   11b5a:	55                   	push   %ebp
   11b5b:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   11b5d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11b61:	74 06                	je     11b69 <kernel_strncmp+0xf>
   11b63:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11b67:	75 0f                	jne    11b78 <kernel_strncmp+0x1e>
    {
        return -1;
   11b69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b6e:	eb 69                	jmp    11bd9 <kernel_strncmp+0x7f>
    }
    while (*s1 && *s2 && (*s1 == *s2) && size--)
    {
        s1++;
   11b70:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11b74:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size--)
   11b78:	8b 45 08             	mov    0x8(%ebp),%eax
   11b7b:	0f b6 00             	movzbl (%eax),%eax
   11b7e:	84 c0                	test   %al,%al
   11b80:	74 27                	je     11ba9 <kernel_strncmp+0x4f>
   11b82:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b85:	0f b6 00             	movzbl (%eax),%eax
   11b88:	84 c0                	test   %al,%al
   11b8a:	74 1d                	je     11ba9 <kernel_strncmp+0x4f>
   11b8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11b8f:	0f b6 10             	movzbl (%eax),%edx
   11b92:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b95:	0f b6 00             	movzbl (%eax),%eax
   11b98:	38 c2                	cmp    %al,%dl
   11b9a:	75 0d                	jne    11ba9 <kernel_strncmp+0x4f>
   11b9c:	8b 45 10             	mov    0x10(%ebp),%eax
   11b9f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ba2:	89 55 10             	mov    %edx,0x10(%ebp)
   11ba5:	85 c0                	test   %eax,%eax
   11ba7:	75 c7                	jne    11b70 <kernel_strncmp+0x16>
    }
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11ba9:	8b 45 08             	mov    0x8(%ebp),%eax
   11bac:	0f b6 00             	movzbl (%eax),%eax
   11baf:	84 c0                	test   %al,%al
   11bb1:	74 21                	je     11bd4 <kernel_strncmp+0x7a>
   11bb3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bb6:	0f b6 00             	movzbl (%eax),%eax
   11bb9:	84 c0                	test   %al,%al
   11bbb:	74 17                	je     11bd4 <kernel_strncmp+0x7a>
   11bbd:	8b 45 08             	mov    0x8(%ebp),%eax
   11bc0:	0f b6 10             	movzbl (%eax),%edx
   11bc3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bc6:	0f b6 00             	movzbl (%eax),%eax
   11bc9:	38 c2                	cmp    %al,%dl
   11bcb:	74 07                	je     11bd4 <kernel_strncmp+0x7a>
   11bcd:	b8 01 00 00 00       	mov    $0x1,%eax
   11bd2:	eb 05                	jmp    11bd9 <kernel_strncmp+0x7f>
   11bd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11bd9:	5d                   	pop    %ebp
   11bda:	c3                   	ret    

00011bdb <kernel_strlen>:
 * @brief        : 字符串的长度
 * @param         {char *} str: 字符串
 * @return        {*} 字符串的长度
 **/
int kernel_strlen(const char *str)
{
   11bdb:	55                   	push   %ebp
   11bdc:	89 e5                	mov    %esp,%ebp
   11bde:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   11be1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11be5:	75 07                	jne    11bee <kernel_strlen+0x13>
    {
        return 0;
   11be7:	b8 00 00 00 00       	mov    $0x0,%eax
   11bec:	eb 26                	jmp    11c14 <kernel_strlen+0x39>
    }
    const char *c = str;
   11bee:	8b 45 08             	mov    0x8(%ebp),%eax
   11bf1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   11bf4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   11bfb:	eb 04                	jmp    11c01 <kernel_strlen+0x26>
    {
        len++;
   11bfd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   11c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c04:	8d 50 01             	lea    0x1(%eax),%edx
   11c07:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11c0a:	0f b6 00             	movzbl (%eax),%eax
   11c0d:	84 c0                	test   %al,%al
   11c0f:	75 ec                	jne    11bfd <kernel_strlen+0x22>
    }
    return len;
   11c11:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   11c14:	c9                   	leave  
   11c15:	c3                   	ret    

00011c16 <kernel_memcpy>:
 * @param         {void *} src: 源地址
 * @param         {int} size: 需要复制的字节大小
 * @return        {*}
 **/
void kernel_memcpy(void *dest, void *src, int size)
{
   11c16:	55                   	push   %ebp
   11c17:	89 e5                	mov    %esp,%ebp
   11c19:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11c1c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c20:	74 40                	je     11c62 <kernel_memcpy+0x4c>
   11c22:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11c26:	74 3a                	je     11c62 <kernel_memcpy+0x4c>
   11c28:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c2c:	74 34                	je     11c62 <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   11c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c31:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   11c34:	8b 45 08             	mov    0x8(%ebp),%eax
   11c37:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11c3a:	eb 17                	jmp    11c53 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   11c3c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11c3f:	8d 42 01             	lea    0x1(%edx),%eax
   11c42:	89 45 fc             	mov    %eax,-0x4(%ebp)
   11c45:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c48:	8d 48 01             	lea    0x1(%eax),%ecx
   11c4b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11c4e:	0f b6 12             	movzbl (%edx),%edx
   11c51:	88 10                	mov    %dl,(%eax)
    while (size--)
   11c53:	8b 45 10             	mov    0x10(%ebp),%eax
   11c56:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c59:	89 55 10             	mov    %edx,0x10(%ebp)
   11c5c:	85 c0                	test   %eax,%eax
   11c5e:	75 dc                	jne    11c3c <kernel_memcpy+0x26>
   11c60:	eb 01                	jmp    11c63 <kernel_memcpy+0x4d>
        return;
   11c62:	90                   	nop
    }
}
   11c63:	c9                   	leave  
   11c64:	c3                   	ret    

00011c65 <kernel_memset>:
 * @param         {uint8_t} v: 设置成的数据
 * @param         {int} size: 字节大小
 * @return        {*}
 **/
void kernel_memset(void *dest, uint8_t v, int size)
{
   11c65:	55                   	push   %ebp
   11c66:	89 e5                	mov    %esp,%ebp
   11c68:	83 ec 14             	sub    $0x14,%esp
   11c6b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c6e:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11c71:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11c75:	74 2c                	je     11ca3 <kernel_memset+0x3e>
   11c77:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11c7b:	74 26                	je     11ca3 <kernel_memset+0x3e>
    {
        return;
    }
    uint8_t *d = dest;
   11c7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11c80:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11c83:	eb 0f                	jmp    11c94 <kernel_memset+0x2f>
    {
        *d++ = v;
   11c85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11c88:	8d 50 01             	lea    0x1(%eax),%edx
   11c8b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11c8e:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11c92:	88 10                	mov    %dl,(%eax)
    while (size--)
   11c94:	8b 45 10             	mov    0x10(%ebp),%eax
   11c97:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c9a:	89 55 10             	mov    %edx,0x10(%ebp)
   11c9d:	85 c0                	test   %eax,%eax
   11c9f:	75 e4                	jne    11c85 <kernel_memset+0x20>
   11ca1:	eb 01                	jmp    11ca4 <kernel_memset+0x3f>
        return;
   11ca3:	90                   	nop
    }
}
   11ca4:	c9                   	leave  
   11ca5:	c3                   	ret    

00011ca6 <kernel_memcmp>:
 * @param         {void *} d2:数据d2的地址
 * @param         {int} size: 比较的字节大小
 * @return        {*}d1=d2返回0，相等返回非0;
 **/
int kernel_memcmp(void *d1, void *d2, int size)
{
   11ca6:	55                   	push   %ebp
   11ca7:	89 e5                	mov    %esp,%ebp
   11ca9:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size)
   11cac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11cb0:	74 0c                	je     11cbe <kernel_memcmp+0x18>
   11cb2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11cb6:	74 06                	je     11cbe <kernel_memcmp+0x18>
   11cb8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11cbc:	75 07                	jne    11cc5 <kernel_memcmp+0x1f>
    {
        return 1;
   11cbe:	b8 01 00 00 00       	mov    $0x1,%eax
   11cc3:	eb 43                	jmp    11d08 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = d1;
   11cc5:	8b 45 08             	mov    0x8(%ebp),%eax
   11cc8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = d2;
   11ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cce:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11cd1:	eb 23                	jmp    11cf6 <kernel_memcmp+0x50>
    {
        if (*p_d1++ != *p_d2++)
   11cd3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11cd6:	8d 50 01             	lea    0x1(%eax),%edx
   11cd9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11cdc:	0f b6 08             	movzbl (%eax),%ecx
   11cdf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ce2:	8d 50 01             	lea    0x1(%eax),%edx
   11ce5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11ce8:	0f b6 00             	movzbl (%eax),%eax
   11ceb:	38 c1                	cmp    %al,%cl
   11ced:	74 07                	je     11cf6 <kernel_memcmp+0x50>
        {
            return 1;
   11cef:	b8 01 00 00 00       	mov    $0x1,%eax
   11cf4:	eb 12                	jmp    11d08 <kernel_memcmp+0x62>
    while (size--)
   11cf6:	8b 45 10             	mov    0x10(%ebp),%eax
   11cf9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11cfc:	89 55 10             	mov    %edx,0x10(%ebp)
   11cff:	85 c0                	test   %eax,%eax
   11d01:	75 d0                	jne    11cd3 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   11d03:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d08:	c9                   	leave  
   11d09:	c3                   	ret    

00011d0a <kernel_sprintf>:
 * @param         {char} *buf: 输出字符缓冲区
 * @param         {char} *fmt: 格式化字符串
 * @return        {*}
 **/
void kernel_sprintf(char *buf, const char *fmt, ...)
{
   11d0a:	55                   	push   %ebp
   11d0b:	89 e5                	mov    %esp,%ebp
   11d0d:	83 ec 18             	sub    $0x18,%esp
    va_list args;                          // 可变参数存储变量
    kernel_memset(buf, '\0', sizeof(buf)); // 清空缓冲区
   11d10:	6a 04                	push   $0x4
   11d12:	6a 00                	push   $0x0
   11d14:	ff 75 08             	pushl  0x8(%ebp)
   11d17:	e8 49 ff ff ff       	call   11c65 <kernel_memset>
   11d1c:	83 c4 0c             	add    $0xc,%esp
    va_start(args, fmt);                   // 将fmt后的可变参数存储到args中
   11d1f:	8d 45 10             	lea    0x10(%ebp),%eax
   11d22:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, fmt, args);       // 将可变参数放入缓冲区
   11d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d28:	83 ec 04             	sub    $0x4,%esp
   11d2b:	50                   	push   %eax
   11d2c:	ff 75 0c             	pushl  0xc(%ebp)
   11d2f:	ff 75 08             	pushl  0x8(%ebp)
   11d32:	e8 45 01 00 00       	call   11e7c <kernel_vsprintf>
   11d37:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11d3a:	90                   	nop
   11d3b:	c9                   	leave  
   11d3c:	c3                   	ret    

00011d3d <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11d3d:	55                   	push   %ebp
   11d3e:	89 e5                	mov    %esp,%ebp
   11d40:	53                   	push   %ebx
   11d41:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11d44:	8b 45 08             	mov    0x8(%ebp),%eax
   11d47:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11d4a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d4d:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   11d50:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11d54:	74 1d                	je     11d73 <kernel_itoa+0x36>
   11d56:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11d5a:	74 17                	je     11d73 <kernel_itoa+0x36>
   11d5c:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11d60:	74 11                	je     11d73 <kernel_itoa+0x36>
   11d62:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11d66:	74 0b                	je     11d73 <kernel_itoa+0x36>
    {
        *p = '\0';
   11d68:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11d6b:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11d6e:	e9 03 01 00 00       	jmp    11e76 <kernel_itoa+0x139>
    }
    // 只支持十进制负数
    int signed_num = 0;
   11d73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   11d7a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11d7e:	79 19                	jns    11d99 <kernel_itoa+0x5c>
   11d80:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11d84:	75 13                	jne    11d99 <kernel_itoa+0x5c>
    {
        *p++ = '-';
   11d86:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11d89:	8d 50 01             	lea    0x1(%eax),%edx
   11d8c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11d8f:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11d92:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   11d99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11d9d:	74 3b                	je     11dda <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   11d9f:	8b 0d b0 23 01 00    	mov    0x123b0,%ecx
   11da5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11da8:	99                   	cltd   
   11da9:	f7 7d 10             	idivl  0x10(%ebp)
   11dac:	89 d0                	mov    %edx,%eax
   11dae:	83 c0 0f             	add    $0xf,%eax
   11db1:	01 c8                	add    %ecx,%eax
   11db3:	0f b6 00             	movzbl (%eax),%eax
   11db6:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11db9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11dbc:	8d 50 01             	lea    0x1(%eax),%edx
   11dbf:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11dc2:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11dc6:	88 10                	mov    %dl,(%eax)
            num /= base;
   11dc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11dcb:	99                   	cltd   
   11dcc:	f7 7d 10             	idivl  0x10(%ebp)
   11dcf:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11dd2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11dd6:	75 c7                	jne    11d9f <kernel_itoa+0x62>
   11dd8:	eb 4b                	jmp    11e25 <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   11dda:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ddd:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   11de0:	8b 0d b0 23 01 00    	mov    0x123b0,%ecx
   11de6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11dec:	ba 00 00 00 00       	mov    $0x0,%edx
   11df1:	f7 f3                	div    %ebx
   11df3:	89 d0                	mov    %edx,%eax
   11df5:	83 c0 0f             	add    $0xf,%eax
   11df8:	01 c8                	add    %ecx,%eax
   11dfa:	0f b6 00             	movzbl (%eax),%eax
   11dfd:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11e00:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e03:	8d 50 01             	lea    0x1(%eax),%edx
   11e06:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e09:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11e0d:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11e0f:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11e12:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e15:	ba 00 00 00 00       	mov    $0x0,%edx
   11e1a:	f7 f3                	div    %ebx
   11e1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11e1f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11e23:	75 bb                	jne    11de0 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11e25:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e28:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e2b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e2e:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   11e31:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11e35:	74 08                	je     11e3f <kernel_itoa+0x102>
   11e37:	8b 45 08             	mov    0x8(%ebp),%eax
   11e3a:	83 c0 01             	add    $0x1,%eax
   11e3d:	eb 03                	jmp    11e42 <kernel_itoa+0x105>
   11e3f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e42:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   11e45:	eb 27                	jmp    11e6e <kernel_itoa+0x131>
    {
        char ch = *start;
   11e47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e4a:	0f b6 00             	movzbl (%eax),%eax
   11e4d:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11e50:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e53:	0f b6 10             	movzbl (%eax),%edx
   11e56:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e59:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11e5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11e5e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e61:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11e64:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11e68:	88 10                	mov    %dl,(%eax)
        start++;
   11e6a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   11e6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11e71:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11e74:	72 d1                	jb     11e47 <kernel_itoa+0x10a>
    }
}
   11e76:	83 c4 20             	add    $0x20,%esp
   11e79:	5b                   	pop    %ebx
   11e7a:	5d                   	pop    %ebp
   11e7b:	c3                   	ret    

00011e7c <kernel_vsprintf>:
 * @param         {char} *fmt: 格式化字符串
 * @param         {va_list} args: 参数
 * @return        {*}
 **/
void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11e7c:	55                   	push   %ebp
   11e7d:	89 e5                	mov    %esp,%ebp
   11e7f:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11e82:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   11e89:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11e8f:	e9 17 01 00 00       	jmp    11fab <kernel_vsprintf+0x12f>
    {
        switch (state)
   11e94:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e97:	85 c0                	test   %eax,%eax
   11e99:	74 0a                	je     11ea5 <kernel_vsprintf+0x29>
   11e9b:	83 f8 01             	cmp    $0x1,%eax
   11e9e:	74 2b                	je     11ecb <kernel_vsprintf+0x4f>
   11ea0:	e9 06 01 00 00       	jmp    11fab <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11ea5:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11ea9:	75 0c                	jne    11eb7 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11eab:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11eb2:	e9 f4 00 00 00       	jmp    11fab <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   11eb7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11eba:	8d 50 01             	lea    0x1(%eax),%edx
   11ebd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11ec0:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11ec4:	88 10                	mov    %dl,(%eax)
            }
            break;
   11ec6:	e9 e0 00 00 00       	jmp    11fab <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   11ecb:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11ecf:	75 31                	jne    11f02 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11ed1:	8b 45 10             	mov    0x10(%ebp),%eax
   11ed4:	8d 50 04             	lea    0x4(%eax),%edx
   11ed7:	89 55 10             	mov    %edx,0x10(%ebp)
   11eda:	8b 00                	mov    (%eax),%eax
   11edc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11edf:	6a 0a                	push   $0xa
   11ee1:	ff 75 e4             	pushl  -0x1c(%ebp)
   11ee4:	ff 75 f8             	pushl  -0x8(%ebp)
   11ee7:	e8 51 fe ff ff       	call   11d3d <kernel_itoa>
   11eec:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11eef:	ff 75 f8             	pushl  -0x8(%ebp)
   11ef2:	e8 e4 fc ff ff       	call   11bdb <kernel_strlen>
   11ef7:	83 c4 04             	add    $0x4,%esp
   11efa:	01 45 f8             	add    %eax,-0x8(%ebp)
   11efd:	e9 a1 00 00 00       	jmp    11fa3 <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   11f02:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11f06:	75 2e                	jne    11f36 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11f08:	8b 45 10             	mov    0x10(%ebp),%eax
   11f0b:	8d 50 04             	lea    0x4(%eax),%edx
   11f0e:	89 55 10             	mov    %edx,0x10(%ebp)
   11f11:	8b 00                	mov    (%eax),%eax
   11f13:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11f16:	6a 10                	push   $0x10
   11f18:	ff 75 e8             	pushl  -0x18(%ebp)
   11f1b:	ff 75 f8             	pushl  -0x8(%ebp)
   11f1e:	e8 1a fe ff ff       	call   11d3d <kernel_itoa>
   11f23:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11f26:	ff 75 f8             	pushl  -0x8(%ebp)
   11f29:	e8 ad fc ff ff       	call   11bdb <kernel_strlen>
   11f2e:	83 c4 04             	add    $0x4,%esp
   11f31:	01 45 f8             	add    %eax,-0x8(%ebp)
   11f34:	eb 6d                	jmp    11fa3 <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   11f36:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11f3a:	75 1f                	jne    11f5b <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   11f3c:	8b 45 10             	mov    0x10(%ebp),%eax
   11f3f:	8d 50 04             	lea    0x4(%eax),%edx
   11f42:	89 55 10             	mov    %edx,0x10(%ebp)
   11f45:	8b 00                	mov    (%eax),%eax
   11f47:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11f4a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f4d:	8d 50 01             	lea    0x1(%eax),%edx
   11f50:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11f53:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11f57:	88 10                	mov    %dl,(%eax)
   11f59:	eb 48                	jmp    11fa3 <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   11f5b:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11f5f:	75 42                	jne    11fa3 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   11f61:	8b 45 10             	mov    0x10(%ebp),%eax
   11f64:	8d 50 04             	lea    0x4(%eax),%edx
   11f67:	89 55 10             	mov    %edx,0x10(%ebp)
   11f6a:	8b 00                	mov    (%eax),%eax
   11f6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   11f6f:	ff 75 f4             	pushl  -0xc(%ebp)
   11f72:	e8 64 fc ff ff       	call   11bdb <kernel_strlen>
   11f77:	83 c4 04             	add    $0x4,%esp
   11f7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   11f7d:	eb 17                	jmp    11f96 <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   11f7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11f82:	8d 42 01             	lea    0x1(%edx),%eax
   11f85:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11f88:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11f8b:	8d 48 01             	lea    0x1(%eax),%ecx
   11f8e:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11f91:	0f b6 12             	movzbl (%edx),%edx
   11f94:	88 10                	mov    %dl,(%eax)
                while (len--)
   11f96:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f99:	8d 50 ff             	lea    -0x1(%eax),%edx
   11f9c:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11f9f:	85 c0                	test   %eax,%eax
   11fa1:	75 dc                	jne    11f7f <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   11fa3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11faa:	90                   	nop
    while ((ch = *fmt++))
   11fab:	8b 45 0c             	mov    0xc(%ebp),%eax
   11fae:	8d 50 01             	lea    0x1(%eax),%edx
   11fb1:	89 55 0c             	mov    %edx,0xc(%ebp)
   11fb4:	0f b6 00             	movzbl (%eax),%eax
   11fb7:	88 45 ef             	mov    %al,-0x11(%ebp)
   11fba:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11fbe:	0f 85 d0 fe ff ff    	jne    11e94 <kernel_vsprintf+0x18>
        }
    }
}
   11fc4:	90                   	nop
   11fc5:	c9                   	leave  
   11fc6:	c3                   	ret    

00011fc7 <pannic>:
 * @param         {char} *func: 函数名
 * @param         {char} *cond: 表达式
 * @return        {*}
**/
void pannic(const char *file, int line, const char *func, const char *cond)
{
   11fc7:	55                   	push   %ebp
   11fc8:	89 e5                	mov    %esp,%ebp
   11fca:	83 ec 08             	sub    $0x8,%esp
    log_printf("ASSERT FAILED! %s", cond);
   11fcd:	83 ec 08             	sub    $0x8,%esp
   11fd0:	ff 75 14             	pushl  0x14(%ebp)
   11fd3:	68 80 28 01 00       	push   $0x12880
   11fd8:	e8 f3 02 00 00       	call   122d0 <log_printf>
   11fdd:	83 c4 10             	add    $0x10,%esp
    log_printf("File is : %s \nLine is : %d\nFunc is : %s\n", file, line, func);
   11fe0:	ff 75 10             	pushl  0x10(%ebp)
   11fe3:	ff 75 0c             	pushl  0xc(%ebp)
   11fe6:	ff 75 08             	pushl  0x8(%ebp)
   11fe9:	68 94 28 01 00       	push   $0x12894
   11fee:	e8 dd 02 00 00       	call   122d0 <log_printf>
   11ff3:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   11ff6:	e8 ad fa ff ff       	call   11aa8 <hlt>
   11ffb:	eb f9                	jmp    11ff6 <pannic+0x2f>

00011ffd <list_is_empty>:
{
   11ffd:	55                   	push   %ebp
   11ffe:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12000:	8b 45 08             	mov    0x8(%ebp),%eax
   12003:	8b 40 08             	mov    0x8(%eax),%eax
   12006:	85 c0                	test   %eax,%eax
   12008:	0f 94 c0             	sete   %al
   1200b:	0f b6 c0             	movzbl %al,%eax
}
   1200e:	5d                   	pop    %ebp
   1200f:	c3                   	ret    

00012010 <list_init>:
 * @brief        : 链表初始化函数
 * @param         {list_t *} list: 待初始化的链表
 * @return        {*}
 **/
void list_init(list_t *list)
{
   12010:	55                   	push   %ebp
   12011:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12013:	8b 45 08             	mov    0x8(%ebp),%eax
   12016:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1201d:	8b 45 08             	mov    0x8(%ebp),%eax
   12020:	8b 50 04             	mov    0x4(%eax),%edx
   12023:	8b 45 08             	mov    0x8(%ebp),%eax
   12026:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12028:	8b 45 08             	mov    0x8(%ebp),%eax
   1202b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12032:	90                   	nop
   12033:	5d                   	pop    %ebp
   12034:	c3                   	ret    

00012035 <list_insert_first>:
 * @param         {list_t} *list: 待插入的链表
 * @param         {list_node_t} *node: 待插入的结点
 * @return        {*}
**/
void list_insert_first(list_t *list, list_node_t *node)
{
   12035:	55                   	push   %ebp
   12036:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   12038:	8b 45 08             	mov    0x8(%ebp),%eax
   1203b:	8b 10                	mov    (%eax),%edx
   1203d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12040:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12043:	8b 45 0c             	mov    0xc(%ebp),%eax
   12046:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    // 链表为空;
    if (list_is_empty(list))
   1204c:	ff 75 08             	pushl  0x8(%ebp)
   1204f:	e8 a9 ff ff ff       	call   11ffd <list_is_empty>
   12054:	83 c4 04             	add    $0x4,%esp
   12057:	85 c0                	test   %eax,%eax
   12059:	74 16                	je     12071 <list_insert_first+0x3c>
    {
        list->first = list->last = node;
   1205b:	8b 45 08             	mov    0x8(%ebp),%eax
   1205e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12061:	89 50 04             	mov    %edx,0x4(%eax)
   12064:	8b 45 08             	mov    0x8(%ebp),%eax
   12067:	8b 50 04             	mov    0x4(%eax),%edx
   1206a:	8b 45 08             	mov    0x8(%ebp),%eax
   1206d:	89 10                	mov    %edx,(%eax)
   1206f:	eb 12                	jmp    12083 <list_insert_first+0x4e>
    }
    else
    {
        list->first->pre = node;
   12071:	8b 45 08             	mov    0x8(%ebp),%eax
   12074:	8b 00                	mov    (%eax),%eax
   12076:	8b 55 0c             	mov    0xc(%ebp),%edx
   12079:	89 10                	mov    %edx,(%eax)
        list->first = node;
   1207b:	8b 45 08             	mov    0x8(%ebp),%eax
   1207e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12081:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   12083:	8b 45 08             	mov    0x8(%ebp),%eax
   12086:	8b 40 08             	mov    0x8(%eax),%eax
   12089:	8d 50 01             	lea    0x1(%eax),%edx
   1208c:	8b 45 08             	mov    0x8(%ebp),%eax
   1208f:	89 50 08             	mov    %edx,0x8(%eax)
}
   12092:	90                   	nop
   12093:	c9                   	leave  
   12094:	c3                   	ret    

00012095 <list_insert_last>:
 * @param         {list_t} *list: 待插入的链表
 * @param         {list_node_t} *node: 待插入的结点
 * @return        {*}
**/
void list_insert_last(list_t *list, list_node_t *node)
{
   12095:	55                   	push   %ebp
   12096:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   12098:	8b 45 08             	mov    0x8(%ebp),%eax
   1209b:	8b 50 04             	mov    0x4(%eax),%edx
   1209e:	8b 45 0c             	mov    0xc(%ebp),%eax
   120a1:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   120a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   120a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list))
   120ad:	ff 75 08             	pushl  0x8(%ebp)
   120b0:	e8 48 ff ff ff       	call   11ffd <list_is_empty>
   120b5:	83 c4 04             	add    $0x4,%esp
   120b8:	85 c0                	test   %eax,%eax
   120ba:	74 16                	je     120d2 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   120bc:	8b 45 08             	mov    0x8(%ebp),%eax
   120bf:	8b 55 0c             	mov    0xc(%ebp),%edx
   120c2:	89 50 04             	mov    %edx,0x4(%eax)
   120c5:	8b 45 08             	mov    0x8(%ebp),%eax
   120c8:	8b 50 04             	mov    0x4(%eax),%edx
   120cb:	8b 45 08             	mov    0x8(%ebp),%eax
   120ce:	89 10                	mov    %edx,(%eax)
   120d0:	eb 15                	jmp    120e7 <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   120d2:	8b 45 08             	mov    0x8(%ebp),%eax
   120d5:	8b 40 04             	mov    0x4(%eax),%eax
   120d8:	8b 55 0c             	mov    0xc(%ebp),%edx
   120db:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   120de:	8b 45 08             	mov    0x8(%ebp),%eax
   120e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   120e4:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   120e7:	8b 45 08             	mov    0x8(%ebp),%eax
   120ea:	8b 40 08             	mov    0x8(%eax),%eax
   120ed:	8d 50 01             	lea    0x1(%eax),%edx
   120f0:	8b 45 08             	mov    0x8(%ebp),%eax
   120f3:	89 50 08             	mov    %edx,0x8(%eax)
}
   120f6:	90                   	nop
   120f7:	c9                   	leave  
   120f8:	c3                   	ret    

000120f9 <list_remove_first>:
 * @brief        : 移除链表的头结点
 * @param         {list_t} *list: 待移除结点的链表的指针
 * @return        {list_node_t*}: 被移除的结点的指针
 **/
list_node_t *list_remove_first(list_t *list)
{
   120f9:	55                   	push   %ebp
   120fa:	89 e5                	mov    %esp,%ebp
   120fc:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list))
   120ff:	ff 75 08             	pushl  0x8(%ebp)
   12102:	e8 f6 fe ff ff       	call   11ffd <list_is_empty>
   12107:	83 c4 04             	add    $0x4,%esp
   1210a:	85 c0                	test   %eax,%eax
   1210c:	74 07                	je     12115 <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   1210e:	b8 00 00 00 00       	mov    $0x0,%eax
   12113:	eb 5b                	jmp    12170 <list_remove_first+0x77>
    }

    list_node_t *remove_node = list->first;
   12115:	8b 45 08             	mov    0x8(%ebp),%eax
   12118:	8b 00                	mov    (%eax),%eax
   1211a:	89 45 fc             	mov    %eax,-0x4(%ebp)

    list->first = remove_node->next;
   1211d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12120:	8b 50 04             	mov    0x4(%eax),%edx
   12123:	8b 45 08             	mov    0x8(%ebp),%eax
   12126:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t *)0)
   12128:	8b 45 08             	mov    0x8(%ebp),%eax
   1212b:	8b 00                	mov    (%eax),%eax
   1212d:	85 c0                	test   %eax,%eax
   1212f:	75 0c                	jne    1213d <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   12131:	8b 45 08             	mov    0x8(%ebp),%eax
   12134:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1213b:	eb 0c                	jmp    12149 <list_remove_first+0x50>
    }
    else
    {
        remove_node->next->pre = (list_node_t *)0;
   1213d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12140:	8b 40 04             	mov    0x4(%eax),%eax
   12143:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        // list->first->pre = (list_node_t *) 0;
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   12149:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1214c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12153:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12156:	8b 50 04             	mov    0x4(%eax),%edx
   12159:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1215c:	89 10                	mov    %edx,(%eax)
    list->count--;
   1215e:	8b 45 08             	mov    0x8(%ebp),%eax
   12161:	8b 40 08             	mov    0x8(%eax),%eax
   12164:	8d 50 ff             	lea    -0x1(%eax),%edx
   12167:	8b 45 08             	mov    0x8(%ebp),%eax
   1216a:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1216d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12170:	c9                   	leave  
   12171:	c3                   	ret    

00012172 <list_remove>:
 * @param         {list_t} *list: 待移除结点的链表的指针
 * @param         {list_node_t} *node: 需要移除的结点的指针
 * @return        {list_node_t*}: 被移除的结点的指针
**/
list_node_t *list_remove(list_t *list, list_node_t *node)
{
   12172:	55                   	push   %ebp
   12173:	89 e5                	mov    %esp,%ebp
    if (node == list->first)
   12175:	8b 45 08             	mov    0x8(%ebp),%eax
   12178:	8b 00                	mov    (%eax),%eax
   1217a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1217d:	75 0b                	jne    1218a <list_remove+0x18>
    {
        list->first = node->next;
   1217f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12182:	8b 50 04             	mov    0x4(%eax),%edx
   12185:	8b 45 08             	mov    0x8(%ebp),%eax
   12188:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last)
   1218a:	8b 45 08             	mov    0x8(%ebp),%eax
   1218d:	8b 40 04             	mov    0x4(%eax),%eax
   12190:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12193:	75 0b                	jne    121a0 <list_remove+0x2e>
    {
        list->last = node->pre;
   12195:	8b 45 0c             	mov    0xc(%ebp),%eax
   12198:	8b 10                	mov    (%eax),%edx
   1219a:	8b 45 08             	mov    0x8(%ebp),%eax
   1219d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre)
   121a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   121a3:	8b 00                	mov    (%eax),%eax
   121a5:	85 c0                	test   %eax,%eax
   121a7:	74 0e                	je     121b7 <list_remove+0x45>
    {
        node->pre->next = node->next;
   121a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ac:	8b 00                	mov    (%eax),%eax
   121ae:	8b 55 0c             	mov    0xc(%ebp),%edx
   121b1:	8b 52 04             	mov    0x4(%edx),%edx
   121b4:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next)
   121b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ba:	8b 40 04             	mov    0x4(%eax),%eax
   121bd:	85 c0                	test   %eax,%eax
   121bf:	74 0d                	je     121ce <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   121c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   121c4:	8b 40 04             	mov    0x4(%eax),%eax
   121c7:	8b 55 0c             	mov    0xc(%ebp),%edx
   121ca:	8b 12                	mov    (%edx),%edx
   121cc:	89 10                	mov    %edx,(%eax)
    }
    node->pre = node->next = (list_node_t *)0;
   121ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   121d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   121d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   121db:	8b 50 04             	mov    0x4(%eax),%edx
   121de:	8b 45 0c             	mov    0xc(%ebp),%eax
   121e1:	89 10                	mov    %edx,(%eax)

    list->count--;
   121e3:	8b 45 08             	mov    0x8(%ebp),%eax
   121e6:	8b 40 08             	mov    0x8(%eax),%eax
   121e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   121ec:	8b 45 08             	mov    0x8(%ebp),%eax
   121ef:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   121f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   121f5:	5d                   	pop    %ebp
   121f6:	c3                   	ret    

000121f7 <inb>:
{
   121f7:	55                   	push   %ebp
   121f8:	89 e5                	mov    %esp,%ebp
   121fa:	83 ec 14             	sub    $0x14,%esp
   121fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12200:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   12204:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12208:	89 c2                	mov    %eax,%edx
   1220a:	ec                   	in     (%dx),%al
   1220b:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1220e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12212:	c9                   	leave  
   12213:	c3                   	ret    

00012214 <outb>:
{
   12214:	55                   	push   %ebp
   12215:	89 e5                	mov    %esp,%ebp
   12217:	83 ec 08             	sub    $0x8,%esp
   1221a:	8b 55 08             	mov    0x8(%ebp),%edx
   1221d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12220:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12224:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   12227:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1222b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1222f:	ee                   	out    %al,(%dx)
}
   12230:	90                   	nop
   12231:	c9                   	leave  
   12232:	c3                   	ret    

00012233 <log_init>:
/**
 * @brief        : 日志输出初始化函数，对相应寄存器进行设置
 * @return        {*}
 **/
void log_init(void)
{
   12233:	55                   	push   %ebp
   12234:	89 e5                	mov    %esp,%ebp
   12236:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12239:	83 ec 0c             	sub    $0xc,%esp
   1223c:	68 e0 58 01 00       	push   $0x158e0
   12241:	e8 a8 f5 ff ff       	call   117ee <mutex_init>
   12246:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00); // 中断相关
   12249:	83 ec 08             	sub    $0x8,%esp
   1224c:	6a 00                	push   $0x0
   1224e:	68 f9 03 00 00       	push   $0x3f9
   12253:	e8 bc ff ff ff       	call   12214 <outb>
   12258:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80); // 发送速度
   1225b:	83 ec 08             	sub    $0x8,%esp
   1225e:	68 80 00 00 00       	push   $0x80
   12263:	68 fb 03 00 00       	push   $0x3fb
   12268:	e8 a7 ff ff ff       	call   12214 <outb>
   1226d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   12270:	83 ec 08             	sub    $0x8,%esp
   12273:	6a 03                	push   $0x3
   12275:	68 f8 03 00 00       	push   $0x3f8
   1227a:	e8 95 ff ff ff       	call   12214 <outb>
   1227f:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12282:	83 ec 08             	sub    $0x8,%esp
   12285:	6a 00                	push   $0x0
   12287:	68 f9 03 00 00       	push   $0x3f9
   1228c:	e8 83 ff ff ff       	call   12214 <outb>
   12291:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12294:	83 ec 08             	sub    $0x8,%esp
   12297:	6a 03                	push   $0x3
   12299:	68 fb 03 00 00       	push   $0x3fb
   1229e:	e8 71 ff ff ff       	call   12214 <outb>
   122a3:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xC7);
   122a6:	83 ec 08             	sub    $0x8,%esp
   122a9:	68 c7 00 00 00       	push   $0xc7
   122ae:	68 fa 03 00 00       	push   $0x3fa
   122b3:	e8 5c ff ff ff       	call   12214 <outb>
   122b8:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0F);
   122bb:	83 ec 08             	sub    $0x8,%esp
   122be:	6a 0f                	push   $0xf
   122c0:	68 fc 03 00 00       	push   $0x3fc
   122c5:	e8 4a ff ff ff       	call   12214 <outb>
   122ca:	83 c4 10             	add    $0x10,%esp
}
   122cd:	90                   	nop
   122ce:	c9                   	leave  
   122cf:	c3                   	ret    

000122d0 <log_printf>:
 * @brief        : 实现打印的功能(类似printf)
 * @param         {char} *fmt: 格式化字符串
 * @return        {*}
 **/
void log_printf(const char *fmt, ...)
{
   122d0:	55                   	push   %ebp
   122d1:	89 e5                	mov    %esp,%ebp
   122d3:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;                                  // 可变参数存储变量
    kernel_memset(str_buf, '\0', sizeof(str_buf)); // 清空缓冲区
   122d9:	83 ec 04             	sub    $0x4,%esp
   122dc:	68 80 00 00 00       	push   $0x80
   122e1:	6a 00                	push   $0x0
   122e3:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   122e9:	50                   	push   %eax
   122ea:	e8 76 f9 ff ff       	call   11c65 <kernel_memset>
   122ef:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);                           // 将fmt后的可变参数存储到args中
   122f2:	8d 45 0c             	lea    0xc(%ebp),%eax
   122f5:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);           // 将可变参数放入缓冲区
   122fb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12301:	83 ec 04             	sub    $0x4,%esp
   12304:	50                   	push   %eax
   12305:	ff 75 08             	pushl  0x8(%ebp)
   12308:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1230e:	50                   	push   %eax
   1230f:	e8 68 fb ff ff       	call   11e7c <kernel_vsprintf>
   12314:	83 c4 10             	add    $0x10,%esp
    va_end(args);
    // irq_state_t state = irq_enter_protection(); // 进入临界区
    mutex_lock(&mutex);
   12317:	83 ec 0c             	sub    $0xc,%esp
   1231a:	68 e0 58 01 00       	push   $0x158e0
   1231f:	e8 f6 f4 ff ff       	call   1181a <mutex_lock>
   12324:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   12327:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1232d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12330:	eb 3b                	jmp    1236d <log_printf+0x9d>
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) // 正在忙则等待
   12332:	90                   	nop
   12333:	83 ec 0c             	sub    $0xc,%esp
   12336:	68 fd 03 00 00       	push   $0x3fd
   1233b:	e8 b7 fe ff ff       	call   121f7 <inb>
   12340:	83 c4 10             	add    $0x10,%esp
   12343:	0f b6 c0             	movzbl %al,%eax
   12346:	83 e0 40             	and    $0x40,%eax
   12349:	85 c0                	test   %eax,%eax
   1234b:	74 e6                	je     12333 <log_printf+0x63>
            ;
        outb(COM1_PORT, *p++); // 发送数据
   1234d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12350:	8d 50 01             	lea    0x1(%eax),%edx
   12353:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12356:	0f b6 00             	movzbl (%eax),%eax
   12359:	0f b6 c0             	movzbl %al,%eax
   1235c:	83 ec 08             	sub    $0x8,%esp
   1235f:	50                   	push   %eax
   12360:	68 f8 03 00 00       	push   $0x3f8
   12365:	e8 aa fe ff ff       	call   12214 <outb>
   1236a:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   1236d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12370:	0f b6 00             	movzbl (%eax),%eax
   12373:	84 c0                	test   %al,%al
   12375:	75 bb                	jne    12332 <log_printf+0x62>
    }
    outb(COM1_PORT, '\r');
   12377:	83 ec 08             	sub    $0x8,%esp
   1237a:	6a 0d                	push   $0xd
   1237c:	68 f8 03 00 00       	push   $0x3f8
   12381:	e8 8e fe ff ff       	call   12214 <outb>
   12386:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12389:	83 ec 08             	sub    $0x8,%esp
   1238c:	6a 0a                	push   $0xa
   1238e:	68 f8 03 00 00       	push   $0x3f8
   12393:	e8 7c fe ff ff       	call   12214 <outb>
   12398:	83 c4 10             	add    $0x10,%esp
    // irq_leave_protection(state); // 退出临界区
    mutex_unlock(&mutex);
   1239b:	83 ec 0c             	sub    $0xc,%esp
   1239e:	68 e0 58 01 00       	push   $0x158e0
   123a3:	e8 02 f5 ff ff       	call   118aa <mutex_unlock>
   123a8:	83 c4 10             	add    $0x10,%esp
}
   123ab:	90                   	nop
   123ac:	c9                   	leave  
   123ad:	c3                   	ret    
