
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000287 memsz 0x00002eb0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000015  00010272  00010272  00001272  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00002c10  000102a0  000102a0  00001287  2**5
                  ALLOC
  3 .debug_line   000003ec  00000000  00000000  00001287  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005e0  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000032c  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000080  00000000  00000000  00001f80  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000033f  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000011  00000000  00000000  0000233f  2**0
                  CONTENTS, READONLY
  9 .debug_frame  0000018c  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00010272 l    d  .rodata	00000000 .rodata
000102a0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
0001003f l     F .text	00000028 lgdt
000102a0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000101ac l     F .text	00000028 lidt
00010aa0 l     O .bss	00000400 idt_table
000101d4 l     F .text	00000005 do_default_handler
00000000 l    df *ABS*	00000000 init.c
00010ea0 l     O .bss	00000004 init_boot_info
000101a1 g     F .text	0000000b cpu_init
0001025a g     F .text	00000018 init_main
0001002b g       .text	00000000 exception_handler_unknown
00010eb0 g     O .bss	00002000 stack
0001023f g     F .text	0000001b kernel_init
00010000 g       .text	00000000 _start
00010134 g     F .text	0000006d init_gdt
000101d9 g     F .text	00000013 do_handler_unknown
000101ec g     F .text	00000053 irq_init
00010067 g     F .text	00000086 segment_desc_set
000100ed g     F .text	00000047 gate_desc_set



Disassembly of section .text:

00010000 <_start>:
    .extern init_main
    .extern kernel_init
    // void start(boot_info_t * boot_info)

_start:
    push %ebp # 保存返回地址
   10000:	55                   	push   %ebp
    mov %esp, %ebp # 使ebp指向栈底
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp),%eax # 将boot_info 传递给 eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    # mov 4(%esp),%eax

    # kernel_init(boot_info)
    push %eax // boot_info 压栈
   10006:	50                   	push   %eax

    call kernel_init // 调用C函数
   10007:	e8 33 02 00 00       	call   1023f <kernel_init>
    
    // 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc b0 2e 01 00       	mov    $0x12eb0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 2f 02 00 00       	jmp    1025a <init_main>

0001002b <exception_handler_unknown>:
    .global exception_handler_unknown

exception_handler_unknown:
    
    # 保护现场
    pusha 
   1002b:	60                   	pusha  
    push %ds
   1002c:	1e                   	push   %ds
    push %es
   1002d:	06                   	push   %es
    push %fs
   1002e:	0f a0                	push   %fs
    push %gs
   10030:	0f a8                	push   %gs

    call do_handler_unknown
   10032:	e8 a2 01 00 00       	call   101d9 <do_handler_unknown>

    # 恢复现场
    pop %gs
   10037:	0f a9                	pop    %gs
    pop %fs
   10039:	0f a1                	pop    %fs
    pop %es
   1003b:	07                   	pop    %es
    pop %ds
   1003c:	1f                   	pop    %ds
    popa
   1003d:	61                   	popa   
   1003e:	cf                   	iret   

0001003f <lgdt>:
 * @param         {uint32_t} start: 起始地址
 * @param         {uint32_t} size: 大小
 * @return        {*}
 **/
static inline void lgdt(uint32_t start, uint32_t size)
{
   1003f:	55                   	push   %ebp
   10040:	89 e5                	mov    %esp,%ebp
   10042:	83 ec 10             	sub    $0x10,%esp
    {
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } gdt;
    gdt.start31_16 = start >> 16;   // 获取高16位
   10045:	8b 45 08             	mov    0x8(%ebp),%eax
   10048:	c1 e8 10             	shr    $0x10,%eax
   1004b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF; // 获取低16位
   1004f:	8b 45 08             	mov    0x8(%ebp),%eax
   10052:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;           // 大小
   10056:	8b 45 0c             	mov    0xc(%ebp),%eax
   10059:	83 e8 01             	sub    $0x1,%eax
   1005c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   10060:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10064:	90                   	nop
   10065:	c9                   	leave  
   10066:	c3                   	ret    

00010067 <segment_desc_set>:
 * @param         {uint32_t} limit: 界限 20位
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10067:	55                   	push   %ebp
   10068:	89 e5                	mov    %esp,%ebp
   1006a:	83 ec 14             	sub    $0x14,%esp
   1006d:	8b 45 14             	mov    0x14(%ebp),%eax
   10070:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10074:	8b 45 08             	mov    0x8(%ebp),%eax
   10077:	c1 f8 03             	sar    $0x3,%eax
   1007a:	c1 e0 03             	shl    $0x3,%eax
   1007d:	05 a0 02 01 00       	add    $0x102a0,%eax
   10082:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    if (limit > 0xfffff)
   10085:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1008c:	76 0f                	jbe    1009d <segment_desc_set+0x36>
    {
        attr |= 0x8000;
   1008e:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10094:	8b 45 10             	mov    0x10(%ebp),%eax
   10097:	c1 e8 0c             	shr    $0xc,%eax
   1009a:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xffff;
   1009d:	8b 45 10             	mov    0x10(%ebp),%eax
   100a0:	89 c2                	mov    %eax,%edx
   100a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100a5:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xffff;
   100a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   100ab:	89 c2                	mov    %eax,%edx
   100ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100b0:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xff;
   100b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   100b7:	c1 e8 10             	shr    $0x10,%eax
   100ba:	89 c2                	mov    %eax,%edx
   100bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100bf:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   100c2:	8b 45 10             	mov    0x10(%ebp),%eax
   100c5:	c1 e8 10             	shr    $0x10,%eax
   100c8:	c1 e0 08             	shl    $0x8,%eax
   100cb:	66 25 00 0f          	and    $0xf00,%ax
   100cf:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   100d3:	89 c2                	mov    %eax,%edx
   100d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100d8:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xff;
   100dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   100df:	c1 e8 18             	shr    $0x18,%eax
   100e2:	89 c2                	mov    %eax,%edx
   100e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100e7:	88 50 07             	mov    %dl,0x7(%eax)
}
   100ea:	90                   	nop
   100eb:	c9                   	leave  
   100ec:	c3                   	ret    

000100ed <gate_desc_set>:
 * @param         {uint32_t} offset: 地址偏移量
 * @param         {uint16_t} attr: 属性
 * @return        {*}
**/
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   100ed:	55                   	push   %ebp
   100ee:	89 e5                	mov    %esp,%ebp
   100f0:	83 ec 08             	sub    $0x8,%esp
   100f3:	8b 55 0c             	mov    0xc(%ebp),%edx
   100f6:	8b 45 14             	mov    0x14(%ebp),%eax
   100f9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   100fd:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10101:	8b 45 10             	mov    0x10(%ebp),%eax
   10104:	89 c2                	mov    %eax,%edx
   10106:	8b 45 08             	mov    0x8(%ebp),%eax
   10109:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1010c:	8b 45 08             	mov    0x8(%ebp),%eax
   1010f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10113:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10117:	8b 45 08             	mov    0x8(%ebp),%eax
   1011a:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1011e:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10122:	8b 45 10             	mov    0x10(%ebp),%eax
   10125:	c1 e8 10             	shr    $0x10,%eax
   10128:	89 c2                	mov    %eax,%edx
   1012a:	8b 45 08             	mov    0x8(%ebp),%eax
   1012d:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10131:	90                   	nop
   10132:	c9                   	leave  
   10133:	c3                   	ret    

00010134 <init_gdt>:
/**
 * @brief        : gdt表初始化
 * @return        {*}
 **/
void init_gdt(void)
{
   10134:	55                   	push   %ebp
   10135:	89 e5                	mov    %esp,%ebp
   10137:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1013a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10141:	eb 19                	jmp    1015c <init_gdt+0x28>
    {
        segment_desc_set(i << 3, 0, 0, 0);
   10143:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10146:	c1 e0 03             	shl    $0x3,%eax
   10149:	6a 00                	push   $0x0
   1014b:	6a 00                	push   $0x0
   1014d:	6a 00                	push   $0x0
   1014f:	50                   	push   %eax
   10150:	e8 12 ff ff ff       	call   10067 <segment_desc_set>
   10155:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10158:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1015c:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10163:	7e de                	jle    10143 <init_gdt+0xf>
    }

    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10165:	68 92 c0 00 00       	push   $0xc092
   1016a:	6a ff                	push   $0xffffffff
   1016c:	6a 00                	push   $0x0
   1016e:	6a 10                	push   $0x10
   10170:	e8 f2 fe ff ff       	call   10067 <segment_desc_set>
   10175:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYE_RW | SEG_D | SEG_G);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10178:	68 9a c0 00 00       	push   $0xc09a
   1017d:	6a ff                	push   $0xffffffff
   1017f:	6a 00                	push   $0x0
   10181:	6a 08                	push   $0x8
   10183:	e8 df fe ff ff       	call   10067 <segment_desc_set>
   10188:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYE_RW | SEG_D | SEG_G);
    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1018b:	b8 a0 02 01 00       	mov    $0x102a0,%eax
   10190:	68 00 08 00 00       	push   $0x800
   10195:	50                   	push   %eax
   10196:	e8 a4 fe ff ff       	call   1003f <lgdt>
   1019b:	83 c4 08             	add    $0x8,%esp
}
   1019e:	90                   	nop
   1019f:	c9                   	leave  
   101a0:	c3                   	ret    

000101a1 <cpu_init>:
/**
 * @brief        : cpu初始化
 * @return        {*}
 **/
void cpu_init(void)
{
   101a1:	55                   	push   %ebp
   101a2:	89 e5                	mov    %esp,%ebp
    init_gdt(); // gdt表初始化
   101a4:	e8 8b ff ff ff       	call   10134 <init_gdt>
   101a9:	90                   	nop
   101aa:	5d                   	pop    %ebp
   101ab:	c3                   	ret    

000101ac <lidt>:
 * @param         {uint32_t} start: 起始地址
 * @param         {uint32_t} size: 大小
 * @return        {*}
**/
static inline void lidt(uint32_t start, uint32_t size)
{
   101ac:	55                   	push   %ebp
   101ad:	89 e5                	mov    %esp,%ebp
   101af:	83 ec 10             	sub    $0x10,%esp
    {
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } idt;
    idt.start31_16 = start >> 16;   // 获取高16位
   101b2:	8b 45 08             	mov    0x8(%ebp),%eax
   101b5:	c1 e8 10             	shr    $0x10,%eax
   101b8:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF; // 获取低16位
   101bc:	8b 45 08             	mov    0x8(%ebp),%eax
   101bf:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;           // 大小
   101c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   101c6:	83 e8 01             	sub    $0x1,%eax
   101c9:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   101cd:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   101d1:	90                   	nop
   101d2:	c9                   	leave  
   101d3:	c3                   	ret    

000101d4 <do_default_handler>:

void exception_handler_unknown(void);       // 中断处理函数
static gate_desc_t idt_table[IDT_TABLE_NR]; // IDT表

static void do_default_handler(const char *msg)
{
   101d4:	55                   	push   %ebp
   101d5:	89 e5                	mov    %esp,%ebp
    for (;;)
   101d7:	eb fe                	jmp    101d7 <do_default_handler+0x3>

000101d9 <do_handler_unknown>:
    {
    }
}

void do_handler_unknown(void)
{
   101d9:	55                   	push   %ebp
   101da:	89 e5                	mov    %esp,%ebp
    do_default_handler("unknown exception!!!");
   101dc:	68 72 02 01 00       	push   $0x10272
   101e1:	e8 ee ff ff ff       	call   101d4 <do_default_handler>
   101e6:	83 c4 04             	add    $0x4,%esp
}
   101e9:	90                   	nop
   101ea:	c9                   	leave  
   101eb:	c3                   	ret    

000101ec <irq_init>:
/**
 * @brief        : 中断初始化,初始化中断向量表
 * @return        {*}
 **/
void irq_init(void)
{
   101ec:	55                   	push   %ebp
   101ed:	89 e5                	mov    %esp,%ebp
   101ef:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   101f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   101f9:	eb 25                	jmp    10220 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   101fb:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10200:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10203:	c1 e0 03             	shl    $0x3,%eax
   10206:	05 a0 0a 01 00       	add    $0x10aa0,%eax
   1020b:	68 00 8e 00 00       	push   $0x8e00
   10210:	52                   	push   %edx
   10211:	6a 08                	push   $0x8
   10213:	50                   	push   %eax
   10214:	e8 d4 fe ff ff       	call   100ed <gate_desc_set>
   10219:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   1021c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10220:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10224:	7e d5                	jle    101fb <irq_init+0xf>
                      GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
    }
    lidt((uint32_t)idt_table, sizeof(idt_table));
   10226:	b8 a0 0a 01 00       	mov    $0x10aa0,%eax
   1022b:	83 ec 08             	sub    $0x8,%esp
   1022e:	68 00 04 00 00       	push   $0x400
   10233:	50                   	push   %eax
   10234:	e8 73 ff ff ff       	call   101ac <lidt>
   10239:	83 c4 10             	add    $0x10,%esp
   1023c:	90                   	nop
   1023d:	c9                   	leave  
   1023e:	c3                   	ret    

0001023f <kernel_init>:
 * @brief        : 内核初始化
 * @param         {boot_info_t} *boot_info: 启动信息
 * @return        {*}
 **/
void kernel_init(boot_info_t *boot_info)
{
   1023f:	55                   	push   %ebp
   10240:	89 e5                	mov    %esp,%ebp
   10242:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   10245:	8b 45 08             	mov    0x8(%ebp),%eax
   10248:	a3 a0 0e 01 00       	mov    %eax,0x10ea0
    cpu_init();
   1024d:	e8 4f ff ff ff       	call   101a1 <cpu_init>
    irq_init();
   10252:	e8 95 ff ff ff       	call   101ec <irq_init>
}
   10257:	90                   	nop
   10258:	c9                   	leave  
   10259:	c3                   	ret    

0001025a <init_main>:

void init_main()
{
   1025a:	55                   	push   %ebp
   1025b:	89 e5                	mov    %esp,%ebp
   1025d:	83 ec 10             	sub    $0x10,%esp
    int a = 3 / 0;
   10260:	b8 03 00 00 00       	mov    $0x3,%eax
   10265:	b9 00 00 00 00       	mov    $0x0,%ecx
   1026a:	99                   	cltd   
   1026b:	f7 f9                	idiv   %ecx
   1026d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (;;)
   10270:	eb fe                	jmp    10270 <init_main+0x16>
