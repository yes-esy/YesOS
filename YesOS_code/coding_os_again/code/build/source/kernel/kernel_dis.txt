
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000025a4 memsz 0x00007580 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002074  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00012074  00012074  00003074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .rodata       0000052c  00012078  00012078  00003078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00004fc0  000125c0  000125c0  000035a4  2**5
                  ALLOC
  4 .debug_line   0000102b  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002449  00000000  00000000  000045cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b87  00000000  00000000  00006a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  000075a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000c3a  00000000  00000000  000076c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  000082fa  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000db8  00000000  00000000  0000830c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012074 l    d  .data	00000000 .data
00012078 l    d  .rodata	00000000 .rodata
000125c0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102da l     F .text	0000001b list_node_init
000102f5 l     F .text	0000000b list_node_next
00010300 l     F .text	0000000a list_first
0001030a l     F .text	0000000b list_count
00010315 l     F .text	00000007 hlt
0001031c l     F .text	00000017 write_tr
000125c0 l     O .bss	000001c0 task_manager
0001049b l     F .text	00000117 tss_init
00012110 l     O .rodata	0000000a __func__.2111
00012780 l     O .bss	00001000 idle_task_stack
000106b2 l     F .text	0000001d idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010908 l     F .text	00000028 lgdt
00010930 l     F .text	0000001a far_jump
00013780 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
00010b0b l     F .text	00000007 cli
00010b12 l     F .text	00000007 sti
00010b19 l     F .text	0000001d inb
00010b36 l     F .text	0000001f outb
00010b55 l     F .text	00000028 lidt
00010b7d l     F .text	00000007 hlt
00010b84 l     F .text	00000010 read_eflags
00010b94 l     F .text	0000000b write_eflags
00013f80 l     O .bss	00000400 idt_table
00010b9f l     F .text	000000d9 dump_core_regs
00010c78 l     F .text	0000003e do_default_handler
00010f02 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
000112f9 l     F .text	0000001f outb
00014380 l     O .bss	00000004 sys_tick
00011340 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000113b8 l     F .text	0000000a list_first
000113c2 l     F .text	0000000b list_last
000113cd l     F .text	0000000b list_count
000143a0 l     O .bss	00000004 init_boot_info
000143c0 l     O .bss	000000cc init_task
000144a0 l     O .bss	000000cc first_task
00014580 l     O .bss	00001000 first_task_stack
00000000 l    df *ABS*	00000000 klib.c
000117a0 l     F .text	00000007 hlt
00012074 l     O .data	00000004 num2ch.1907
00000000 l    df *ABS*	00000000 list.c
00011cf5 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00011eef l     F .text	0000001d inb
00011f0c l     F .text	0000001f outb
0001190e g     F .text	0000004f kernel_memcpy
00010376 g     F .text	0000000a task_current
000112c5 g     F .text	0000000b irq_enable_global
00011d8d g     F .text	00000064 list_insert_last
00010dea g     F .text	0000001c do_handler_segment_not_present
000103db g     F .text	00000034 task_set_ready
0001195d g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
00010b00 g     F .text	0000000b cpu_init
00011f2b g     F .text	00000075 log_init
0001171a g     F .text	00000086 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
000117a7 g     F .text	0000003b kernel_strcpy
000111a8 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00010d42 g     F .text	0000001c do_handler_overflow
00010e76 g     F .text	0000001c do_handler_alignment_check
000101b6 g       .text	00000000 exception_handler_general_protection
00010e22 g     F .text	0000001c do_handler_general_protection
00010ee6 g     F .text	0000001c do_handler_control_exception
00010cd2 g     F .text	0000001c do_handler_divider
00010db2 g     F .text	0000001c do_handler_double_fault
00010e3e g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
00010f95 g     F .text	0000002b pic_send_eoi
00010779 g     F .text	0000000a task_first_task
00011318 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00011402 g     F .text	00000039 first_task_entry
00010eca g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102c5 g       .text	00000000 simple_switch
00015580 g     O .bss	00002000 stack
000108b1 g     F .text	00000057 sys_sleep
0001143b g     F .text	000002df list_test
00010289 g       .text	00000000 exception_handler_control_exception
00010783 g     F .text	000000d4 task_time_ticks
000100e5 g       .text	00000000 exception_handler_bound_range
00010d7a g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
00010e5a g     F .text	0000001c do_handler_fpu_error
0001073c g     F .text	0000003d task_first_init
00010e92 g     F .text	0000001c do_handler_machine_check
00010cee g     F .text	0000001c do_handler_Debug
00011d2d g     F .text	00000060 list_insert_first
00010891 g     F .text	00000020 task_set_wakeup
00010d0a g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
000117e2 g     F .text	00000070 kernel_strncpy
000112ba g     F .text	0000000b irq_disable_global
0001040f g     F .text	00000061 sys_sched_yield
000113d8 g     F .text	0000002a kernel_init
00010000 g       .text	00000000 _start
00011b74 g     F .text	0000014b kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
0001022c g       .text	00000000 exception_handler_machine_check
00010dce g     F .text	0000001c do_handler_invalid_tss
00010857 g     F .text	0000003a task_set_sleep
000102a6 g       .text	00000000 exception_handler_timer
0001116e g     F .text	0000003a irq_install
00010a80 g     F .text	0000006d init_gdt
000112d0 g     F .text	00000018 irq_enter_protection
00011233 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
00010d96 g     F .text	0000001c do_handler_device_unavailable
00010380 g     F .text	0000005b task_dispatch
00010aed g     F .text	00000013 switch_to_tss
00010333 g     F .text	00000043 task_next_run
0001199e g     F .text	00000064 kernel_memcmp
00011d08 g     F .text	00000025 list_init
00010eae g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010470 g     F .text	0000002b task_set_block
00010cb6 g     F .text	0000001c do_handler_unknown
000101f0 g       .text	00000000 exception_handler_fpu_error
00010694 g     F .text	0000001e task_switch_from_to
00010fc0 g     F .text	000001ae irq_init
000112e8 g     F .text	00000011 irq_leave_protection
000118d3 g     F .text	0000003b kernel_strlen
0001094a g     F .text	00000086 segment_desc_set
00010d5e g     F .text	0000001c do_handler_bound_range
00011df1 g     F .text	00000079 list_remove_first
00011852 g     F .text	00000081 kernel_strncmp
0001017c g       .text	00000000 exception_handler_segment_not_present
00010088 g       .text	00000000 exception_handler_NMI
000106cf g     F .text	0000006d task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
00011cbf g     F .text	00000036 pannic
00010e06 g     F .text	0000001c do_handler_stack_segment_fault
00010d26 g     F .text	0000001c do_handler_breakpoint
00011fa0 g     F .text	000000d4 log_printf
000105b2 g     F .text	000000e2 task_init
00011a02 g     F .text	00000033 kernel_sprintf
00010a17 g     F .text	00000069 gdt_alloc_desc
00011a35 g     F .text	0000013f kernel_itoa
00011e6a g     F .text	00000085 list_remove
000109d0 g     F .text	00000047 gate_desc_set
000113a0 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern init_main
    .extern kernel_init
    # void start(boot_info_t * boot_info)

_start:
    push %ebp # 保存返回地址
   10000:	55                   	push   %ebp
    mov %esp, %ebp # 使ebp指向栈底
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp),%eax # 将boot_info 传递给 eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    # mov 4(%esp),%eax

    # kernel_init(boot_info)
    push %eax # boot_info 压栈
   10006:	50                   	push   %eax

    call kernel_init # 调用C函数
   10007:	e8 cc 13 00 00       	call   113d8 <kernel_init>
    
    # 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		# 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	# 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 80 75 01 00       	mov    $0x17580,%esp

	# 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 ef 16 00 00       	jmp    1171a <init_main>

0001002b <exception_handler_unknown>:
    add $(2*4) , %esp

    iret
.endm

exception_handler unknown            , -1    , 0 # 未知异常
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 7a 0c 00 00       	call   10cb6 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider            ,  0    , 0 # 除0异常
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 77 0c 00 00       	call   10cd2 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug              ,  0    , 0 # Debug异常
   10069:	6a 00                	push   $0x0
   1006b:	6a 00                	push   $0x0
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 74 0c 00 00       	call   10cee <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI                ,  2    , 0 #
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 71 0c 00 00       	call   10d0a <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint         ,  3    , 0 # 断点异常
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 6e 0c 00 00       	call   10d26 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow           ,  4    , 0 # 溢出
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 6b 0c 00 00       	call   10d42 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range        ,  5    , 0 # 越界
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 68 0c 00 00       	call   10d5e <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode     ,  6    , 0 # 无效操作码
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 65 0c 00 00       	call   10d7a <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable ,  7    , 0 # 设备不可用
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 62 0c 00 00       	call   10d96 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault       ,  8    , 1 #
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 61 0c 00 00       	call   10db2 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss        ,  10   , 1 # 无效TSS
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 60 0c 00 00       	call   10dce <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11   , 1 # 段不存在
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 5f 0c 00 00       	call   10dea <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12   , 1 #
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 5e 0c 00 00       	call   10e06 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection ,  13   , 1 #
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 5d 0c 00 00       	call   10e22 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault         ,  14   , 1 # 页错误
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 5c 0c 00 00       	call   10e3e <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error          ,  16   , 0 # 浮点运算单元
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 59 0c 00 00       	call   10e5a <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check    ,  17   , 1 # 对齐检查
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 58 0c 00 00       	call   10e76 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check      ,  18   , 0 #
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 55 0c 00 00       	call   10e92 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception      ,  19   , 0 #
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 52 0c 00 00       	call   10eae <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception  ,  20   , 0 #
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 4f 0c 00 00       	call   10eca <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_control_exception>:
exception_handler control_exception  ,  21   , 1 #
   10289:	6a 15                	push   $0x15
   1028b:	60                   	pusha  
   1028c:	1e                   	push   %ds
   1028d:	06                   	push   %es
   1028e:	0f a0                	push   %fs
   10290:	0f a8                	push   %gs
   10292:	54                   	push   %esp
   10293:	e8 4e 0c 00 00       	call   10ee6 <do_handler_control_exception>
   10298:	83 c4 04             	add    $0x4,%esp
   1029b:	0f a9                	pop    %gs
   1029d:	0f a1                	pop    %fs
   1029f:	07                   	pop    %es
   102a0:	1f                   	pop    %ds
   102a1:	61                   	popa   
   102a2:	83 c4 08             	add    $0x8,%esp
   102a5:	cf                   	iret   

000102a6 <exception_handler_timer>:
exception_handler timer              ,  0x20 , 0 #
   102a6:	6a 00                	push   $0x0
   102a8:	6a 20                	push   $0x20
   102aa:	60                   	pusha  
   102ab:	1e                   	push   %ds
   102ac:	06                   	push   %es
   102ad:	0f a0                	push   %fs
   102af:	0f a8                	push   %gs
   102b1:	54                   	push   %esp
   102b2:	e8 61 10 00 00       	call   11318 <do_handler_timer>
   102b7:	83 c4 04             	add    $0x4,%esp
   102ba:	0f a9                	pop    %gs
   102bc:	0f a1                	pop    %fs
   102be:	07                   	pop    %es
   102bf:	1f                   	pop    %ds
   102c0:	61                   	popa   
   102c1:	83 c4 08             	add    $0x8,%esp
   102c4:	cf                   	iret   

000102c5 <simple_switch>:

    .text
    .global simple_switch
    # simple_switch(&from,&to)
simple_switch:
    mov 4(%esp),%eax  # 取from->stack 
   102c5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp),%edx  # 取to->stack
   102c9:	8b 54 24 08          	mov    0x8(%esp),%edx

    # 压栈,保存当前任务的状态
    push %ebp
   102cd:	55                   	push   %ebp
    push %ebx
   102ce:	53                   	push   %ebx
    push %esi
   102cf:	56                   	push   %esi
    push %edi
   102d0:	57                   	push   %edi

    # 切换当前栈
    mov %esp,(%eax)  # from->stack = esp
   102d1:	89 20                	mov    %esp,(%eax)
    mov %edx , %esp  # esp = to->stack
   102d3:	89 d4                	mov    %edx,%esp
    
    # 加载下一任务的栈
    pop %edi
   102d5:	5f                   	pop    %edi
    pop %esi
   102d6:	5e                   	pop    %esi
    pop %ebx
   102d7:	5b                   	pop    %ebx
    pop %ebp
   102d8:	5d                   	pop    %ebp

   102d9:	c3                   	ret    

000102da <list_node_init>:
 * @brief        : 链表节点初始化;
 * @param         {list_node_t *} node: 需要初始化的节点
 * @return        {*}
 **/
static inline void list_node_init(list_node_t *node)
{
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   102dd:	8b 45 08             	mov    0x8(%ebp),%eax
   102e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   102e7:	8b 45 08             	mov    0x8(%ebp),%eax
   102ea:	8b 50 04             	mov    0x4(%eax),%edx
   102ed:	8b 45 08             	mov    0x8(%ebp),%eax
   102f0:	89 10                	mov    %edx,(%eax)
}
   102f2:	90                   	nop
   102f3:	5d                   	pop    %ebp
   102f4:	c3                   	ret    

000102f5 <list_node_next>:
 * @brief        : 链表的后继节点
 * @param         {list_node_t *} node: 当前节点
 * @return        {list_node_t *} 当前节点的后继节点
 **/
static inline list_node_t *list_node_next(list_node_t *node)
{
   102f5:	55                   	push   %ebp
   102f6:	89 e5                	mov    %esp,%ebp
    return node->next;
   102f8:	8b 45 08             	mov    0x8(%ebp),%eax
   102fb:	8b 40 04             	mov    0x4(%eax),%eax
}
   102fe:	5d                   	pop    %ebp
   102ff:	c3                   	ret    

00010300 <list_first>:
 * @brief        : 返回链表的头结点
 * @param         {list_t} *list: 链表
 * @return        {list_node_t*}: 链表的头结点
 **/
static inline list_node_t *list_first(list_t *list)
{
   10300:	55                   	push   %ebp
   10301:	89 e5                	mov    %esp,%ebp
    return list->first;
   10303:	8b 45 08             	mov    0x8(%ebp),%eax
   10306:	8b 00                	mov    (%eax),%eax
}
   10308:	5d                   	pop    %ebp
   10309:	c3                   	ret    

0001030a <list_count>:
 * @brief        : 返回链表的结点数量
 * @param         {list_t} *list: 对应链表
 * @return        {int}: 链表数量
**/
static inline int list_count(list_t *list)
{
   1030a:	55                   	push   %ebp
   1030b:	89 e5                	mov    %esp,%ebp
    return list->count;
   1030d:	8b 45 08             	mov    0x8(%ebp),%eax
   10310:	8b 40 08             	mov    0x8(%eax),%eax
}
   10313:	5d                   	pop    %ebp
   10314:	c3                   	ret    

00010315 <hlt>:
/**
 * @brief        : 停机指令
 * @return        {*}
 **/
static inline void hlt(void)
{
   10315:	55                   	push   %ebp
   10316:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10318:	f4                   	hlt    
}
   10319:	90                   	nop
   1031a:	5d                   	pop    %ebp
   1031b:	c3                   	ret    

0001031c <write_tr>:
 * @brief        : 写task register寄存器于lgdt类似
 * @param         {uint16_t} tss_selector: 对应的tss选择子
 * @return        {*}
 **/
static inline void write_tr(uint16_t tss_selector)
{
   1031c:	55                   	push   %ebp
   1031d:	89 e5                	mov    %esp,%ebp
   1031f:	83 ec 04             	sub    $0x4,%esp
   10322:	8b 45 08             	mov    0x8(%ebp),%eax
   10325:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10329:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   1032d:	0f 00 d8             	ltr    %ax
}
   10330:	90                   	nop
   10331:	c9                   	leave  
   10332:	c3                   	ret    

00010333 <task_next_run>:
/**
 * @brief        :
 * @return        {*}
 **/
task_t *task_next_run(void)
{
   10333:	55                   	push   %ebp
   10334:	89 e5                	mov    %esp,%ebp
   10336:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   10339:	68 c0 25 01 00       	push   $0x125c0
   1033e:	e8 c7 ff ff ff       	call   1030a <list_count>
   10343:	83 c4 04             	add    $0x4,%esp
   10346:	85 c0                	test   %eax,%eax
   10348:	75 07                	jne    10351 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   1034a:	b8 b4 26 01 00       	mov    $0x126b4,%eax
   1034f:	eb 23                	jmp    10374 <task_next_run+0x41>
    }
    list_node_t *task_node = list_first(&task_manager.ready_list);
   10351:	68 c0 25 01 00       	push   $0x125c0
   10356:	e8 a5 ff ff ff       	call   10300 <list_first>
   1035b:	83 c4 04             	add    $0x4,%esp
   1035e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node); // 取出对应的队列头部进程
   10361:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   10365:	74 08                	je     1036f <task_next_run+0x3c>
   10367:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1036a:	83 e8 50             	sub    $0x50,%eax
   1036d:	eb 05                	jmp    10374 <task_next_run+0x41>
   1036f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10374:	c9                   	leave  
   10375:	c3                   	ret    

00010376 <task_current>:
/**
 * @brief        : 返回当前进程的指针
 * @return        {task_t*}
 **/
task_t *task_current(void)
{
   10376:	55                   	push   %ebp
   10377:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10379:	a1 a4 26 01 00       	mov    0x126a4,%eax
}
   1037e:	5d                   	pop    %ebp
   1037f:	c3                   	ret    

00010380 <task_dispatch>:
 * @brief        : 从队列头部取进程执行
 * @return        {*}
 * @todo         : 后续改进
 **/
void task_dispatch(void)
{
   10380:	55                   	push   %ebp
   10381:	89 e5                	mov    %esp,%ebp
   10383:	83 ec 18             	sub    $0x18,%esp
    
    irq_state_t state = irq_enter_protection();
   10386:	e8 45 0f 00 00       	call   112d0 <irq_enter_protection>
   1038b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   1038e:	e8 a0 ff ff ff       	call   10333 <task_next_run>
   10393:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) // 接下来需要运行的进程是否为当前进程
   10396:	a1 a4 26 01 00       	mov    0x126a4,%eax
   1039b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1039e:	74 2a                	je     103ca <task_dispatch+0x4a>
    {
        task_t *from = task_current();
   103a0:	e8 d1 ff ff ff       	call   10376 <task_current>
   103a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   103a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103ab:	a3 a4 26 01 00       	mov    %eax,0x126a4
        to->state = TASK_RUNNING;
   103b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   103b3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   103b9:	83 ec 08             	sub    $0x8,%esp
   103bc:	ff 75 f0             	pushl  -0x10(%ebp)
   103bf:	ff 75 ec             	pushl  -0x14(%ebp)
   103c2:	e8 cd 02 00 00       	call   10694 <task_switch_from_to>
   103c7:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   103ca:	83 ec 0c             	sub    $0xc,%esp
   103cd:	ff 75 f4             	pushl  -0xc(%ebp)
   103d0:	e8 13 0f 00 00       	call   112e8 <irq_leave_protection>
   103d5:	83 c4 10             	add    $0x10,%esp
}
   103d8:	90                   	nop
   103d9:	c9                   	leave  
   103da:	c3                   	ret    

000103db <task_set_ready>:

void task_set_ready(task_t *task)
{
   103db:	55                   	push   %ebp
   103dc:	89 e5                	mov    %esp,%ebp
   103de:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) // 非空闲进程
   103e1:	81 7d 08 b4 26 01 00 	cmpl   $0x126b4,0x8(%ebp)
   103e8:	74 22                	je     1040c <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   103ea:	8b 45 08             	mov    0x8(%ebp),%eax
   103ed:	83 c0 50             	add    $0x50,%eax
   103f0:	83 ec 08             	sub    $0x8,%esp
   103f3:	50                   	push   %eax
   103f4:	68 c0 25 01 00       	push   $0x125c0
   103f9:	e8 8f 19 00 00       	call   11d8d <list_insert_last>
   103fe:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1040a:	eb 01                	jmp    1040d <task_set_ready+0x32>
        return;
   1040c:	90                   	nop
}
   1040d:	c9                   	leave  
   1040e:	c3                   	ret    

0001040f <sys_sched_yield>:

int sys_sched_yield(void)
{
   1040f:	55                   	push   %ebp
   10410:	89 e5                	mov    %esp,%ebp
   10412:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10415:	e8 b6 0e 00 00       	call   112d0 <irq_enter_protection>
   1041a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1) // 是否有进程
   1041d:	83 ec 0c             	sub    $0xc,%esp
   10420:	68 c0 25 01 00       	push   $0x125c0
   10425:	e8 e0 fe ff ff       	call   1030a <list_count>
   1042a:	83 c4 10             	add    $0x10,%esp
   1042d:	83 f8 01             	cmp    $0x1,%eax
   10430:	7e 29                	jle    1045b <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current(); // 当前运行进程
   10432:	e8 3f ff ff ff       	call   10376 <task_current>
   10437:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task); // 阻塞当前进程
   1043a:	83 ec 0c             	sub    $0xc,%esp
   1043d:	ff 75 f0             	pushl  -0x10(%ebp)
   10440:	e8 2b 00 00 00       	call   10470 <task_set_block>
   10445:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task); // 当前进程加入就绪队列
   10448:	83 ec 0c             	sub    $0xc,%esp
   1044b:	ff 75 f0             	pushl  -0x10(%ebp)
   1044e:	e8 88 ff ff ff       	call   103db <task_set_ready>
   10453:	83 c4 10             	add    $0x10,%esp
        task_dispatch();           // 切换到队列头部的进程运行
   10456:	e8 25 ff ff ff       	call   10380 <task_dispatch>
    }

    irq_leave_protection(state);
   1045b:	83 ec 0c             	sub    $0xc,%esp
   1045e:	ff 75 f4             	pushl  -0xc(%ebp)
   10461:	e8 82 0e 00 00       	call   112e8 <irq_leave_protection>
   10466:	83 c4 10             	add    $0x10,%esp
    return 0;
   10469:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1046e:	c9                   	leave  
   1046f:	c3                   	ret    

00010470 <task_set_block>:

void task_set_block(task_t *task)
{
   10470:	55                   	push   %ebp
   10471:	89 e5                	mov    %esp,%ebp
   10473:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) // 空闲进程
   10476:	81 7d 08 b4 26 01 00 	cmpl   $0x126b4,0x8(%ebp)
   1047d:	74 19                	je     10498 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   1047f:	8b 45 08             	mov    0x8(%ebp),%eax
   10482:	83 c0 50             	add    $0x50,%eax
   10485:	83 ec 08             	sub    $0x8,%esp
   10488:	50                   	push   %eax
   10489:	68 c0 25 01 00       	push   $0x125c0
   1048e:	e8 d7 19 00 00       	call   11e6a <list_remove>
   10493:	83 c4 10             	add    $0x10,%esp
   10496:	eb 01                	jmp    10499 <task_set_block+0x29>
        return;
   10498:	90                   	nop
}
   10499:	c9                   	leave  
   1049a:	c3                   	ret    

0001049b <tss_init>:
 * @param         {uint32_t} entry: 入口地址
 * @param         {uint32_t} esp: 栈顶指针
 * @return        {int} 成功为0 ,失败为-1
 **/
static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   1049b:	55                   	push   %ebp
   1049c:	89 e5                	mov    %esp,%ebp
   1049e:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc(); // 分配一个空闲表项
   104a1:	e8 71 05 00 00       	call   10a17 <gdt_alloc_desc>
   104a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   104a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   104ad:	79 1a                	jns    104c9 <tss_init+0x2e>
    {
        log_printf("alloc tss failed!!!\n");
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	68 78 20 01 00       	push   $0x12078
   104b7:	e8 e4 1a 00 00       	call   11fa0 <log_printf>
   104bc:	83 c4 10             	add    $0x10,%esp
        return -1;
   104bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   104c4:	e9 e7 00 00 00       	jmp    105b0 <tss_init+0x115>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   104c9:	8b 45 08             	mov    0x8(%ebp),%eax
   104cc:	83 c0 60             	add    $0x60,%eax
   104cf:	68 89 00 00 00       	push   $0x89
   104d4:	6a 68                	push   $0x68
   104d6:	50                   	push   %eax
   104d7:	ff 75 f4             	pushl  -0xc(%ebp)
   104da:	e8 6b 04 00 00       	call   1094a <segment_desc_set>
   104df:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t)); // 清零 , 第一次运行无关紧要
   104e2:	8b 45 08             	mov    0x8(%ebp),%eax
   104e5:	83 c0 60             	add    $0x60,%eax
   104e8:	83 ec 04             	sub    $0x4,%esp
   104eb:	6a 68                	push   $0x68
   104ed:	6a 00                	push   $0x0
   104ef:	50                   	push   %eax
   104f0:	e8 68 14 00 00       	call   1195d <kernel_memset>
   104f5:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;                       // 当前任务没有运行过,所以eip为当前任务的入口地址
   104f8:	8b 45 08             	mov    0x8(%ebp),%eax
   104fb:	8b 55 0c             	mov    0xc(%ebp),%edx
   104fe:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
    task->tss.esp = task->tss.esp0 = esp;        // esp0特权级0 , 设置栈地址
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	8b 55 10             	mov    0x10(%ebp),%edx
   1050a:	89 50 64             	mov    %edx,0x64(%eax)
   1050d:	8b 45 08             	mov    0x8(%ebp),%eax
   10510:	8b 50 64             	mov    0x64(%eax),%edx
   10513:	8b 45 08             	mov    0x8(%ebp),%eax
   10516:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)

    // 平坦模型只有两个段cs和ds 其中ss , es , ds , fs , gs 设置为ds
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1051c:	8b 45 08             	mov    0x8(%ebp),%eax
   1051f:	c7 40 68 10 00 00 00 	movl   $0x10,0x68(%eax)
   10526:	8b 45 08             	mov    0x8(%ebp),%eax
   10529:	8b 50 68             	mov    0x68(%eax),%edx
   1052c:	8b 45 08             	mov    0x8(%ebp),%eax
   1052f:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10535:	8b 45 08             	mov    0x8(%ebp),%eax
   10538:	c7 80 bc 00 00 00 10 	movl   $0x10,0xbc(%eax)
   1053f:	00 00 00 
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
   1054b:	8b 45 08             	mov    0x8(%ebp),%eax
   1054e:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
   10554:	8b 45 08             	mov    0x8(%ebp),%eax
   10557:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
   1055d:	8b 45 08             	mov    0x8(%ebp),%eax
   10560:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   10566:	8b 45 08             	mov    0x8(%ebp),%eax
   10569:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   1056f:	8b 45 08             	mov    0x8(%ebp),%eax
   10572:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)

    // 设置cs
    task->tss.cs = KERNEL_SELECTOR_CS;
   10578:	8b 45 08             	mov    0x8(%ebp),%eax
   1057b:	c7 80 ac 00 00 00 08 	movl   $0x8,0xac(%eax)
   10582:	00 00 00 
    task->tss.iomap = 0;
   10585:	8b 45 08             	mov    0x8(%ebp),%eax
   10588:	c7 80 c4 00 00 00 00 	movl   $0x0,0xc4(%eax)
   1058f:	00 00 00 
    // eflags
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10592:	8b 45 08             	mov    0x8(%ebp),%eax
   10595:	c7 80 84 00 00 00 02 	movl   $0x202,0x84(%eax)
   1059c:	02 00 00 
    task->tss_sel = tss_sel;
   1059f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   105a2:	8b 45 08             	mov    0x8(%ebp),%eax
   105a5:	89 90 c8 00 00 00    	mov    %edx,0xc8(%eax)
    return 0;
   105ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   105b0:	c9                   	leave  
   105b1:	c3                   	ret    

000105b2 <task_init>:
 * @param         {uint32_t}       esp: 栈顶指针
 * @return        {*}
 **/
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)

{
   105b2:	55                   	push   %ebp
   105b3:	89 e5                	mov    %esp,%ebp
   105b5:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   105b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   105bc:	75 1c                	jne    105da <task_init+0x28>
   105be:	68 8d 20 01 00       	push   $0x1208d
   105c3:	68 10 21 01 00       	push   $0x12110
   105c8:	68 90 00 00 00       	push   $0x90
   105cd:	68 a4 20 01 00       	push   $0x120a4
   105d2:	e8 e8 16 00 00       	call   11cbf <pannic>
   105d7:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   105da:	83 ec 04             	sub    $0x4,%esp
   105dd:	ff 75 14             	pushl  0x14(%ebp)
   105e0:	ff 75 10             	pushl  0x10(%ebp)
   105e3:	ff 75 08             	pushl  0x8(%ebp)
   105e6:	e8 b0 fe ff ff       	call   1049b <tss_init>
   105eb:	83 c4 10             	add    $0x10,%esp

    kernel_memcpy((void *)task->name, (void *)name, TASK_NAME_SIZE);
   105ee:	8b 45 08             	mov    0x8(%ebp),%eax
   105f1:	83 c0 10             	add    $0x10,%eax
   105f4:	83 ec 04             	sub    $0x4,%esp
   105f7:	6a 40                	push   $0x40
   105f9:	ff 75 0c             	pushl  0xc(%ebp)
   105fc:	50                   	push   %eax
   105fd:	e8 0c 13 00 00       	call   1190e <kernel_memcpy>
   10602:	83 c4 10             	add    $0x10,%esp

    task->state = TASK_CREATED;
   10605:	8b 45 08             	mov    0x8(%ebp),%eax
   10608:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1060e:	8b 45 08             	mov    0x8(%ebp),%eax
   10611:	c7 40 04 0a 00 00 00 	movl   $0xa,0x4(%eax)
    task->slice_ticks = task->time_ticks;
   10618:	8b 45 08             	mov    0x8(%ebp),%eax
   1061b:	8b 50 04             	mov    0x4(%eax),%edx
   1061e:	8b 45 08             	mov    0x8(%ebp),%eax
   10621:	89 50 08             	mov    %edx,0x8(%eax)
    task->sleep_ticks = 0; // 没有延时
   10624:	8b 45 08             	mov    0x8(%ebp),%eax
   10627:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    list_node_init(&task->all_node);
   1062e:	8b 45 08             	mov    0x8(%ebp),%eax
   10631:	83 c0 58             	add    $0x58,%eax
   10634:	83 ec 0c             	sub    $0xc,%esp
   10637:	50                   	push   %eax
   10638:	e8 9d fc ff ff       	call   102da <list_node_init>
   1063d:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10640:	8b 45 08             	mov    0x8(%ebp),%eax
   10643:	83 c0 50             	add    $0x50,%eax
   10646:	83 ec 0c             	sub    $0xc,%esp
   10649:	50                   	push   %eax
   1064a:	e8 8b fc ff ff       	call   102da <list_node_init>
   1064f:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10652:	e8 79 0c 00 00       	call   112d0 <irq_enter_protection>
   10657:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task); // 将进程设置为就绪状态
   1065a:	83 ec 0c             	sub    $0xc,%esp
   1065d:	ff 75 08             	pushl  0x8(%ebp)
   10660:	e8 76 fd ff ff       	call   103db <task_set_ready>
   10665:	83 c4 10             	add    $0x10,%esp

    list_insert_last(&task_manager.task_list, &task->all_node);
   10668:	8b 45 08             	mov    0x8(%ebp),%eax
   1066b:	83 c0 58             	add    $0x58,%eax
   1066e:	83 ec 08             	sub    $0x8,%esp
   10671:	50                   	push   %eax
   10672:	68 cc 25 01 00       	push   $0x125cc
   10677:	e8 11 17 00 00       	call   11d8d <list_insert_last>
   1067c:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   1067f:	83 ec 0c             	sub    $0xc,%esp
   10682:	ff 75 f4             	pushl  -0xc(%ebp)
   10685:	e8 5e 0c 00 00       	call   112e8 <irq_leave_protection>
   1068a:	83 c4 10             	add    $0x10,%esp
    //     *(--p_esp) = 0;
    //     *(--p_esp) = 0;
    //     *(--p_esp) = 0;
    //     task->stack = p_esp;
    // }
    return 0;
   1068d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10692:	c9                   	leave  
   10693:	c3                   	ret    

00010694 <task_switch_from_to>:
 * @param         {task_t *} from: 当前任务
 * @param         {task_t *} to: 切换到的任务
 * @return        {*}
 **/
void task_switch_from_to(task_t *from, task_t *to)
{
   10694:	55                   	push   %ebp
   10695:	89 e5                	mov    %esp,%ebp
   10697:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   1069a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1069d:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
   106a3:	83 ec 0c             	sub    $0xc,%esp
   106a6:	50                   	push   %eax
   106a7:	e8 41 04 00 00       	call   10aed <switch_to_tss>
   106ac:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   106af:	90                   	nop
   106b0:	c9                   	leave  
   106b1:	c3                   	ret    

000106b2 <idle_task_entry>:

static uint32_t idle_task_stack[IDLE_TASK_SIZE];

static void idle_task_entry()
{
   106b2:	55                   	push   %ebp
   106b3:	89 e5                	mov    %esp,%ebp
   106b5:	83 ec 08             	sub    $0x8,%esp
    log_printf("idle task running");
   106b8:	83 ec 0c             	sub    $0xc,%esp
   106bb:	68 e9 20 01 00       	push   $0x120e9
   106c0:	e8 db 18 00 00       	call   11fa0 <log_printf>
   106c5:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   106c8:	e8 48 fc ff ff       	call   10315 <hlt>
   106cd:	eb f9                	jmp    106c8 <idle_task_entry+0x16>

000106cf <task_manager_init>:
    }
}

void task_manager_init(void)
{
   106cf:	55                   	push   %ebp
   106d0:	89 e5                	mov    %esp,%ebp
   106d2:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list); // 就绪队列
   106d5:	83 ec 0c             	sub    $0xc,%esp
   106d8:	68 c0 25 01 00       	push   $0x125c0
   106dd:	e8 26 16 00 00       	call   11d08 <list_init>
   106e2:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);  // 进程队列
   106e5:	83 ec 0c             	sub    $0xc,%esp
   106e8:	68 cc 25 01 00       	push   $0x125cc
   106ed:	e8 16 16 00 00       	call   11d08 <list_init>
   106f2:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list); // 延时队列
   106f5:	83 ec 0c             	sub    $0xc,%esp
   106f8:	68 a8 26 01 00       	push   $0x126a8
   106fd:	e8 06 16 00 00       	call   11d08 <list_init>
   10702:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10705:	c7 05 a4 26 01 00 00 	movl   $0x0,0x126a4
   1070c:	00 00 00 
    task_init(&task_manager.idle_task,
              "idle task",
              (uint32_t)idle_task_entry,
              (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
   1070f:	b8 80 37 01 00       	mov    $0x13780,%eax
    task_init(&task_manager.idle_task,
   10714:	89 c2                	mov    %eax,%edx
   10716:	b8 b2 06 01 00       	mov    $0x106b2,%eax
   1071b:	52                   	push   %edx
   1071c:	50                   	push   %eax
   1071d:	68 fb 20 01 00       	push   $0x120fb
   10722:	68 b4 26 01 00       	push   $0x126b4
   10727:	e8 86 fe ff ff       	call   105b2 <task_init>
   1072c:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   1072f:	c7 05 a4 26 01 00 00 	movl   $0x0,0x126a4
   10736:	00 00 00 
}
   10739:	90                   	nop
   1073a:	c9                   	leave  
   1073b:	c3                   	ret    

0001073c <task_first_init>:

// 初始化第一个进程(任务)
void task_first_init(void)
{
   1073c:	55                   	push   %ebp
   1073d:	89 e5                	mov    %esp,%ebp
   1073f:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0);
   10742:	6a 00                	push   $0x0
   10744:	6a 00                	push   $0x0
   10746:	68 05 21 01 00       	push   $0x12105
   1074b:	68 d8 25 01 00       	push   $0x125d8
   10750:	e8 5d fe ff ff       	call   105b2 <task_init>
   10755:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10758:	a1 a0 26 01 00       	mov    0x126a0,%eax
   1075d:	0f b7 c0             	movzwl %ax,%eax
   10760:	83 ec 0c             	sub    $0xc,%esp
   10763:	50                   	push   %eax
   10764:	e8 b3 fb ff ff       	call   1031c <write_tr>
   10769:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   1076c:	c7 05 a4 26 01 00 d8 	movl   $0x125d8,0x126a4
   10773:	25 01 00 
}
   10776:	90                   	nop
   10777:	c9                   	leave  
   10778:	c3                   	ret    

00010779 <task_first_task>:

// 返回第一个进程(任务)
task_t *task_first_task(void)
{
   10779:	55                   	push   %ebp
   1077a:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   1077c:	b8 d8 25 01 00       	mov    $0x125d8,%eax
}
   10781:	5d                   	pop    %ebp
   10782:	c3                   	ret    

00010783 <task_time_ticks>:

void task_time_ticks(void)
{
   10783:	55                   	push   %ebp
   10784:	89 e5                	mov    %esp,%ebp
   10786:	83 ec 18             	sub    $0x18,%esp
    task_t *curr_task = task_current();
   10789:	e8 e8 fb ff ff       	call   10376 <task_current>
   1078e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) // 当前进程运行时间片已到达
   10791:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10794:	8b 40 08             	mov    0x8(%eax),%eax
   10797:	8d 50 ff             	lea    -0x1(%eax),%edx
   1079a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1079d:	89 50 08             	mov    %edx,0x8(%eax)
   107a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107a3:	8b 40 08             	mov    0x8(%eax),%eax
   107a6:	85 c0                	test   %eax,%eax
   107a8:	75 28                	jne    107d2 <task_time_ticks+0x4f>
    {
        curr_task->slice_ticks = curr_task->time_ticks;
   107aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107ad:	8b 50 04             	mov    0x4(%eax),%edx
   107b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107b3:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_block(curr_task); //
   107b6:	83 ec 0c             	sub    $0xc,%esp
   107b9:	ff 75 f0             	pushl  -0x10(%ebp)
   107bc:	e8 af fc ff ff       	call   10470 <task_set_block>
   107c1:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   107c4:	83 ec 0c             	sub    $0xc,%esp
   107c7:	ff 75 f0             	pushl  -0x10(%ebp)
   107ca:	e8 0c fc ff ff       	call   103db <task_set_ready>
   107cf:	83 c4 10             	add    $0x10,%esp
    }

    // 扫描延时队列
    list_node_t *curr = list_first(&task_manager.sleep_list);
   107d2:	83 ec 0c             	sub    $0xc,%esp
   107d5:	68 a8 26 01 00       	push   $0x126a8
   107da:	e8 21 fb ff ff       	call   10300 <list_first>
   107df:	83 c4 10             	add    $0x10,%esp
   107e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   107e5:	eb 62                	jmp    10849 <task_time_ticks+0xc6>
    {
        task_t *task = list_node_parent(curr, task_t, run_node);
   107e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   107eb:	74 08                	je     107f5 <task_time_ticks+0x72>
   107ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f0:	83 e8 50             	sub    $0x50,%eax
   107f3:	eb 05                	jmp    107fa <task_time_ticks+0x77>
   107f5:	b8 00 00 00 00       	mov    $0x0,%eax
   107fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        list_node_t *next = list_node_next(curr);
   107fd:	83 ec 0c             	sub    $0xc,%esp
   10800:	ff 75 f4             	pushl  -0xc(%ebp)
   10803:	e8 ed fa ff ff       	call   102f5 <list_node_next>
   10808:	83 c4 10             	add    $0x10,%esp
   1080b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) // 如果当前进程的延时已经到达
   1080e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10811:	8b 40 0c             	mov    0xc(%eax),%eax
   10814:	8d 50 ff             	lea    -0x1(%eax),%edx
   10817:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1081a:	89 50 0c             	mov    %edx,0xc(%eax)
   1081d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10820:	8b 40 0c             	mov    0xc(%eax),%eax
   10823:	85 c0                	test   %eax,%eax
   10825:	75 1c                	jne    10843 <task_time_ticks+0xc0>
        {
            task_set_wakeup(task); // 唤醒
   10827:	83 ec 0c             	sub    $0xc,%esp
   1082a:	ff 75 ec             	pushl  -0x14(%ebp)
   1082d:	e8 5f 00 00 00       	call   10891 <task_set_wakeup>
   10832:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);  // 状态设置为就绪
   10835:	83 ec 0c             	sub    $0xc,%esp
   10838:	ff 75 ec             	pushl  -0x14(%ebp)
   1083b:	e8 9b fb ff ff       	call   103db <task_set_ready>
   10840:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   10843:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10846:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   10849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1084d:	75 98                	jne    107e7 <task_time_ticks+0x64>
    }
    task_dispatch();
   1084f:	e8 2c fb ff ff       	call   10380 <task_dispatch>
}
   10854:	90                   	nop
   10855:	c9                   	leave  
   10856:	c3                   	ret    

00010857 <task_set_sleep>:

void task_set_sleep(task_t *task, uint32_t ticks)
{
   10857:	55                   	push   %ebp
   10858:	89 e5                	mov    %esp,%ebp
   1085a:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0)
   1085d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10861:	74 2b                	je     1088e <task_set_sleep+0x37>
    {
        return;
    }
    task->sleep_ticks = ticks; // 设置延时时间
   10863:	8b 55 0c             	mov    0xc(%ebp),%edx
   10866:	8b 45 08             	mov    0x8(%ebp),%eax
   10869:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;  // 设置进程状态
   1086c:	8b 45 08             	mov    0x8(%ebp),%eax
   1086f:	c7 00 02 00 00 00    	movl   $0x2,(%eax)

    list_insert_last(&task_manager.sleep_list, &task->run_node); // 插入延时队列
   10875:	8b 45 08             	mov    0x8(%ebp),%eax
   10878:	83 c0 50             	add    $0x50,%eax
   1087b:	83 ec 08             	sub    $0x8,%esp
   1087e:	50                   	push   %eax
   1087f:	68 a8 26 01 00       	push   $0x126a8
   10884:	e8 04 15 00 00       	call   11d8d <list_insert_last>
   10889:	83 c4 10             	add    $0x10,%esp
   1088c:	eb 01                	jmp    1088f <task_set_sleep+0x38>
        return;
   1088e:	90                   	nop
}
   1088f:	c9                   	leave  
   10890:	c3                   	ret    

00010891 <task_set_wakeup>:

void task_set_wakeup(task_t *task) // 唤醒进程
{
   10891:	55                   	push   %ebp
   10892:	89 e5                	mov    %esp,%ebp
   10894:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node); // 从延时队列中移除该结点
   10897:	8b 45 08             	mov    0x8(%ebp),%eax
   1089a:	83 c0 50             	add    $0x50,%eax
   1089d:	83 ec 08             	sub    $0x8,%esp
   108a0:	50                   	push   %eax
   108a1:	68 a8 26 01 00       	push   $0x126a8
   108a6:	e8 bf 15 00 00       	call   11e6a <list_remove>
   108ab:	83 c4 10             	add    $0x10,%esp
}
   108ae:	90                   	nop
   108af:	c9                   	leave  
   108b0:	c3                   	ret    

000108b1 <sys_sleep>:

void sys_sleep(uint32_t ms) // 进程延时
{
   108b1:	55                   	push   %ebp
   108b2:	89 e5                	mov    %esp,%ebp
   108b4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   108b7:	e8 14 0a 00 00       	call   112d0 <irq_enter_protection>
   108bc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_block(task_manager.curr_task); // 阻塞当前进程
   108bf:	a1 a4 26 01 00       	mov    0x126a4,%eax
   108c4:	83 ec 0c             	sub    $0xc,%esp
   108c7:	50                   	push   %eax
   108c8:	e8 a3 fb ff ff       	call   10470 <task_set_block>
   108cd:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 将当前进程设置为延时
   108d0:	8b 45 08             	mov    0x8(%ebp),%eax
   108d3:	83 c0 09             	add    $0x9,%eax
   108d6:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   108db:	f7 e2                	mul    %edx
   108dd:	c1 ea 03             	shr    $0x3,%edx
   108e0:	a1 a4 26 01 00       	mov    0x126a4,%eax
   108e5:	83 ec 08             	sub    $0x8,%esp
   108e8:	52                   	push   %edx
   108e9:	50                   	push   %eax
   108ea:	e8 68 ff ff ff       	call   10857 <task_set_sleep>
   108ef:	83 c4 10             	add    $0x10,%esp

    // 进程切换
    task_dispatch();
   108f2:	e8 89 fa ff ff       	call   10380 <task_dispatch>

    irq_leave_protection(state);
   108f7:	83 ec 0c             	sub    $0xc,%esp
   108fa:	ff 75 f4             	pushl  -0xc(%ebp)
   108fd:	e8 e6 09 00 00       	call   112e8 <irq_leave_protection>
   10902:	83 c4 10             	add    $0x10,%esp
}
   10905:	90                   	nop
   10906:	c9                   	leave  
   10907:	c3                   	ret    

00010908 <lgdt>:
{
   10908:	55                   	push   %ebp
   10909:	89 e5                	mov    %esp,%ebp
   1090b:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;   // 获取高16位
   1090e:	8b 45 08             	mov    0x8(%ebp),%eax
   10911:	c1 e8 10             	shr    $0x10,%eax
   10914:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF; // 获取低16位
   10918:	8b 45 08             	mov    0x8(%ebp),%eax
   1091b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;           // 大小
   1091f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10922:	83 e8 01             	sub    $0x1,%eax
   10925:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   10929:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1092d:	90                   	nop
   1092e:	c9                   	leave  
   1092f:	c3                   	ret    

00010930 <far_jump>:
{
   10930:	55                   	push   %ebp
   10931:	89 e5                	mov    %esp,%ebp
   10933:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   10936:	8b 45 0c             	mov    0xc(%ebp),%eax
   10939:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1093c:	8b 45 08             	mov    0x8(%ebp),%eax
   1093f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   10942:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10945:	ff 28                	ljmp   *(%eax)
}
   10947:	90                   	nop
   10948:	c9                   	leave  
   10949:	c3                   	ret    

0001094a <segment_desc_set>:
 * @param         {uint32_t} limit: 界限 20位
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   1094a:	55                   	push   %ebp
   1094b:	89 e5                	mov    %esp,%ebp
   1094d:	83 ec 14             	sub    $0x14,%esp
   10950:	8b 45 14             	mov    0x14(%ebp),%eax
   10953:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10957:	8b 45 08             	mov    0x8(%ebp),%eax
   1095a:	c1 f8 03             	sar    $0x3,%eax
   1095d:	c1 e0 03             	shl    $0x3,%eax
   10960:	05 80 37 01 00       	add    $0x13780,%eax
   10965:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    if (limit > 0xFFFFF)
   10968:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1096f:	76 0f                	jbe    10980 <segment_desc_set+0x36>
    {
        attr |= 0x8000;
   10971:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10977:	8b 45 10             	mov    0x10(%ebp),%eax
   1097a:	c1 e8 0c             	shr    $0xc,%eax
   1097d:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xFFFF;
   10980:	8b 45 10             	mov    0x10(%ebp),%eax
   10983:	89 c2                	mov    %eax,%edx
   10985:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10988:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   1098b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1098e:	89 c2                	mov    %eax,%edx
   10990:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10993:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10997:	8b 45 0c             	mov    0xc(%ebp),%eax
   1099a:	c1 e8 10             	shr    $0x10,%eax
   1099d:	89 c2                	mov    %eax,%edx
   1099f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109a2:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   109a5:	8b 45 10             	mov    0x10(%ebp),%eax
   109a8:	c1 e8 10             	shr    $0x10,%eax
   109ab:	c1 e0 08             	shl    $0x8,%eax
   109ae:	66 25 00 0f          	and    $0xf00,%ax
   109b2:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   109b6:	89 c2                	mov    %eax,%edx
   109b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109bb:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   109bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   109c2:	c1 e8 18             	shr    $0x18,%eax
   109c5:	89 c2                	mov    %eax,%edx
   109c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   109ca:	88 50 07             	mov    %dl,0x7(%eax)
}
   109cd:	90                   	nop
   109ce:	c9                   	leave  
   109cf:	c3                   	ret    

000109d0 <gate_desc_set>:
 * @param         {uint32_t} offset: 地址偏移量
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   109d0:	55                   	push   %ebp
   109d1:	89 e5                	mov    %esp,%ebp
   109d3:	83 ec 08             	sub    $0x8,%esp
   109d6:	8b 55 0c             	mov    0xc(%ebp),%edx
   109d9:	8b 45 14             	mov    0x14(%ebp),%eax
   109dc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   109e0:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   109e4:	8b 45 10             	mov    0x10(%ebp),%eax
   109e7:	89 c2                	mov    %eax,%edx
   109e9:	8b 45 08             	mov    0x8(%ebp),%eax
   109ec:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   109ef:	8b 45 08             	mov    0x8(%ebp),%eax
   109f2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   109f6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   109fa:	8b 45 08             	mov    0x8(%ebp),%eax
   109fd:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10a01:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10a05:	8b 45 10             	mov    0x10(%ebp),%eax
   10a08:	c1 e8 10             	shr    $0x10,%eax
   10a0b:	89 c2                	mov    %eax,%edx
   10a0d:	8b 45 08             	mov    0x8(%ebp),%eax
   10a10:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10a14:	90                   	nop
   10a15:	c9                   	leave  
   10a16:	c3                   	ret    

00010a17 <gdt_alloc_desc>:
/**
 * @brief        : 分配一个空闲gdt表项
 * @return        {int} 选择子
 **/
int gdt_alloc_desc(void)
{
   10a17:	55                   	push   %ebp
   10a18:	89 e5                	mov    %esp,%ebp
   10a1a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10a1d:	e8 ae 08 00 00       	call   112d0 <irq_enter_protection>
   10a22:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a25:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   10a2c:	eb 34                	jmp    10a62 <gdt_alloc_desc+0x4b>
    {
        segment_desc_t *desc = gdt_table + i;
   10a2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a31:	c1 e0 03             	shl    $0x3,%eax
   10a34:	05 80 37 01 00       	add    $0x13780,%eax
   10a39:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (desc->attr == 0) // 该表项为空闲
   10a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10a3f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   10a43:	66 85 c0             	test   %ax,%ax
   10a46:	75 16                	jne    10a5e <gdt_alloc_desc+0x47>
        {
            irq_leave_protection(state);
   10a48:	83 ec 0c             	sub    $0xc,%esp
   10a4b:	ff 75 f0             	pushl  -0x10(%ebp)
   10a4e:	e8 95 08 00 00       	call   112e8 <irq_leave_protection>
   10a53:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   10a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a59:	c1 e0 03             	shl    $0x3,%eax
   10a5c:	eb 20                	jmp    10a7e <gdt_alloc_desc+0x67>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   10a5e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a62:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   10a69:	7e c3                	jle    10a2e <gdt_alloc_desc+0x17>
        }
    }
    irq_leave_protection(state);
   10a6b:	83 ec 0c             	sub    $0xc,%esp
   10a6e:	ff 75 f0             	pushl  -0x10(%ebp)
   10a71:	e8 72 08 00 00       	call   112e8 <irq_leave_protection>
   10a76:	83 c4 10             	add    $0x10,%esp
    return -1;
   10a79:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a7e:	c9                   	leave  
   10a7f:	c3                   	ret    

00010a80 <init_gdt>:
/**
 * @brief        : gdt表初始化
 * @return        {*}
 **/
void init_gdt(void)
{
   10a80:	55                   	push   %ebp
   10a81:	89 e5                	mov    %esp,%ebp
   10a83:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10a86:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10a8d:	eb 19                	jmp    10aa8 <init_gdt+0x28>
    {
        segment_desc_set(i << 3, 0, 0, 0);
   10a8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10a92:	c1 e0 03             	shl    $0x3,%eax
   10a95:	6a 00                	push   $0x0
   10a97:	6a 00                	push   $0x0
   10a99:	6a 00                	push   $0x0
   10a9b:	50                   	push   %eax
   10a9c:	e8 a9 fe ff ff       	call   1094a <segment_desc_set>
   10aa1:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10aa4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10aa8:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10aaf:	7e de                	jle    10a8f <init_gdt+0xf>
    }

    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   10ab1:	68 92 c0 00 00       	push   $0xc092
   10ab6:	6a ff                	push   $0xffffffff
   10ab8:	6a 00                	push   $0x0
   10aba:	6a 10                	push   $0x10
   10abc:	e8 89 fe ff ff       	call   1094a <segment_desc_set>
   10ac1:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYE_RW | SEG_D | SEG_G);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   10ac4:	68 9a c0 00 00       	push   $0xc09a
   10ac9:	6a ff                	push   $0xffffffff
   10acb:	6a 00                	push   $0x0
   10acd:	6a 08                	push   $0x8
   10acf:	e8 76 fe ff ff       	call   1094a <segment_desc_set>
   10ad4:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYE_RW | SEG_D | SEG_G);
    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10ad7:	b8 80 37 01 00       	mov    $0x13780,%eax
   10adc:	68 00 08 00 00       	push   $0x800
   10ae1:	50                   	push   %eax
   10ae2:	e8 21 fe ff ff       	call   10908 <lgdt>
   10ae7:	83 c4 08             	add    $0x8,%esp
}
   10aea:	90                   	nop
   10aeb:	c9                   	leave  
   10aec:	c3                   	ret    

00010aed <switch_to_tss>:
 * @brief        : 切换至TSS,即跳转实现任务切换
 * @param         {uint16_t} tss_selector: 对应的tss选择子
 * @return        {*}
 **/
void switch_to_tss(uint32_t tss_selector)
{
   10aed:	55                   	push   %ebp
   10aee:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   10af0:	6a 00                	push   $0x0
   10af2:	ff 75 08             	pushl  0x8(%ebp)
   10af5:	e8 36 fe ff ff       	call   10930 <far_jump>
   10afa:	83 c4 08             	add    $0x8,%esp
}
   10afd:	90                   	nop
   10afe:	c9                   	leave  
   10aff:	c3                   	ret    

00010b00 <cpu_init>:
/**
 * @brief        : cpu初始化
 * @return        {*}
 **/
void cpu_init(void)
{
   10b00:	55                   	push   %ebp
   10b01:	89 e5                	mov    %esp,%ebp
    init_gdt(); // gdt表初始化
   10b03:	e8 78 ff ff ff       	call   10a80 <init_gdt>
   10b08:	90                   	nop
   10b09:	5d                   	pop    %ebp
   10b0a:	c3                   	ret    

00010b0b <cli>:
{
   10b0b:	55                   	push   %ebp
   10b0c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   10b0e:	fa                   	cli    
}
   10b0f:	90                   	nop
   10b10:	5d                   	pop    %ebp
   10b11:	c3                   	ret    

00010b12 <sti>:
{
   10b12:	55                   	push   %ebp
   10b13:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   10b15:	fb                   	sti    
}
   10b16:	90                   	nop
   10b17:	5d                   	pop    %ebp
   10b18:	c3                   	ret    

00010b19 <inb>:
{
   10b19:	55                   	push   %ebp
   10b1a:	89 e5                	mov    %esp,%ebp
   10b1c:	83 ec 14             	sub    $0x14,%esp
   10b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10b22:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   10b26:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10b2a:	89 c2                	mov    %eax,%edx
   10b2c:	ec                   	in     (%dx),%al
   10b2d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   10b30:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   10b34:	c9                   	leave  
   10b35:	c3                   	ret    

00010b36 <outb>:
{
   10b36:	55                   	push   %ebp
   10b37:	89 e5                	mov    %esp,%ebp
   10b39:	83 ec 08             	sub    $0x8,%esp
   10b3c:	8b 55 08             	mov    0x8(%ebp),%edx
   10b3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b42:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10b46:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   10b49:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10b4d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10b51:	ee                   	out    %al,(%dx)
}
   10b52:	90                   	nop
   10b53:	c9                   	leave  
   10b54:	c3                   	ret    

00010b55 <lidt>:
{
   10b55:	55                   	push   %ebp
   10b56:	89 e5                	mov    %esp,%ebp
   10b58:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;   // 获取高16位
   10b5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5e:	c1 e8 10             	shr    $0x10,%eax
   10b61:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF; // 获取低16位
   10b65:	8b 45 08             	mov    0x8(%ebp),%eax
   10b68:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;           // 大小
   10b6c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b6f:	83 e8 01             	sub    $0x1,%eax
   10b72:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   10b76:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10b7a:	90                   	nop
   10b7b:	c9                   	leave  
   10b7c:	c3                   	ret    

00010b7d <hlt>:
{
   10b7d:	55                   	push   %ebp
   10b7e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b80:	f4                   	hlt    
}
   10b81:	90                   	nop
   10b82:	5d                   	pop    %ebp
   10b83:	c3                   	ret    

00010b84 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   10b84:	55                   	push   %ebp
   10b85:	89 e5                	mov    %esp,%ebp
   10b87:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushf \n\tpop %%eax" : "=a"(eflags));
   10b8a:	9c                   	pushf  
   10b8b:	58                   	pop    %eax
   10b8c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   10b8f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10b92:	c9                   	leave  
   10b93:	c3                   	ret    

00010b94 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   10b94:	55                   	push   %ebp
   10b95:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf" ::"a"(eflags));
   10b97:	8b 45 08             	mov    0x8(%ebp),%eax
   10b9a:	50                   	push   %eax
   10b9b:	9d                   	popf   
}
   10b9c:	90                   	nop
   10b9d:	5d                   	pop    %ebp
   10b9e:	c3                   	ret    

00010b9f <dump_core_regs>:
 * @brief        :  打印寄存器异常信息
 * @param         {exception_frame_t} *frame: 寄存器信息
 * @return        {*}
 **/
static void dump_core_regs(exception_frame_t *frame)
{
   10b9f:	55                   	push   %ebp
   10ba0:	89 e5                	mov    %esp,%ebp
   10ba2:	57                   	push   %edi
   10ba3:	56                   	push   %esi
   10ba4:	53                   	push   %ebx
   10ba5:	83 ec 1c             	sub    $0x1c,%esp
    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   10ba8:	8b 45 08             	mov    0x8(%ebp),%eax
   10bab:	8b 50 34             	mov    0x34(%eax),%edx
   10bae:	8b 45 08             	mov    0x8(%ebp),%eax
   10bb1:	8b 40 30             	mov    0x30(%eax),%eax
   10bb4:	83 ec 04             	sub    $0x4,%esp
   10bb7:	52                   	push   %edx
   10bb8:	50                   	push   %eax
   10bb9:	68 1c 21 01 00       	push   $0x1211c
   10bbe:	e8 dd 13 00 00       	call   11fa0 <log_printf>
   10bc3:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS:%d",
   10bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc9:	8b 38                	mov    (%eax),%edi
   10bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bce:	8b 70 04             	mov    0x4(%eax),%esi
   10bd1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bd4:	8b 58 0c             	mov    0xc(%eax),%ebx
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	8b 48 08             	mov    0x8(%eax),%ecx
   10bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10be0:	8b 50 0c             	mov    0xc(%eax),%edx
   10be3:	8b 45 08             	mov    0x8(%ebp),%eax
   10be6:	8b 40 3c             	mov    0x3c(%eax),%eax
   10be9:	83 ec 04             	sub    $0x4,%esp
   10bec:	57                   	push   %edi
   10bed:	56                   	push   %esi
   10bee:	53                   	push   %ebx
   10bef:	51                   	push   %ecx
   10bf0:	52                   	push   %edx
   10bf1:	50                   	push   %eax
   10bf2:	68 38 21 01 00       	push   $0x12138
   10bf7:	e8 a4 13 00 00       	call   11fa0 <log_printf>
   10bfc:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
    log_printf("EAX: 0x%x\n"
   10bff:	8b 45 08             	mov    0x8(%ebp),%eax
   10c02:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10c05:	8b 45 08             	mov    0x8(%ebp),%eax
   10c08:	8b 40 18             	mov    0x18(%eax),%eax
   10c0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   10c0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c11:	8b 58 14             	mov    0x14(%eax),%ebx
   10c14:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   10c17:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1a:	8b 78 10             	mov    0x10(%eax),%edi
   10c1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c20:	8b 70 24             	mov    0x24(%eax),%esi
   10c23:	8b 45 08             	mov    0x8(%ebp),%eax
   10c26:	8b 58 28             	mov    0x28(%eax),%ebx
   10c29:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2c:	8b 50 20             	mov    0x20(%eax),%edx
   10c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c32:	8b 40 2c             	mov    0x2c(%eax),%eax
   10c35:	83 ec 0c             	sub    $0xc,%esp
   10c38:	51                   	push   %ecx
   10c39:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c3c:	ff 75 e0             	pushl  -0x20(%ebp)
   10c3f:	57                   	push   %edi
   10c40:	56                   	push   %esi
   10c41:	53                   	push   %ebx
   10c42:	52                   	push   %edx
   10c43:	50                   	push   %eax
   10c44:	68 64 21 01 00       	push   $0x12164
   10c49:	e8 52 13 00 00       	call   11fa0 <log_printf>
   10c4e:	83 c4 30             	add    $0x30,%esp
               "ESI: 0x%x\n"
               "EBP: 0x%x\n"
               "ESP: 0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP: 0x%x\nEFLAGS: 0x%x\n", frame->eip, frame->eflags);
   10c51:	8b 45 08             	mov    0x8(%ebp),%eax
   10c54:	8b 50 40             	mov    0x40(%eax),%edx
   10c57:	8b 45 08             	mov    0x8(%ebp),%eax
   10c5a:	8b 40 38             	mov    0x38(%eax),%eax
   10c5d:	83 ec 04             	sub    $0x4,%esp
   10c60:	52                   	push   %edx
   10c61:	50                   	push   %eax
   10c62:	68 b5 21 01 00       	push   $0x121b5
   10c67:	e8 34 13 00 00       	call   11fa0 <log_printf>
   10c6c:	83 c4 10             	add    $0x10,%esp
}
   10c6f:	90                   	nop
   10c70:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10c73:	5b                   	pop    %ebx
   10c74:	5e                   	pop    %esi
   10c75:	5f                   	pop    %edi
   10c76:	5d                   	pop    %ebp
   10c77:	c3                   	ret    

00010c78 <do_default_handler>:
 * @param         {exception_frame_t} *frame:保存一些寄存器的值(异常信息)
 * @param         {char} *msg: 异常提示
 * @return        {*}
 **/
static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   10c78:	55                   	push   %ebp
   10c79:	89 e5                	mov    %esp,%ebp
   10c7b:	83 ec 08             	sub    $0x8,%esp
    log_printf("----------------------------------------");
   10c7e:	83 ec 0c             	sub    $0xc,%esp
   10c81:	68 d0 21 01 00       	push   $0x121d0
   10c86:	e8 15 13 00 00       	call   11fa0 <log_printf>
   10c8b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/EXCEPTION HAPPEND: %s", msg);
   10c8e:	83 ec 08             	sub    $0x8,%esp
   10c91:	ff 75 0c             	pushl  0xc(%ebp)
   10c94:	68 f9 21 01 00       	push   $0x121f9
   10c99:	e8 02 13 00 00       	call   11fa0 <log_printf>
   10c9e:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	ff 75 08             	pushl  0x8(%ebp)
   10ca7:	e8 f3 fe ff ff       	call   10b9f <dump_core_regs>
   10cac:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10caf:	e8 c9 fe ff ff       	call   10b7d <hlt>
   10cb4:	eb f9                	jmp    10caf <do_default_handler+0x37>

00010cb6 <do_handler_unknown>:
 * @brief        : 未知的异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_unknown(exception_frame_t *frame)
{
   10cb6:	55                   	push   %ebp
   10cb7:	89 e5                	mov    %esp,%ebp
   10cb9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception!!!");
   10cbc:	83 ec 08             	sub    $0x8,%esp
   10cbf:	68 13 22 01 00       	push   $0x12213
   10cc4:	ff 75 08             	pushl  0x8(%ebp)
   10cc7:	e8 ac ff ff ff       	call   10c78 <do_default_handler>
   10ccc:	83 c4 10             	add    $0x10,%esp
}
   10ccf:	90                   	nop
   10cd0:	c9                   	leave  
   10cd1:	c3                   	ret    

00010cd2 <do_handler_divider>:
 * @brief        : 除0异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_divider(exception_frame_t *frame)
{
   10cd2:	55                   	push   %ebp
   10cd3:	89 e5                	mov    %esp,%ebp
   10cd5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divder exception!!!");
   10cd8:	83 ec 08             	sub    $0x8,%esp
   10cdb:	68 28 22 01 00       	push   $0x12228
   10ce0:	ff 75 08             	pushl  0x8(%ebp)
   10ce3:	e8 90 ff ff ff       	call   10c78 <do_default_handler>
   10ce8:	83 c4 10             	add    $0x10,%esp
}
   10ceb:	90                   	nop
   10cec:	c9                   	leave  
   10ced:	c3                   	ret    

00010cee <do_handler_Debug>:
 * @brief        : 调试异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_Debug(exception_frame_t *frame)
{
   10cee:	55                   	push   %ebp
   10cef:	89 e5                	mov    %esp,%ebp
   10cf1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug exception!!!");
   10cf4:	83 ec 08             	sub    $0x8,%esp
   10cf7:	68 3c 22 01 00       	push   $0x1223c
   10cfc:	ff 75 08             	pushl  0x8(%ebp)
   10cff:	e8 74 ff ff ff       	call   10c78 <do_default_handler>
   10d04:	83 c4 10             	add    $0x10,%esp
}
   10d07:	90                   	nop
   10d08:	c9                   	leave  
   10d09:	c3                   	ret    

00010d0a <do_handler_NMI>:
 * @brief        : NMI异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_NMI(exception_frame_t *frame)
{
   10d0a:	55                   	push   %ebp
   10d0b:	89 e5                	mov    %esp,%ebp
   10d0d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI exception!!!");
   10d10:	83 ec 08             	sub    $0x8,%esp
   10d13:	68 4f 22 01 00       	push   $0x1224f
   10d18:	ff 75 08             	pushl  0x8(%ebp)
   10d1b:	e8 58 ff ff ff       	call   10c78 <do_default_handler>
   10d20:	83 c4 10             	add    $0x10,%esp
}
   10d23:	90                   	nop
   10d24:	c9                   	leave  
   10d25:	c3                   	ret    

00010d26 <do_handler_breakpoint>:
 * @brief        : 断点异常(?)处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_breakpoint(exception_frame_t *frame)
{
   10d26:	55                   	push   %ebp
   10d27:	89 e5                	mov    %esp,%ebp
   10d29:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "breakpoint exception!!!");
   10d2c:	83 ec 08             	sub    $0x8,%esp
   10d2f:	68 60 22 01 00       	push   $0x12260
   10d34:	ff 75 08             	pushl  0x8(%ebp)
   10d37:	e8 3c ff ff ff       	call   10c78 <do_default_handler>
   10d3c:	83 c4 10             	add    $0x10,%esp
}
   10d3f:	90                   	nop
   10d40:	c9                   	leave  
   10d41:	c3                   	ret    

00010d42 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   10d42:	55                   	push   %ebp
   10d43:	89 e5                	mov    %esp,%ebp
   10d45:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "overflow exception!!!");
   10d48:	83 ec 08             	sub    $0x8,%esp
   10d4b:	68 78 22 01 00       	push   $0x12278
   10d50:	ff 75 08             	pushl  0x8(%ebp)
   10d53:	e8 20 ff ff ff       	call   10c78 <do_default_handler>
   10d58:	83 c4 10             	add    $0x10,%esp
}
   10d5b:	90                   	nop
   10d5c:	c9                   	leave  
   10d5d:	c3                   	ret    

00010d5e <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t *frame)
{
   10d5e:	55                   	push   %ebp
   10d5f:	89 e5                	mov    %esp,%ebp
   10d61:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "bound range exception!!!");
   10d64:	83 ec 08             	sub    $0x8,%esp
   10d67:	68 8e 22 01 00       	push   $0x1228e
   10d6c:	ff 75 08             	pushl  0x8(%ebp)
   10d6f:	e8 04 ff ff ff       	call   10c78 <do_default_handler>
   10d74:	83 c4 10             	add    $0x10,%esp
}
   10d77:	90                   	nop
   10d78:	c9                   	leave  
   10d79:	c3                   	ret    

00010d7a <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t *frame)
{
   10d7a:	55                   	push   %ebp
   10d7b:	89 e5                	mov    %esp,%ebp
   10d7d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "invalid opcode exception!!!");
   10d80:	83 ec 08             	sub    $0x8,%esp
   10d83:	68 a7 22 01 00       	push   $0x122a7
   10d88:	ff 75 08             	pushl  0x8(%ebp)
   10d8b:	e8 e8 fe ff ff       	call   10c78 <do_default_handler>
   10d90:	83 c4 10             	add    $0x10,%esp
}
   10d93:	90                   	nop
   10d94:	c9                   	leave  
   10d95:	c3                   	ret    

00010d96 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t *frame)
{
   10d96:	55                   	push   %ebp
   10d97:	89 e5                	mov    %esp,%ebp
   10d99:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "device unavailable exception!!!");
   10d9c:	83 ec 08             	sub    $0x8,%esp
   10d9f:	68 c4 22 01 00       	push   $0x122c4
   10da4:	ff 75 08             	pushl  0x8(%ebp)
   10da7:	e8 cc fe ff ff       	call   10c78 <do_default_handler>
   10dac:	83 c4 10             	add    $0x10,%esp
}
   10daf:	90                   	nop
   10db0:	c9                   	leave  
   10db1:	c3                   	ret    

00010db2 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   10db2:	55                   	push   %ebp
   10db3:	89 e5                	mov    %esp,%ebp
   10db5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "double fault exception!!!");
   10db8:	83 ec 08             	sub    $0x8,%esp
   10dbb:	68 e4 22 01 00       	push   $0x122e4
   10dc0:	ff 75 08             	pushl  0x8(%ebp)
   10dc3:	e8 b0 fe ff ff       	call   10c78 <do_default_handler>
   10dc8:	83 c4 10             	add    $0x10,%esp
}
   10dcb:	90                   	nop
   10dcc:	c9                   	leave  
   10dcd:	c3                   	ret    

00010dce <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   10dce:	55                   	push   %ebp
   10dcf:	89 e5                	mov    %esp,%ebp
   10dd1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "invalid tss exception!!!");
   10dd4:	83 ec 08             	sub    $0x8,%esp
   10dd7:	68 fe 22 01 00       	push   $0x122fe
   10ddc:	ff 75 08             	pushl  0x8(%ebp)
   10ddf:	e8 94 fe ff ff       	call   10c78 <do_default_handler>
   10de4:	83 c4 10             	add    $0x10,%esp
}
   10de7:	90                   	nop
   10de8:	c9                   	leave  
   10de9:	c3                   	ret    

00010dea <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   10dea:	55                   	push   %ebp
   10deb:	89 e5                	mov    %esp,%ebp
   10ded:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "segment not present exception!!!");
   10df0:	83 ec 08             	sub    $0x8,%esp
   10df3:	68 18 23 01 00       	push   $0x12318
   10df8:	ff 75 08             	pushl  0x8(%ebp)
   10dfb:	e8 78 fe ff ff       	call   10c78 <do_default_handler>
   10e00:	83 c4 10             	add    $0x10,%esp
}
   10e03:	90                   	nop
   10e04:	c9                   	leave  
   10e05:	c3                   	ret    

00010e06 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   10e06:	55                   	push   %ebp
   10e07:	89 e5                	mov    %esp,%ebp
   10e09:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "segment fault exception!!!");
   10e0c:	83 ec 08             	sub    $0x8,%esp
   10e0f:	68 39 23 01 00       	push   $0x12339
   10e14:	ff 75 08             	pushl  0x8(%ebp)
   10e17:	e8 5c fe ff ff       	call   10c78 <do_default_handler>
   10e1c:	83 c4 10             	add    $0x10,%esp
}
   10e1f:	90                   	nop
   10e20:	c9                   	leave  
   10e21:	c3                   	ret    

00010e22 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   10e22:	55                   	push   %ebp
   10e23:	89 e5                	mov    %esp,%ebp
   10e25:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "general protection exception!!!");
   10e28:	83 ec 08             	sub    $0x8,%esp
   10e2b:	68 54 23 01 00       	push   $0x12354
   10e30:	ff 75 08             	pushl  0x8(%ebp)
   10e33:	e8 40 fe ff ff       	call   10c78 <do_default_handler>
   10e38:	83 c4 10             	add    $0x10,%esp
}
   10e3b:	90                   	nop
   10e3c:	c9                   	leave  
   10e3d:	c3                   	ret    

00010e3e <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   10e3e:	55                   	push   %ebp
   10e3f:	89 e5                	mov    %esp,%ebp
   10e41:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "page fault exception!!!");
   10e44:	83 ec 08             	sub    $0x8,%esp
   10e47:	68 74 23 01 00       	push   $0x12374
   10e4c:	ff 75 08             	pushl  0x8(%ebp)
   10e4f:	e8 24 fe ff ff       	call   10c78 <do_default_handler>
   10e54:	83 c4 10             	add    $0x10,%esp
}
   10e57:	90                   	nop
   10e58:	c9                   	leave  
   10e59:	c3                   	ret    

00010e5a <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t *frame)
{
   10e5a:	55                   	push   %ebp
   10e5b:	89 e5                	mov    %esp,%ebp
   10e5d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "fpu error exception!!!");
   10e60:	83 ec 08             	sub    $0x8,%esp
   10e63:	68 8c 23 01 00       	push   $0x1238c
   10e68:	ff 75 08             	pushl  0x8(%ebp)
   10e6b:	e8 08 fe ff ff       	call   10c78 <do_default_handler>
   10e70:	83 c4 10             	add    $0x10,%esp
}
   10e73:	90                   	nop
   10e74:	c9                   	leave  
   10e75:	c3                   	ret    

00010e76 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   10e76:	55                   	push   %ebp
   10e77:	89 e5                	mov    %esp,%ebp
   10e79:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "alignment check exception!!!");
   10e7c:	83 ec 08             	sub    $0x8,%esp
   10e7f:	68 a3 23 01 00       	push   $0x123a3
   10e84:	ff 75 08             	pushl  0x8(%ebp)
   10e87:	e8 ec fd ff ff       	call   10c78 <do_default_handler>
   10e8c:	83 c4 10             	add    $0x10,%esp
}
   10e8f:	90                   	nop
   10e90:	c9                   	leave  
   10e91:	c3                   	ret    

00010e92 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   10e92:	55                   	push   %ebp
   10e93:	89 e5                	mov    %esp,%ebp
   10e95:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "machine check exception!!!");
   10e98:	83 ec 08             	sub    $0x8,%esp
   10e9b:	68 c0 23 01 00       	push   $0x123c0
   10ea0:	ff 75 08             	pushl  0x8(%ebp)
   10ea3:	e8 d0 fd ff ff       	call   10c78 <do_default_handler>
   10ea8:	83 c4 10             	add    $0x10,%esp
}
   10eab:	90                   	nop
   10eac:	c9                   	leave  
   10ead:	c3                   	ret    

00010eae <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t *frame)
{
   10eae:	55                   	push   %ebp
   10eaf:	89 e5                	mov    %esp,%ebp
   10eb1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "smd exception!!!");
   10eb4:	83 ec 08             	sub    $0x8,%esp
   10eb7:	68 db 23 01 00       	push   $0x123db
   10ebc:	ff 75 08             	pushl  0x8(%ebp)
   10ebf:	e8 b4 fd ff ff       	call   10c78 <do_default_handler>
   10ec4:	83 c4 10             	add    $0x10,%esp
}
   10ec7:	90                   	nop
   10ec8:	c9                   	leave  
   10ec9:	c3                   	ret    

00010eca <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t *frame)
{
   10eca:	55                   	push   %ebp
   10ecb:	89 e5                	mov    %esp,%ebp
   10ecd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "virtual exception!!!");
   10ed0:	83 ec 08             	sub    $0x8,%esp
   10ed3:	68 ec 23 01 00       	push   $0x123ec
   10ed8:	ff 75 08             	pushl  0x8(%ebp)
   10edb:	e8 98 fd ff ff       	call   10c78 <do_default_handler>
   10ee0:	83 c4 10             	add    $0x10,%esp
}
   10ee3:	90                   	nop
   10ee4:	c9                   	leave  
   10ee5:	c3                   	ret    

00010ee6 <do_handler_control_exception>:
void do_handler_control_exception(exception_frame_t *frame)
{
   10ee6:	55                   	push   %ebp
   10ee7:	89 e5                	mov    %esp,%ebp
   10ee9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "control exception!!!");
   10eec:	83 ec 08             	sub    $0x8,%esp
   10eef:	68 01 24 01 00       	push   $0x12401
   10ef4:	ff 75 08             	pushl  0x8(%ebp)
   10ef7:	e8 7c fd ff ff       	call   10c78 <do_default_handler>
   10efc:	83 c4 10             	add    $0x10,%esp
}
   10eff:	90                   	nop
   10f00:	c9                   	leave  
   10f01:	c3                   	ret    

00010f02 <init_pic>:
/**
 * @brief        : 初始化8259芯片,实现定时器中断。
 * @return        {*}
 **/
static void init_pic()
{
   10f02:	55                   	push   %ebp
   10f03:	89 e5                	mov    %esp,%ebp
    // 第一块8259配置 边缘触发,级联需要配置icw4，8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   10f05:	6a 11                	push   $0x11
   10f07:	6a 20                	push   $0x20
   10f09:	e8 28 fc ff ff       	call   10b36 <outb>
   10f0e:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START); // 起始序号从0x20开始
   10f11:	6a 20                	push   $0x20
   10f13:	6a 21                	push   $0x21
   10f15:	e8 1c fc ff ff       	call   10b36 <outb>
   10f1a:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);        // 主片PIC0_ICW3 有从片
   10f1d:	6a 04                	push   $0x4
   10f1f:	6a 21                	push   $0x21
   10f21:	e8 10 fc ff ff       	call   10b36 <outb>
   10f26:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086); // 普通全嵌套、非缓冲、自动结束8086模式
   10f29:	6a 01                	push   $0x1
   10f2b:	6a 21                	push   $0x21
   10f2d:	e8 04 fc ff ff       	call   10b36 <outb>
   10f32:	83 c4 08             	add    $0x8,%esp

    // 第二块8259配置
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   10f35:	6a 11                	push   $0x11
   10f37:	68 a0 00 00 00       	push   $0xa0
   10f3c:	e8 f5 fb ff ff       	call   10b36 <outb>
   10f41:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8); // 从0x28开始
   10f44:	6a 28                	push   $0x28
   10f46:	68 a1 00 00 00       	push   $0xa1
   10f4b:	e8 e6 fb ff ff       	call   10b36 <outb>
   10f50:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);                 // 没有从片，连接到主片的IRQ2上
   10f53:	6a 02                	push   $0x2
   10f55:	68 a1 00 00 00       	push   $0xa1
   10f5a:	e8 d7 fb ff ff       	call   10b36 <outb>
   10f5f:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);     // 普通全嵌套、非缓冲、非自动结束、8086模式
   10f62:	6a 01                	push   $0x1
   10f64:	68 a1 00 00 00       	push   $0xa1
   10f69:	e8 c8 fb ff ff       	call   10b36 <outb>
   10f6e:	83 c4 08             	add    $0x8,%esp

    // // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10f71:	68 fb 00 00 00       	push   $0xfb
   10f76:	6a 21                	push   $0x21
   10f78:	e8 b9 fb ff ff       	call   10b36 <outb>
   10f7d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10f80:	68 ff 00 00 00       	push   $0xff
   10f85:	68 a1 00 00 00       	push   $0xa1
   10f8a:	e8 a7 fb ff ff       	call   10b36 <outb>
   10f8f:	83 c4 08             	add    $0x8,%esp
}
   10f92:	90                   	nop
   10f93:	c9                   	leave  
   10f94:	c3                   	ret    

00010f95 <pic_send_eoi>:
 * @brief        : 通过写8259的ocw端口，来告诉操作系统irq_num对应的中断已经响应完了
 * @param         {int} irq_num: 中断号
 * @return        {*}
 **/
void pic_send_eoi(int irq_num)
{
   10f95:	55                   	push   %ebp
   10f96:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10f98:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8)
   10f9c:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10fa0:	7e 0f                	jle    10fb1 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10fa2:	6a 20                	push   $0x20
   10fa4:	68 a0 00 00 00       	push   $0xa0
   10fa9:	e8 88 fb ff ff       	call   10b36 <outb>
   10fae:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10fb1:	6a 20                	push   $0x20
   10fb3:	6a 20                	push   $0x20
   10fb5:	e8 7c fb ff ff       	call   10b36 <outb>
   10fba:	83 c4 08             	add    $0x8,%esp
}
   10fbd:	90                   	nop
   10fbe:	c9                   	leave  
   10fbf:	c3                   	ret    

00010fc0 <irq_init>:
/**
 * @brief        : 中断初始化,初始化中断向量表
 * @return        {*}
 **/
void irq_init(void)
{
   10fc0:	55                   	push   %ebp
   10fc1:	89 e5                	mov    %esp,%ebp
   10fc3:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10fc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10fcd:	eb 25                	jmp    10ff4 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   10fcf:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   10fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fd7:	c1 e0 03             	shl    $0x3,%eax
   10fda:	05 80 3f 01 00       	add    $0x13f80,%eax
   10fdf:	68 00 8e 00 00       	push   $0x8e00
   10fe4:	52                   	push   %edx
   10fe5:	6a 08                	push   $0x8
   10fe7:	50                   	push   %eax
   10fe8:	e8 e3 f9 ff ff       	call   109d0 <gate_desc_set>
   10fed:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10ff0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10ff4:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10ff8:	7e d5                	jle    10fcf <irq_init+0xf>
                      GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
    }

    // 安装异常处理函数
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider); // 除0异常
   10ffa:	83 ec 08             	sub    $0x8,%esp
   10ffd:	68 4a 00 01 00       	push   $0x1004a
   11002:	6a 00                	push   $0x0
   11004:	e8 65 01 00 00       	call   1116e <irq_install>
   11009:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   1100c:	83 ec 08             	sub    $0x8,%esp
   1100f:	68 69 00 01 00       	push   $0x10069
   11014:	6a 01                	push   $0x1
   11016:	e8 53 01 00 00       	call   1116e <irq_install>
   1101b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   1101e:	83 ec 08             	sub    $0x8,%esp
   11021:	68 88 00 01 00       	push   $0x10088
   11026:	6a 02                	push   $0x2
   11028:	e8 41 01 00 00       	call   1116e <irq_install>
   1102d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11030:	83 ec 08             	sub    $0x8,%esp
   11033:	68 a7 00 01 00       	push   $0x100a7
   11038:	6a 03                	push   $0x3
   1103a:	e8 2f 01 00 00       	call   1116e <irq_install>
   1103f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11042:	83 ec 08             	sub    $0x8,%esp
   11045:	68 c6 00 01 00       	push   $0x100c6
   1104a:	6a 04                	push   $0x4
   1104c:	e8 1d 01 00 00       	call   1116e <irq_install>
   11051:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   11054:	83 ec 08             	sub    $0x8,%esp
   11057:	68 e5 00 01 00       	push   $0x100e5
   1105c:	6a 05                	push   $0x5
   1105e:	e8 0b 01 00 00       	call   1116e <irq_install>
   11063:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   11066:	83 ec 08             	sub    $0x8,%esp
   11069:	68 04 01 01 00       	push   $0x10104
   1106e:	6a 06                	push   $0x6
   11070:	e8 f9 00 00 00       	call   1116e <irq_install>
   11075:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   11078:	83 ec 08             	sub    $0x8,%esp
   1107b:	68 23 01 01 00       	push   $0x10123
   11080:	6a 07                	push   $0x7
   11082:	e8 e7 00 00 00       	call   1116e <irq_install>
   11087:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   1108a:	83 ec 08             	sub    $0x8,%esp
   1108d:	68 42 01 01 00       	push   $0x10142
   11092:	6a 08                	push   $0x8
   11094:	e8 d5 00 00 00       	call   1116e <irq_install>
   11099:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   1109c:	83 ec 08             	sub    $0x8,%esp
   1109f:	68 5f 01 01 00       	push   $0x1015f
   110a4:	6a 0a                	push   $0xa
   110a6:	e8 c3 00 00 00       	call   1116e <irq_install>
   110ab:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   110ae:	83 ec 08             	sub    $0x8,%esp
   110b1:	68 7c 01 01 00       	push   $0x1017c
   110b6:	6a 0b                	push   $0xb
   110b8:	e8 b1 00 00 00       	call   1116e <irq_install>
   110bd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   110c0:	83 ec 08             	sub    $0x8,%esp
   110c3:	68 99 01 01 00       	push   $0x10199
   110c8:	6a 0c                	push   $0xc
   110ca:	e8 9f 00 00 00       	call   1116e <irq_install>
   110cf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   110d2:	83 ec 08             	sub    $0x8,%esp
   110d5:	68 b6 01 01 00       	push   $0x101b6
   110da:	6a 0d                	push   $0xd
   110dc:	e8 8d 00 00 00       	call   1116e <irq_install>
   110e1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   110e4:	83 ec 08             	sub    $0x8,%esp
   110e7:	68 d3 01 01 00       	push   $0x101d3
   110ec:	6a 0e                	push   $0xe
   110ee:	e8 7b 00 00 00       	call   1116e <irq_install>
   110f3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   110f6:	83 ec 08             	sub    $0x8,%esp
   110f9:	68 f0 01 01 00       	push   $0x101f0
   110fe:	6a 10                	push   $0x10
   11100:	e8 69 00 00 00       	call   1116e <irq_install>
   11105:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11108:	83 ec 08             	sub    $0x8,%esp
   1110b:	68 0f 02 01 00       	push   $0x1020f
   11110:	6a 11                	push   $0x11
   11112:	e8 57 00 00 00       	call   1116e <irq_install>
   11117:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   1111a:	83 ec 08             	sub    $0x8,%esp
   1111d:	68 2c 02 01 00       	push   $0x1022c
   11122:	6a 12                	push   $0x12
   11124:	e8 45 00 00 00       	call   1116e <irq_install>
   11129:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   1112c:	83 ec 08             	sub    $0x8,%esp
   1112f:	68 4b 02 01 00       	push   $0x1024b
   11134:	6a 13                	push   $0x13
   11136:	e8 33 00 00 00       	call   1116e <irq_install>
   1113b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   1113e:	83 ec 08             	sub    $0x8,%esp
   11141:	68 6a 02 01 00       	push   $0x1026a
   11146:	6a 14                	push   $0x14
   11148:	e8 21 00 00 00       	call   1116e <irq_install>
   1114d:	83 c4 10             	add    $0x10,%esp

    // 加载IDT表
    lidt((uint32_t)idt_table, sizeof(idt_table));
   11150:	b8 80 3f 01 00       	mov    $0x13f80,%eax
   11155:	83 ec 08             	sub    $0x8,%esp
   11158:	68 00 04 00 00       	push   $0x400
   1115d:	50                   	push   %eax
   1115e:	e8 f2 f9 ff ff       	call   10b55 <lidt>
   11163:	83 c4 10             	add    $0x10,%esp

    init_pic(); // 初始化8259芯片
   11166:	e8 97 fd ff ff       	call   10f02 <init_pic>
}
   1116b:	90                   	nop
   1116c:	c9                   	leave  
   1116d:	c3                   	ret    

0001116e <irq_install>:
 * @param         {int} irq_num:
 * @param         {irq_handler_t} handler:
 * @return        {*}
 **/
int irq_install(int irq_num, irq_handler_t handler)
{
   1116e:	55                   	push   %ebp
   1116f:	89 e5                	mov    %esp,%ebp
   11171:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   11174:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11178:	7e 07                	jle    11181 <irq_install+0x13>
    {
        return -1;
   1117a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1117f:	eb 25                	jmp    111a6 <irq_install+0x38>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT);
   11181:	8b 45 0c             	mov    0xc(%ebp),%eax
   11184:	8b 55 08             	mov    0x8(%ebp),%edx
   11187:	c1 e2 03             	shl    $0x3,%edx
   1118a:	81 c2 80 3f 01 00    	add    $0x13f80,%edx
   11190:	68 00 8e 00 00       	push   $0x8e00
   11195:	50                   	push   %eax
   11196:	6a 08                	push   $0x8
   11198:	52                   	push   %edx
   11199:	e8 32 f8 ff ff       	call   109d0 <gate_desc_set>
   1119e:	83 c4 10             	add    $0x10,%esp
    return 0;
   111a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111a6:	c9                   	leave  
   111a7:	c3                   	ret    

000111a8 <irq_enable>:
 * @brief        : 开启特定中断
 * @param         {int} irq_num: 特定中断号
 * @return        {*}
 **/
void irq_enable(int irq_num)
{
   111a8:	55                   	push   %ebp
   111a9:	89 e5                	mov    %esp,%ebp
   111ab:	53                   	push   %ebx
   111ac:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   111af:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   111b3:	7e 78                	jle    1122d <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   111b5:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   111b9:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   111bd:	7f 32                	jg     111f1 <irq_enable+0x49>
    {
        // 第一块8259中的中断
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   111bf:	6a 21                	push   $0x21
   111c1:	e8 53 f9 ff ff       	call   10b19 <inb>
   111c6:	83 c4 04             	add    $0x4,%esp
   111c9:	89 c2                	mov    %eax,%edx
   111cb:	8b 45 08             	mov    0x8(%ebp),%eax
   111ce:	bb 01 00 00 00       	mov    $0x1,%ebx
   111d3:	89 c1                	mov    %eax,%ecx
   111d5:	d3 e3                	shl    %cl,%ebx
   111d7:	89 d8                	mov    %ebx,%eax
   111d9:	f7 d0                	not    %eax
   111db:	21 d0                	and    %edx,%eax
   111dd:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   111e0:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   111e4:	50                   	push   %eax
   111e5:	6a 21                	push   $0x21
   111e7:	e8 4a f9 ff ff       	call   10b36 <outb>
   111ec:	83 c4 08             	add    $0x8,%esp
   111ef:	eb 3d                	jmp    1122e <irq_enable+0x86>
    }
    else
    {
        // 第二块8259的中断
        irq_num -= 8;
   111f1:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   111f5:	68 a1 00 00 00       	push   $0xa1
   111fa:	e8 1a f9 ff ff       	call   10b19 <inb>
   111ff:	83 c4 04             	add    $0x4,%esp
   11202:	89 c2                	mov    %eax,%edx
   11204:	8b 45 08             	mov    0x8(%ebp),%eax
   11207:	bb 01 00 00 00       	mov    $0x1,%ebx
   1120c:	89 c1                	mov    %eax,%ecx
   1120e:	d3 e3                	shl    %cl,%ebx
   11210:	89 d8                	mov    %ebx,%eax
   11212:	f7 d0                	not    %eax
   11214:	21 d0                	and    %edx,%eax
   11216:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11219:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1121d:	50                   	push   %eax
   1121e:	68 a1 00 00 00       	push   $0xa1
   11223:	e8 0e f9 ff ff       	call   10b36 <outb>
   11228:	83 c4 08             	add    $0x8,%esp
   1122b:	eb 01                	jmp    1122e <irq_enable+0x86>
        return;
   1122d:	90                   	nop
    }
}
   1122e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11231:	c9                   	leave  
   11232:	c3                   	ret    

00011233 <irq_disable>:
 * @brief        : 关闭特定中断
 * @param         {int} irq_num: 特定中断号
 * @return        {*}
 **/
void irq_disable(int irq_num)
{
   11233:	55                   	push   %ebp
   11234:	89 e5                	mov    %esp,%ebp
   11236:	53                   	push   %ebx
   11237:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   1123a:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1123e:	7e 74                	jle    112b4 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11240:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11244:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11248:	7f 30                	jg     1127a <irq_disable+0x47>
    {
        // 第一块8259中的中断
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1124a:	6a 21                	push   $0x21
   1124c:	e8 c8 f8 ff ff       	call   10b19 <inb>
   11251:	83 c4 04             	add    $0x4,%esp
   11254:	89 c3                	mov    %eax,%ebx
   11256:	8b 45 08             	mov    0x8(%ebp),%eax
   11259:	ba 01 00 00 00       	mov    $0x1,%edx
   1125e:	89 c1                	mov    %eax,%ecx
   11260:	d3 e2                	shl    %cl,%edx
   11262:	89 d0                	mov    %edx,%eax
   11264:	09 d8                	or     %ebx,%eax
   11266:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11269:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1126d:	50                   	push   %eax
   1126e:	6a 21                	push   $0x21
   11270:	e8 c1 f8 ff ff       	call   10b36 <outb>
   11275:	83 c4 08             	add    $0x8,%esp
   11278:	eb 3b                	jmp    112b5 <irq_disable+0x82>
    }
    else
    {
        // 第二块8259的中断
        irq_num -= 8;
   1127a:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   1127e:	68 a1 00 00 00       	push   $0xa1
   11283:	e8 91 f8 ff ff       	call   10b19 <inb>
   11288:	83 c4 04             	add    $0x4,%esp
   1128b:	89 c3                	mov    %eax,%ebx
   1128d:	8b 45 08             	mov    0x8(%ebp),%eax
   11290:	ba 01 00 00 00       	mov    $0x1,%edx
   11295:	89 c1                	mov    %eax,%ecx
   11297:	d3 e2                	shl    %cl,%edx
   11299:	89 d0                	mov    %edx,%eax
   1129b:	09 d8                	or     %ebx,%eax
   1129d:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   112a0:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   112a4:	50                   	push   %eax
   112a5:	68 a1 00 00 00       	push   $0xa1
   112aa:	e8 87 f8 ff ff       	call   10b36 <outb>
   112af:	83 c4 08             	add    $0x8,%esp
   112b2:	eb 01                	jmp    112b5 <irq_disable+0x82>
        return;
   112b4:	90                   	nop
    }
}
   112b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   112b8:	c9                   	leave  
   112b9:	c3                   	ret    

000112ba <irq_disable_global>:
/**
 * @brief        : 全局中断关闭eflags置0
 * @return        {*}
 **/
void irq_disable_global(void)
{
   112ba:	55                   	push   %ebp
   112bb:	89 e5                	mov    %esp,%ebp
    cli();
   112bd:	e8 49 f8 ff ff       	call   10b0b <cli>
}
   112c2:	90                   	nop
   112c3:	5d                   	pop    %ebp
   112c4:	c3                   	ret    

000112c5 <irq_enable_global>:
/**
 * @brief        : 全局中断开启eflags置1
 * @return        {*}
 **/
void irq_enable_global(void)
{
   112c5:	55                   	push   %ebp
   112c6:	89 e5                	mov    %esp,%ebp
    sti();
   112c8:	e8 45 f8 ff ff       	call   10b12 <sti>
}
   112cd:	90                   	nop
   112ce:	5d                   	pop    %ebp
   112cf:	c3                   	ret    

000112d0 <irq_enter_protection>:

irq_state_t irq_enter_protection(void)
{
   112d0:	55                   	push   %ebp
   112d1:	89 e5                	mov    %esp,%ebp
   112d3:	83 ec 10             	sub    $0x10,%esp

    irq_state_t state = read_eflags();
   112d6:	e8 a9 f8 ff ff       	call   10b84 <read_eflags>
   112db:	89 45 fc             	mov    %eax,-0x4(%ebp)

    irq_disable_global();
   112de:	e8 d7 ff ff ff       	call   112ba <irq_disable_global>

    return state;
   112e3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   112e6:	c9                   	leave  
   112e7:	c3                   	ret    

000112e8 <irq_leave_protection>:
void irq_leave_protection(irq_state_t state)
{
   112e8:	55                   	push   %ebp
   112e9:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   112eb:	ff 75 08             	pushl  0x8(%ebp)
   112ee:	e8 a1 f8 ff ff       	call   10b94 <write_eflags>
   112f3:	83 c4 04             	add    $0x4,%esp
}
   112f6:	90                   	nop
   112f7:	c9                   	leave  
   112f8:	c3                   	ret    

000112f9 <outb>:
{
   112f9:	55                   	push   %ebp
   112fa:	89 e5                	mov    %esp,%ebp
   112fc:	83 ec 08             	sub    $0x8,%esp
   112ff:	8b 55 08             	mov    0x8(%ebp),%edx
   11302:	8b 45 0c             	mov    0xc(%ebp),%eax
   11305:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11309:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   1130c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11310:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11314:	ee                   	out    %al,(%dx)
}
   11315:	90                   	nop
   11316:	c9                   	leave  
   11317:	c3                   	ret    

00011318 <do_handler_timer>:
 * @brief        : 定时器中断处理函数
 * @param         {exception_frame_t} *frame: 异常信息
 * @return        {*}
**/
void do_handler_timer(exception_frame_t *frame)
{
   11318:	55                   	push   %ebp
   11319:	89 e5                	mov    %esp,%ebp
   1131b:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1131e:	a1 80 43 01 00       	mov    0x14380,%eax
   11323:	83 c0 01             	add    $0x1,%eax
   11326:	a3 80 43 01 00       	mov    %eax,0x14380

    pic_send_eoi(IRQ0_TIMER);
   1132b:	83 ec 0c             	sub    $0xc,%esp
   1132e:	6a 20                	push   $0x20
   11330:	e8 60 fc ff ff       	call   10f95 <pic_send_eoi>
   11335:	83 c4 10             	add    $0x10,%esp

    task_time_ticks();
   11338:	e8 46 f4 ff ff       	call   10783 <task_time_ticks>
}
   1133d:	90                   	nop
   1133e:	c9                   	leave  
   1133f:	c3                   	ret    

00011340 <init_pit>:
/**
 * @brief        : 初始化
 * @return        {*}
 **/
static void init_pit()
{
   11340:	55                   	push   %ebp
   11341:	89 e5                	mov    %esp,%ebp
   11343:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 * OS_TICKS_MS);
   11346:	c7 45 f4 77 00 00 00 	movl   $0x77,-0xc(%ebp)

    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   1134d:	6a 36                	push   $0x36
   1134f:	6a 43                	push   $0x43
   11351:	e8 a3 ff ff ff       	call   112f9 <outb>
   11356:	83 c4 08             	add    $0x8,%esp

    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF); // 加载低8位
   11359:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1135c:	0f b6 c0             	movzbl %al,%eax
   1135f:	50                   	push   %eax
   11360:	6a 40                	push   $0x40
   11362:	e8 92 ff ff ff       	call   112f9 <outb>
   11367:	83 c4 08             	add    $0x8,%esp

    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 加载高8位
   1136a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1136d:	c1 e8 08             	shr    $0x8,%eax
   11370:	0f b6 c0             	movzbl %al,%eax
   11373:	50                   	push   %eax
   11374:	6a 40                	push   $0x40
   11376:	e8 7e ff ff ff       	call   112f9 <outb>
   1137b:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1137e:	83 ec 08             	sub    $0x8,%esp
   11381:	68 a6 02 01 00       	push   $0x102a6
   11386:	6a 20                	push   $0x20
   11388:	e8 e1 fd ff ff       	call   1116e <irq_install>
   1138d:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11390:	83 ec 0c             	sub    $0xc,%esp
   11393:	6a 20                	push   $0x20
   11395:	e8 0e fe ff ff       	call   111a8 <irq_enable>
   1139a:	83 c4 10             	add    $0x10,%esp
}
   1139d:	90                   	nop
   1139e:	c9                   	leave  
   1139f:	c3                   	ret    

000113a0 <time_init>:
/**
 * @brief        : 定时器初始化函数
 * @return        {*}
 **/
void time_init(void)
{
   113a0:	55                   	push   %ebp
   113a1:	89 e5                	mov    %esp,%ebp
   113a3:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   113a6:	c7 05 80 43 01 00 00 	movl   $0x0,0x14380
   113ad:	00 00 00 
    init_pit();
   113b0:	e8 8b ff ff ff       	call   11340 <init_pit>
   113b5:	90                   	nop
   113b6:	c9                   	leave  
   113b7:	c3                   	ret    

000113b8 <list_first>:
{
   113b8:	55                   	push   %ebp
   113b9:	89 e5                	mov    %esp,%ebp
    return list->first;
   113bb:	8b 45 08             	mov    0x8(%ebp),%eax
   113be:	8b 00                	mov    (%eax),%eax
}
   113c0:	5d                   	pop    %ebp
   113c1:	c3                   	ret    

000113c2 <list_last>:
{
   113c2:	55                   	push   %ebp
   113c3:	89 e5                	mov    %esp,%ebp
    return list->last;
   113c5:	8b 45 08             	mov    0x8(%ebp),%eax
   113c8:	8b 40 04             	mov    0x4(%eax),%eax
}
   113cb:	5d                   	pop    %ebp
   113cc:	c3                   	ret    

000113cd <list_count>:
{
   113cd:	55                   	push   %ebp
   113ce:	89 e5                	mov    %esp,%ebp
    return list->count;
   113d0:	8b 45 08             	mov    0x8(%ebp),%eax
   113d3:	8b 40 08             	mov    0x8(%eax),%eax
}
   113d6:	5d                   	pop    %ebp
   113d7:	c3                   	ret    

000113d8 <kernel_init>:
 * @brief        : 内核初始化
 * @param         {boot_info_t} *boot_info: 启动信息
 * @return        {*}
 **/
void kernel_init(boot_info_t *boot_info)
{
   113d8:	55                   	push   %ebp
   113d9:	89 e5                	mov    %esp,%ebp
   113db:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   113de:	8b 45 08             	mov    0x8(%ebp),%eax
   113e1:	a3 a0 43 01 00       	mov    %eax,0x143a0
    cpu_init();
   113e6:	e8 15 f7 ff ff       	call   10b00 <cpu_init>

    log_init();
   113eb:	e8 3b 0b 00 00       	call   11f2b <log_init>
    irq_init();
   113f0:	e8 cb fb ff ff       	call   10fc0 <irq_init>
    time_init();
   113f5:	e8 a6 ff ff ff       	call   113a0 <time_init>
    task_manager_init();
   113fa:	e8 d0 f2 ff ff       	call   106cf <task_manager_init>
}
   113ff:	90                   	nop
   11400:	c9                   	leave  
   11401:	c3                   	ret    

00011402 <first_task_entry>:

static task_t init_task;  // 初始任务
static task_t first_task; // 第一个任务
static uint32_t first_task_stack[1024];
void first_task_entry(void)
{
   11402:	55                   	push   %ebp
   11403:	89 e5                	mov    %esp,%ebp
   11405:	83 ec 18             	sub    $0x18,%esp
     int count = 0;
   11408:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("first_task_entry , count is %d", count++);
   1140f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11412:	8d 50 01             	lea    0x1(%eax),%edx
   11415:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11418:	83 ec 08             	sub    $0x8,%esp
   1141b:	50                   	push   %eax
   1141c:	68 18 24 01 00       	push   $0x12418
   11421:	e8 7a 0b 00 00       	call   11fa0 <log_printf>
   11426:	83 c4 10             	add    $0x10,%esp
        // sys_sched_yield();
        sys_sleep(1000);
   11429:	83 ec 0c             	sub    $0xc,%esp
   1142c:	68 e8 03 00 00       	push   $0x3e8
   11431:	e8 7b f4 ff ff       	call   108b1 <sys_sleep>
   11436:	83 c4 10             	add    $0x10,%esp
        log_printf("first_task_entry , count is %d", count++);
   11439:	eb d4                	jmp    1140f <first_task_entry+0xd>

0001143b <list_test>:
    }
}

void list_test()
{
   1143b:	55                   	push   %ebp
   1143c:	89 e5                	mov    %esp,%ebp
   1143e:	56                   	push   %esi
   1143f:	53                   	push   %ebx
   11440:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_init(&list);
   11443:	83 ec 0c             	sub    $0xc,%esp
   11446:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11449:	50                   	push   %eax
   1144a:	e8 b9 08 00 00       	call   11d08 <list_init>
   1144f:	83 c4 10             	add    $0x10,%esp

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11452:	83 ec 0c             	sub    $0xc,%esp
   11455:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11458:	50                   	push   %eax
   11459:	e8 6f ff ff ff       	call   113cd <list_count>
   1145e:	83 c4 10             	add    $0x10,%esp
   11461:	89 c6                	mov    %eax,%esi
   11463:	83 ec 0c             	sub    $0xc,%esp
   11466:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11469:	50                   	push   %eax
   1146a:	e8 53 ff ff ff       	call   113c2 <list_last>
   1146f:	83 c4 10             	add    $0x10,%esp
   11472:	89 c3                	mov    %eax,%ebx
   11474:	83 ec 0c             	sub    $0xc,%esp
   11477:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1147a:	50                   	push   %eax
   1147b:	e8 38 ff ff ff       	call   113b8 <list_first>
   11480:	83 c4 10             	add    $0x10,%esp
   11483:	56                   	push   %esi
   11484:	53                   	push   %ebx
   11485:	50                   	push   %eax
   11486:	68 38 24 01 00       	push   $0x12438
   1148b:	e8 10 0b 00 00       	call   11fa0 <log_printf>
   11490:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    list_node_t nodes[5];

    for (int i = 0; i < 5; i++)
   11493:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1149a:	eb 3f                	jmp    114db <list_test+0xa0>
    {
        list_node_t *node = nodes + i;
   1149c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1149f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   114a6:	8d 45 9c             	lea    -0x64(%ebp),%eax
   114a9:	01 d0                	add    %edx,%eax
   114ab:	89 45 d0             	mov    %eax,-0x30(%ebp)
        log_printf("insert head to list : %d , 0x%x \n", i, (uint32_t)node);
   114ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
   114b1:	83 ec 04             	sub    $0x4,%esp
   114b4:	50                   	push   %eax
   114b5:	ff 75 f4             	pushl  -0xc(%ebp)
   114b8:	68 68 24 01 00       	push   $0x12468
   114bd:	e8 de 0a 00 00       	call   11fa0 <log_printf>
   114c2:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   114c5:	83 ec 08             	sub    $0x8,%esp
   114c8:	ff 75 d0             	pushl  -0x30(%ebp)
   114cb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114ce:	50                   	push   %eax
   114cf:	e8 59 08 00 00       	call   11d2d <list_insert_first>
   114d4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   114d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   114db:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   114df:	7e bb                	jle    1149c <list_test+0x61>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   114e1:	83 ec 0c             	sub    $0xc,%esp
   114e4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114e7:	50                   	push   %eax
   114e8:	e8 e0 fe ff ff       	call   113cd <list_count>
   114ed:	83 c4 10             	add    $0x10,%esp
   114f0:	89 c6                	mov    %eax,%esi
   114f2:	83 ec 0c             	sub    $0xc,%esp
   114f5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   114f8:	50                   	push   %eax
   114f9:	e8 c4 fe ff ff       	call   113c2 <list_last>
   114fe:	83 c4 10             	add    $0x10,%esp
   11501:	89 c3                	mov    %eax,%ebx
   11503:	83 ec 0c             	sub    $0xc,%esp
   11506:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11509:	50                   	push   %eax
   1150a:	e8 a9 fe ff ff       	call   113b8 <list_first>
   1150f:	83 c4 10             	add    $0x10,%esp
   11512:	56                   	push   %esi
   11513:	53                   	push   %ebx
   11514:	50                   	push   %eax
   11515:	68 38 24 01 00       	push   $0x12438
   1151a:	e8 81 0a 00 00       	call   11fa0 <log_printf>
   1151f:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    list_init(&list);
   11522:	83 ec 0c             	sub    $0xc,%esp
   11525:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11528:	50                   	push   %eax
   11529:	e8 da 07 00 00       	call   11d08 <list_init>
   1152e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11531:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11538:	eb 3f                	jmp    11579 <list_test+0x13e>
    {
        list_node_t *node = nodes + i;
   1153a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1153d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11544:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11547:	01 d0                	add    %edx,%eax
   11549:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("insert last to list : %d , 0x%x \n", i, (uint32_t)node);
   1154c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   1154f:	83 ec 04             	sub    $0x4,%esp
   11552:	50                   	push   %eax
   11553:	ff 75 f0             	pushl  -0x10(%ebp)
   11556:	68 8c 24 01 00       	push   $0x1248c
   1155b:	e8 40 0a 00 00       	call   11fa0 <log_printf>
   11560:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11563:	83 ec 08             	sub    $0x8,%esp
   11566:	ff 75 d4             	pushl  -0x2c(%ebp)
   11569:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   1156c:	50                   	push   %eax
   1156d:	e8 1b 08 00 00       	call   11d8d <list_insert_last>
   11572:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11575:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11579:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1157d:	7e bb                	jle    1153a <list_test+0xff>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   1157f:	83 ec 0c             	sub    $0xc,%esp
   11582:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11585:	50                   	push   %eax
   11586:	e8 42 fe ff ff       	call   113cd <list_count>
   1158b:	83 c4 10             	add    $0x10,%esp
   1158e:	89 c6                	mov    %eax,%esi
   11590:	83 ec 0c             	sub    $0xc,%esp
   11593:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11596:	50                   	push   %eax
   11597:	e8 26 fe ff ff       	call   113c2 <list_last>
   1159c:	83 c4 10             	add    $0x10,%esp
   1159f:	89 c3                	mov    %eax,%ebx
   115a1:	83 ec 0c             	sub    $0xc,%esp
   115a4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115a7:	50                   	push   %eax
   115a8:	e8 0b fe ff ff       	call   113b8 <list_first>
   115ad:	83 c4 10             	add    $0x10,%esp
   115b0:	56                   	push   %esi
   115b1:	53                   	push   %ebx
   115b2:	50                   	push   %eax
   115b3:	68 38 24 01 00       	push   $0x12438
   115b8:	e8 e3 09 00 00       	call   11fa0 <log_printf>
   115bd:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    // remove first
    for (int i = 0; i < 5; i++)
   115c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   115c7:	eb 2d                	jmp    115f6 <list_test+0x1bb>
    {
        list_node_t *node = list_remove_first(&list);
   115c9:	83 ec 0c             	sub    $0xc,%esp
   115cc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   115cf:	50                   	push   %eax
   115d0:	e8 1c 08 00 00       	call   11df1 <list_remove_first>
   115d5:	83 c4 10             	add    $0x10,%esp
   115d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
        log_printf("remove head to list : %d , 0x%x \n", i, (uint32_t)node);
   115db:	8b 45 d8             	mov    -0x28(%ebp),%eax
   115de:	83 ec 04             	sub    $0x4,%esp
   115e1:	50                   	push   %eax
   115e2:	ff 75 ec             	pushl  -0x14(%ebp)
   115e5:	68 b0 24 01 00       	push   $0x124b0
   115ea:	e8 b1 09 00 00       	call   11fa0 <log_printf>
   115ef:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   115f2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   115f6:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   115fa:	7e cd                	jle    115c9 <list_test+0x18e>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   115fc:	83 ec 0c             	sub    $0xc,%esp
   115ff:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11602:	50                   	push   %eax
   11603:	e8 c5 fd ff ff       	call   113cd <list_count>
   11608:	83 c4 10             	add    $0x10,%esp
   1160b:	89 c6                	mov    %eax,%esi
   1160d:	83 ec 0c             	sub    $0xc,%esp
   11610:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11613:	50                   	push   %eax
   11614:	e8 a9 fd ff ff       	call   113c2 <list_last>
   11619:	83 c4 10             	add    $0x10,%esp
   1161c:	89 c3                	mov    %eax,%ebx
   1161e:	83 ec 0c             	sub    $0xc,%esp
   11621:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11624:	50                   	push   %eax
   11625:	e8 8e fd ff ff       	call   113b8 <list_first>
   1162a:	83 c4 10             	add    $0x10,%esp
   1162d:	56                   	push   %esi
   1162e:	53                   	push   %ebx
   1162f:	50                   	push   %eax
   11630:	68 38 24 01 00       	push   $0x12438
   11635:	e8 66 09 00 00       	call   11fa0 <log_printf>
   1163a:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    // remove node
    list_init(&list);
   1163d:	83 ec 0c             	sub    $0xc,%esp
   11640:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11643:	50                   	push   %eax
   11644:	e8 bf 06 00 00       	call   11d08 <list_init>
   11649:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   1164c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11653:	eb 28                	jmp    1167d <list_test+0x242>
    {
        list_node_t *node = nodes + i;
   11655:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11658:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   1165f:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11662:	01 d0                	add    %edx,%eax
   11664:	89 45 dc             	mov    %eax,-0x24(%ebp)
        list_insert_last(&list, node);
   11667:	83 ec 08             	sub    $0x8,%esp
   1166a:	ff 75 dc             	pushl  -0x24(%ebp)
   1166d:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11670:	50                   	push   %eax
   11671:	e8 17 07 00 00       	call   11d8d <list_insert_last>
   11676:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11679:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   1167d:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11681:	7e d2                	jle    11655 <list_test+0x21a>
    }

    for (int i = 0; i < 5; i++)
   11683:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   1168a:	eb 3f                	jmp    116cb <list_test+0x290>
    {
        list_node_t *node = nodes + i;
   1168c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1168f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11696:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11699:	01 d0                	add    %edx,%eax
   1169b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_remove(&list, node);
   1169e:	83 ec 08             	sub    $0x8,%esp
   116a1:	ff 75 e0             	pushl  -0x20(%ebp)
   116a4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116a7:	50                   	push   %eax
   116a8:	e8 bd 07 00 00       	call   11e6a <list_remove>
   116ad:	83 c4 10             	add    $0x10,%esp
        log_printf("remove node to list : %d , 0x%x \n", i, (uint32_t)node);
   116b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
   116b3:	83 ec 04             	sub    $0x4,%esp
   116b6:	50                   	push   %eax
   116b7:	ff 75 e4             	pushl  -0x1c(%ebp)
   116ba:	68 d4 24 01 00       	push   $0x124d4
   116bf:	e8 dc 08 00 00       	call   11fa0 <log_printf>
   116c4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   116c7:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
   116cb:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
   116cf:	7e bb                	jle    1168c <list_test+0x251>
    }
    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   116d1:	83 ec 0c             	sub    $0xc,%esp
   116d4:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116d7:	50                   	push   %eax
   116d8:	e8 f0 fc ff ff       	call   113cd <list_count>
   116dd:	83 c4 10             	add    $0x10,%esp
   116e0:	89 c6                	mov    %eax,%esi
   116e2:	83 ec 0c             	sub    $0xc,%esp
   116e5:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116e8:	50                   	push   %eax
   116e9:	e8 d4 fc ff ff       	call   113c2 <list_last>
   116ee:	83 c4 10             	add    $0x10,%esp
   116f1:	89 c3                	mov    %eax,%ebx
   116f3:	83 ec 0c             	sub    $0xc,%esp
   116f6:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   116f9:	50                   	push   %eax
   116fa:	e8 b9 fc ff ff       	call   113b8 <list_first>
   116ff:	83 c4 10             	add    $0x10,%esp
   11702:	56                   	push   %esi
   11703:	53                   	push   %ebx
   11704:	50                   	push   %eax
   11705:	68 38 24 01 00       	push   $0x12438
   1170a:	e8 91 08 00 00       	call   11fa0 <log_printf>
   1170f:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));
}
   11712:	90                   	nop
   11713:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11716:	5b                   	pop    %ebx
   11717:	5e                   	pop    %esi
   11718:	5d                   	pop    %ebp
   11719:	c3                   	ret    

0001171a <init_main>:

void init_main()
{
   1171a:	55                   	push   %ebp
   1171b:	89 e5                	mov    %esp,%ebp
   1171d:	83 ec 18             	sub    $0x18,%esp
    // int a = 3 / 0;
    //irq_enable_global(); // 测试打开全局中断
    log_printf("Kernel is running . . .");
   11720:	83 ec 0c             	sub    $0xc,%esp
   11723:	68 f6 24 01 00       	push   $0x124f6
   11728:	e8 73 08 00 00       	call   11fa0 <log_printf>
   1172d:	83 c4 10             	add    $0x10,%esp
    log_printf("Version:%s", OS_VERSION);
   11730:	83 ec 08             	sub    $0x8,%esp
   11733:	68 0e 25 01 00       	push   $0x1250e
   11738:	68 14 25 01 00       	push   $0x12514
   1173d:	e8 5e 08 00 00       	call   11fa0 <log_printf>
   11742:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, "init task",(uint32_t)first_task_entry, (uint32_t)&first_task_stack[1024]); // x86栈地址由高到低增长 ,同时init_task需要一个单独的栈空间。
   11745:	ba 80 55 01 00       	mov    $0x15580,%edx
   1174a:	b8 02 14 01 00       	mov    $0x11402,%eax
   1174f:	52                   	push   %edx
   11750:	50                   	push   %eax
   11751:	68 1f 25 01 00       	push   $0x1251f
   11756:	68 a0 44 01 00       	push   $0x144a0
   1175b:	e8 52 ee ff ff       	call   105b2 <task_init>
   11760:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11763:	e8 d4 ef ff ff       	call   1073c <task_first_init>
    list_test();
   11768:	e8 ce fc ff ff       	call   1143b <list_test>
    int count = 0;
   1176d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("init main , count is %d", count++);
   11774:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11777:	8d 50 01             	lea    0x1(%eax),%edx
   1177a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1177d:	83 ec 08             	sub    $0x8,%esp
   11780:	50                   	push   %eax
   11781:	68 29 25 01 00       	push   $0x12529
   11786:	e8 15 08 00 00       	call   11fa0 <log_printf>
   1178b:	83 c4 10             	add    $0x10,%esp
        // sys_sched_yield();
        sys_sleep(10000);
   1178e:	83 ec 0c             	sub    $0xc,%esp
   11791:	68 10 27 00 00       	push   $0x2710
   11796:	e8 16 f1 ff ff       	call   108b1 <sys_sleep>
   1179b:	83 c4 10             	add    $0x10,%esp
        log_printf("init main , count is %d", count++);
   1179e:	eb d4                	jmp    11774 <init_main+0x5a>

000117a0 <hlt>:
{
   117a0:	55                   	push   %ebp
   117a1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   117a3:	f4                   	hlt    
}
   117a4:	90                   	nop
   117a5:	5d                   	pop    %ebp
   117a6:	c3                   	ret    

000117a7 <kernel_strcpy>:
 * @param         {char *} dest:目的地址
 * @param         {char *} src:源字符串地址
 * @return        {*}
 **/
void kernel_strcpy(char *dest, const char *src)
{
   117a7:	55                   	push   %ebp
   117a8:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   117aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117ae:	74 2f                	je     117df <kernel_strcpy+0x38>
   117b0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117b4:	74 29                	je     117df <kernel_strcpy+0x38>
    {
        return;
    }
    while (*dest && *src)
   117b6:	eb 0b                	jmp    117c3 <kernel_strcpy+0x1c>
    {
        *dest = *src;
   117b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   117bb:	0f b6 10             	movzbl (%eax),%edx
   117be:	8b 45 08             	mov    0x8(%ebp),%eax
   117c1:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   117c3:	8b 45 08             	mov    0x8(%ebp),%eax
   117c6:	0f b6 00             	movzbl (%eax),%eax
   117c9:	84 c0                	test   %al,%al
   117cb:	74 0a                	je     117d7 <kernel_strcpy+0x30>
   117cd:	8b 45 0c             	mov    0xc(%ebp),%eax
   117d0:	0f b6 00             	movzbl (%eax),%eax
   117d3:	84 c0                	test   %al,%al
   117d5:	75 e1                	jne    117b8 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   117d7:	8b 45 08             	mov    0x8(%ebp),%eax
   117da:	c6 00 00             	movb   $0x0,(%eax)
   117dd:	eb 01                	jmp    117e0 <kernel_strcpy+0x39>
        return;
   117df:	90                   	nop
}
   117e0:	5d                   	pop    %ebp
   117e1:	c3                   	ret    

000117e2 <kernel_strncpy>:
 * @param         {char *} src:源字符串地址
 * @param         {int} size:大小
 * @return        {*}
 **/
void kernel_strncpy(char *dest, const char *src, int size)
{
   117e2:	55                   	push   %ebp
   117e3:	89 e5                	mov    %esp,%ebp
   117e5:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   117e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   117ec:	74 61                	je     1184f <kernel_strncpy+0x6d>
   117ee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   117f2:	74 5b                	je     1184f <kernel_strncpy+0x6d>
   117f4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   117f8:	74 55                	je     1184f <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   117fa:	8b 45 08             	mov    0x8(%ebp),%eax
   117fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   11800:	8b 45 0c             	mov    0xc(%ebp),%eax
   11803:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   11806:	eb 17                	jmp    1181f <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   11808:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1180b:	8d 42 01             	lea    0x1(%edx),%eax
   1180e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11811:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11814:	8d 48 01             	lea    0x1(%eax),%ecx
   11817:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1181a:	0f b6 12             	movzbl (%edx),%edx
   1181d:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   1181f:	8b 45 10             	mov    0x10(%ebp),%eax
   11822:	8d 50 ff             	lea    -0x1(%eax),%edx
   11825:	89 55 10             	mov    %edx,0x10(%ebp)
   11828:	85 c0                	test   %eax,%eax
   1182a:	7e 0a                	jle    11836 <kernel_strncpy+0x54>
   1182c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1182f:	0f b6 00             	movzbl (%eax),%eax
   11832:	84 c0                	test   %al,%al
   11834:	75 d2                	jne    11808 <kernel_strncpy+0x26>
    }

    if (size == 0)
   11836:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1183a:	75 0b                	jne    11847 <kernel_strncpy+0x65>
    {

        *(d - 1) = '\0';
   1183c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1183f:	83 e8 01             	sub    $0x1,%eax
   11842:	c6 00 00             	movb   $0x0,(%eax)
   11845:	eb 09                	jmp    11850 <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   11847:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1184a:	c6 00 00             	movb   $0x0,(%eax)
   1184d:	eb 01                	jmp    11850 <kernel_strncpy+0x6e>
        return;
   1184f:	90                   	nop
    }
}
   11850:	c9                   	leave  
   11851:	c3                   	ret    

00011852 <kernel_strncmp>:
 * @param         {char *} s2: 字符串2
 * @param         {int} size: 需要比较的字符串长度
 * @return        {*}相等返回0 ,否则返回-1
 **/
int kernel_strncmp(const char *s1, const char *s2, int size)
{
   11852:	55                   	push   %ebp
   11853:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   11855:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11859:	74 06                	je     11861 <kernel_strncmp+0xf>
   1185b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1185f:	75 0f                	jne    11870 <kernel_strncmp+0x1e>
    {
        return -1;
   11861:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11866:	eb 69                	jmp    118d1 <kernel_strncmp+0x7f>
    }
    while (*s1 && *s2 && (*s1 == *s2) && size--)
    {
        s1++;
   11868:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   1186c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size--)
   11870:	8b 45 08             	mov    0x8(%ebp),%eax
   11873:	0f b6 00             	movzbl (%eax),%eax
   11876:	84 c0                	test   %al,%al
   11878:	74 27                	je     118a1 <kernel_strncmp+0x4f>
   1187a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1187d:	0f b6 00             	movzbl (%eax),%eax
   11880:	84 c0                	test   %al,%al
   11882:	74 1d                	je     118a1 <kernel_strncmp+0x4f>
   11884:	8b 45 08             	mov    0x8(%ebp),%eax
   11887:	0f b6 10             	movzbl (%eax),%edx
   1188a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1188d:	0f b6 00             	movzbl (%eax),%eax
   11890:	38 c2                	cmp    %al,%dl
   11892:	75 0d                	jne    118a1 <kernel_strncmp+0x4f>
   11894:	8b 45 10             	mov    0x10(%ebp),%eax
   11897:	8d 50 ff             	lea    -0x1(%eax),%edx
   1189a:	89 55 10             	mov    %edx,0x10(%ebp)
   1189d:	85 c0                	test   %eax,%eax
   1189f:	75 c7                	jne    11868 <kernel_strncmp+0x16>
    }
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   118a1:	8b 45 08             	mov    0x8(%ebp),%eax
   118a4:	0f b6 00             	movzbl (%eax),%eax
   118a7:	84 c0                	test   %al,%al
   118a9:	74 21                	je     118cc <kernel_strncmp+0x7a>
   118ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   118ae:	0f b6 00             	movzbl (%eax),%eax
   118b1:	84 c0                	test   %al,%al
   118b3:	74 17                	je     118cc <kernel_strncmp+0x7a>
   118b5:	8b 45 08             	mov    0x8(%ebp),%eax
   118b8:	0f b6 10             	movzbl (%eax),%edx
   118bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   118be:	0f b6 00             	movzbl (%eax),%eax
   118c1:	38 c2                	cmp    %al,%dl
   118c3:	74 07                	je     118cc <kernel_strncmp+0x7a>
   118c5:	b8 01 00 00 00       	mov    $0x1,%eax
   118ca:	eb 05                	jmp    118d1 <kernel_strncmp+0x7f>
   118cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   118d1:	5d                   	pop    %ebp
   118d2:	c3                   	ret    

000118d3 <kernel_strlen>:
 * @brief        : 字符串的长度
 * @param         {char *} str: 字符串
 * @return        {*} 字符串的长度
 **/
int kernel_strlen(const char *str)
{
   118d3:	55                   	push   %ebp
   118d4:	89 e5                	mov    %esp,%ebp
   118d6:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   118d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   118dd:	75 07                	jne    118e6 <kernel_strlen+0x13>
    {
        return 0;
   118df:	b8 00 00 00 00       	mov    $0x0,%eax
   118e4:	eb 26                	jmp    1190c <kernel_strlen+0x39>
    }
    const char *c = str;
   118e6:	8b 45 08             	mov    0x8(%ebp),%eax
   118e9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   118ec:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   118f3:	eb 04                	jmp    118f9 <kernel_strlen+0x26>
    {
        len++;
   118f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   118f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118fc:	8d 50 01             	lea    0x1(%eax),%edx
   118ff:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11902:	0f b6 00             	movzbl (%eax),%eax
   11905:	84 c0                	test   %al,%al
   11907:	75 ec                	jne    118f5 <kernel_strlen+0x22>
    }
    return len;
   11909:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1190c:	c9                   	leave  
   1190d:	c3                   	ret    

0001190e <kernel_memcpy>:
 * @param         {void *} src: 源地址
 * @param         {int} size: 需要复制的字节大小
 * @return        {*}
 **/
void kernel_memcpy(void *dest, void *src, int size)
{
   1190e:	55                   	push   %ebp
   1190f:	89 e5                	mov    %esp,%ebp
   11911:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   11914:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11918:	74 40                	je     1195a <kernel_memcpy+0x4c>
   1191a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1191e:	74 3a                	je     1195a <kernel_memcpy+0x4c>
   11920:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11924:	74 34                	je     1195a <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   11926:	8b 45 0c             	mov    0xc(%ebp),%eax
   11929:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   1192c:	8b 45 08             	mov    0x8(%ebp),%eax
   1192f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11932:	eb 17                	jmp    1194b <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   11934:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11937:	8d 42 01             	lea    0x1(%edx),%eax
   1193a:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1193d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11940:	8d 48 01             	lea    0x1(%eax),%ecx
   11943:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11946:	0f b6 12             	movzbl (%edx),%edx
   11949:	88 10                	mov    %dl,(%eax)
    while (size--)
   1194b:	8b 45 10             	mov    0x10(%ebp),%eax
   1194e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11951:	89 55 10             	mov    %edx,0x10(%ebp)
   11954:	85 c0                	test   %eax,%eax
   11956:	75 dc                	jne    11934 <kernel_memcpy+0x26>
   11958:	eb 01                	jmp    1195b <kernel_memcpy+0x4d>
        return;
   1195a:	90                   	nop
    }
}
   1195b:	c9                   	leave  
   1195c:	c3                   	ret    

0001195d <kernel_memset>:
 * @param         {uint8_t} v: 设置成的数据
 * @param         {int} size: 字节大小
 * @return        {*}
 **/
void kernel_memset(void *dest, uint8_t v, int size)
{
   1195d:	55                   	push   %ebp
   1195e:	89 e5                	mov    %esp,%ebp
   11960:	83 ec 14             	sub    $0x14,%esp
   11963:	8b 45 0c             	mov    0xc(%ebp),%eax
   11966:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   11969:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1196d:	74 2c                	je     1199b <kernel_memset+0x3e>
   1196f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11973:	74 26                	je     1199b <kernel_memset+0x3e>
    {
        return;
    }
    uint8_t *d = dest;
   11975:	8b 45 08             	mov    0x8(%ebp),%eax
   11978:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   1197b:	eb 0f                	jmp    1198c <kernel_memset+0x2f>
    {
        *d++ = v;
   1197d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11980:	8d 50 01             	lea    0x1(%eax),%edx
   11983:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11986:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1198a:	88 10                	mov    %dl,(%eax)
    while (size--)
   1198c:	8b 45 10             	mov    0x10(%ebp),%eax
   1198f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11992:	89 55 10             	mov    %edx,0x10(%ebp)
   11995:	85 c0                	test   %eax,%eax
   11997:	75 e4                	jne    1197d <kernel_memset+0x20>
   11999:	eb 01                	jmp    1199c <kernel_memset+0x3f>
        return;
   1199b:	90                   	nop
    }
}
   1199c:	c9                   	leave  
   1199d:	c3                   	ret    

0001199e <kernel_memcmp>:
 * @param         {void *} d2:数据d2的地址
 * @param         {int} size: 比较的字节大小
 * @return        {*}d1=d2返回0，相等返回非0;
 **/
int kernel_memcmp(void *d1, void *d2, int size)
{
   1199e:	55                   	push   %ebp
   1199f:	89 e5                	mov    %esp,%ebp
   119a1:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size)
   119a4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   119a8:	74 0c                	je     119b6 <kernel_memcmp+0x18>
   119aa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   119ae:	74 06                	je     119b6 <kernel_memcmp+0x18>
   119b0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   119b4:	75 07                	jne    119bd <kernel_memcmp+0x1f>
    {
        return 1;
   119b6:	b8 01 00 00 00       	mov    $0x1,%eax
   119bb:	eb 43                	jmp    11a00 <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = d1;
   119bd:	8b 45 08             	mov    0x8(%ebp),%eax
   119c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = d2;
   119c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   119c6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   119c9:	eb 23                	jmp    119ee <kernel_memcmp+0x50>
    {
        if (*p_d1++ != *p_d2++)
   119cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   119ce:	8d 50 01             	lea    0x1(%eax),%edx
   119d1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   119d4:	0f b6 08             	movzbl (%eax),%ecx
   119d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   119da:	8d 50 01             	lea    0x1(%eax),%edx
   119dd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   119e0:	0f b6 00             	movzbl (%eax),%eax
   119e3:	38 c1                	cmp    %al,%cl
   119e5:	74 07                	je     119ee <kernel_memcmp+0x50>
        {
            return 1;
   119e7:	b8 01 00 00 00       	mov    $0x1,%eax
   119ec:	eb 12                	jmp    11a00 <kernel_memcmp+0x62>
    while (size--)
   119ee:	8b 45 10             	mov    0x10(%ebp),%eax
   119f1:	8d 50 ff             	lea    -0x1(%eax),%edx
   119f4:	89 55 10             	mov    %edx,0x10(%ebp)
   119f7:	85 c0                	test   %eax,%eax
   119f9:	75 d0                	jne    119cb <kernel_memcmp+0x2d>
        }
    }
    return 0;
   119fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11a00:	c9                   	leave  
   11a01:	c3                   	ret    

00011a02 <kernel_sprintf>:
 * @param         {char} *buf: 输出字符缓冲区
 * @param         {char} *fmt: 格式化字符串
 * @return        {*}
 **/
void kernel_sprintf(char *buf, const char *fmt, ...)
{
   11a02:	55                   	push   %ebp
   11a03:	89 e5                	mov    %esp,%ebp
   11a05:	83 ec 18             	sub    $0x18,%esp
    va_list args;                          // 可变参数存储变量
    kernel_memset(buf, '\0', sizeof(buf)); // 清空缓冲区
   11a08:	6a 04                	push   $0x4
   11a0a:	6a 00                	push   $0x0
   11a0c:	ff 75 08             	pushl  0x8(%ebp)
   11a0f:	e8 49 ff ff ff       	call   1195d <kernel_memset>
   11a14:	83 c4 0c             	add    $0xc,%esp
    va_start(args, fmt);                   // 将fmt后的可变参数存储到args中
   11a17:	8d 45 10             	lea    0x10(%ebp),%eax
   11a1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, fmt, args);       // 将可变参数放入缓冲区
   11a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a20:	83 ec 04             	sub    $0x4,%esp
   11a23:	50                   	push   %eax
   11a24:	ff 75 0c             	pushl  0xc(%ebp)
   11a27:	ff 75 08             	pushl  0x8(%ebp)
   11a2a:	e8 45 01 00 00       	call   11b74 <kernel_vsprintf>
   11a2f:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   11a32:	90                   	nop
   11a33:	c9                   	leave  
   11a34:	c3                   	ret    

00011a35 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   11a35:	55                   	push   %ebp
   11a36:	89 e5                	mov    %esp,%ebp
   11a38:	53                   	push   %ebx
   11a39:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   11a3c:	8b 45 08             	mov    0x8(%ebp),%eax
   11a3f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   11a42:	8b 45 0c             	mov    0xc(%ebp),%eax
   11a45:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   11a48:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   11a4c:	74 1d                	je     11a6b <kernel_itoa+0x36>
   11a4e:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   11a52:	74 17                	je     11a6b <kernel_itoa+0x36>
   11a54:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11a58:	74 11                	je     11a6b <kernel_itoa+0x36>
   11a5a:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   11a5e:	74 0b                	je     11a6b <kernel_itoa+0x36>
    {
        *p = '\0';
   11a60:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11a63:	c6 00 00             	movb   $0x0,(%eax)
        return;
   11a66:	e9 03 01 00 00       	jmp    11b6e <kernel_itoa+0x139>
    }
    // 只支持十进制负数
    int signed_num = 0;
   11a6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   11a72:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11a76:	79 19                	jns    11a91 <kernel_itoa+0x5c>
   11a78:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   11a7c:	75 13                	jne    11a91 <kernel_itoa+0x5c>
    {
        *p++ = '-';
   11a7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11a81:	8d 50 01             	lea    0x1(%eax),%edx
   11a84:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11a87:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11a8a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   11a91:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11a95:	74 3b                	je     11ad2 <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   11a97:	8b 0d 74 20 01 00    	mov    0x12074,%ecx
   11a9d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11aa0:	99                   	cltd   
   11aa1:	f7 7d 10             	idivl  0x10(%ebp)
   11aa4:	89 d0                	mov    %edx,%eax
   11aa6:	83 c0 0f             	add    $0xf,%eax
   11aa9:	01 c8                	add    %ecx,%eax
   11aab:	0f b6 00             	movzbl (%eax),%eax
   11aae:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   11ab1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11ab4:	8d 50 01             	lea    0x1(%eax),%edx
   11ab7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11aba:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   11abe:	88 10                	mov    %dl,(%eax)
            num /= base;
   11ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ac3:	99                   	cltd   
   11ac4:	f7 7d 10             	idivl  0x10(%ebp)
   11ac7:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11aca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11ace:	75 c7                	jne    11a97 <kernel_itoa+0x62>
   11ad0:	eb 4b                	jmp    11b1d <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   11ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ad5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   11ad8:	8b 0d 74 20 01 00    	mov    0x12074,%ecx
   11ade:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11ae1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae4:	ba 00 00 00 00       	mov    $0x0,%edx
   11ae9:	f7 f3                	div    %ebx
   11aeb:	89 d0                	mov    %edx,%eax
   11aed:	83 c0 0f             	add    $0xf,%eax
   11af0:	01 c8                	add    %ecx,%eax
   11af2:	0f b6 00             	movzbl (%eax),%eax
   11af5:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11af8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11afb:	8d 50 01             	lea    0x1(%eax),%edx
   11afe:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b01:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11b05:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11b07:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b0d:	ba 00 00 00 00       	mov    $0x0,%edx
   11b12:	f7 f3                	div    %ebx
   11b14:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11b17:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b1b:	75 bb                	jne    11ad8 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   11b1d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b20:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b23:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b26:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   11b29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11b2d:	74 08                	je     11b37 <kernel_itoa+0x102>
   11b2f:	8b 45 08             	mov    0x8(%ebp),%eax
   11b32:	83 c0 01             	add    $0x1,%eax
   11b35:	eb 03                	jmp    11b3a <kernel_itoa+0x105>
   11b37:	8b 45 08             	mov    0x8(%ebp),%eax
   11b3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   11b3d:	eb 27                	jmp    11b66 <kernel_itoa+0x131>
    {
        char ch = *start;
   11b3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b42:	0f b6 00             	movzbl (%eax),%eax
   11b45:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   11b48:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b4b:	0f b6 10             	movzbl (%eax),%edx
   11b4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b51:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   11b53:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11b56:	8d 50 ff             	lea    -0x1(%eax),%edx
   11b59:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11b5c:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   11b60:	88 10                	mov    %dl,(%eax)
        start++;
   11b62:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   11b66:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b69:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   11b6c:	72 d1                	jb     11b3f <kernel_itoa+0x10a>
    }
}
   11b6e:	83 c4 20             	add    $0x20,%esp
   11b71:	5b                   	pop    %ebx
   11b72:	5d                   	pop    %ebp
   11b73:	c3                   	ret    

00011b74 <kernel_vsprintf>:
 * @param         {char} *fmt: 格式化字符串
 * @param         {va_list} args: 参数
 * @return        {*}
 **/
void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   11b74:	55                   	push   %ebp
   11b75:	89 e5                	mov    %esp,%ebp
   11b77:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   11b7a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   11b81:	8b 45 08             	mov    0x8(%ebp),%eax
   11b84:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11b87:	e9 17 01 00 00       	jmp    11ca3 <kernel_vsprintf+0x12f>
    {
        switch (state)
   11b8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11b8f:	85 c0                	test   %eax,%eax
   11b91:	74 0a                	je     11b9d <kernel_vsprintf+0x29>
   11b93:	83 f8 01             	cmp    $0x1,%eax
   11b96:	74 2b                	je     11bc3 <kernel_vsprintf+0x4f>
   11b98:	e9 06 01 00 00       	jmp    11ca3 <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   11b9d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   11ba1:	75 0c                	jne    11baf <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11ba3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11baa:	e9 f4 00 00 00       	jmp    11ca3 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   11baf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11bb2:	8d 50 01             	lea    0x1(%eax),%edx
   11bb5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11bb8:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11bbc:	88 10                	mov    %dl,(%eax)
            }
            break;
   11bbe:	e9 e0 00 00 00       	jmp    11ca3 <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   11bc3:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11bc7:	75 31                	jne    11bfa <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11bc9:	8b 45 10             	mov    0x10(%ebp),%eax
   11bcc:	8d 50 04             	lea    0x4(%eax),%edx
   11bcf:	89 55 10             	mov    %edx,0x10(%ebp)
   11bd2:	8b 00                	mov    (%eax),%eax
   11bd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11bd7:	6a 0a                	push   $0xa
   11bd9:	ff 75 e4             	pushl  -0x1c(%ebp)
   11bdc:	ff 75 f8             	pushl  -0x8(%ebp)
   11bdf:	e8 51 fe ff ff       	call   11a35 <kernel_itoa>
   11be4:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11be7:	ff 75 f8             	pushl  -0x8(%ebp)
   11bea:	e8 e4 fc ff ff       	call   118d3 <kernel_strlen>
   11bef:	83 c4 04             	add    $0x4,%esp
   11bf2:	01 45 f8             	add    %eax,-0x8(%ebp)
   11bf5:	e9 a1 00 00 00       	jmp    11c9b <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   11bfa:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   11bfe:	75 2e                	jne    11c2e <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   11c00:	8b 45 10             	mov    0x10(%ebp),%eax
   11c03:	8d 50 04             	lea    0x4(%eax),%edx
   11c06:	89 55 10             	mov    %edx,0x10(%ebp)
   11c09:	8b 00                	mov    (%eax),%eax
   11c0b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   11c0e:	6a 10                	push   $0x10
   11c10:	ff 75 e8             	pushl  -0x18(%ebp)
   11c13:	ff 75 f8             	pushl  -0x8(%ebp)
   11c16:	e8 1a fe ff ff       	call   11a35 <kernel_itoa>
   11c1b:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   11c1e:	ff 75 f8             	pushl  -0x8(%ebp)
   11c21:	e8 ad fc ff ff       	call   118d3 <kernel_strlen>
   11c26:	83 c4 04             	add    $0x4,%esp
   11c29:	01 45 f8             	add    %eax,-0x8(%ebp)
   11c2c:	eb 6d                	jmp    11c9b <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   11c2e:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   11c32:	75 1f                	jne    11c53 <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   11c34:	8b 45 10             	mov    0x10(%ebp),%eax
   11c37:	8d 50 04             	lea    0x4(%eax),%edx
   11c3a:	89 55 10             	mov    %edx,0x10(%ebp)
   11c3d:	8b 00                	mov    (%eax),%eax
   11c3f:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   11c42:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c45:	8d 50 01             	lea    0x1(%eax),%edx
   11c48:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11c4b:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   11c4f:	88 10                	mov    %dl,(%eax)
   11c51:	eb 48                	jmp    11c9b <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   11c53:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   11c57:	75 42                	jne    11c9b <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   11c59:	8b 45 10             	mov    0x10(%ebp),%eax
   11c5c:	8d 50 04             	lea    0x4(%eax),%edx
   11c5f:	89 55 10             	mov    %edx,0x10(%ebp)
   11c62:	8b 00                	mov    (%eax),%eax
   11c64:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   11c67:	ff 75 f4             	pushl  -0xc(%ebp)
   11c6a:	e8 64 fc ff ff       	call   118d3 <kernel_strlen>
   11c6f:	83 c4 04             	add    $0x4,%esp
   11c72:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   11c75:	eb 17                	jmp    11c8e <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   11c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11c7a:	8d 42 01             	lea    0x1(%edx),%eax
   11c7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   11c80:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11c83:	8d 48 01             	lea    0x1(%eax),%ecx
   11c86:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11c89:	0f b6 12             	movzbl (%edx),%edx
   11c8c:	88 10                	mov    %dl,(%eax)
                while (len--)
   11c8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c91:	8d 50 ff             	lea    -0x1(%eax),%edx
   11c94:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11c97:	85 c0                	test   %eax,%eax
   11c99:	75 dc                	jne    11c77 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   11c9b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   11ca2:	90                   	nop
    while ((ch = *fmt++))
   11ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ca6:	8d 50 01             	lea    0x1(%eax),%edx
   11ca9:	89 55 0c             	mov    %edx,0xc(%ebp)
   11cac:	0f b6 00             	movzbl (%eax),%eax
   11caf:	88 45 ef             	mov    %al,-0x11(%ebp)
   11cb2:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11cb6:	0f 85 d0 fe ff ff    	jne    11b8c <kernel_vsprintf+0x18>
        }
    }
}
   11cbc:	90                   	nop
   11cbd:	c9                   	leave  
   11cbe:	c3                   	ret    

00011cbf <pannic>:
 * @param         {char} *func: 函数名
 * @param         {char} *cond: 表达式
 * @return        {*}
**/
void pannic(const char *file, int line, const char *func, const char *cond)
{
   11cbf:	55                   	push   %ebp
   11cc0:	89 e5                	mov    %esp,%ebp
   11cc2:	83 ec 08             	sub    $0x8,%esp
    log_printf("ASSERT FAILED! %s", cond);
   11cc5:	83 ec 08             	sub    $0x8,%esp
   11cc8:	ff 75 14             	pushl  0x14(%ebp)
   11ccb:	68 44 25 01 00       	push   $0x12544
   11cd0:	e8 cb 02 00 00       	call   11fa0 <log_printf>
   11cd5:	83 c4 10             	add    $0x10,%esp
    log_printf("File is : %s \nLine is : %d\nFunc is : %s\n", file, line, func);
   11cd8:	ff 75 10             	pushl  0x10(%ebp)
   11cdb:	ff 75 0c             	pushl  0xc(%ebp)
   11cde:	ff 75 08             	pushl  0x8(%ebp)
   11ce1:	68 58 25 01 00       	push   $0x12558
   11ce6:	e8 b5 02 00 00       	call   11fa0 <log_printf>
   11ceb:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   11cee:	e8 ad fa ff ff       	call   117a0 <hlt>
   11cf3:	eb f9                	jmp    11cee <pannic+0x2f>

00011cf5 <list_is_empty>:
{
   11cf5:	55                   	push   %ebp
   11cf6:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   11cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   11cfb:	8b 40 08             	mov    0x8(%eax),%eax
   11cfe:	85 c0                	test   %eax,%eax
   11d00:	0f 94 c0             	sete   %al
   11d03:	0f b6 c0             	movzbl %al,%eax
}
   11d06:	5d                   	pop    %ebp
   11d07:	c3                   	ret    

00011d08 <list_init>:
 * @brief        : 链表初始化函数
 * @param         {list_t *} list: 待初始化的链表
 * @return        {*}
 **/
void list_init(list_t *list)
{
   11d08:	55                   	push   %ebp
   11d09:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   11d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d0e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11d15:	8b 45 08             	mov    0x8(%ebp),%eax
   11d18:	8b 50 04             	mov    0x4(%eax),%edx
   11d1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d1e:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   11d20:	8b 45 08             	mov    0x8(%ebp),%eax
   11d23:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   11d2a:	90                   	nop
   11d2b:	5d                   	pop    %ebp
   11d2c:	c3                   	ret    

00011d2d <list_insert_first>:
 * @param         {list_t} *list: 待插入的链表
 * @param         {list_node_t} *node: 待插入的结点
 * @return        {*}
**/
void list_insert_first(list_t *list, list_node_t *node)
{
   11d2d:	55                   	push   %ebp
   11d2e:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   11d30:	8b 45 08             	mov    0x8(%ebp),%eax
   11d33:	8b 10                	mov    (%eax),%edx
   11d35:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d38:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   11d3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d3e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    // 链表为空;
    if (list_is_empty(list))
   11d44:	ff 75 08             	pushl  0x8(%ebp)
   11d47:	e8 a9 ff ff ff       	call   11cf5 <list_is_empty>
   11d4c:	83 c4 04             	add    $0x4,%esp
   11d4f:	85 c0                	test   %eax,%eax
   11d51:	74 16                	je     11d69 <list_insert_first+0x3c>
    {
        list->first = list->last = node;
   11d53:	8b 45 08             	mov    0x8(%ebp),%eax
   11d56:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d59:	89 50 04             	mov    %edx,0x4(%eax)
   11d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   11d5f:	8b 50 04             	mov    0x4(%eax),%edx
   11d62:	8b 45 08             	mov    0x8(%ebp),%eax
   11d65:	89 10                	mov    %edx,(%eax)
   11d67:	eb 12                	jmp    11d7b <list_insert_first+0x4e>
    }
    else
    {
        list->first->pre = node;
   11d69:	8b 45 08             	mov    0x8(%ebp),%eax
   11d6c:	8b 00                	mov    (%eax),%eax
   11d6e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d71:	89 10                	mov    %edx,(%eax)
        list->first = node;
   11d73:	8b 45 08             	mov    0x8(%ebp),%eax
   11d76:	8b 55 0c             	mov    0xc(%ebp),%edx
   11d79:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   11d7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11d7e:	8b 40 08             	mov    0x8(%eax),%eax
   11d81:	8d 50 01             	lea    0x1(%eax),%edx
   11d84:	8b 45 08             	mov    0x8(%ebp),%eax
   11d87:	89 50 08             	mov    %edx,0x8(%eax)
}
   11d8a:	90                   	nop
   11d8b:	c9                   	leave  
   11d8c:	c3                   	ret    

00011d8d <list_insert_last>:
 * @param         {list_t} *list: 待插入的链表
 * @param         {list_node_t} *node: 待插入的结点
 * @return        {*}
**/
void list_insert_last(list_t *list, list_node_t *node)
{
   11d8d:	55                   	push   %ebp
   11d8e:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   11d90:	8b 45 08             	mov    0x8(%ebp),%eax
   11d93:	8b 50 04             	mov    0x4(%eax),%edx
   11d96:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d99:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   11d9b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d9e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list))
   11da5:	ff 75 08             	pushl  0x8(%ebp)
   11da8:	e8 48 ff ff ff       	call   11cf5 <list_is_empty>
   11dad:	83 c4 04             	add    $0x4,%esp
   11db0:	85 c0                	test   %eax,%eax
   11db2:	74 16                	je     11dca <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   11db4:	8b 45 08             	mov    0x8(%ebp),%eax
   11db7:	8b 55 0c             	mov    0xc(%ebp),%edx
   11dba:	89 50 04             	mov    %edx,0x4(%eax)
   11dbd:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc0:	8b 50 04             	mov    0x4(%eax),%edx
   11dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   11dc6:	89 10                	mov    %edx,(%eax)
   11dc8:	eb 15                	jmp    11ddf <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   11dca:	8b 45 08             	mov    0x8(%ebp),%eax
   11dcd:	8b 40 04             	mov    0x4(%eax),%eax
   11dd0:	8b 55 0c             	mov    0xc(%ebp),%edx
   11dd3:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   11dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd9:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ddc:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   11ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   11de2:	8b 40 08             	mov    0x8(%eax),%eax
   11de5:	8d 50 01             	lea    0x1(%eax),%edx
   11de8:	8b 45 08             	mov    0x8(%ebp),%eax
   11deb:	89 50 08             	mov    %edx,0x8(%eax)
}
   11dee:	90                   	nop
   11def:	c9                   	leave  
   11df0:	c3                   	ret    

00011df1 <list_remove_first>:
 * @brief        : 移除链表的头结点
 * @param         {list_t} *list: 待移除结点的链表的指针
 * @return        {list_node_t*}: 被移除的结点的指针
 **/
list_node_t *list_remove_first(list_t *list)
{
   11df1:	55                   	push   %ebp
   11df2:	89 e5                	mov    %esp,%ebp
   11df4:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list))
   11df7:	ff 75 08             	pushl  0x8(%ebp)
   11dfa:	e8 f6 fe ff ff       	call   11cf5 <list_is_empty>
   11dff:	83 c4 04             	add    $0x4,%esp
   11e02:	85 c0                	test   %eax,%eax
   11e04:	74 07                	je     11e0d <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   11e06:	b8 00 00 00 00       	mov    $0x0,%eax
   11e0b:	eb 5b                	jmp    11e68 <list_remove_first+0x77>
    }

    list_node_t *remove_node = list->first;
   11e0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e10:	8b 00                	mov    (%eax),%eax
   11e12:	89 45 fc             	mov    %eax,-0x4(%ebp)

    list->first = remove_node->next;
   11e15:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e18:	8b 50 04             	mov    0x4(%eax),%edx
   11e1b:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1e:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t *)0)
   11e20:	8b 45 08             	mov    0x8(%ebp),%eax
   11e23:	8b 00                	mov    (%eax),%eax
   11e25:	85 c0                	test   %eax,%eax
   11e27:	75 0c                	jne    11e35 <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   11e29:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e33:	eb 0c                	jmp    11e41 <list_remove_first+0x50>
    }
    else
    {
        remove_node->next->pre = (list_node_t *)0;
   11e35:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e38:	8b 40 04             	mov    0x4(%eax),%eax
   11e3b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        // list->first->pre = (list_node_t *) 0;
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   11e41:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e44:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11e4b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e4e:	8b 50 04             	mov    0x4(%eax),%edx
   11e51:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11e54:	89 10                	mov    %edx,(%eax)
    list->count--;
   11e56:	8b 45 08             	mov    0x8(%ebp),%eax
   11e59:	8b 40 08             	mov    0x8(%eax),%eax
   11e5c:	8d 50 ff             	lea    -0x1(%eax),%edx
   11e5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e62:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   11e65:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11e68:	c9                   	leave  
   11e69:	c3                   	ret    

00011e6a <list_remove>:
 * @param         {list_t} *list: 待移除结点的链表的指针
 * @param         {list_node_t} *node: 需要移除的结点的指针
 * @return        {list_node_t*}: 被移除的结点的指针
**/
list_node_t *list_remove(list_t *list, list_node_t *node)
{
   11e6a:	55                   	push   %ebp
   11e6b:	89 e5                	mov    %esp,%ebp
    if (node == list->first)
   11e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e70:	8b 00                	mov    (%eax),%eax
   11e72:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e75:	75 0b                	jne    11e82 <list_remove+0x18>
    {
        list->first = node->next;
   11e77:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e7a:	8b 50 04             	mov    0x4(%eax),%edx
   11e7d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e80:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last)
   11e82:	8b 45 08             	mov    0x8(%ebp),%eax
   11e85:	8b 40 04             	mov    0x4(%eax),%eax
   11e88:	39 45 0c             	cmp    %eax,0xc(%ebp)
   11e8b:	75 0b                	jne    11e98 <list_remove+0x2e>
    {
        list->last = node->pre;
   11e8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e90:	8b 10                	mov    (%eax),%edx
   11e92:	8b 45 08             	mov    0x8(%ebp),%eax
   11e95:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre)
   11e98:	8b 45 0c             	mov    0xc(%ebp),%eax
   11e9b:	8b 00                	mov    (%eax),%eax
   11e9d:	85 c0                	test   %eax,%eax
   11e9f:	74 0e                	je     11eaf <list_remove+0x45>
    {
        node->pre->next = node->next;
   11ea1:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ea4:	8b 00                	mov    (%eax),%eax
   11ea6:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ea9:	8b 52 04             	mov    0x4(%edx),%edx
   11eac:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next)
   11eaf:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eb2:	8b 40 04             	mov    0x4(%eax),%eax
   11eb5:	85 c0                	test   %eax,%eax
   11eb7:	74 0d                	je     11ec6 <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   11eb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ebc:	8b 40 04             	mov    0x4(%eax),%eax
   11ebf:	8b 55 0c             	mov    0xc(%ebp),%edx
   11ec2:	8b 12                	mov    (%edx),%edx
   11ec4:	89 10                	mov    %edx,(%eax)
    }
    node->pre = node->next = (list_node_t *)0;
   11ec6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ec9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   11ed0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ed3:	8b 50 04             	mov    0x4(%eax),%edx
   11ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ed9:	89 10                	mov    %edx,(%eax)

    list->count--;
   11edb:	8b 45 08             	mov    0x8(%ebp),%eax
   11ede:	8b 40 08             	mov    0x8(%eax),%eax
   11ee1:	8d 50 ff             	lea    -0x1(%eax),%edx
   11ee4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee7:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   11eea:	8b 45 0c             	mov    0xc(%ebp),%eax
   11eed:	5d                   	pop    %ebp
   11eee:	c3                   	ret    

00011eef <inb>:
{
   11eef:	55                   	push   %ebp
   11ef0:	89 e5                	mov    %esp,%ebp
   11ef2:	83 ec 14             	sub    $0x14,%esp
   11ef5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   11efc:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11f00:	89 c2                	mov    %eax,%edx
   11f02:	ec                   	in     (%dx),%al
   11f03:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11f06:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11f0a:	c9                   	leave  
   11f0b:	c3                   	ret    

00011f0c <outb>:
{
   11f0c:	55                   	push   %ebp
   11f0d:	89 e5                	mov    %esp,%ebp
   11f0f:	83 ec 08             	sub    $0x8,%esp
   11f12:	8b 55 08             	mov    0x8(%ebp),%edx
   11f15:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f18:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11f1c:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   11f1f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f23:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f27:	ee                   	out    %al,(%dx)
}
   11f28:	90                   	nop
   11f29:	c9                   	leave  
   11f2a:	c3                   	ret    

00011f2b <log_init>:
/**
 * @brief        : 日志输出初始化函数，对相应寄存器进行设置
 * @return        {*}
 **/
void log_init(void)
{
   11f2b:	55                   	push   %ebp
   11f2c:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00); // 中断相关
   11f2e:	6a 00                	push   $0x0
   11f30:	68 f9 03 00 00       	push   $0x3f9
   11f35:	e8 d2 ff ff ff       	call   11f0c <outb>
   11f3a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80); // 发送速度
   11f3d:	68 80 00 00 00       	push   $0x80
   11f42:	68 fb 03 00 00       	push   $0x3fb
   11f47:	e8 c0 ff ff ff       	call   11f0c <outb>
   11f4c:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x3);
   11f4f:	6a 03                	push   $0x3
   11f51:	68 f8 03 00 00       	push   $0x3f8
   11f56:	e8 b1 ff ff ff       	call   11f0c <outb>
   11f5b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00);
   11f5e:	6a 00                	push   $0x0
   11f60:	68 f9 03 00 00       	push   $0x3f9
   11f65:	e8 a2 ff ff ff       	call   11f0c <outb>
   11f6a:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03);
   11f6d:	6a 03                	push   $0x3
   11f6f:	68 fb 03 00 00       	push   $0x3fb
   11f74:	e8 93 ff ff ff       	call   11f0c <outb>
   11f79:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xC7);
   11f7c:	68 c7 00 00 00       	push   $0xc7
   11f81:	68 fa 03 00 00       	push   $0x3fa
   11f86:	e8 81 ff ff ff       	call   11f0c <outb>
   11f8b:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 4, 0x0F);
   11f8e:	6a 0f                	push   $0xf
   11f90:	68 fc 03 00 00       	push   $0x3fc
   11f95:	e8 72 ff ff ff       	call   11f0c <outb>
   11f9a:	83 c4 08             	add    $0x8,%esp
}
   11f9d:	90                   	nop
   11f9e:	c9                   	leave  
   11f9f:	c3                   	ret    

00011fa0 <log_printf>:
 * @brief        : 实现打印的功能(类似printf)
 * @param         {char} *fmt: 格式化字符串
 * @return        {*}
 **/
void log_printf(const char *fmt, ...)
{
   11fa0:	55                   	push   %ebp
   11fa1:	89 e5                	mov    %esp,%ebp
   11fa3:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;                                  // 可变参数存储变量
    kernel_memset(str_buf, '\0', sizeof(str_buf)); // 清空缓冲区
   11fa9:	83 ec 04             	sub    $0x4,%esp
   11fac:	68 80 00 00 00       	push   $0x80
   11fb1:	6a 00                	push   $0x0
   11fb3:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11fb9:	50                   	push   %eax
   11fba:	e8 9e f9 ff ff       	call   1195d <kernel_memset>
   11fbf:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);                           // 将fmt后的可变参数存储到args中
   11fc2:	8d 45 0c             	lea    0xc(%ebp),%eax
   11fc5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
    kernel_vsprintf(str_buf, fmt, args);           // 将可变参数放入缓冲区
   11fcb:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
   11fd1:	83 ec 04             	sub    $0x4,%esp
   11fd4:	50                   	push   %eax
   11fd5:	ff 75 08             	pushl  0x8(%ebp)
   11fd8:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11fde:	50                   	push   %eax
   11fdf:	e8 90 fb ff ff       	call   11b74 <kernel_vsprintf>
   11fe4:	83 c4 10             	add    $0x10,%esp
    va_end(args);
    irq_state_t state = irq_enter_protection(); // 进入临界区
   11fe7:	e8 e4 f2 ff ff       	call   112d0 <irq_enter_protection>
   11fec:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char *p = str_buf;
   11fef:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
   11ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11ff8:	eb 3b                	jmp    12035 <log_printf+0x95>
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) // 正在忙则等待
   11ffa:	90                   	nop
   11ffb:	83 ec 0c             	sub    $0xc,%esp
   11ffe:	68 fd 03 00 00       	push   $0x3fd
   12003:	e8 e7 fe ff ff       	call   11eef <inb>
   12008:	83 c4 10             	add    $0x10,%esp
   1200b:	0f b6 c0             	movzbl %al,%eax
   1200e:	83 e0 40             	and    $0x40,%eax
   12011:	85 c0                	test   %eax,%eax
   12013:	74 e6                	je     11ffb <log_printf+0x5b>
            ;
        outb(COM1_PORT, *p++); // 发送数据
   12015:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12018:	8d 50 01             	lea    0x1(%eax),%edx
   1201b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1201e:	0f b6 00             	movzbl (%eax),%eax
   12021:	0f b6 c0             	movzbl %al,%eax
   12024:	83 ec 08             	sub    $0x8,%esp
   12027:	50                   	push   %eax
   12028:	68 f8 03 00 00       	push   $0x3f8
   1202d:	e8 da fe ff ff       	call   11f0c <outb>
   12032:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   12035:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12038:	0f b6 00             	movzbl (%eax),%eax
   1203b:	84 c0                	test   %al,%al
   1203d:	75 bb                	jne    11ffa <log_printf+0x5a>
    }
    outb(COM1_PORT, '\r');
   1203f:	83 ec 08             	sub    $0x8,%esp
   12042:	6a 0d                	push   $0xd
   12044:	68 f8 03 00 00       	push   $0x3f8
   12049:	e8 be fe ff ff       	call   11f0c <outb>
   1204e:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12051:	83 ec 08             	sub    $0x8,%esp
   12054:	6a 0a                	push   $0xa
   12056:	68 f8 03 00 00       	push   $0x3f8
   1205b:	e8 ac fe ff ff       	call   11f0c <outb>
   12060:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state); // 退出临界区
   12063:	83 ec 0c             	sub    $0xc,%esp
   12066:	ff 75 f0             	pushl  -0x10(%ebp)
   12069:	e8 7a f2 ff ff       	call   112e8 <irq_leave_protection>
   1206e:	83 c4 10             	add    $0x10,%esp
}
   12071:	90                   	nop
   12072:	c9                   	leave  
   12073:	c3                   	ret    
