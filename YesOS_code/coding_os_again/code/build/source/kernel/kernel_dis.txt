
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/MyOs/YesOS_code/coding_os_again/code/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003250 memsz 0x00003250 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00008020 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c23  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000062c  00012c24  00012c24  00003c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00007020  00015000  00015000  00005044  2**12
                  ALLOC
  4 .debug_line   00001c0e  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004159  00000000  00000000  00006c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001200  00000000  00000000  0000adab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000001b8  00000000  00000000  0000bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000010ee  00000000  00000000  0000c168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000d256  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00001258  00000000  00000000  0000d268  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00012c24 l    d  .rodata	00000000 .rodata
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102da l     F .text	0000000d down2
000102e7 l     F .text	00000017 up2
000102fe l     F .text	0000000c write_cr3
0001030a l     F .text	00000011 mmu_set_page_dir
0001031b l     F .text	00000014 pde_index
0001032f l     F .text	00000010 pte_index
0001033f l     F .text	00000027 pde_paddr
00015000 l     O .bss	00000028 paddr_alloc
00016000 l     O .bss	00001000 kernel_page_dir
00010366 l     F .text	00000058 addr_alloc_init
000103be l     F .text	0000006a addr_alloc_page
00010428 l     F .text	00000065 addr_free_page
000104f3 l     F .text	00000037 total_mem_size
00012d04 l     O .rodata	00000012 __func__.2180
00014000 l     O .data	00000040 kernel_map.2190
00012d18 l     O .rodata	0000000c __func__.2219
00000000 l    df *ABS*	00000000 task.c
00010882 l     F .text	0000001b list_node_init
0001089d l     F .text	0000000b list_node_next
000108a8 l     F .text	0000000a list_first
000108b2 l     F .text	0000000b list_count
000108bd l     F .text	00000007 hlt
000108c4 l     F .text	00000017 write_tr
00017000 l     O .bss	000001d0 task_manager
00010a43 l     F .text	00000146 tss_init
00012dbc l     O .rodata	0000000a __func__.2199
000171e0 l     O .bss	00001000 idle_task_stack
00010c9b l     F .text	0000001d idle_task_entry
00000000 l    df *ABS*	00000000 cpu.c
00010ef1 l     F .text	00000028 lgdt
00010f19 l     F .text	0000001a far_jump
000181e0 l     O .bss	00000800 gdt_table
000189e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
0001114c l     F .text	00000007 cli
00011153 l     F .text	00000007 sti
0001115a l     F .text	0000001d inb
00011177 l     F .text	0000001f outb
00011196 l     F .text	00000028 lidt
000111be l     F .text	00000007 hlt
000111c5 l     F .text	00000010 read_eflags
000111d5 l     F .text	0000000b write_eflags
00018a00 l     O .bss	00000400 idt_table
000111e0 l     F .text	000000d9 dump_core_regs
000112b9 l     F .text	0000003e do_default_handler
00011543 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 mmu.c
00000000 l    df *ABS*	00000000 time.c
0001193a l     F .text	0000001f outb
00018e00 l     O .bss	00000004 sys_tick
00011981 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 init.c
000119f9 l     F .text	0000000a list_first
00011a03 l     F .text	0000000b list_last
00011a0e l     F .text	0000000b list_count
00018e20 l     O .bss	00000004 init_boot_info
00018e24 l     O .bss	00000010 sem
00018e40 l     O .bss	000000d4 init_task
00018f20 l     O .bss	000000d4 first_task
00019000 l     O .bss	00001000 first_task_stack
00000000 l    df *ABS*	00000000 mutex.c
00011e07 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00011f88 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
0001231d l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1929
00000000 l    df *ABS*	00000000 list.c
00012872 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012a6c l     F .text	0000001d inb
00012a89 l     F .text	0000001f outb
0001a000 l     O .bss	00000014 mutex
00012135 g     F .text	0000003a bitmap_get_bit
0001248b g     F .text	0000004f kernel_memcpy
0001091e g     F .text	0000000a task_current
00011906 g     F .text	0000000b irq_enable_global
0001290a g     F .text	00000064 list_insert_last
0001142b g     F .text	0000001c do_handler_segment_not_present
00010983 g     F .text	00000034 task_set_ready
00012243 g     F .text	0000001b bitmap_is_set
000124da g     F .text	00000041 kernel_memset
0001026a g       .text	00000000 exception_handler_virtual_exception
0001112e g     F .text	0000001e cpu_init
00012aa8 g     F .text	0000009d log_init
00011d6f g     F .text	00000098 init_main
0001020f g       .text	00000000 exception_handler_alignment_check
000110f5 g     F .text	00000039 gdt_free_sel
00012324 g     F .text	0000003b kernel_strcpy
00014000 g       .data	00000000 s_data
000117e9 g     F .text	0000008b irq_enable
0001002b g       .text	00000000 exception_handler_unknown
000100a7 g       .text	00000000 exception_handler_breakpoint
00011383 g     F .text	0000001c do_handler_overflow
000114b7 g     F .text	0000001c do_handler_alignment_check
000105da g     F .text	0000008c memory_create_map
000101b6 g       .text	00000000 exception_handler_general_protection
00011463 g     F .text	0000001c do_handler_general_protection
00011527 g     F .text	0000001c do_handler_control_exception
000120a3 g     F .text	00000029 sem_count
00011313 g     F .text	0000001c do_handler_divider
0001216f g     F .text	000000d4 bitmap_set_bit
000113f3 g     F .text	0000001c do_handler_double_fault
0001147f g     F .text	0000001c do_handler_page_fault
00010142 g       .text	00000000 exception_handler_double_fault
000115d6 g     F .text	0000002b pic_send_eoi
00010d62 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
00010709 g     F .text	00000085 memory_create_uvm
00011fb6 g     F .text	0000006b sem_wait
00011959 g     F .text	00000028 do_handler_timer
00010199 g       .text	00000000 exception_handler_stack_segment_fault
00011a57 g     F .text	00000039 first_task_entry
0001150b g     F .text	0000001c do_handler_virtual_exception
000100c6 g       .text	00000000 exception_handler_overflow
000102c5 g       .text	00000000 simple_switch
0001a020 g     O .bss	00002000 stack
00010e9a g     F .text	00000057 sys_sleep
00011a90 g     F .text	000002df list_test
00010289 g       .text	00000000 exception_handler_control_exception
00010d6c g     F .text	000000d4 task_time_ticks
000100e5 g       .text	00000000 exception_handler_bound_range
000113bb g     F .text	0000001c do_handler_invalid_opcode
0001015f g       .text	00000000 exception_handler_invalid_tss
0001149b g     F .text	0000001c do_handler_fpu_error
00010d25 g     F .text	0000003d task_first_init
000114d3 g     F .text	0000001c do_handler_machine_check
0001132f g     F .text	0000001c do_handler_Debug
000128aa g     F .text	00000060 list_insert_first
00010e7a g     F .text	00000020 task_set_wakeup
0001134b g     F .text	0000001c do_handler_NMI
0001004a g       .text	00000000 exception_handler_divider
0001235f g     F .text	00000070 kernel_strncpy
000118fb g     F .text	0000000b irq_disable_global
000109b7 g     F .text	00000061 sys_sched_yield
0001c020 g       .bss	00000000 mem_free_start
00011a1f g     F .text	00000038 kernel_init
00011f93 g     F .text	00000023 sem_init
00011a19 g     F .text	00000006 test
00010000 g       .text	00000000 _start
000126f1 g     F .text	0000014b kernel_vsprintf
00010123 g       .text	00000000 exception_handler_device_unavailable
00010104 g       .text	00000000 exception_handler_invalid_opcode
00011e3e g     F .text	00000090 mutex_lock
0001022c g       .text	00000000 exception_handler_machine_check
0001140f g     F .text	0000001c do_handler_invalid_tss
00000000 g       .text	00000000 kernel_base
00010e40 g     F .text	0000003a task_set_sleep
000102a6 g       .text	00000000 exception_handler_timer
0001048d g     F .text	00000066 show_mem_inifo
000117af g     F .text	0000003a irq_install
00011075 g     F .text	0000006d init_gdt
00011911 g     F .text	00000018 irq_enter_protection
00011e12 g     F .text	0000002c mutex_init
00011874 g     F .text	00000087 irq_disable
0001024b g       .text	00000000 exception_handler_smd_exception
000120cc g     F .text	00000016 bitmap_byte_count
000113d7 g     F .text	0000001c do_handler_device_unavailable
00010928 g     F .text	0000005b task_dispatch
000110e2 g     F .text	00000013 switch_to_tss
000108db g     F .text	00000043 task_next_run
0001251b g     F .text	00000064 kernel_memcmp
00010666 g     F .text	000000a3 create_kernel_table
00012885 g     F .text	00000025 list_init
000114ef g     F .text	0000001c do_handler_smd_exception
000101d3 g       .text	00000000 exception_handler_page_fault
00010a18 g     F .text	0000002b task_set_block
000112f7 g     F .text	0000001c do_handler_unknown
000101f0 g       .text	00000000 exception_handler_fpu_error
00010c7d g     F .text	0000001e task_switch_from_to
00011601 g     F .text	000001ae irq_init
00011ece g     F .text	000000ba mutex_unlock
00011929 g     F .text	00000011 irq_leave_protection
00012450 g     F .text	0000003b kernel_strlen
00010f33 g     F .text	00000086 segment_desc_set
0001139f g     F .text	0000001c do_handler_bound_range
0001296e g     F .text	00000079 list_remove_first
00013250 g       .rodata	00000000 e_text
000123cf g     F .text	00000081 kernel_strncmp
000120e2 g     F .text	00000053 bitmap_init
0001017c g       .text	00000000 exception_handler_segment_not_present
00012021 g     F .text	00000082 sem_signal
00010088 g       .text	00000000 exception_handler_NMI
0001225e g     F .text	000000bf bitmap_alloc_nbits
00010cb8 g     F .text	0000006d task_manager_init
00010069 g       .text	00000000 exception_handler_Debug
0001078e g     F .text	000000f4 memory_init
0001283c g     F .text	00000036 pannic
00011447 g     F .text	0000001c do_handler_stack_segment_fault
00011367 g     F .text	0000001c do_handler_breakpoint
00012b45 g     F .text	000000de log_printf
00010b89 g     F .text	000000f4 task_init
0001257f g     F .text	00000033 kernel_sprintf
00011000 g     F .text	00000075 gdt_alloc_desc
000125b2 g     F .text	0000013f kernel_itoa
000129e7 g     F .text	00000085 list_remove
00010fb9 g     F .text	00000047 gate_desc_set
0001052a g     F .text	000000b0 find_pte
000119e1 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern init_main
    .extern kernel_init
    # void start(boot_info_t * boot_info)

_start:
    push %ebp # 保存返回地址
   10000:	55                   	push   %ebp
    mov %esp, %ebp # 使ebp指向栈底
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp),%eax # 将boot_info 传递给 eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax
    # mov 4(%esp),%eax

    # kernel_init(boot_info)
    push %eax # boot_info 压栈
   10006:	50                   	push   %eax

    call kernel_init # 调用C函数
   10007:	e8 13 1a 00 00       	call   11a1f <kernel_init>
    
    # 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		# 16为数据段选择子
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	# 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   10021:	bc 20 c0 01 00       	mov    $0x1c020,%esp

	# 栈和段等沿用之前的设置
	jmp init_main
   10026:	e9 44 1d 00 00       	jmp    11d6f <init_main>

0001002b <exception_handler_unknown>:
    add $(2*4) , %esp

    iret
.endm

exception_handler unknown            , -1    , 0 # 未知异常
   1002b:	6a 00                	push   $0x0
   1002d:	6a ff                	push   $0xffffffff
   1002f:	60                   	pusha  
   10030:	1e                   	push   %ds
   10031:	06                   	push   %es
   10032:	0f a0                	push   %fs
   10034:	0f a8                	push   %gs
   10036:	54                   	push   %esp
   10037:	e8 bb 12 00 00       	call   112f7 <do_handler_unknown>
   1003c:	83 c4 04             	add    $0x4,%esp
   1003f:	0f a9                	pop    %gs
   10041:	0f a1                	pop    %fs
   10043:	07                   	pop    %es
   10044:	1f                   	pop    %ds
   10045:	61                   	popa   
   10046:	83 c4 08             	add    $0x8,%esp
   10049:	cf                   	iret   

0001004a <exception_handler_divider>:
exception_handler divider            ,  0    , 0 # 除0异常
   1004a:	6a 00                	push   $0x0
   1004c:	6a 00                	push   $0x0
   1004e:	60                   	pusha  
   1004f:	1e                   	push   %ds
   10050:	06                   	push   %es
   10051:	0f a0                	push   %fs
   10053:	0f a8                	push   %gs
   10055:	54                   	push   %esp
   10056:	e8 b8 12 00 00       	call   11313 <do_handler_divider>
   1005b:	83 c4 04             	add    $0x4,%esp
   1005e:	0f a9                	pop    %gs
   10060:	0f a1                	pop    %fs
   10062:	07                   	pop    %es
   10063:	1f                   	pop    %ds
   10064:	61                   	popa   
   10065:	83 c4 08             	add    $0x8,%esp
   10068:	cf                   	iret   

00010069 <exception_handler_Debug>:
exception_handler Debug              ,  0    , 0 # Debug异常
   10069:	6a 00                	push   $0x0
   1006b:	6a 00                	push   $0x0
   1006d:	60                   	pusha  
   1006e:	1e                   	push   %ds
   1006f:	06                   	push   %es
   10070:	0f a0                	push   %fs
   10072:	0f a8                	push   %gs
   10074:	54                   	push   %esp
   10075:	e8 b5 12 00 00       	call   1132f <do_handler_Debug>
   1007a:	83 c4 04             	add    $0x4,%esp
   1007d:	0f a9                	pop    %gs
   1007f:	0f a1                	pop    %fs
   10081:	07                   	pop    %es
   10082:	1f                   	pop    %ds
   10083:	61                   	popa   
   10084:	83 c4 08             	add    $0x8,%esp
   10087:	cf                   	iret   

00010088 <exception_handler_NMI>:
exception_handler NMI                ,  2    , 0 #
   10088:	6a 00                	push   $0x0
   1008a:	6a 02                	push   $0x2
   1008c:	60                   	pusha  
   1008d:	1e                   	push   %ds
   1008e:	06                   	push   %es
   1008f:	0f a0                	push   %fs
   10091:	0f a8                	push   %gs
   10093:	54                   	push   %esp
   10094:	e8 b2 12 00 00       	call   1134b <do_handler_NMI>
   10099:	83 c4 04             	add    $0x4,%esp
   1009c:	0f a9                	pop    %gs
   1009e:	0f a1                	pop    %fs
   100a0:	07                   	pop    %es
   100a1:	1f                   	pop    %ds
   100a2:	61                   	popa   
   100a3:	83 c4 08             	add    $0x8,%esp
   100a6:	cf                   	iret   

000100a7 <exception_handler_breakpoint>:
exception_handler breakpoint         ,  3    , 0 # 断点异常
   100a7:	6a 00                	push   $0x0
   100a9:	6a 03                	push   $0x3
   100ab:	60                   	pusha  
   100ac:	1e                   	push   %ds
   100ad:	06                   	push   %es
   100ae:	0f a0                	push   %fs
   100b0:	0f a8                	push   %gs
   100b2:	54                   	push   %esp
   100b3:	e8 af 12 00 00       	call   11367 <do_handler_breakpoint>
   100b8:	83 c4 04             	add    $0x4,%esp
   100bb:	0f a9                	pop    %gs
   100bd:	0f a1                	pop    %fs
   100bf:	07                   	pop    %es
   100c0:	1f                   	pop    %ds
   100c1:	61                   	popa   
   100c2:	83 c4 08             	add    $0x8,%esp
   100c5:	cf                   	iret   

000100c6 <exception_handler_overflow>:
exception_handler overflow           ,  4    , 0 # 溢出
   100c6:	6a 00                	push   $0x0
   100c8:	6a 04                	push   $0x4
   100ca:	60                   	pusha  
   100cb:	1e                   	push   %ds
   100cc:	06                   	push   %es
   100cd:	0f a0                	push   %fs
   100cf:	0f a8                	push   %gs
   100d1:	54                   	push   %esp
   100d2:	e8 ac 12 00 00       	call   11383 <do_handler_overflow>
   100d7:	83 c4 04             	add    $0x4,%esp
   100da:	0f a9                	pop    %gs
   100dc:	0f a1                	pop    %fs
   100de:	07                   	pop    %es
   100df:	1f                   	pop    %ds
   100e0:	61                   	popa   
   100e1:	83 c4 08             	add    $0x8,%esp
   100e4:	cf                   	iret   

000100e5 <exception_handler_bound_range>:
exception_handler bound_range        ,  5    , 0 # 越界
   100e5:	6a 00                	push   $0x0
   100e7:	6a 05                	push   $0x5
   100e9:	60                   	pusha  
   100ea:	1e                   	push   %ds
   100eb:	06                   	push   %es
   100ec:	0f a0                	push   %fs
   100ee:	0f a8                	push   %gs
   100f0:	54                   	push   %esp
   100f1:	e8 a9 12 00 00       	call   1139f <do_handler_bound_range>
   100f6:	83 c4 04             	add    $0x4,%esp
   100f9:	0f a9                	pop    %gs
   100fb:	0f a1                	pop    %fs
   100fd:	07                   	pop    %es
   100fe:	1f                   	pop    %ds
   100ff:	61                   	popa   
   10100:	83 c4 08             	add    $0x8,%esp
   10103:	cf                   	iret   

00010104 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode     ,  6    , 0 # 无效操作码
   10104:	6a 00                	push   $0x0
   10106:	6a 06                	push   $0x6
   10108:	60                   	pusha  
   10109:	1e                   	push   %ds
   1010a:	06                   	push   %es
   1010b:	0f a0                	push   %fs
   1010d:	0f a8                	push   %gs
   1010f:	54                   	push   %esp
   10110:	e8 a6 12 00 00       	call   113bb <do_handler_invalid_opcode>
   10115:	83 c4 04             	add    $0x4,%esp
   10118:	0f a9                	pop    %gs
   1011a:	0f a1                	pop    %fs
   1011c:	07                   	pop    %es
   1011d:	1f                   	pop    %ds
   1011e:	61                   	popa   
   1011f:	83 c4 08             	add    $0x8,%esp
   10122:	cf                   	iret   

00010123 <exception_handler_device_unavailable>:
exception_handler device_unavailable ,  7    , 0 # 设备不可用
   10123:	6a 00                	push   $0x0
   10125:	6a 07                	push   $0x7
   10127:	60                   	pusha  
   10128:	1e                   	push   %ds
   10129:	06                   	push   %es
   1012a:	0f a0                	push   %fs
   1012c:	0f a8                	push   %gs
   1012e:	54                   	push   %esp
   1012f:	e8 a3 12 00 00       	call   113d7 <do_handler_device_unavailable>
   10134:	83 c4 04             	add    $0x4,%esp
   10137:	0f a9                	pop    %gs
   10139:	0f a1                	pop    %fs
   1013b:	07                   	pop    %es
   1013c:	1f                   	pop    %ds
   1013d:	61                   	popa   
   1013e:	83 c4 08             	add    $0x8,%esp
   10141:	cf                   	iret   

00010142 <exception_handler_double_fault>:
exception_handler double_fault       ,  8    , 1 #
   10142:	6a 08                	push   $0x8
   10144:	60                   	pusha  
   10145:	1e                   	push   %ds
   10146:	06                   	push   %es
   10147:	0f a0                	push   %fs
   10149:	0f a8                	push   %gs
   1014b:	54                   	push   %esp
   1014c:	e8 a2 12 00 00       	call   113f3 <do_handler_double_fault>
   10151:	83 c4 04             	add    $0x4,%esp
   10154:	0f a9                	pop    %gs
   10156:	0f a1                	pop    %fs
   10158:	07                   	pop    %es
   10159:	1f                   	pop    %ds
   1015a:	61                   	popa   
   1015b:	83 c4 08             	add    $0x8,%esp
   1015e:	cf                   	iret   

0001015f <exception_handler_invalid_tss>:
exception_handler invalid_tss        ,  10   , 1 # 无效TSS
   1015f:	6a 0a                	push   $0xa
   10161:	60                   	pusha  
   10162:	1e                   	push   %ds
   10163:	06                   	push   %es
   10164:	0f a0                	push   %fs
   10166:	0f a8                	push   %gs
   10168:	54                   	push   %esp
   10169:	e8 a1 12 00 00       	call   1140f <do_handler_invalid_tss>
   1016e:	83 c4 04             	add    $0x4,%esp
   10171:	0f a9                	pop    %gs
   10173:	0f a1                	pop    %fs
   10175:	07                   	pop    %es
   10176:	1f                   	pop    %ds
   10177:	61                   	popa   
   10178:	83 c4 08             	add    $0x8,%esp
   1017b:	cf                   	iret   

0001017c <exception_handler_segment_not_present>:
exception_handler segment_not_present,  11   , 1 # 段不存在
   1017c:	6a 0b                	push   $0xb
   1017e:	60                   	pusha  
   1017f:	1e                   	push   %ds
   10180:	06                   	push   %es
   10181:	0f a0                	push   %fs
   10183:	0f a8                	push   %gs
   10185:	54                   	push   %esp
   10186:	e8 a0 12 00 00       	call   1142b <do_handler_segment_not_present>
   1018b:	83 c4 04             	add    $0x4,%esp
   1018e:	0f a9                	pop    %gs
   10190:	0f a1                	pop    %fs
   10192:	07                   	pop    %es
   10193:	1f                   	pop    %ds
   10194:	61                   	popa   
   10195:	83 c4 08             	add    $0x8,%esp
   10198:	cf                   	iret   

00010199 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault,  12   , 1 #
   10199:	6a 0c                	push   $0xc
   1019b:	60                   	pusha  
   1019c:	1e                   	push   %ds
   1019d:	06                   	push   %es
   1019e:	0f a0                	push   %fs
   101a0:	0f a8                	push   %gs
   101a2:	54                   	push   %esp
   101a3:	e8 9f 12 00 00       	call   11447 <do_handler_stack_segment_fault>
   101a8:	83 c4 04             	add    $0x4,%esp
   101ab:	0f a9                	pop    %gs
   101ad:	0f a1                	pop    %fs
   101af:	07                   	pop    %es
   101b0:	1f                   	pop    %ds
   101b1:	61                   	popa   
   101b2:	83 c4 08             	add    $0x8,%esp
   101b5:	cf                   	iret   

000101b6 <exception_handler_general_protection>:
exception_handler general_protection ,  13   , 1 #
   101b6:	6a 0d                	push   $0xd
   101b8:	60                   	pusha  
   101b9:	1e                   	push   %ds
   101ba:	06                   	push   %es
   101bb:	0f a0                	push   %fs
   101bd:	0f a8                	push   %gs
   101bf:	54                   	push   %esp
   101c0:	e8 9e 12 00 00       	call   11463 <do_handler_general_protection>
   101c5:	83 c4 04             	add    $0x4,%esp
   101c8:	0f a9                	pop    %gs
   101ca:	0f a1                	pop    %fs
   101cc:	07                   	pop    %es
   101cd:	1f                   	pop    %ds
   101ce:	61                   	popa   
   101cf:	83 c4 08             	add    $0x8,%esp
   101d2:	cf                   	iret   

000101d3 <exception_handler_page_fault>:
exception_handler page_fault         ,  14   , 1 # 页错误
   101d3:	6a 0e                	push   $0xe
   101d5:	60                   	pusha  
   101d6:	1e                   	push   %ds
   101d7:	06                   	push   %es
   101d8:	0f a0                	push   %fs
   101da:	0f a8                	push   %gs
   101dc:	54                   	push   %esp
   101dd:	e8 9d 12 00 00       	call   1147f <do_handler_page_fault>
   101e2:	83 c4 04             	add    $0x4,%esp
   101e5:	0f a9                	pop    %gs
   101e7:	0f a1                	pop    %fs
   101e9:	07                   	pop    %es
   101ea:	1f                   	pop    %ds
   101eb:	61                   	popa   
   101ec:	83 c4 08             	add    $0x8,%esp
   101ef:	cf                   	iret   

000101f0 <exception_handler_fpu_error>:
exception_handler fpu_error          ,  16   , 0 # 浮点运算单元
   101f0:	6a 00                	push   $0x0
   101f2:	6a 10                	push   $0x10
   101f4:	60                   	pusha  
   101f5:	1e                   	push   %ds
   101f6:	06                   	push   %es
   101f7:	0f a0                	push   %fs
   101f9:	0f a8                	push   %gs
   101fb:	54                   	push   %esp
   101fc:	e8 9a 12 00 00       	call   1149b <do_handler_fpu_error>
   10201:	83 c4 04             	add    $0x4,%esp
   10204:	0f a9                	pop    %gs
   10206:	0f a1                	pop    %fs
   10208:	07                   	pop    %es
   10209:	1f                   	pop    %ds
   1020a:	61                   	popa   
   1020b:	83 c4 08             	add    $0x8,%esp
   1020e:	cf                   	iret   

0001020f <exception_handler_alignment_check>:
exception_handler alignment_check    ,  17   , 1 # 对齐检查
   1020f:	6a 11                	push   $0x11
   10211:	60                   	pusha  
   10212:	1e                   	push   %ds
   10213:	06                   	push   %es
   10214:	0f a0                	push   %fs
   10216:	0f a8                	push   %gs
   10218:	54                   	push   %esp
   10219:	e8 99 12 00 00       	call   114b7 <do_handler_alignment_check>
   1021e:	83 c4 04             	add    $0x4,%esp
   10221:	0f a9                	pop    %gs
   10223:	0f a1                	pop    %fs
   10225:	07                   	pop    %es
   10226:	1f                   	pop    %ds
   10227:	61                   	popa   
   10228:	83 c4 08             	add    $0x8,%esp
   1022b:	cf                   	iret   

0001022c <exception_handler_machine_check>:
exception_handler machine_check      ,  18   , 0 #
   1022c:	6a 00                	push   $0x0
   1022e:	6a 12                	push   $0x12
   10230:	60                   	pusha  
   10231:	1e                   	push   %ds
   10232:	06                   	push   %es
   10233:	0f a0                	push   %fs
   10235:	0f a8                	push   %gs
   10237:	54                   	push   %esp
   10238:	e8 96 12 00 00       	call   114d3 <do_handler_machine_check>
   1023d:	83 c4 04             	add    $0x4,%esp
   10240:	0f a9                	pop    %gs
   10242:	0f a1                	pop    %fs
   10244:	07                   	pop    %es
   10245:	1f                   	pop    %ds
   10246:	61                   	popa   
   10247:	83 c4 08             	add    $0x8,%esp
   1024a:	cf                   	iret   

0001024b <exception_handler_smd_exception>:
exception_handler smd_exception      ,  19   , 0 #
   1024b:	6a 00                	push   $0x0
   1024d:	6a 13                	push   $0x13
   1024f:	60                   	pusha  
   10250:	1e                   	push   %ds
   10251:	06                   	push   %es
   10252:	0f a0                	push   %fs
   10254:	0f a8                	push   %gs
   10256:	54                   	push   %esp
   10257:	e8 93 12 00 00       	call   114ef <do_handler_smd_exception>
   1025c:	83 c4 04             	add    $0x4,%esp
   1025f:	0f a9                	pop    %gs
   10261:	0f a1                	pop    %fs
   10263:	07                   	pop    %es
   10264:	1f                   	pop    %ds
   10265:	61                   	popa   
   10266:	83 c4 08             	add    $0x8,%esp
   10269:	cf                   	iret   

0001026a <exception_handler_virtual_exception>:
exception_handler virtual_exception  ,  20   , 0 #
   1026a:	6a 00                	push   $0x0
   1026c:	6a 14                	push   $0x14
   1026e:	60                   	pusha  
   1026f:	1e                   	push   %ds
   10270:	06                   	push   %es
   10271:	0f a0                	push   %fs
   10273:	0f a8                	push   %gs
   10275:	54                   	push   %esp
   10276:	e8 90 12 00 00       	call   1150b <do_handler_virtual_exception>
   1027b:	83 c4 04             	add    $0x4,%esp
   1027e:	0f a9                	pop    %gs
   10280:	0f a1                	pop    %fs
   10282:	07                   	pop    %es
   10283:	1f                   	pop    %ds
   10284:	61                   	popa   
   10285:	83 c4 08             	add    $0x8,%esp
   10288:	cf                   	iret   

00010289 <exception_handler_control_exception>:
exception_handler control_exception  ,  21   , 1 #
   10289:	6a 15                	push   $0x15
   1028b:	60                   	pusha  
   1028c:	1e                   	push   %ds
   1028d:	06                   	push   %es
   1028e:	0f a0                	push   %fs
   10290:	0f a8                	push   %gs
   10292:	54                   	push   %esp
   10293:	e8 8f 12 00 00       	call   11527 <do_handler_control_exception>
   10298:	83 c4 04             	add    $0x4,%esp
   1029b:	0f a9                	pop    %gs
   1029d:	0f a1                	pop    %fs
   1029f:	07                   	pop    %es
   102a0:	1f                   	pop    %ds
   102a1:	61                   	popa   
   102a2:	83 c4 08             	add    $0x8,%esp
   102a5:	cf                   	iret   

000102a6 <exception_handler_timer>:
exception_handler timer              ,  0x20 , 0 #
   102a6:	6a 00                	push   $0x0
   102a8:	6a 20                	push   $0x20
   102aa:	60                   	pusha  
   102ab:	1e                   	push   %ds
   102ac:	06                   	push   %es
   102ad:	0f a0                	push   %fs
   102af:	0f a8                	push   %gs
   102b1:	54                   	push   %esp
   102b2:	e8 a2 16 00 00       	call   11959 <do_handler_timer>
   102b7:	83 c4 04             	add    $0x4,%esp
   102ba:	0f a9                	pop    %gs
   102bc:	0f a1                	pop    %fs
   102be:	07                   	pop    %es
   102bf:	1f                   	pop    %ds
   102c0:	61                   	popa   
   102c1:	83 c4 08             	add    $0x8,%esp
   102c4:	cf                   	iret   

000102c5 <simple_switch>:

    .text
    .global simple_switch
    # simple_switch(&from,&to)
simple_switch:
    mov 4(%esp),%eax  # 取from->stack 
   102c5:	8b 44 24 04          	mov    0x4(%esp),%eax
    mov 8(%esp),%edx  # 取to->stack
   102c9:	8b 54 24 08          	mov    0x8(%esp),%edx

    # 压栈,保存当前任务的状态
    push %ebp
   102cd:	55                   	push   %ebp
    push %ebx
   102ce:	53                   	push   %ebx
    push %esi
   102cf:	56                   	push   %esi
    push %edi
   102d0:	57                   	push   %edi

    # 切换当前栈
    mov %esp,(%eax)  # from->stack = esp
   102d1:	89 20                	mov    %esp,(%eax)
    mov %edx , %esp  # esp = to->stack
   102d3:	89 d4                	mov    %edx,%esp
    
    # 加载下一任务的栈
    pop %edi
   102d5:	5f                   	pop    %edi
    pop %esi
   102d6:	5e                   	pop    %esi
    pop %ebx
   102d7:	5b                   	pop    %ebx
    pop %ebp
   102d8:	5d                   	pop    %ebp

   102d9:	c3                   	ret    

000102da <down2>:
 * @param         {uint32_t} size: 需要转换的大小
 * @param         {uint32_t} bound: 边界（必须为2的幂）
 * @return        {uint32_t} : 对齐后的结果
 **/
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   102da:	55                   	push   %ebp
   102db:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   102dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   102e0:	f7 d8                	neg    %eax
   102e2:	23 45 08             	and    0x8(%ebp),%eax
}
   102e5:	5d                   	pop    %ebp
   102e6:	c3                   	ret    

000102e7 <up2>:
 * @param         {uint32_t} size: 需要转换的大小
 * @param         {uint32_t} bound: 边界（必须为2的幂）
 * @return        {uint32_t} : 对齐后的结果
 **/
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   102e7:	55                   	push   %ebp
   102e8:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102ea:	8b 55 08             	mov    0x8(%ebp),%edx
   102ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f0:	01 d0                	add    %edx,%eax
   102f2:	8d 50 ff             	lea    -0x1(%eax),%edx
   102f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   102f8:	f7 d8                	neg    %eax
   102fa:	21 d0                	and    %edx,%eax
}
   102fc:	5d                   	pop    %ebp
   102fd:	c3                   	ret    

000102fe <write_cr3>:
 * @brief        : 写入cr3
 * @param         {uint32_t} v: 写入的值
 * @return        {*}
 **/
static inline void write_cr3(uint32_t v)
{
   102fe:	55                   	push   %ebp
   102ff:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v],%%cr3" ::[v] "r"(v));
   10301:	8b 45 08             	mov    0x8(%ebp),%eax
   10304:	0f 22 d8             	mov    %eax,%cr3
}
   10307:	90                   	nop
   10308:	5d                   	pop    %ebp
   10309:	c3                   	ret    

0001030a <mmu_set_page_dir>:
 * @brief        : 将页目录表的首地址写入cr3寄存器
 * @param         {uint32_t} paddr:页目录表地址
 * @return        {*}
 **/
static inline void mmu_set_page_dir(uint32_t paddr)
{
   1030a:	55                   	push   %ebp
   1030b:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1030d:	ff 75 08             	pushl  0x8(%ebp)
   10310:	e8 e9 ff ff ff       	call   102fe <write_cr3>
   10315:	83 c4 04             	add    $0x4,%esp
}
   10318:	90                   	nop
   10319:	c9                   	leave  
   1031a:	c3                   	ret    

0001031b <pde_index>:
 * @brief        : 取出页目录项在页目录表中的索引
 * @param         {uint32_t} vaddr: 对应的虚拟地址
 * @return        {uint_32} : 返回页目录项在页目录中的索引
 **/
static inline uint32_t pde_index(uint32_t vaddr)
{
   1031b:	55                   	push   %ebp
   1031c:	89 e5                	mov    %esp,%ebp
   1031e:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22);
   10321:	8b 45 08             	mov    0x8(%ebp),%eax
   10324:	c1 e8 16             	shr    $0x16,%eax
   10327:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1032a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1032d:	c9                   	leave  
   1032e:	c3                   	ret    

0001032f <pte_index>:
 * @brief        : 取出物理页在页表中的索引
 * @param         {uint32_t} vaddr: 对应的虚拟地址
 * @return        {uint32_t} : 返回物理页在页表中的索引
 **/
static inline uint32_t pte_index(uint32_t vaddr)
{
   1032f:	55                   	push   %ebp
   10330:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   10332:	8b 45 08             	mov    0x8(%ebp),%eax
   10335:	c1 e8 0c             	shr    $0xc,%eax
   10338:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1033d:	5d                   	pop    %ebp
   1033e:	c3                   	ret    

0001033f <pde_paddr>:
 * @brief        : 取出页目录表项对应的页表物理地址,pde->phy_pt_addr为后20位
 * @param         {pde_t} *pde: 页目录表项
 * @return        {uint32_t} : 页表的物理地址
 **/
static inline uint32_t pde_paddr(pde_t *pde)
{
   1033f:	55                   	push   %ebp
   10340:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10342:	8b 45 08             	mov    0x8(%ebp),%eax
   10345:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10349:	c0 ea 04             	shr    $0x4,%dl
   1034c:	0f b6 d2             	movzbl %dl,%edx
   1034f:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10353:	c1 e1 04             	shl    $0x4,%ecx
   10356:	09 ca                	or     %ecx,%edx
   10358:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1035c:	c1 e0 0c             	shl    $0xc,%eax
   1035f:	09 d0                	or     %edx,%eax
   10361:	c1 e0 0c             	shl    $0xc,%eax
}
   10364:	5d                   	pop    %ebp
   10365:	c3                   	ret    

00010366 <addr_alloc_init>:
 * @param         {uint32_t} size: 大小
 * @param         {uint32_t} page_size: 页大小,块大小
 * @return        {*}
 **/
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits, uint32_t start, uint32_t size, uint32_t page_size)
{
   10366:	55                   	push   %ebp
   10367:	89 e5                	mov    %esp,%ebp
   10369:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   1036c:	8b 45 08             	mov    0x8(%ebp),%eax
   1036f:	83 c0 14             	add    $0x14,%eax
   10372:	83 ec 0c             	sub    $0xc,%esp
   10375:	50                   	push   %eax
   10376:	e8 97 1a 00 00       	call   11e12 <mutex_init>
   1037b:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1037e:	8b 45 08             	mov    0x8(%ebp),%eax
   10381:	8b 55 10             	mov    0x10(%ebp),%edx
   10384:	89 50 08             	mov    %edx,0x8(%eax)
    alloc->size = size;
   10387:	8b 45 08             	mov    0x8(%ebp),%eax
   1038a:	8b 55 14             	mov    0x14(%ebp),%edx
   1038d:	89 50 0c             	mov    %edx,0xc(%eax)
    alloc->page_size = page_size;
   10390:	8b 45 08             	mov    0x8(%ebp),%eax
   10393:	8b 55 18             	mov    0x18(%ebp),%edx
   10396:	89 50 10             	mov    %edx,0x10(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10399:	8b 45 08             	mov    0x8(%ebp),%eax
   1039c:	8b 40 0c             	mov    0xc(%eax),%eax
   1039f:	ba 00 00 00 00       	mov    $0x0,%edx
   103a4:	f7 75 18             	divl   0x18(%ebp)
   103a7:	89 c2                	mov    %eax,%edx
   103a9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ac:	6a 00                	push   $0x0
   103ae:	52                   	push   %edx
   103af:	ff 75 0c             	pushl  0xc(%ebp)
   103b2:	50                   	push   %eax
   103b3:	e8 2a 1d 00 00       	call   120e2 <bitmap_init>
   103b8:	83 c4 10             	add    $0x10,%esp
}
   103bb:	90                   	nop
   103bc:	c9                   	leave  
   103bd:	c3                   	ret    

000103be <addr_alloc_page>:
 * @param         {addr_alloc_t *} alloc:
 * @param         {int} page_count:
 * @return        {*}分配好的页地址
 **/
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   103be:	55                   	push   %ebp
   103bf:	89 e5                	mov    %esp,%ebp
   103c1:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0; // 地址
   103c4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    mutex_lock(&alloc->mutex);
   103cb:	8b 45 08             	mov    0x8(%ebp),%eax
   103ce:	83 c0 14             	add    $0x14,%eax
   103d1:	83 ec 0c             	sub    $0xc,%esp
   103d4:	50                   	push   %eax
   103d5:	e8 64 1a 00 00       	call   11e3e <mutex_lock>
   103da:	83 c4 10             	add    $0x10,%esp
    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count); // 找到page_count页
   103dd:	8b 45 08             	mov    0x8(%ebp),%eax
   103e0:	83 ec 04             	sub    $0x4,%esp
   103e3:	ff 75 0c             	pushl  0xc(%ebp)
   103e6:	6a 00                	push   $0x0
   103e8:	50                   	push   %eax
   103e9:	e8 70 1e 00 00       	call   1225e <bitmap_alloc_nbits>
   103ee:	83 c4 10             	add    $0x10,%esp
   103f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   103f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   103f8:	78 17                	js     10411 <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   103fa:	8b 45 08             	mov    0x8(%ebp),%eax
   103fd:	8b 50 08             	mov    0x8(%eax),%edx
   10400:	8b 45 08             	mov    0x8(%ebp),%eax
   10403:	8b 48 10             	mov    0x10(%eax),%ecx
   10406:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10409:	0f af c1             	imul   %ecx,%eax
   1040c:	01 d0                	add    %edx,%eax
   1040e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    mutex_unlock(&alloc->mutex);
   10411:	8b 45 08             	mov    0x8(%ebp),%eax
   10414:	83 c0 14             	add    $0x14,%eax
   10417:	83 ec 0c             	sub    $0xc,%esp
   1041a:	50                   	push   %eax
   1041b:	e8 ae 1a 00 00       	call   11ece <mutex_unlock>
   10420:	83 c4 10             	add    $0x10,%esp
    return addr;
   10423:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10426:	c9                   	leave  
   10427:	c3                   	ret    

00010428 <addr_free_page>:

static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   10428:	55                   	push   %ebp
   10429:	89 e5                	mov    %esp,%ebp
   1042b:	53                   	push   %ebx
   1042c:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	83 c0 14             	add    $0x14,%eax
   10435:	83 ec 0c             	sub    $0xc,%esp
   10438:	50                   	push   %eax
   10439:	e8 00 1a 00 00       	call   11e3e <mutex_lock>
   1043e:	83 c4 10             	add    $0x10,%esp
    uint32_t page_index = (addr - alloc->start) / alloc->page_size;
   10441:	8b 45 08             	mov    0x8(%ebp),%eax
   10444:	8b 40 08             	mov    0x8(%eax),%eax
   10447:	8b 55 0c             	mov    0xc(%ebp),%edx
   1044a:	89 d1                	mov    %edx,%ecx
   1044c:	29 c1                	sub    %eax,%ecx
   1044e:	8b 45 08             	mov    0x8(%ebp),%eax
   10451:	8b 58 10             	mov    0x10(%eax),%ebx
   10454:	89 c8                	mov    %ecx,%eax
   10456:	ba 00 00 00 00       	mov    $0x0,%edx
   1045b:	f7 f3                	div    %ebx
   1045d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, page_index, page_count, 0);
   10460:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10463:	8b 45 08             	mov    0x8(%ebp),%eax
   10466:	6a 00                	push   $0x0
   10468:	ff 75 10             	pushl  0x10(%ebp)
   1046b:	52                   	push   %edx
   1046c:	50                   	push   %eax
   1046d:	e8 fd 1c 00 00       	call   1216f <bitmap_set_bit>
   10472:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10475:	8b 45 08             	mov    0x8(%ebp),%eax
   10478:	83 c0 14             	add    $0x14,%eax
   1047b:	83 ec 0c             	sub    $0xc,%esp
   1047e:	50                   	push   %eax
   1047f:	e8 4a 1a 00 00       	call   11ece <mutex_unlock>
   10484:	83 c4 10             	add    $0x10,%esp
}
   10487:	90                   	nop
   10488:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1048b:	c9                   	leave  
   1048c:	c3                   	ret    

0001048d <show_mem_inifo>:
 * @brief        : 打印内存信息,内存区域序号、存储区域起始地址、存储区域大小
 * @param         {boot_info_t} *boot_info: OS启动信息
 * @return        {*}
 **/
void show_mem_inifo(boot_info_t *boot_info)
{
   1048d:	55                   	push   %ebp
   1048e:	89 e5                	mov    %esp,%ebp
   10490:	83 ec 18             	sub    $0x18,%esp
    log_printf("memory region:");
   10493:	83 ec 0c             	sub    $0xc,%esp
   10496:	68 24 2c 01 00       	push   $0x12c24
   1049b:	e8 a5 26 00 00       	call   12b45 <log_printf>
   104a0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   104a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104aa:	eb 29                	jmp    104d5 <show_mem_inifo+0x48>
    {
        log_printf("[%d]:0x%x-0x%x", i, boot_info->ram_region_cfg[i].start, boot_info->ram_region_cfg[i].size);
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104b2:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104b6:	8b 45 08             	mov    0x8(%ebp),%eax
   104b9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   104bc:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   104bf:	52                   	push   %edx
   104c0:	50                   	push   %eax
   104c1:	ff 75 f4             	pushl  -0xc(%ebp)
   104c4:	68 33 2c 01 00       	push   $0x12c33
   104c9:	e8 77 26 00 00       	call   12b45 <log_printf>
   104ce:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   104d1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   104d5:	8b 45 08             	mov    0x8(%ebp),%eax
   104d8:	8b 40 50             	mov    0x50(%eax),%eax
   104db:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   104de:	7c cc                	jl     104ac <show_mem_inifo+0x1f>
    }
    log_printf("\n");
   104e0:	83 ec 0c             	sub    $0xc,%esp
   104e3:	68 42 2c 01 00       	push   $0x12c42
   104e8:	e8 58 26 00 00       	call   12b45 <log_printf>
   104ed:	83 c4 10             	add    $0x10,%esp
}
   104f0:	90                   	nop
   104f1:	c9                   	leave  
   104f2:	c3                   	ret    

000104f3 <total_mem_size>:
 * @brief        : 计算整个内存区域大小
 * @param         {boot_info_t} *boot_info: OS启动信息
 * @return        {uint32_t} :总内存大小
 **/
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   104f3:	55                   	push   %ebp
   104f4:	89 e5                	mov    %esp,%ebp
   104f6:	83 ec 10             	sub    $0x10,%esp
    uint32_t mem_size = 0;
   104f9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10500:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10507:	eb 11                	jmp    1051a <total_mem_size+0x27>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   10509:	8b 45 08             	mov    0x8(%ebp),%eax
   1050c:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1050f:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
   10513:	01 45 fc             	add    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10516:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1051a:	8b 45 08             	mov    0x8(%ebp),%eax
   1051d:	8b 40 50             	mov    0x50(%eax),%eax
   10520:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10523:	7c e4                	jl     10509 <total_mem_size+0x16>
    }
    return mem_size;
   10525:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10528:	c9                   	leave  
   10529:	c3                   	ret    

0001052a <find_pte>:
 * @param         {uint32_t} vaddr: 虚拟地址
 * @param         {int} alloc: 如果未找到是否分配一个表项,1 是,0 否
 * @return        {pte_t *}: 页表的地址
 **/
pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   1052a:	55                   	push   %ebp
   1052b:	89 e5                	mov    %esp,%ebp
   1052d:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;
    pde_t *pde = page_dir + pde_index(vaddr); // 页目录表中页目录项
   10530:	ff 75 0c             	pushl  0xc(%ebp)
   10533:	e8 e3 fd ff ff       	call   1031b <pde_index>
   10538:	83 c4 04             	add    $0x4,%esp
   1053b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	01 d0                	add    %edx,%eax
   10547:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)                         // 判断是否存在
   1054a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1054d:	0f b6 00             	movzbl (%eax),%eax
   10550:	83 e0 01             	and    $0x1,%eax
   10553:	84 c0                	test   %al,%al
   10555:	74 10                	je     10567 <find_pte+0x3d>
    {
        page_table = (pte_t *)pde_paddr(pde); // 对应的页表的物理地址
   10557:	ff 75 f0             	pushl  -0x10(%ebp)
   1055a:	e8 e0 fd ff ff       	call   1033f <pde_paddr>
   1055f:	83 c4 04             	add    $0x4,%esp
   10562:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10565:	eb 57                	jmp    105be <find_pte+0x94>
    }
    else
    {
        if (alloc == 0) // 不存在,不分配
   10567:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1056b:	75 07                	jne    10574 <find_pte+0x4a>
        {
            return (pte_t *)0;
   1056d:	b8 00 00 00 00       	mov    $0x0,%eax
   10572:	eb 64                	jmp    105d8 <find_pte+0xae>
        }
        // 不存在,分配
        uint32_t pg_addr = addr_alloc_page(&paddr_alloc, 1); // 分配一个页表
   10574:	83 ec 08             	sub    $0x8,%esp
   10577:	6a 01                	push   $0x1
   10579:	68 00 50 01 00       	push   $0x15000
   1057e:	e8 3b fe ff ff       	call   103be <addr_alloc_page>
   10583:	83 c4 10             	add    $0x10,%esp
   10586:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_addr == 0) // 分配失败
   10589:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1058d:	75 07                	jne    10596 <find_pte+0x6c>
        {
            return (pte_t *)0;
   1058f:	b8 00 00 00 00       	mov    $0x0,%eax
   10594:	eb 42                	jmp    105d8 <find_pte+0xae>
        }
        // 分配成功,对齐进行初始化
        pde->v = pg_addr | PDE_P | PDE_W | PDE_U;
   10596:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10599:	83 c8 07             	or     $0x7,%eax
   1059c:	89 c2                	mov    %eax,%edx
   1059e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105a1:	89 10                	mov    %edx,(%eax)
        page_table = (pte_t *)pg_addr;
   105a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset((void *)page_table, 0, MEM_PAGE_SIZE);
   105a9:	83 ec 04             	sub    $0x4,%esp
   105ac:	68 00 10 00 00       	push   $0x1000
   105b1:	6a 00                	push   $0x0
   105b3:	ff 75 f4             	pushl  -0xc(%ebp)
   105b6:	e8 1f 1f 00 00       	call   124da <kernel_memset>
   105bb:	83 c4 10             	add    $0x10,%esp
    }
    return page_table + pte_index(vaddr);
   105be:	83 ec 0c             	sub    $0xc,%esp
   105c1:	ff 75 0c             	pushl  0xc(%ebp)
   105c4:	e8 66 fd ff ff       	call   1032f <pte_index>
   105c9:	83 c4 10             	add    $0x10,%esp
   105cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   105d6:	01 d0                	add    %edx,%eax
}
   105d8:	c9                   	leave  
   105d9:	c3                   	ret    

000105da <memory_create_map>:
 * @param         {int} count: 映射多少物理页
 * @param         {uint32_t} perm: 权限字段
 * @return        {int} : 建立映射关系成功返回0,失败返回-1
 **/
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   105da:	55                   	push   %ebp
   105db:	89 e5                	mov    %esp,%ebp
   105dd:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   105e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   105e7:	eb 6e                	jmp    10657 <memory_create_map+0x7d>
    {
        // log_printf("create map:v-0x%x,p-0x%x,perm:0x%x", vaddr, paddr, perm);
        pte_t *pte = find_pte(page_dir, vaddr, 1); // 从页目录表中找到对应的页表项
   105e9:	83 ec 04             	sub    $0x4,%esp
   105ec:	6a 01                	push   $0x1
   105ee:	ff 75 0c             	pushl  0xc(%ebp)
   105f1:	ff 75 08             	pushl  0x8(%ebp)
   105f4:	e8 31 ff ff ff       	call   1052a <find_pte>
   105f9:	83 c4 10             	add    $0x10,%esp
   105fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   105ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10603:	75 07                	jne    1060c <memory_create_map+0x32>
        {
            // log_printf("create pte failed . pte == 0");
            // 未找到返回 -1
            return -1;
   10605:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1060a:	eb 58                	jmp    10664 <memory_create_map+0x8a>
        }
        // log_printf("pte addr:0x%x", (uint32_t)pte);
        // 建立映射关系
        ASSERT(pte->present == 0);
   1060c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1060f:	0f b6 00             	movzbl (%eax),%eax
   10612:	83 e0 01             	and    $0x1,%eax
   10615:	84 c0                	test   %al,%al
   10617:	74 1c                	je     10635 <memory_create_map+0x5b>
   10619:	68 44 2c 01 00       	push   $0x12c44
   1061e:	68 04 2d 01 00       	push   $0x12d04
   10623:	68 93 00 00 00       	push   $0x93
   10628:	68 58 2c 01 00       	push   $0x12c58
   1062d:	e8 0a 22 00 00       	call   1283c <pannic>
   10632:	83 c4 10             	add    $0x10,%esp
        pte->v = paddr | perm | PTE_P;
   10635:	8b 45 10             	mov    0x10(%ebp),%eax
   10638:	0b 45 18             	or     0x18(%ebp),%eax
   1063b:	83 c8 01             	or     $0x1,%eax
   1063e:	89 c2                	mov    %eax,%edx
   10640:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10643:	89 10                	mov    %edx,(%eax)

        // 下一页的映射关系
        vaddr += MEM_PAGE_SIZE;
   10645:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1064c:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   10653:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10657:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1065a:	3b 45 14             	cmp    0x14(%ebp),%eax
   1065d:	7c 8a                	jl     105e9 <memory_create_map+0xf>
    }
    return 0;
   1065f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10664:	c9                   	leave  
   10665:	c3                   	ret    

00010666 <create_kernel_table>:
/**
 * @brief        : 创建内核页表,并根据映射结构创建映射关系
 * @return        {*}
 **/
void create_kernel_table()
{
   10666:	55                   	push   %ebp
   10667:	89 e5                	mov    %esp,%ebp
   10669:	83 ec 28             	sub    $0x28,%esp
        {s_data, (void *)(MEM_EBDA_START - 1), s_data, PTE_W}, // 内核数据区,可读写数据空间
        // 扩展存储空间一一映射,方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };
    // 遍历表项,建立映射关系
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1066c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10673:	e9 82 00 00 00       	jmp    106fa <create_kernel_table+0x94>
    {
        memory_map_t *map = kernel_map + i;
   10678:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1067b:	c1 e0 04             	shl    $0x4,%eax
   1067e:	05 00 40 01 00       	add    $0x14000,%eax
   10683:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 页边界对齐
        uint32_t vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10686:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10689:	8b 00                	mov    (%eax),%eax
   1068b:	68 00 10 00 00       	push   $0x1000
   10690:	50                   	push   %eax
   10691:	e8 44 fc ff ff       	call   102da <down2>
   10696:	83 c4 08             	add    $0x8,%esp
   10699:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   1069c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1069f:	8b 40 04             	mov    0x4(%eax),%eax
   106a2:	68 00 10 00 00       	push   $0x1000
   106a7:	50                   	push   %eax
   106a8:	e8 3a fc ff ff       	call   102e7 <up2>
   106ad:	83 c4 08             	add    $0x8,%esp
   106b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        uint32_t paddr = down2((uint32_t)map->pstart, MEM_PAGE_SIZE);
   106b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106b6:	8b 40 08             	mov    0x8(%eax),%eax
   106b9:	68 00 10 00 00       	push   $0x1000
   106be:	50                   	push   %eax
   106bf:	e8 16 fc ff ff       	call   102da <down2>
   106c4:	83 c4 08             	add    $0x8,%esp
   106c7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // 页数量
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   106ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
   106cd:	2b 45 ec             	sub    -0x14(%ebp),%eax
   106d0:	c1 e8 0c             	shr    $0xc,%eax
   106d3:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 建立映射关系
        memory_create_map(kernel_page_dir, vstart, paddr, page_count, map->perm);
   106d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d9:	8b 40 0c             	mov    0xc(%eax),%eax
   106dc:	83 ec 0c             	sub    $0xc,%esp
   106df:	50                   	push   %eax
   106e0:	ff 75 e0             	pushl  -0x20(%ebp)
   106e3:	ff 75 e4             	pushl  -0x1c(%ebp)
   106e6:	ff 75 ec             	pushl  -0x14(%ebp)
   106e9:	68 00 60 01 00       	push   $0x16000
   106ee:	e8 e7 fe ff ff       	call   105da <memory_create_map>
   106f3:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106f6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106fd:	83 f8 03             	cmp    $0x3,%eax
   10700:	0f 86 72 ff ff ff    	jbe    10678 <create_kernel_table+0x12>
    }
}
   10706:	90                   	nop
   10707:	c9                   	leave  
   10708:	c3                   	ret    

00010709 <memory_create_uvm>:

uint32_t memory_create_uvm(void)
{
   10709:	55                   	push   %ebp
   1070a:	89 e5                	mov    %esp,%ebp
   1070c:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   1070f:	83 ec 08             	sub    $0x8,%esp
   10712:	6a 01                	push   $0x1
   10714:	68 00 50 01 00       	push   $0x15000
   10719:	e8 a0 fc ff ff       	call   103be <addr_alloc_page>
   1071e:	83 c4 10             	add    $0x10,%esp
   10721:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   10724:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10728:	75 07                	jne    10731 <memory_create_uvm+0x28>
    {
        return 0;
   1072a:	b8 00 00 00 00       	mov    $0x0,%eax
   1072f:	eb 5b                	jmp    1078c <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   10731:	83 ec 04             	sub    $0x4,%esp
   10734:	68 00 10 00 00       	push   $0x1000
   10739:	6a 00                	push   $0x0
   1073b:	ff 75 f0             	pushl  -0x10(%ebp)
   1073e:	e8 97 1d 00 00       	call   124da <kernel_memset>
   10743:	83 c4 10             	add    $0x10,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10746:	83 ec 0c             	sub    $0xc,%esp
   10749:	68 00 00 00 80       	push   $0x80000000
   1074e:	e8 c8 fb ff ff       	call   1031b <pde_index>
   10753:	83 c4 10             	add    $0x10,%esp
   10756:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   10759:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10760:	eb 1f                	jmp    10781 <memory_create_uvm+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   10762:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10765:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1076c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076f:	01 c2                	add    %eax,%edx
   10771:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10774:	8b 04 85 00 60 01 00 	mov    0x16000(,%eax,4),%eax
   1077b:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   1077d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10781:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10784:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10787:	77 d9                	ja     10762 <memory_create_uvm+0x59>
    }
    return (uint32_t)page_dir;
   10789:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1078c:	c9                   	leave  
   1078d:	c3                   	ret    

0001078e <memory_init>:
 * @brief        : 初始化
 * @param         {boot_info_t} *boot_info:启动信息
 * @return        {*}
 **/
void memory_init(boot_info_t *boot_info)
{
   1078e:	55                   	push   %ebp
   1078f:	89 e5                	mov    %esp,%ebp
   10791:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start; // 指定外部符号,放在bss后面
    log_printf("memory init...");
   10794:	83 ec 0c             	sub    $0xc,%esp
   10797:	68 9f 2c 01 00       	push   $0x12c9f
   1079c:	e8 a4 23 00 00       	call   12b45 <log_printf>
   107a1:	83 c4 10             	add    $0x10,%esp

    show_mem_inifo(boot_info); // 打印启动信息
   107a4:	83 ec 0c             	sub    $0xc,%esp
   107a7:	ff 75 08             	pushl  0x8(%ebp)
   107aa:	e8 de fc ff ff       	call   1048d <show_mem_inifo>
   107af:	83 c4 10             	add    $0x10,%esp

    uint8_t *mem_free = (uint8_t *)&mem_free_start; // 指向OS后面的内存地址
   107b2:	c7 45 f4 20 c0 01 00 	movl   $0x1c020,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START; // 1MB以上内存区域大小
   107b9:	83 ec 0c             	sub    $0xc,%esp
   107bc:	ff 75 08             	pushl  0x8(%ebp)
   107bf:	e8 2f fd ff ff       	call   104f3 <total_mem_size>
   107c4:	83 c4 10             	add    $0x10,%esp
   107c7:	2d 00 00 10 00       	sub    $0x100000,%eax
   107cc:	89 45 f0             	mov    %eax,-0x10(%ebp)

    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE); // 对齐到4KB, 4KB页大小的整数倍
   107cf:	83 ec 08             	sub    $0x8,%esp
   107d2:	68 00 10 00 00       	push   $0x1000
   107d7:	ff 75 f0             	pushl  -0x10(%ebp)
   107da:	e8 fb fa ff ff       	call   102da <down2>
   107df:	83 c4 10             	add    $0x10,%esp
   107e2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    log_printf("free memory:0x%x,size:0x%x", MEM_EXT_START, mem_up1MB_free); // 打印内存信息
   107e5:	83 ec 04             	sub    $0x4,%esp
   107e8:	ff 75 f0             	pushl  -0x10(%ebp)
   107eb:	68 00 00 10 00       	push   $0x100000
   107f0:	68 ae 2c 01 00       	push   $0x12cae
   107f5:	e8 4b 23 00 00       	call   12b45 <log_printf>
   107fa:	83 c4 10             	add    $0x10,%esp

    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE); // 初始化地址分配结构,再kernel之后
   107fd:	83 ec 0c             	sub    $0xc,%esp
   10800:	68 00 10 00 00       	push   $0x1000
   10805:	ff 75 f0             	pushl  -0x10(%ebp)
   10808:	68 00 00 10 00       	push   $0x100000
   1080d:	ff 75 f4             	pushl  -0xc(%ebp)
   10810:	68 00 50 01 00       	push   $0x15000
   10815:	e8 4c fb ff ff       	call   10366 <addr_alloc_init>
   1081a:	83 c4 20             	add    $0x20,%esp

    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE); // 跳过位图缓存
   1081d:	a1 0c 50 01 00       	mov    0x1500c,%eax
   10822:	c1 e8 0c             	shr    $0xc,%eax
   10825:	83 ec 0c             	sub    $0xc,%esp
   10828:	50                   	push   %eax
   10829:	e8 9e 18 00 00       	call   120cc <bitmap_byte_count>
   1082e:	83 c4 10             	add    $0x10,%esp
   10831:	01 45 f4             	add    %eax,-0xc(%ebp)

    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10834:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   1083b:	76 1c                	jbe    10859 <memory_init+0xcb>
   1083d:	68 cc 2c 01 00       	push   $0x12ccc
   10842:	68 18 2d 01 00       	push   $0x12d18
   10847:	68 e3 00 00 00       	push   $0xe3
   1084c:	68 58 2c 01 00       	push   $0x12c58
   10851:	e8 e6 1f 00 00       	call   1283c <pannic>
   10856:	83 c4 10             	add    $0x10,%esp

    create_kernel_table(); // 创建内核页表
   10859:	e8 08 fe ff ff       	call   10666 <create_kernel_table>

    // 设置页目录表地址,打开分页机制
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   1085e:	b8 00 60 01 00       	mov    $0x16000,%eax
   10863:	83 ec 0c             	sub    $0xc,%esp
   10866:	50                   	push   %eax
   10867:	e8 9e fa ff ff       	call   1030a <mmu_set_page_dir>
   1086c:	83 c4 10             	add    $0x10,%esp
    log_printf("memory success.");
   1086f:	83 ec 0c             	sub    $0xc,%esp
   10872:	68 f1 2c 01 00       	push   $0x12cf1
   10877:	e8 c9 22 00 00       	call   12b45 <log_printf>
   1087c:	83 c4 10             	add    $0x10,%esp
   1087f:	90                   	nop
   10880:	c9                   	leave  
   10881:	c3                   	ret    

00010882 <list_node_init>:
 * @brief        : 链表节点初始化;
 * @param         {list_node_t *} node: 需要初始化的节点
 * @return        {*}
 **/
static inline void list_node_init(list_node_t *node)
{
   10882:	55                   	push   %ebp
   10883:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10885:	8b 45 08             	mov    0x8(%ebp),%eax
   10888:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1088f:	8b 45 08             	mov    0x8(%ebp),%eax
   10892:	8b 50 04             	mov    0x4(%eax),%edx
   10895:	8b 45 08             	mov    0x8(%ebp),%eax
   10898:	89 10                	mov    %edx,(%eax)
}
   1089a:	90                   	nop
   1089b:	5d                   	pop    %ebp
   1089c:	c3                   	ret    

0001089d <list_node_next>:
 * @brief        : 链表的后继节点
 * @param         {list_node_t *} node: 当前节点
 * @return        {list_node_t *} 当前节点的后继节点
 **/
static inline list_node_t *list_node_next(list_node_t *node)
{
   1089d:	55                   	push   %ebp
   1089e:	89 e5                	mov    %esp,%ebp
    return node->next;
   108a0:	8b 45 08             	mov    0x8(%ebp),%eax
   108a3:	8b 40 04             	mov    0x4(%eax),%eax
}
   108a6:	5d                   	pop    %ebp
   108a7:	c3                   	ret    

000108a8 <list_first>:
 * @brief        : 返回链表的头结点
 * @param         {list_t} *list: 链表
 * @return        {list_node_t*}: 链表的头结点
 **/
static inline list_node_t *list_first(list_t *list)
{
   108a8:	55                   	push   %ebp
   108a9:	89 e5                	mov    %esp,%ebp
    return list->first;
   108ab:	8b 45 08             	mov    0x8(%ebp),%eax
   108ae:	8b 00                	mov    (%eax),%eax
}
   108b0:	5d                   	pop    %ebp
   108b1:	c3                   	ret    

000108b2 <list_count>:
 * @brief        : 返回链表的结点数量
 * @param         {list_t} *list: 对应链表
 * @return        {int}: 链表数量
**/
static inline int list_count(list_t *list)
{
   108b2:	55                   	push   %ebp
   108b3:	89 e5                	mov    %esp,%ebp
    return list->count;
   108b5:	8b 45 08             	mov    0x8(%ebp),%eax
   108b8:	8b 40 08             	mov    0x8(%eax),%eax
}
   108bb:	5d                   	pop    %ebp
   108bc:	c3                   	ret    

000108bd <hlt>:
/**
 * @brief        : 停机指令
 * @return        {*}
 **/
static inline void hlt(void)
{
   108bd:	55                   	push   %ebp
   108be:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   108c0:	f4                   	hlt    
}
   108c1:	90                   	nop
   108c2:	5d                   	pop    %ebp
   108c3:	c3                   	ret    

000108c4 <write_tr>:
 * @brief        : 写task register寄存器于lgdt类似
 * @param         {uint16_t} tss_selector: 对应的tss选择子
 * @return        {*}
 **/
static inline void write_tr(uint16_t tss_selector)
{
   108c4:	55                   	push   %ebp
   108c5:	89 e5                	mov    %esp,%ebp
   108c7:	83 ec 04             	sub    $0x4,%esp
   108ca:	8b 45 08             	mov    0x8(%ebp),%eax
   108cd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   108d1:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
   108d5:	0f 00 d8             	ltr    %ax
}
   108d8:	90                   	nop
   108d9:	c9                   	leave  
   108da:	c3                   	ret    

000108db <task_next_run>:
/**
 * @brief        : 返回下一个将要运行的进程,从就绪对列中取，若为空则运行空闲进程
 * @return        {task_t*} 下一运行任务的指针
 **/
task_t *task_next_run(void)
{
   108db:	55                   	push   %ebp
   108dc:	89 e5                	mov    %esp,%ebp
   108de:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   108e1:	68 00 70 01 00       	push   $0x17000
   108e6:	e8 c7 ff ff ff       	call   108b2 <list_count>
   108eb:	83 c4 04             	add    $0x4,%esp
   108ee:	85 c0                	test   %eax,%eax
   108f0:	75 07                	jne    108f9 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   108f2:	b8 fc 70 01 00       	mov    $0x170fc,%eax
   108f7:	eb 23                	jmp    1091c <task_next_run+0x41>
    }
    list_node_t *task_node = list_first(&task_manager.ready_list);
   108f9:	68 00 70 01 00       	push   $0x17000
   108fe:	e8 a5 ff ff ff       	call   108a8 <list_first>
   10903:	83 c4 04             	add    $0x4,%esp
   10906:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node); // 取出对应的队列头部进程
   10909:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1090d:	74 08                	je     10917 <task_next_run+0x3c>
   1090f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10912:	83 e8 50             	sub    $0x50,%eax
   10915:	eb 05                	jmp    1091c <task_next_run+0x41>
   10917:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1091c:	c9                   	leave  
   1091d:	c3                   	ret    

0001091e <task_current>:
/**
 * @brief        : 返回当前进程的指针
 * @return        {task_t*}
 **/
task_t *task_current(void)
{
   1091e:	55                   	push   %ebp
   1091f:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   10921:	a1 ec 70 01 00       	mov    0x170ec,%eax
}
   10926:	5d                   	pop    %ebp
   10927:	c3                   	ret    

00010928 <task_dispatch>:
 * @brief        : 从队列头部取进程执行
 * @return        {*}
 * @todo         : 后续改进
 **/
void task_dispatch(void)
{
   10928:	55                   	push   %ebp
   10929:	89 e5                	mov    %esp,%ebp
   1092b:	83 ec 18             	sub    $0x18,%esp

    irq_state_t state = irq_enter_protection();
   1092e:	e8 de 0f 00 00       	call   11911 <irq_enter_protection>
   10933:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   10936:	e8 a0 ff ff ff       	call   108db <task_next_run>
   1093b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task) // 接下来需要运行的进程是否为当前进程
   1093e:	a1 ec 70 01 00       	mov    0x170ec,%eax
   10943:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   10946:	74 2a                	je     10972 <task_dispatch+0x4a>
    {
        task_t *from = task_current();
   10948:	e8 d1 ff ff ff       	call   1091e <task_current>
   1094d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_manager.curr_task = to;
   10950:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10953:	a3 ec 70 01 00       	mov    %eax,0x170ec
        to->state = TASK_RUNNING;
   10958:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1095b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   10961:	83 ec 08             	sub    $0x8,%esp
   10964:	ff 75 f0             	pushl  -0x10(%ebp)
   10967:	ff 75 ec             	pushl  -0x14(%ebp)
   1096a:	e8 0e 03 00 00       	call   10c7d <task_switch_from_to>
   1096f:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   10972:	83 ec 0c             	sub    $0xc,%esp
   10975:	ff 75 f4             	pushl  -0xc(%ebp)
   10978:	e8 ac 0f 00 00       	call   11929 <irq_leave_protection>
   1097d:	83 c4 10             	add    $0x10,%esp
}
   10980:	90                   	nop
   10981:	c9                   	leave  
   10982:	c3                   	ret    

00010983 <task_set_ready>:
 * @brief        : 将进程设为就绪状态,将当前进程插入到就绪队列,修改进程状态为就绪态
 * @param         {task_t} *task:
 * @return        {*}
 **/
void task_set_ready(task_t *task)
{
   10983:	55                   	push   %ebp
   10984:	89 e5                	mov    %esp,%ebp
   10986:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) // 非空闲进程
   10989:	81 7d 08 fc 70 01 00 	cmpl   $0x170fc,0x8(%ebp)
   10990:	74 22                	je     109b4 <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   10992:	8b 45 08             	mov    0x8(%ebp),%eax
   10995:	83 c0 50             	add    $0x50,%eax
   10998:	83 ec 08             	sub    $0x8,%esp
   1099b:	50                   	push   %eax
   1099c:	68 00 70 01 00       	push   $0x17000
   109a1:	e8 64 1f 00 00       	call   1290a <list_insert_last>
   109a6:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   109a9:	8b 45 08             	mov    0x8(%ebp),%eax
   109ac:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   109b2:	eb 01                	jmp    109b5 <task_set_ready+0x32>
        return;
   109b4:	90                   	nop
}
   109b5:	c9                   	leave  
   109b6:	c3                   	ret    

000109b7 <sys_sched_yield>:
/**
 * @brief        : 当前进程放弃cpu的使用权，将当前进程加入到就绪队列尾部，调度下一进程
 * @return        {*}
 **/
int sys_sched_yield(void)
{
   109b7:	55                   	push   %ebp
   109b8:	89 e5                	mov    %esp,%ebp
   109ba:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   109bd:	e8 4f 0f 00 00       	call   11911 <irq_enter_protection>
   109c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1) // 是否有进程
   109c5:	83 ec 0c             	sub    $0xc,%esp
   109c8:	68 00 70 01 00       	push   $0x17000
   109cd:	e8 e0 fe ff ff       	call   108b2 <list_count>
   109d2:	83 c4 10             	add    $0x10,%esp
   109d5:	83 f8 01             	cmp    $0x1,%eax
   109d8:	7e 29                	jle    10a03 <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current(); // 当前运行进程
   109da:	e8 3f ff ff ff       	call   1091e <task_current>
   109df:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task); // 阻塞当前进程
   109e2:	83 ec 0c             	sub    $0xc,%esp
   109e5:	ff 75 f0             	pushl  -0x10(%ebp)
   109e8:	e8 2b 00 00 00       	call   10a18 <task_set_block>
   109ed:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task); // 当前进程加入就绪队列
   109f0:	83 ec 0c             	sub    $0xc,%esp
   109f3:	ff 75 f0             	pushl  -0x10(%ebp)
   109f6:	e8 88 ff ff ff       	call   10983 <task_set_ready>
   109fb:	83 c4 10             	add    $0x10,%esp
        task_dispatch();           // 切换到队列头部的进程运行
   109fe:	e8 25 ff ff ff       	call   10928 <task_dispatch>
    }

    irq_leave_protection(state);
   10a03:	83 ec 0c             	sub    $0xc,%esp
   10a06:	ff 75 f4             	pushl  -0xc(%ebp)
   10a09:	e8 1b 0f 00 00       	call   11929 <irq_leave_protection>
   10a0e:	83 c4 10             	add    $0x10,%esp
    return 0;
   10a11:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10a16:	c9                   	leave  
   10a17:	c3                   	ret    

00010a18 <task_set_block>:
 * @brief        : 阻塞当前进程，将当前进程从就绪队列中移除
 * @param         {task_t} *task:
 * @return        {*}
 **/
void task_set_block(task_t *task)
{
   10a18:	55                   	push   %ebp
   10a19:	89 e5                	mov    %esp,%ebp
   10a1b:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task) // 空闲进程
   10a1e:	81 7d 08 fc 70 01 00 	cmpl   $0x170fc,0x8(%ebp)
   10a25:	74 19                	je     10a40 <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   10a27:	8b 45 08             	mov    0x8(%ebp),%eax
   10a2a:	83 c0 50             	add    $0x50,%eax
   10a2d:	83 ec 08             	sub    $0x8,%esp
   10a30:	50                   	push   %eax
   10a31:	68 00 70 01 00       	push   $0x17000
   10a36:	e8 ac 1f 00 00       	call   129e7 <list_remove>
   10a3b:	83 c4 10             	add    $0x10,%esp
   10a3e:	eb 01                	jmp    10a41 <task_set_block+0x29>
        return;
   10a40:	90                   	nop
}
   10a41:	c9                   	leave  
   10a42:	c3                   	ret    

00010a43 <tss_init>:
 * @param         {uint32_t} entry: 入口地址
 * @param         {uint32_t} esp: 栈顶指针
 * @return        {int} 成功为0 ,失败为-1
 **/
static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   10a43:	55                   	push   %ebp
   10a44:	89 e5                	mov    %esp,%ebp
   10a46:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = gdt_alloc_desc(); // 分配一个空闲表项
   10a49:	e8 b2 05 00 00       	call   11000 <gdt_alloc_desc>
   10a4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   10a51:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10a55:	79 1a                	jns    10a71 <tss_init+0x2e>
    {
        log_printf("alloc tss failed!!!\n");
   10a57:	83 ec 0c             	sub    $0xc,%esp
   10a5a:	68 24 2d 01 00       	push   $0x12d24
   10a5f:	e8 e1 20 00 00       	call   12b45 <log_printf>
   10a64:	83 c4 10             	add    $0x10,%esp
        return -1;
   10a67:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10a6c:	e9 16 01 00 00       	jmp    10b87 <tss_init+0x144>
    }
    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   10a71:	8b 45 08             	mov    0x8(%ebp),%eax
   10a74:	83 c0 68             	add    $0x68,%eax
   10a77:	68 89 00 00 00       	push   $0x89
   10a7c:	6a 68                	push   $0x68
   10a7e:	50                   	push   %eax
   10a7f:	ff 75 f4             	pushl  -0xc(%ebp)
   10a82:	e8 ac 04 00 00       	call   10f33 <segment_desc_set>
   10a87:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t)); // 清零 , 第一次运行无关紧要
   10a8a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8d:	83 c0 68             	add    $0x68,%eax
   10a90:	83 ec 04             	sub    $0x4,%esp
   10a93:	6a 68                	push   $0x68
   10a95:	6a 00                	push   $0x0
   10a97:	50                   	push   %eax
   10a98:	e8 3d 1a 00 00       	call   124da <kernel_memset>
   10a9d:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;                       // 当前任务没有运行过,所以eip为当前任务的入口地址
   10aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa3:	8b 55 0c             	mov    0xc(%ebp),%edx
   10aa6:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
    task->tss.esp = task->tss.esp0 = esp;        // esp0特权级0 , 设置栈地址
   10aac:	8b 45 08             	mov    0x8(%ebp),%eax
   10aaf:	8b 55 10             	mov    0x10(%ebp),%edx
   10ab2:	89 50 6c             	mov    %edx,0x6c(%eax)
   10ab5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab8:	8b 50 6c             	mov    0x6c(%eax),%edx
   10abb:	8b 45 08             	mov    0x8(%ebp),%eax
   10abe:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)

    // 平坦模型只有两个段cs和ds 其中ss , es , ds , fs , gs 设置为ds
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   10ac4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac7:	c7 40 70 10 00 00 00 	movl   $0x10,0x70(%eax)
   10ace:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad1:	8b 50 70             	mov    0x70(%eax),%edx
   10ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad7:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10add:	8b 45 08             	mov    0x8(%ebp),%eax
   10ae0:	c7 80 c4 00 00 00 10 	movl   $0x10,0xc4(%eax)
   10ae7:	00 00 00 
   10aea:	8b 45 08             	mov    0x8(%ebp),%eax
   10aed:	8b 90 c4 00 00 00    	mov    0xc4(%eax),%edx
   10af3:	8b 45 08             	mov    0x8(%ebp),%eax
   10af6:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
   10afc:	8b 45 08             	mov    0x8(%ebp),%eax
   10aff:	8b 90 c0 00 00 00    	mov    0xc0(%eax),%edx
   10b05:	8b 45 08             	mov    0x8(%ebp),%eax
   10b08:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
   10b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   10b11:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
   10b17:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1a:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

    // 设置cs
    task->tss.cs = KERNEL_SELECTOR_CS;
   10b20:	8b 45 08             	mov    0x8(%ebp),%eax
   10b23:	c7 80 b4 00 00 00 08 	movl   $0x8,0xb4(%eax)
   10b2a:	00 00 00 
    task->tss.iomap = 0;
   10b2d:	8b 45 08             	mov    0x8(%ebp),%eax
   10b30:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%eax)
   10b37:	00 00 00 
    // eflags
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3d:	c7 80 8c 00 00 00 02 	movl   $0x202,0x8c(%eax)
   10b44:	02 00 00 
    uint32_t page_dir = memory_create_uvm();
   10b47:	e8 bd fb ff ff       	call   10709 <memory_create_uvm>
   10b4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(page_dir == 0)
   10b4f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b53:	75 15                	jne    10b6a <tss_init+0x127>
    {
        gdt_free_sel(tss_sel);
   10b55:	83 ec 0c             	sub    $0xc,%esp
   10b58:	ff 75 f4             	pushl  -0xc(%ebp)
   10b5b:	e8 95 05 00 00       	call   110f5 <gdt_free_sel>
   10b60:	83 c4 10             	add    $0x10,%esp
        return -1;
   10b63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b68:	eb 1d                	jmp    10b87 <tss_init+0x144>
    }
    task->tss.cr3 = page_dir;
   10b6a:	8b 45 08             	mov    0x8(%ebp),%eax
   10b6d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10b70:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)
    task->tss_sel = tss_sel;
   10b76:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10b79:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7c:	89 90 d0 00 00 00    	mov    %edx,0xd0(%eax)
    return 0;
   10b82:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b87:	c9                   	leave  
   10b88:	c3                   	ret    

00010b89 <task_init>:
 * @param         {uint32_t}       esp: 栈顶指针
 * @return        {*}
 **/
int task_init(task_t *task, const char *name, uint32_t entry, uint32_t esp)

{
   10b89:	55                   	push   %ebp
   10b8a:	89 e5                	mov    %esp,%ebp
   10b8c:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   10b8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10b93:	75 1c                	jne    10bb1 <task_init+0x28>
   10b95:	68 39 2d 01 00       	push   $0x12d39
   10b9a:	68 bc 2d 01 00       	push   $0x12dbc
   10b9f:	68 a3 00 00 00       	push   $0xa3
   10ba4:	68 50 2d 01 00       	push   $0x12d50
   10ba9:	e8 8e 1c 00 00       	call   1283c <pannic>
   10bae:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   10bb1:	83 ec 04             	sub    $0x4,%esp
   10bb4:	ff 75 14             	pushl  0x14(%ebp)
   10bb7:	ff 75 10             	pushl  0x10(%ebp)
   10bba:	ff 75 08             	pushl  0x8(%ebp)
   10bbd:	e8 81 fe ff ff       	call   10a43 <tss_init>
   10bc2:	83 c4 10             	add    $0x10,%esp

    kernel_memcpy((void *)task->name, (void *)name, TASK_NAME_SIZE);
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	83 c0 10             	add    $0x10,%eax
   10bcb:	83 ec 04             	sub    $0x4,%esp
   10bce:	6a 40                	push   $0x40
   10bd0:	ff 75 0c             	pushl  0xc(%ebp)
   10bd3:	50                   	push   %eax
   10bd4:	e8 b2 18 00 00       	call   1248b <kernel_memcpy>
   10bd9:	83 c4 10             	add    $0x10,%esp

    task->state = TASK_CREATED;
   10bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10be5:	8b 45 08             	mov    0x8(%ebp),%eax
   10be8:	c7 40 04 0a 00 00 00 	movl   $0xa,0x4(%eax)
    task->slice_ticks = task->time_ticks;
   10bef:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf2:	8b 50 04             	mov    0x4(%eax),%edx
   10bf5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bf8:	89 50 08             	mov    %edx,0x8(%eax)
    task->sleep_ticks = 0; // 没有延时
   10bfb:	8b 45 08             	mov    0x8(%ebp),%eax
   10bfe:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

    list_node_init(&task->all_node);
   10c05:	8b 45 08             	mov    0x8(%ebp),%eax
   10c08:	83 c0 58             	add    $0x58,%eax
   10c0b:	83 ec 0c             	sub    $0xc,%esp
   10c0e:	50                   	push   %eax
   10c0f:	e8 6e fc ff ff       	call   10882 <list_node_init>
   10c14:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10c17:	8b 45 08             	mov    0x8(%ebp),%eax
   10c1a:	83 c0 50             	add    $0x50,%eax
   10c1d:	83 ec 0c             	sub    $0xc,%esp
   10c20:	50                   	push   %eax
   10c21:	e8 5c fc ff ff       	call   10882 <list_node_init>
   10c26:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10c29:	8b 45 08             	mov    0x8(%ebp),%eax
   10c2c:	83 c0 60             	add    $0x60,%eax
   10c2f:	83 ec 0c             	sub    $0xc,%esp
   10c32:	50                   	push   %eax
   10c33:	e8 4a fc ff ff       	call   10882 <list_node_init>
   10c38:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10c3b:	e8 d1 0c 00 00       	call   11911 <irq_enter_protection>
   10c40:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_ready(task); // 将进程设置为就绪状态
   10c43:	83 ec 0c             	sub    $0xc,%esp
   10c46:	ff 75 08             	pushl  0x8(%ebp)
   10c49:	e8 35 fd ff ff       	call   10983 <task_set_ready>
   10c4e:	83 c4 10             	add    $0x10,%esp

    list_insert_last(&task_manager.task_list, &task->all_node);
   10c51:	8b 45 08             	mov    0x8(%ebp),%eax
   10c54:	83 c0 58             	add    $0x58,%eax
   10c57:	83 ec 08             	sub    $0x8,%esp
   10c5a:	50                   	push   %eax
   10c5b:	68 0c 70 01 00       	push   $0x1700c
   10c60:	e8 a5 1c 00 00       	call   1290a <list_insert_last>
   10c65:	83 c4 10             	add    $0x10,%esp

    irq_leave_protection(state);
   10c68:	83 ec 0c             	sub    $0xc,%esp
   10c6b:	ff 75 f4             	pushl  -0xc(%ebp)
   10c6e:	e8 b6 0c 00 00       	call   11929 <irq_leave_protection>
   10c73:	83 c4 10             	add    $0x10,%esp
    //     *(--p_esp) = 0;
    //     *(--p_esp) = 0;
    //     *(--p_esp) = 0;
    //     task->stack = p_esp;
    // }
    return 0;
   10c76:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c7b:	c9                   	leave  
   10c7c:	c3                   	ret    

00010c7d <task_switch_from_to>:
 * @param         {task_t *} from: 当前任务
 * @param         {task_t *} to: 切换到的任务
 * @return        {*}
 **/
void task_switch_from_to(task_t *from, task_t *to)
{
   10c7d:	55                   	push   %ebp
   10c7e:	89 e5                	mov    %esp,%ebp
   10c80:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10c83:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c86:	8b 80 d0 00 00 00    	mov    0xd0(%eax),%eax
   10c8c:	83 ec 0c             	sub    $0xc,%esp
   10c8f:	50                   	push   %eax
   10c90:	e8 4d 04 00 00       	call   110e2 <switch_to_tss>
   10c95:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10c98:	90                   	nop
   10c99:	c9                   	leave  
   10c9a:	c3                   	ret    

00010c9b <idle_task_entry>:
/**
 * @brief        : 空闲进程所运行的任务
 * @return        {*}
 **/
static void idle_task_entry()
{
   10c9b:	55                   	push   %ebp
   10c9c:	89 e5                	mov    %esp,%ebp
   10c9e:	83 ec 08             	sub    $0x8,%esp
    log_printf("idle task running");
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	68 95 2d 01 00       	push   $0x12d95
   10ca9:	e8 97 1e 00 00       	call   12b45 <log_printf>
   10cae:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10cb1:	e8 07 fc ff ff       	call   108bd <hlt>
   10cb6:	eb f9                	jmp    10cb1 <idle_task_entry+0x16>

00010cb8 <task_manager_init>:
/**
 * @brief        : 初始化任务(进程)管理器,包括初始化就绪,延时,进程队列,初始化空闲进程,将当前进程设为null
 * @return        {*}
 **/
void task_manager_init(void)
{
   10cb8:	55                   	push   %ebp
   10cb9:	89 e5                	mov    %esp,%ebp
   10cbb:	83 ec 08             	sub    $0x8,%esp
    list_init(&task_manager.ready_list); // 就绪队列
   10cbe:	83 ec 0c             	sub    $0xc,%esp
   10cc1:	68 00 70 01 00       	push   $0x17000
   10cc6:	e8 ba 1b 00 00       	call   12885 <list_init>
   10ccb:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);  // 进程队列
   10cce:	83 ec 0c             	sub    $0xc,%esp
   10cd1:	68 0c 70 01 00       	push   $0x1700c
   10cd6:	e8 aa 1b 00 00       	call   12885 <list_init>
   10cdb:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list); // 延时队列
   10cde:	83 ec 0c             	sub    $0xc,%esp
   10ce1:	68 f0 70 01 00       	push   $0x170f0
   10ce6:	e8 9a 1b 00 00       	call   12885 <list_init>
   10ceb:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10cee:	c7 05 ec 70 01 00 00 	movl   $0x0,0x170ec
   10cf5:	00 00 00 
    task_init(&task_manager.idle_task,
              "idle task",
              (uint32_t)idle_task_entry,
              (uint32_t)(idle_task_stack + IDLE_TASK_SIZE));
   10cf8:	b8 e0 81 01 00       	mov    $0x181e0,%eax
    task_init(&task_manager.idle_task,
   10cfd:	89 c2                	mov    %eax,%edx
   10cff:	b8 9b 0c 01 00       	mov    $0x10c9b,%eax
   10d04:	52                   	push   %edx
   10d05:	50                   	push   %eax
   10d06:	68 a7 2d 01 00       	push   $0x12da7
   10d0b:	68 fc 70 01 00       	push   $0x170fc
   10d10:	e8 74 fe ff ff       	call   10b89 <task_init>
   10d15:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10d18:	c7 05 ec 70 01 00 00 	movl   $0x0,0x170ec
   10d1f:	00 00 00 
}
   10d22:	90                   	nop
   10d23:	c9                   	leave  
   10d24:	c3                   	ret    

00010d25 <task_first_init>:
/**
 * @brief        : 初始化OS中的第一个任务
 * @return        {*}
 **/
void task_first_init(void)
{
   10d25:	55                   	push   %ebp
   10d26:	89 e5                	mov    %esp,%ebp
   10d28:	83 ec 08             	sub    $0x8,%esp
    task_init(&task_manager.first_task, "first task", 0, 0);
   10d2b:	6a 00                	push   $0x0
   10d2d:	6a 00                	push   $0x0
   10d2f:	68 b1 2d 01 00       	push   $0x12db1
   10d34:	68 18 70 01 00       	push   $0x17018
   10d39:	e8 4b fe ff ff       	call   10b89 <task_init>
   10d3e:	83 c4 10             	add    $0x10,%esp
    write_tr(task_manager.first_task.tss_sel);
   10d41:	a1 e8 70 01 00       	mov    0x170e8,%eax
   10d46:	0f b7 c0             	movzwl %ax,%eax
   10d49:	83 ec 0c             	sub    $0xc,%esp
   10d4c:	50                   	push   %eax
   10d4d:	e8 72 fb ff ff       	call   108c4 <write_tr>
   10d52:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10d55:	c7 05 ec 70 01 00 18 	movl   $0x17018,0x170ec
   10d5c:	70 01 00 
}
   10d5f:	90                   	nop
   10d60:	c9                   	leave  
   10d61:	c3                   	ret    

00010d62 <task_first_task>:
/**
 * @brief        : 返回OS中的第一个任务
 * @return        {*}
 **/
task_t *task_first_task(void)
{
   10d62:	55                   	push   %ebp
   10d63:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10d65:	b8 18 70 01 00       	mov    $0x17018,%eax
}
   10d6a:	5d                   	pop    %ebp
   10d6b:	c3                   	ret    

00010d6c <task_time_ticks>:
/**
 * @brief        :
 * @return        {*}
 **/
void task_time_ticks(void)
{
   10d6c:	55                   	push   %ebp
   10d6d:	89 e5                	mov    %esp,%ebp
   10d6f:	83 ec 18             	sub    $0x18,%esp
    task_t *curr_task = task_current();
   10d72:	e8 a7 fb ff ff       	call   1091e <task_current>
   10d77:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (--curr_task->slice_ticks == 0) // 当前进程运行时间片已到达
   10d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d7d:	8b 40 08             	mov    0x8(%eax),%eax
   10d80:	8d 50 ff             	lea    -0x1(%eax),%edx
   10d83:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d86:	89 50 08             	mov    %edx,0x8(%eax)
   10d89:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d8c:	8b 40 08             	mov    0x8(%eax),%eax
   10d8f:	85 c0                	test   %eax,%eax
   10d91:	75 28                	jne    10dbb <task_time_ticks+0x4f>
    {
        curr_task->slice_ticks = curr_task->time_ticks;
   10d93:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d96:	8b 50 04             	mov    0x4(%eax),%edx
   10d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10d9c:	89 50 08             	mov    %edx,0x8(%eax)
        task_set_block(curr_task); //
   10d9f:	83 ec 0c             	sub    $0xc,%esp
   10da2:	ff 75 f0             	pushl  -0x10(%ebp)
   10da5:	e8 6e fc ff ff       	call   10a18 <task_set_block>
   10daa:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   10dad:	83 ec 0c             	sub    $0xc,%esp
   10db0:	ff 75 f0             	pushl  -0x10(%ebp)
   10db3:	e8 cb fb ff ff       	call   10983 <task_set_ready>
   10db8:	83 c4 10             	add    $0x10,%esp
    }

    // 扫描延时队列
    list_node_t *curr = list_first(&task_manager.sleep_list);
   10dbb:	83 ec 0c             	sub    $0xc,%esp
   10dbe:	68 f0 70 01 00       	push   $0x170f0
   10dc3:	e8 e0 fa ff ff       	call   108a8 <list_first>
   10dc8:	83 c4 10             	add    $0x10,%esp
   10dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   10dce:	eb 62                	jmp    10e32 <task_time_ticks+0xc6>
    {
        task_t *task = list_node_parent(curr, task_t, run_node);
   10dd0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10dd4:	74 08                	je     10dde <task_time_ticks+0x72>
   10dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10dd9:	83 e8 50             	sub    $0x50,%eax
   10ddc:	eb 05                	jmp    10de3 <task_time_ticks+0x77>
   10dde:	b8 00 00 00 00       	mov    $0x0,%eax
   10de3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        list_node_t *next = list_node_next(curr);
   10de6:	83 ec 0c             	sub    $0xc,%esp
   10de9:	ff 75 f4             	pushl  -0xc(%ebp)
   10dec:	e8 ac fa ff ff       	call   1089d <list_node_next>
   10df1:	83 c4 10             	add    $0x10,%esp
   10df4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (--task->sleep_ticks == 0) // 如果当前进程的延时已经到达
   10df7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10dfa:	8b 40 0c             	mov    0xc(%eax),%eax
   10dfd:	8d 50 ff             	lea    -0x1(%eax),%edx
   10e00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e03:	89 50 0c             	mov    %edx,0xc(%eax)
   10e06:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e09:	8b 40 0c             	mov    0xc(%eax),%eax
   10e0c:	85 c0                	test   %eax,%eax
   10e0e:	75 1c                	jne    10e2c <task_time_ticks+0xc0>
        {
            task_set_wakeup(task); // 唤醒
   10e10:	83 ec 0c             	sub    $0xc,%esp
   10e13:	ff 75 ec             	pushl  -0x14(%ebp)
   10e16:	e8 5f 00 00 00       	call   10e7a <task_set_wakeup>
   10e1b:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);  // 状态设置为就绪
   10e1e:	83 ec 0c             	sub    $0xc,%esp
   10e21:	ff 75 ec             	pushl  -0x14(%ebp)
   10e24:	e8 5a fb ff ff       	call   10983 <task_set_ready>
   10e29:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   10e2c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   10e32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10e36:	75 98                	jne    10dd0 <task_time_ticks+0x64>
    }
    task_dispatch();
   10e38:	e8 eb fa ff ff       	call   10928 <task_dispatch>
}
   10e3d:	90                   	nop
   10e3e:	c9                   	leave  
   10e3f:	c3                   	ret    

00010e40 <task_set_sleep>:
 * @param         {task_t} *task: 需要延时的进程(任务)
 * @param         {uint32_t} ticks: 延时(睡眠)的时间
 * @return        {*}
 **/
void task_set_sleep(task_t *task, uint32_t ticks)
{
   10e40:	55                   	push   %ebp
   10e41:	89 e5                	mov    %esp,%ebp
   10e43:	83 ec 08             	sub    $0x8,%esp
    if (ticks == 0)
   10e46:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10e4a:	74 2b                	je     10e77 <task_set_sleep+0x37>
    {
        return;
    }
    task->sleep_ticks = ticks; // 设置延时时间
   10e4c:	8b 55 0c             	mov    0xc(%ebp),%edx
   10e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e52:	89 50 0c             	mov    %edx,0xc(%eax)
    task->state = TASK_SLEEP;  // 设置进程状态
   10e55:	8b 45 08             	mov    0x8(%ebp),%eax
   10e58:	c7 00 02 00 00 00    	movl   $0x2,(%eax)

    list_insert_last(&task_manager.sleep_list, &task->run_node); // 插入延时队列
   10e5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e61:	83 c0 50             	add    $0x50,%eax
   10e64:	83 ec 08             	sub    $0x8,%esp
   10e67:	50                   	push   %eax
   10e68:	68 f0 70 01 00       	push   $0x170f0
   10e6d:	e8 98 1a 00 00       	call   1290a <list_insert_last>
   10e72:	83 c4 10             	add    $0x10,%esp
   10e75:	eb 01                	jmp    10e78 <task_set_sleep+0x38>
        return;
   10e77:	90                   	nop
}
   10e78:	c9                   	leave  
   10e79:	c3                   	ret    

00010e7a <task_set_wakeup>:
 * @brief        : 唤醒进程,从延时队列中移除该进程
 * @param         {task_t} *task: 需要唤醒的进程(任务)
 * @return        {*}
 **/
void task_set_wakeup(task_t *task) // 唤醒进程
{
   10e7a:	55                   	push   %ebp
   10e7b:	89 e5                	mov    %esp,%ebp
   10e7d:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node); // 从延时队列中移除该结点
   10e80:	8b 45 08             	mov    0x8(%ebp),%eax
   10e83:	83 c0 50             	add    $0x50,%eax
   10e86:	83 ec 08             	sub    $0x8,%esp
   10e89:	50                   	push   %eax
   10e8a:	68 f0 70 01 00       	push   $0x170f0
   10e8f:	e8 53 1b 00 00       	call   129e7 <list_remove>
   10e94:	83 c4 10             	add    $0x10,%esp
}
   10e97:	90                   	nop
   10e98:	c9                   	leave  
   10e99:	c3                   	ret    

00010e9a <sys_sleep>:
 * @brief        : 将当前进程延时
 * @param         {uint32_t} ms: 需要延时的时间
 * @return        {*}
 **/
void sys_sleep(uint32_t ms) // 进程延时
{
   10e9a:	55                   	push   %ebp
   10e9b:	89 e5                	mov    %esp,%ebp
   10e9d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10ea0:	e8 6c 0a 00 00       	call   11911 <irq_enter_protection>
   10ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_block(task_manager.curr_task); // 阻塞当前进程（从就绪队列中移除当前进程）
   10ea8:	a1 ec 70 01 00       	mov    0x170ec,%eax
   10ead:	83 ec 0c             	sub    $0xc,%esp
   10eb0:	50                   	push   %eax
   10eb1:	e8 62 fb ff ff       	call   10a18 <task_set_block>
   10eb6:	83 c4 10             	add    $0x10,%esp

    task_set_sleep(task_manager.curr_task, (ms + (OS_TICKS_MS - 1)) / OS_TICKS_MS); // 将当前进程设置为延时
   10eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebc:	83 c0 09             	add    $0x9,%eax
   10ebf:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   10ec4:	f7 e2                	mul    %edx
   10ec6:	c1 ea 03             	shr    $0x3,%edx
   10ec9:	a1 ec 70 01 00       	mov    0x170ec,%eax
   10ece:	83 ec 08             	sub    $0x8,%esp
   10ed1:	52                   	push   %edx
   10ed2:	50                   	push   %eax
   10ed3:	e8 68 ff ff ff       	call   10e40 <task_set_sleep>
   10ed8:	83 c4 10             	add    $0x10,%esp

    // 进程切换
    task_dispatch();
   10edb:	e8 48 fa ff ff       	call   10928 <task_dispatch>

    irq_leave_protection(state);
   10ee0:	83 ec 0c             	sub    $0xc,%esp
   10ee3:	ff 75 f4             	pushl  -0xc(%ebp)
   10ee6:	e8 3e 0a 00 00       	call   11929 <irq_leave_protection>
   10eeb:	83 c4 10             	add    $0x10,%esp
}
   10eee:	90                   	nop
   10eef:	c9                   	leave  
   10ef0:	c3                   	ret    

00010ef1 <lgdt>:
{
   10ef1:	55                   	push   %ebp
   10ef2:	89 e5                	mov    %esp,%ebp
   10ef4:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;   // 获取高16位
   10ef7:	8b 45 08             	mov    0x8(%ebp),%eax
   10efa:	c1 e8 10             	shr    $0x10,%eax
   10efd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF; // 获取低16位
   10f01:	8b 45 08             	mov    0x8(%ebp),%eax
   10f04:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;           // 大小
   10f08:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f0b:	83 e8 01             	sub    $0x1,%eax
   10f0e:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   10f12:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10f16:	90                   	nop
   10f17:	c9                   	leave  
   10f18:	c3                   	ret    

00010f19 <far_jump>:
{
   10f19:	55                   	push   %ebp
   10f1a:	89 e5                	mov    %esp,%ebp
   10f1c:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   10f1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f22:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10f25:	8b 45 08             	mov    0x8(%ebp),%eax
   10f28:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   10f2b:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10f2e:	ff 28                	ljmp   *(%eax)
}
   10f30:	90                   	nop
   10f31:	c9                   	leave  
   10f32:	c3                   	ret    

00010f33 <segment_desc_set>:
 * @param         {uint32_t} limit: 界限 20位
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   10f33:	55                   	push   %ebp
   10f34:	89 e5                	mov    %esp,%ebp
   10f36:	83 ec 14             	sub    $0x14,%esp
   10f39:	8b 45 14             	mov    0x14(%ebp),%eax
   10f3c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector >> 3);
   10f40:	8b 45 08             	mov    0x8(%ebp),%eax
   10f43:	c1 f8 03             	sar    $0x3,%eax
   10f46:	c1 e0 03             	shl    $0x3,%eax
   10f49:	05 e0 81 01 00       	add    $0x181e0,%eax
   10f4e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 如果界限比较长，将长度单位换成4KB
    if (limit > 0xFFFFF)
   10f51:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10f58:	76 0f                	jbe    10f69 <segment_desc_set+0x36>
    {
        attr |= 0x8000;
   10f5a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10f60:	8b 45 10             	mov    0x10(%ebp),%eax
   10f63:	c1 e8 0c             	shr    $0xc,%eax
   10f66:	89 45 10             	mov    %eax,0x10(%ebp)
    }
    desc->limit15_0 = limit & 0xFFFF;
   10f69:	8b 45 10             	mov    0x10(%ebp),%eax
   10f6c:	89 c2                	mov    %eax,%edx
   10f6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f71:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   10f74:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f77:	89 c2                	mov    %eax,%edx
   10f79:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f7c:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10f80:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f83:	c1 e8 10             	shr    $0x10,%eax
   10f86:	89 c2                	mov    %eax,%edx
   10f88:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10f8b:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr | (((limit >> 16) & 0xF) << 8);
   10f8e:	8b 45 10             	mov    0x10(%ebp),%eax
   10f91:	c1 e8 10             	shr    $0x10,%eax
   10f94:	c1 e0 08             	shl    $0x8,%eax
   10f97:	66 25 00 0f          	and    $0xf00,%ax
   10f9b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   10f9f:	89 c2                	mov    %eax,%edx
   10fa1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fa4:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10fa8:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fab:	c1 e8 18             	shr    $0x18,%eax
   10fae:	89 c2                	mov    %eax,%edx
   10fb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fb3:	88 50 07             	mov    %dl,0x7(%eax)
}
   10fb6:	90                   	nop
   10fb7:	c9                   	leave  
   10fb8:	c3                   	ret    

00010fb9 <gate_desc_set>:
 * @param         {uint32_t} offset: 地址偏移量
 * @param         {uint16_t} attr: 属性
 * @return        {*}
 **/
void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   10fb9:	55                   	push   %ebp
   10fba:	89 e5                	mov    %esp,%ebp
   10fbc:	83 ec 08             	sub    $0x8,%esp
   10fbf:	8b 55 0c             	mov    0xc(%ebp),%edx
   10fc2:	8b 45 14             	mov    0x14(%ebp),%eax
   10fc5:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10fc9:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10fcd:	8b 45 10             	mov    0x10(%ebp),%eax
   10fd0:	89 c2                	mov    %eax,%edx
   10fd2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd5:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   10fd8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdb:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10fdf:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe6:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10fea:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF;
   10fee:	8b 45 10             	mov    0x10(%ebp),%eax
   10ff1:	c1 e8 10             	shr    $0x10,%eax
   10ff4:	89 c2                	mov    %eax,%edx
   10ff6:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff9:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10ffd:	90                   	nop
   10ffe:	c9                   	leave  
   10fff:	c3                   	ret    

00011000 <gdt_alloc_desc>:
/**
 * @brief        : 分配一个空闲gdt表项
 * @return        {int} 选择子
 **/
int gdt_alloc_desc(void)
{
   11000:	55                   	push   %ebp
   11001:	89 e5                	mov    %esp,%ebp
   11003:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   11006:	83 ec 0c             	sub    $0xc,%esp
   11009:	68 e0 89 01 00       	push   $0x189e0
   1100e:	e8 2b 0e 00 00       	call   11e3e <mutex_lock>
   11013:	83 c4 10             	add    $0x10,%esp
    // 跳过第0项
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   11016:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1101d:	eb 36                	jmp    11055 <gdt_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   1101f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11022:	c1 e0 03             	shl    $0x3,%eax
   11025:	05 e0 81 01 00       	add    $0x181e0,%eax
   1102a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 该表项为空闲
   1102d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11030:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11034:	66 85 c0             	test   %ax,%ax
   11037:	75 18                	jne    11051 <gdt_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   11039:	83 ec 0c             	sub    $0xc,%esp
   1103c:	68 e0 89 01 00       	push   $0x189e0
   11041:	e8 88 0e 00 00       	call   11ece <mutex_unlock>
   11046:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   11049:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1104c:	c1 e0 03             	shl    $0x3,%eax
   1104f:	eb 22                	jmp    11073 <gdt_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   11051:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11055:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1105c:	7e c1                	jle    1101f <gdt_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   1105e:	83 ec 0c             	sub    $0xc,%esp
   11061:	68 e0 89 01 00       	push   $0x189e0
   11066:	e8 63 0e 00 00       	call   11ece <mutex_unlock>
   1106b:	83 c4 10             	add    $0x10,%esp
    return -1;
   1106e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11073:	c9                   	leave  
   11074:	c3                   	ret    

00011075 <init_gdt>:
/**
 * @brief        : gdt表初始化
 * @return        {*}
 **/
void init_gdt(void)
{
   11075:	55                   	push   %ebp
   11076:	89 e5                	mov    %esp,%ebp
   11078:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1107b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11082:	eb 19                	jmp    1109d <init_gdt+0x28>
    {
        segment_desc_set(i << 3, 0, 0, 0);
   11084:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11087:	c1 e0 03             	shl    $0x3,%eax
   1108a:	6a 00                	push   $0x0
   1108c:	6a 00                	push   $0x0
   1108e:	6a 00                	push   $0x0
   11090:	50                   	push   %eax
   11091:	e8 9d fe ff ff       	call   10f33 <segment_desc_set>
   11096:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   11099:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1109d:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   110a4:	7e de                	jle    11084 <init_gdt+0xf>
    }

    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   110a6:	68 92 c0 00 00       	push   $0xc092
   110ab:	6a ff                	push   $0xffffffff
   110ad:	6a 00                	push   $0x0
   110af:	6a 10                	push   $0x10
   110b1:	e8 7d fe ff ff       	call   10f33 <segment_desc_set>
   110b6:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYE_RW | SEG_D | SEG_G);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   110b9:	68 9a c0 00 00       	push   $0xc09a
   110be:	6a ff                	push   $0xffffffff
   110c0:	6a 00                	push   $0x0
   110c2:	6a 08                	push   $0x8
   110c4:	e8 6a fe ff ff       	call   10f33 <segment_desc_set>
   110c9:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYE_RW | SEG_D | SEG_G);
    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   110cc:	b8 e0 81 01 00       	mov    $0x181e0,%eax
   110d1:	68 00 08 00 00       	push   $0x800
   110d6:	50                   	push   %eax
   110d7:	e8 15 fe ff ff       	call   10ef1 <lgdt>
   110dc:	83 c4 08             	add    $0x8,%esp
}
   110df:	90                   	nop
   110e0:	c9                   	leave  
   110e1:	c3                   	ret    

000110e2 <switch_to_tss>:
 * @brief        : 切换至TSS,即跳转实现任务切换
 * @param         {uint16_t} tss_selector: 对应的tss选择子
 * @return        {*}
 **/
void switch_to_tss(uint32_t tss_selector)
{
   110e2:	55                   	push   %ebp
   110e3:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   110e5:	6a 00                	push   $0x0
   110e7:	ff 75 08             	pushl  0x8(%ebp)
   110ea:	e8 2a fe ff ff       	call   10f19 <far_jump>
   110ef:	83 c4 08             	add    $0x8,%esp
}
   110f2:	90                   	nop
   110f3:	c9                   	leave  
   110f4:	c3                   	ret    

000110f5 <gdt_free_sel>:

// gdt表项释放
void gdt_free_sel(int sel)
{
   110f5:	55                   	push   %ebp
   110f6:	89 e5                	mov    %esp,%ebp
   110f8:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   110fb:	83 ec 0c             	sub    $0xc,%esp
   110fe:	68 e0 89 01 00       	push   $0x189e0
   11103:	e8 36 0d 00 00       	call   11e3e <mutex_lock>
   11108:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel/sizeof(segment_desc_t)].attr = 0;
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	c1 e8 03             	shr    $0x3,%eax
   11111:	66 c7 04 c5 e5 81 01 	movw   $0x0,0x181e5(,%eax,8)
   11118:	00 00 00 
    mutex_unlock(&mutex);
   1111b:	83 ec 0c             	sub    $0xc,%esp
   1111e:	68 e0 89 01 00       	push   $0x189e0
   11123:	e8 a6 0d 00 00       	call   11ece <mutex_unlock>
   11128:	83 c4 10             	add    $0x10,%esp
}
   1112b:	90                   	nop
   1112c:	c9                   	leave  
   1112d:	c3                   	ret    

0001112e <cpu_init>:
/**
 * @brief        : cpu初始化
 * @return        {*}
 **/
void cpu_init(void)
{
   1112e:	55                   	push   %ebp
   1112f:	89 e5                	mov    %esp,%ebp
   11131:	83 ec 08             	sub    $0x8,%esp
    init_gdt();         // gdt表初始化
   11134:	e8 3c ff ff ff       	call   11075 <init_gdt>
    mutex_init(&mutex); // 互斥锁初始化
   11139:	83 ec 0c             	sub    $0xc,%esp
   1113c:	68 e0 89 01 00       	push   $0x189e0
   11141:	e8 cc 0c 00 00       	call   11e12 <mutex_init>
   11146:	83 c4 10             	add    $0x10,%esp
   11149:	90                   	nop
   1114a:	c9                   	leave  
   1114b:	c3                   	ret    

0001114c <cli>:
{
   1114c:	55                   	push   %ebp
   1114d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   1114f:	fa                   	cli    
}
   11150:	90                   	nop
   11151:	5d                   	pop    %ebp
   11152:	c3                   	ret    

00011153 <sti>:
{
   11153:	55                   	push   %ebp
   11154:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   11156:	fb                   	sti    
}
   11157:	90                   	nop
   11158:	5d                   	pop    %ebp
   11159:	c3                   	ret    

0001115a <inb>:
{
   1115a:	55                   	push   %ebp
   1115b:	89 e5                	mov    %esp,%ebp
   1115d:	83 ec 14             	sub    $0x14,%esp
   11160:	8b 45 08             	mov    0x8(%ebp),%eax
   11163:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   11167:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1116b:	89 c2                	mov    %eax,%edx
   1116d:	ec                   	in     (%dx),%al
   1116e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11171:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   11175:	c9                   	leave  
   11176:	c3                   	ret    

00011177 <outb>:
{
   11177:	55                   	push   %ebp
   11178:	89 e5                	mov    %esp,%ebp
   1117a:	83 ec 08             	sub    $0x8,%esp
   1117d:	8b 55 08             	mov    0x8(%ebp),%edx
   11180:	8b 45 0c             	mov    0xc(%ebp),%eax
   11183:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11187:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   1118a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1118e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11192:	ee                   	out    %al,(%dx)
}
   11193:	90                   	nop
   11194:	c9                   	leave  
   11195:	c3                   	ret    

00011196 <lidt>:
{
   11196:	55                   	push   %ebp
   11197:	89 e5                	mov    %esp,%ebp
   11199:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;   // 获取高16位
   1119c:	8b 45 08             	mov    0x8(%ebp),%eax
   1119f:	c1 e8 10             	shr    $0x10,%eax
   111a2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF; // 获取低16位
   111a6:	8b 45 08             	mov    0x8(%ebp),%eax
   111a9:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;           // 大小
   111ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   111b0:	83 e8 01             	sub    $0x1,%eax
   111b3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   111b7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   111bb:	90                   	nop
   111bc:	c9                   	leave  
   111bd:	c3                   	ret    

000111be <hlt>:
{
   111be:	55                   	push   %ebp
   111bf:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   111c1:	f4                   	hlt    
}
   111c2:	90                   	nop
   111c3:	5d                   	pop    %ebp
   111c4:	c3                   	ret    

000111c5 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   111c5:	55                   	push   %ebp
   111c6:	89 e5                	mov    %esp,%ebp
   111c8:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushf \n\tpop %%eax" : "=a"(eflags));
   111cb:	9c                   	pushf  
   111cc:	58                   	pop    %eax
   111cd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   111d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   111d3:	c9                   	leave  
   111d4:	c3                   	ret    

000111d5 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   111d5:	55                   	push   %ebp
   111d6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("push %%eax\n\tpopf" ::"a"(eflags));
   111d8:	8b 45 08             	mov    0x8(%ebp),%eax
   111db:	50                   	push   %eax
   111dc:	9d                   	popf   
}
   111dd:	90                   	nop
   111de:	5d                   	pop    %ebp
   111df:	c3                   	ret    

000111e0 <dump_core_regs>:
 * @brief        :  打印寄存器异常信息
 * @param         {exception_frame_t} *frame: 寄存器信息
 * @return        {*}
 **/
static void dump_core_regs(exception_frame_t *frame)
{
   111e0:	55                   	push   %ebp
   111e1:	89 e5                	mov    %esp,%ebp
   111e3:	57                   	push   %edi
   111e4:	56                   	push   %esi
   111e5:	53                   	push   %ebx
   111e6:	83 ec 1c             	sub    $0x1c,%esp
    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   111e9:	8b 45 08             	mov    0x8(%ebp),%eax
   111ec:	8b 50 34             	mov    0x34(%eax),%edx
   111ef:	8b 45 08             	mov    0x8(%ebp),%eax
   111f2:	8b 40 30             	mov    0x30(%eax),%eax
   111f5:	83 ec 04             	sub    $0x4,%esp
   111f8:	52                   	push   %edx
   111f9:	50                   	push   %eax
   111fa:	68 c8 2d 01 00       	push   $0x12dc8
   111ff:	e8 41 19 00 00       	call   12b45 <log_printf>
   11204:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS: %d\nGS:%d",
   11207:	8b 45 08             	mov    0x8(%ebp),%eax
   1120a:	8b 38                	mov    (%eax),%edi
   1120c:	8b 45 08             	mov    0x8(%ebp),%eax
   1120f:	8b 70 04             	mov    0x4(%eax),%esi
   11212:	8b 45 08             	mov    0x8(%ebp),%eax
   11215:	8b 58 0c             	mov    0xc(%eax),%ebx
   11218:	8b 45 08             	mov    0x8(%ebp),%eax
   1121b:	8b 48 08             	mov    0x8(%eax),%ecx
   1121e:	8b 45 08             	mov    0x8(%ebp),%eax
   11221:	8b 50 0c             	mov    0xc(%eax),%edx
   11224:	8b 45 08             	mov    0x8(%ebp),%eax
   11227:	8b 40 3c             	mov    0x3c(%eax),%eax
   1122a:	83 ec 04             	sub    $0x4,%esp
   1122d:	57                   	push   %edi
   1122e:	56                   	push   %esi
   1122f:	53                   	push   %ebx
   11230:	51                   	push   %ecx
   11231:	52                   	push   %edx
   11232:	50                   	push   %eax
   11233:	68 e4 2d 01 00       	push   $0x12de4
   11238:	e8 08 19 00 00       	call   12b45 <log_printf>
   1123d:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->ds, frame->fs, frame->gs);
    log_printf("EAX: 0x%x\n"
   11240:	8b 45 08             	mov    0x8(%ebp),%eax
   11243:	8b 48 1c             	mov    0x1c(%eax),%ecx
   11246:	8b 45 08             	mov    0x8(%ebp),%eax
   11249:	8b 40 18             	mov    0x18(%eax),%eax
   1124c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1124f:	8b 45 08             	mov    0x8(%ebp),%eax
   11252:	8b 58 14             	mov    0x14(%eax),%ebx
   11255:	89 5d e0             	mov    %ebx,-0x20(%ebp)
   11258:	8b 45 08             	mov    0x8(%ebp),%eax
   1125b:	8b 78 10             	mov    0x10(%eax),%edi
   1125e:	8b 45 08             	mov    0x8(%ebp),%eax
   11261:	8b 70 24             	mov    0x24(%eax),%esi
   11264:	8b 45 08             	mov    0x8(%ebp),%eax
   11267:	8b 58 28             	mov    0x28(%eax),%ebx
   1126a:	8b 45 08             	mov    0x8(%ebp),%eax
   1126d:	8b 50 20             	mov    0x20(%eax),%edx
   11270:	8b 45 08             	mov    0x8(%ebp),%eax
   11273:	8b 40 2c             	mov    0x2c(%eax),%eax
   11276:	83 ec 0c             	sub    $0xc,%esp
   11279:	51                   	push   %ecx
   1127a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1127d:	ff 75 e0             	pushl  -0x20(%ebp)
   11280:	57                   	push   %edi
   11281:	56                   	push   %esi
   11282:	53                   	push   %ebx
   11283:	52                   	push   %edx
   11284:	50                   	push   %eax
   11285:	68 10 2e 01 00       	push   $0x12e10
   1128a:	e8 b6 18 00 00       	call   12b45 <log_printf>
   1128f:	83 c4 30             	add    $0x30,%esp
               "ESI: 0x%x\n"
               "EBP: 0x%x\n"
               "ESP: 0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP: 0x%x\nEFLAGS: 0x%x\n", frame->eip, frame->eflags);
   11292:	8b 45 08             	mov    0x8(%ebp),%eax
   11295:	8b 50 40             	mov    0x40(%eax),%edx
   11298:	8b 45 08             	mov    0x8(%ebp),%eax
   1129b:	8b 40 38             	mov    0x38(%eax),%eax
   1129e:	83 ec 04             	sub    $0x4,%esp
   112a1:	52                   	push   %edx
   112a2:	50                   	push   %eax
   112a3:	68 61 2e 01 00       	push   $0x12e61
   112a8:	e8 98 18 00 00       	call   12b45 <log_printf>
   112ad:	83 c4 10             	add    $0x10,%esp
}
   112b0:	90                   	nop
   112b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
   112b4:	5b                   	pop    %ebx
   112b5:	5e                   	pop    %esi
   112b6:	5f                   	pop    %edi
   112b7:	5d                   	pop    %ebp
   112b8:	c3                   	ret    

000112b9 <do_default_handler>:
 * @param         {exception_frame_t} *frame:保存一些寄存器的值(异常信息)
 * @param         {char} *msg: 异常提示
 * @return        {*}
 **/
static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   112b9:	55                   	push   %ebp
   112ba:	89 e5                	mov    %esp,%ebp
   112bc:	83 ec 08             	sub    $0x8,%esp
    log_printf("----------------------------------------");
   112bf:	83 ec 0c             	sub    $0xc,%esp
   112c2:	68 7c 2e 01 00       	push   $0x12e7c
   112c7:	e8 79 18 00 00       	call   12b45 <log_printf>
   112cc:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/EXCEPTION HAPPEND: %s", msg);
   112cf:	83 ec 08             	sub    $0x8,%esp
   112d2:	ff 75 0c             	pushl  0xc(%ebp)
   112d5:	68 a5 2e 01 00       	push   $0x12ea5
   112da:	e8 66 18 00 00       	call   12b45 <log_printf>
   112df:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   112e2:	83 ec 0c             	sub    $0xc,%esp
   112e5:	ff 75 08             	pushl  0x8(%ebp)
   112e8:	e8 f3 fe ff ff       	call   111e0 <dump_core_regs>
   112ed:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   112f0:	e8 c9 fe ff ff       	call   111be <hlt>
   112f5:	eb f9                	jmp    112f0 <do_default_handler+0x37>

000112f7 <do_handler_unknown>:
 * @brief        : 未知的异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_unknown(exception_frame_t *frame)
{
   112f7:	55                   	push   %ebp
   112f8:	89 e5                	mov    %esp,%ebp
   112fa:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception!!!");
   112fd:	83 ec 08             	sub    $0x8,%esp
   11300:	68 bf 2e 01 00       	push   $0x12ebf
   11305:	ff 75 08             	pushl  0x8(%ebp)
   11308:	e8 ac ff ff ff       	call   112b9 <do_default_handler>
   1130d:	83 c4 10             	add    $0x10,%esp
}
   11310:	90                   	nop
   11311:	c9                   	leave  
   11312:	c3                   	ret    

00011313 <do_handler_divider>:
 * @brief        : 除0异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_divider(exception_frame_t *frame)
{
   11313:	55                   	push   %ebp
   11314:	89 e5                	mov    %esp,%ebp
   11316:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Divder exception!!!");
   11319:	83 ec 08             	sub    $0x8,%esp
   1131c:	68 d4 2e 01 00       	push   $0x12ed4
   11321:	ff 75 08             	pushl  0x8(%ebp)
   11324:	e8 90 ff ff ff       	call   112b9 <do_default_handler>
   11329:	83 c4 10             	add    $0x10,%esp
}
   1132c:	90                   	nop
   1132d:	c9                   	leave  
   1132e:	c3                   	ret    

0001132f <do_handler_Debug>:
 * @brief        : 调试异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_Debug(exception_frame_t *frame)
{
   1132f:	55                   	push   %ebp
   11330:	89 e5                	mov    %esp,%ebp
   11332:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug exception!!!");
   11335:	83 ec 08             	sub    $0x8,%esp
   11338:	68 e8 2e 01 00       	push   $0x12ee8
   1133d:	ff 75 08             	pushl  0x8(%ebp)
   11340:	e8 74 ff ff ff       	call   112b9 <do_default_handler>
   11345:	83 c4 10             	add    $0x10,%esp
}
   11348:	90                   	nop
   11349:	c9                   	leave  
   1134a:	c3                   	ret    

0001134b <do_handler_NMI>:
 * @brief        : NMI异常处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_NMI(exception_frame_t *frame)
{
   1134b:	55                   	push   %ebp
   1134c:	89 e5                	mov    %esp,%ebp
   1134e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI exception!!!");
   11351:	83 ec 08             	sub    $0x8,%esp
   11354:	68 fb 2e 01 00       	push   $0x12efb
   11359:	ff 75 08             	pushl  0x8(%ebp)
   1135c:	e8 58 ff ff ff       	call   112b9 <do_default_handler>
   11361:	83 c4 10             	add    $0x10,%esp
}
   11364:	90                   	nop
   11365:	c9                   	leave  
   11366:	c3                   	ret    

00011367 <do_handler_breakpoint>:
 * @brief        : 断点异常(?)处理函数
 * @param         {exception_frame_t} *frame: 保存在寄存器中的异常信息结构体
 * @return        {*}
 **/
void do_handler_breakpoint(exception_frame_t *frame)
{
   11367:	55                   	push   %ebp
   11368:	89 e5                	mov    %esp,%ebp
   1136a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "breakpoint exception!!!");
   1136d:	83 ec 08             	sub    $0x8,%esp
   11370:	68 0c 2f 01 00       	push   $0x12f0c
   11375:	ff 75 08             	pushl  0x8(%ebp)
   11378:	e8 3c ff ff ff       	call   112b9 <do_default_handler>
   1137d:	83 c4 10             	add    $0x10,%esp
}
   11380:	90                   	nop
   11381:	c9                   	leave  
   11382:	c3                   	ret    

00011383 <do_handler_overflow>:
void do_handler_overflow(exception_frame_t *frame)
{
   11383:	55                   	push   %ebp
   11384:	89 e5                	mov    %esp,%ebp
   11386:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "overflow exception!!!");
   11389:	83 ec 08             	sub    $0x8,%esp
   1138c:	68 24 2f 01 00       	push   $0x12f24
   11391:	ff 75 08             	pushl  0x8(%ebp)
   11394:	e8 20 ff ff ff       	call   112b9 <do_default_handler>
   11399:	83 c4 10             	add    $0x10,%esp
}
   1139c:	90                   	nop
   1139d:	c9                   	leave  
   1139e:	c3                   	ret    

0001139f <do_handler_bound_range>:
void do_handler_bound_range(exception_frame_t *frame)
{
   1139f:	55                   	push   %ebp
   113a0:	89 e5                	mov    %esp,%ebp
   113a2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "bound range exception!!!");
   113a5:	83 ec 08             	sub    $0x8,%esp
   113a8:	68 3a 2f 01 00       	push   $0x12f3a
   113ad:	ff 75 08             	pushl  0x8(%ebp)
   113b0:	e8 04 ff ff ff       	call   112b9 <do_default_handler>
   113b5:	83 c4 10             	add    $0x10,%esp
}
   113b8:	90                   	nop
   113b9:	c9                   	leave  
   113ba:	c3                   	ret    

000113bb <do_handler_invalid_opcode>:
void do_handler_invalid_opcode(exception_frame_t *frame)
{
   113bb:	55                   	push   %ebp
   113bc:	89 e5                	mov    %esp,%ebp
   113be:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "invalid opcode exception!!!");
   113c1:	83 ec 08             	sub    $0x8,%esp
   113c4:	68 53 2f 01 00       	push   $0x12f53
   113c9:	ff 75 08             	pushl  0x8(%ebp)
   113cc:	e8 e8 fe ff ff       	call   112b9 <do_default_handler>
   113d1:	83 c4 10             	add    $0x10,%esp
}
   113d4:	90                   	nop
   113d5:	c9                   	leave  
   113d6:	c3                   	ret    

000113d7 <do_handler_device_unavailable>:
void do_handler_device_unavailable(exception_frame_t *frame)
{
   113d7:	55                   	push   %ebp
   113d8:	89 e5                	mov    %esp,%ebp
   113da:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "device unavailable exception!!!");
   113dd:	83 ec 08             	sub    $0x8,%esp
   113e0:	68 70 2f 01 00       	push   $0x12f70
   113e5:	ff 75 08             	pushl  0x8(%ebp)
   113e8:	e8 cc fe ff ff       	call   112b9 <do_default_handler>
   113ed:	83 c4 10             	add    $0x10,%esp
}
   113f0:	90                   	nop
   113f1:	c9                   	leave  
   113f2:	c3                   	ret    

000113f3 <do_handler_double_fault>:
void do_handler_double_fault(exception_frame_t *frame)
{
   113f3:	55                   	push   %ebp
   113f4:	89 e5                	mov    %esp,%ebp
   113f6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "double fault exception!!!");
   113f9:	83 ec 08             	sub    $0x8,%esp
   113fc:	68 90 2f 01 00       	push   $0x12f90
   11401:	ff 75 08             	pushl  0x8(%ebp)
   11404:	e8 b0 fe ff ff       	call   112b9 <do_default_handler>
   11409:	83 c4 10             	add    $0x10,%esp
}
   1140c:	90                   	nop
   1140d:	c9                   	leave  
   1140e:	c3                   	ret    

0001140f <do_handler_invalid_tss>:
void do_handler_invalid_tss(exception_frame_t *frame)
{
   1140f:	55                   	push   %ebp
   11410:	89 e5                	mov    %esp,%ebp
   11412:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "invalid tss exception!!!");
   11415:	83 ec 08             	sub    $0x8,%esp
   11418:	68 aa 2f 01 00       	push   $0x12faa
   1141d:	ff 75 08             	pushl  0x8(%ebp)
   11420:	e8 94 fe ff ff       	call   112b9 <do_default_handler>
   11425:	83 c4 10             	add    $0x10,%esp
}
   11428:	90                   	nop
   11429:	c9                   	leave  
   1142a:	c3                   	ret    

0001142b <do_handler_segment_not_present>:
void do_handler_segment_not_present(exception_frame_t *frame)
{
   1142b:	55                   	push   %ebp
   1142c:	89 e5                	mov    %esp,%ebp
   1142e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "segment not present exception!!!");
   11431:	83 ec 08             	sub    $0x8,%esp
   11434:	68 c4 2f 01 00       	push   $0x12fc4
   11439:	ff 75 08             	pushl  0x8(%ebp)
   1143c:	e8 78 fe ff ff       	call   112b9 <do_default_handler>
   11441:	83 c4 10             	add    $0x10,%esp
}
   11444:	90                   	nop
   11445:	c9                   	leave  
   11446:	c3                   	ret    

00011447 <do_handler_stack_segment_fault>:
void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   11447:	55                   	push   %ebp
   11448:	89 e5                	mov    %esp,%ebp
   1144a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "segment fault exception!!!");
   1144d:	83 ec 08             	sub    $0x8,%esp
   11450:	68 e5 2f 01 00       	push   $0x12fe5
   11455:	ff 75 08             	pushl  0x8(%ebp)
   11458:	e8 5c fe ff ff       	call   112b9 <do_default_handler>
   1145d:	83 c4 10             	add    $0x10,%esp
}
   11460:	90                   	nop
   11461:	c9                   	leave  
   11462:	c3                   	ret    

00011463 <do_handler_general_protection>:
void do_handler_general_protection(exception_frame_t *frame)
{
   11463:	55                   	push   %ebp
   11464:	89 e5                	mov    %esp,%ebp
   11466:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "general protection exception!!!");
   11469:	83 ec 08             	sub    $0x8,%esp
   1146c:	68 00 30 01 00       	push   $0x13000
   11471:	ff 75 08             	pushl  0x8(%ebp)
   11474:	e8 40 fe ff ff       	call   112b9 <do_default_handler>
   11479:	83 c4 10             	add    $0x10,%esp
}
   1147c:	90                   	nop
   1147d:	c9                   	leave  
   1147e:	c3                   	ret    

0001147f <do_handler_page_fault>:
void do_handler_page_fault(exception_frame_t *frame)
{
   1147f:	55                   	push   %ebp
   11480:	89 e5                	mov    %esp,%ebp
   11482:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "page fault exception!!!");
   11485:	83 ec 08             	sub    $0x8,%esp
   11488:	68 20 30 01 00       	push   $0x13020
   1148d:	ff 75 08             	pushl  0x8(%ebp)
   11490:	e8 24 fe ff ff       	call   112b9 <do_default_handler>
   11495:	83 c4 10             	add    $0x10,%esp
}
   11498:	90                   	nop
   11499:	c9                   	leave  
   1149a:	c3                   	ret    

0001149b <do_handler_fpu_error>:
void do_handler_fpu_error(exception_frame_t *frame)
{
   1149b:	55                   	push   %ebp
   1149c:	89 e5                	mov    %esp,%ebp
   1149e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "fpu error exception!!!");
   114a1:	83 ec 08             	sub    $0x8,%esp
   114a4:	68 38 30 01 00       	push   $0x13038
   114a9:	ff 75 08             	pushl  0x8(%ebp)
   114ac:	e8 08 fe ff ff       	call   112b9 <do_default_handler>
   114b1:	83 c4 10             	add    $0x10,%esp
}
   114b4:	90                   	nop
   114b5:	c9                   	leave  
   114b6:	c3                   	ret    

000114b7 <do_handler_alignment_check>:
void do_handler_alignment_check(exception_frame_t *frame)
{
   114b7:	55                   	push   %ebp
   114b8:	89 e5                	mov    %esp,%ebp
   114ba:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "alignment check exception!!!");
   114bd:	83 ec 08             	sub    $0x8,%esp
   114c0:	68 4f 30 01 00       	push   $0x1304f
   114c5:	ff 75 08             	pushl  0x8(%ebp)
   114c8:	e8 ec fd ff ff       	call   112b9 <do_default_handler>
   114cd:	83 c4 10             	add    $0x10,%esp
}
   114d0:	90                   	nop
   114d1:	c9                   	leave  
   114d2:	c3                   	ret    

000114d3 <do_handler_machine_check>:
void do_handler_machine_check(exception_frame_t *frame)
{
   114d3:	55                   	push   %ebp
   114d4:	89 e5                	mov    %esp,%ebp
   114d6:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "machine check exception!!!");
   114d9:	83 ec 08             	sub    $0x8,%esp
   114dc:	68 6c 30 01 00       	push   $0x1306c
   114e1:	ff 75 08             	pushl  0x8(%ebp)
   114e4:	e8 d0 fd ff ff       	call   112b9 <do_default_handler>
   114e9:	83 c4 10             	add    $0x10,%esp
}
   114ec:	90                   	nop
   114ed:	c9                   	leave  
   114ee:	c3                   	ret    

000114ef <do_handler_smd_exception>:
void do_handler_smd_exception(exception_frame_t *frame)
{
   114ef:	55                   	push   %ebp
   114f0:	89 e5                	mov    %esp,%ebp
   114f2:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "smd exception!!!");
   114f5:	83 ec 08             	sub    $0x8,%esp
   114f8:	68 87 30 01 00       	push   $0x13087
   114fd:	ff 75 08             	pushl  0x8(%ebp)
   11500:	e8 b4 fd ff ff       	call   112b9 <do_default_handler>
   11505:	83 c4 10             	add    $0x10,%esp
}
   11508:	90                   	nop
   11509:	c9                   	leave  
   1150a:	c3                   	ret    

0001150b <do_handler_virtual_exception>:
void do_handler_virtual_exception(exception_frame_t *frame)
{
   1150b:	55                   	push   %ebp
   1150c:	89 e5                	mov    %esp,%ebp
   1150e:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "virtual exception!!!");
   11511:	83 ec 08             	sub    $0x8,%esp
   11514:	68 98 30 01 00       	push   $0x13098
   11519:	ff 75 08             	pushl  0x8(%ebp)
   1151c:	e8 98 fd ff ff       	call   112b9 <do_default_handler>
   11521:	83 c4 10             	add    $0x10,%esp
}
   11524:	90                   	nop
   11525:	c9                   	leave  
   11526:	c3                   	ret    

00011527 <do_handler_control_exception>:
void do_handler_control_exception(exception_frame_t *frame)
{
   11527:	55                   	push   %ebp
   11528:	89 e5                	mov    %esp,%ebp
   1152a:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "control exception!!!");
   1152d:	83 ec 08             	sub    $0x8,%esp
   11530:	68 ad 30 01 00       	push   $0x130ad
   11535:	ff 75 08             	pushl  0x8(%ebp)
   11538:	e8 7c fd ff ff       	call   112b9 <do_default_handler>
   1153d:	83 c4 10             	add    $0x10,%esp
}
   11540:	90                   	nop
   11541:	c9                   	leave  
   11542:	c3                   	ret    

00011543 <init_pic>:
/**
 * @brief        : 初始化8259芯片,实现定时器中断。
 * @return        {*}
 **/
static void init_pic()
{
   11543:	55                   	push   %ebp
   11544:	89 e5                	mov    %esp,%ebp
    // 第一块8259配置 边缘触发,级联需要配置icw4，8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11546:	6a 11                	push   $0x11
   11548:	6a 20                	push   $0x20
   1154a:	e8 28 fc ff ff       	call   11177 <outb>
   1154f:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW2, IRQ_PIC_START); // 起始序号从0x20开始
   11552:	6a 20                	push   $0x20
   11554:	6a 21                	push   $0x21
   11556:	e8 1c fc ff ff       	call   11177 <outb>
   1155b:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW3, 1 << 2);        // 主片PIC0_ICW3 有从片
   1155e:	6a 04                	push   $0x4
   11560:	6a 21                	push   $0x21
   11562:	e8 10 fc ff ff       	call   11177 <outb>
   11567:	83 c4 08             	add    $0x8,%esp
    outb(PIC0_ICW4, PIC_ICW4_8086); // 普通全嵌套、非缓冲、自动结束8086模式
   1156a:	6a 01                	push   $0x1
   1156c:	6a 21                	push   $0x21
   1156e:	e8 04 fc ff ff       	call   11177 <outb>
   11573:	83 c4 08             	add    $0x8,%esp

    // 第二块8259配置
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   11576:	6a 11                	push   $0x11
   11578:	68 a0 00 00 00       	push   $0xa0
   1157d:	e8 f5 fb ff ff       	call   11177 <outb>
   11582:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW2, IRQ_PIC_START + 8); // 从0x28开始
   11585:	6a 28                	push   $0x28
   11587:	68 a1 00 00 00       	push   $0xa1
   1158c:	e8 e6 fb ff ff       	call   11177 <outb>
   11591:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW3, 2);                 // 没有从片，连接到主片的IRQ2上
   11594:	6a 02                	push   $0x2
   11596:	68 a1 00 00 00       	push   $0xa1
   1159b:	e8 d7 fb ff ff       	call   11177 <outb>
   115a0:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_ICW4, PIC_ICW4_8086);     // 普通全嵌套、非缓冲、非自动结束、8086模式
   115a3:	6a 01                	push   $0x1
   115a5:	68 a1 00 00 00       	push   $0xa1
   115aa:	e8 c8 fb ff ff       	call   11177 <outb>
   115af:	83 c4 08             	add    $0x8,%esp

    // // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   115b2:	68 fb 00 00 00       	push   $0xfb
   115b7:	6a 21                	push   $0x21
   115b9:	e8 b9 fb ff ff       	call   11177 <outb>
   115be:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   115c1:	68 ff 00 00 00       	push   $0xff
   115c6:	68 a1 00 00 00       	push   $0xa1
   115cb:	e8 a7 fb ff ff       	call   11177 <outb>
   115d0:	83 c4 08             	add    $0x8,%esp
}
   115d3:	90                   	nop
   115d4:	c9                   	leave  
   115d5:	c3                   	ret    

000115d6 <pic_send_eoi>:
 * @brief        : 通过写8259的ocw端口，来告诉操作系统irq_num对应的中断已经响应完了
 * @param         {int} irq_num: 中断号
 * @return        {*}
 **/
void pic_send_eoi(int irq_num)
{
   115d6:	55                   	push   %ebp
   115d7:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   115d9:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8)
   115dd:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   115e1:	7e 0f                	jle    115f2 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   115e3:	6a 20                	push   $0x20
   115e5:	68 a0 00 00 00       	push   $0xa0
   115ea:	e8 88 fb ff ff       	call   11177 <outb>
   115ef:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   115f2:	6a 20                	push   $0x20
   115f4:	6a 20                	push   $0x20
   115f6:	e8 7c fb ff ff       	call   11177 <outb>
   115fb:	83 c4 08             	add    $0x8,%esp
}
   115fe:	90                   	nop
   115ff:	c9                   	leave  
   11600:	c3                   	ret    

00011601 <irq_init>:
/**
 * @brief        : 中断初始化,初始化中断向量表
 * @return        {*}
 **/
void irq_init(void)
{
   11601:	55                   	push   %ebp
   11602:	89 e5                	mov    %esp,%ebp
   11604:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   11607:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1160e:	eb 25                	jmp    11635 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown,
   11610:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   11615:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11618:	c1 e0 03             	shl    $0x3,%eax
   1161b:	05 00 8a 01 00       	add    $0x18a00,%eax
   11620:	68 00 8e 00 00       	push   $0x8e00
   11625:	52                   	push   %edx
   11626:	6a 08                	push   $0x8
   11628:	50                   	push   %eax
   11629:	e8 8b f9 ff ff       	call   10fb9 <gate_desc_set>
   1162e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   11631:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11635:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11639:	7e d5                	jle    11610 <irq_init+0xf>
                      GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
    }

    // 安装异常处理函数
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider); // 除0异常
   1163b:	83 ec 08             	sub    $0x8,%esp
   1163e:	68 4a 00 01 00       	push   $0x1004a
   11643:	6a 00                	push   $0x0
   11645:	e8 65 01 00 00       	call   117af <irq_install>
   1164a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   1164d:	83 ec 08             	sub    $0x8,%esp
   11650:	68 69 00 01 00       	push   $0x10069
   11655:	6a 01                	push   $0x1
   11657:	e8 53 01 00 00       	call   117af <irq_install>
   1165c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   1165f:	83 ec 08             	sub    $0x8,%esp
   11662:	68 88 00 01 00       	push   $0x10088
   11667:	6a 02                	push   $0x2
   11669:	e8 41 01 00 00       	call   117af <irq_install>
   1166e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11671:	83 ec 08             	sub    $0x8,%esp
   11674:	68 a7 00 01 00       	push   $0x100a7
   11679:	6a 03                	push   $0x3
   1167b:	e8 2f 01 00 00       	call   117af <irq_install>
   11680:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11683:	83 ec 08             	sub    $0x8,%esp
   11686:	68 c6 00 01 00       	push   $0x100c6
   1168b:	6a 04                	push   $0x4
   1168d:	e8 1d 01 00 00       	call   117af <irq_install>
   11692:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   11695:	83 ec 08             	sub    $0x8,%esp
   11698:	68 e5 00 01 00       	push   $0x100e5
   1169d:	6a 05                	push   $0x5
   1169f:	e8 0b 01 00 00       	call   117af <irq_install>
   116a4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   116a7:	83 ec 08             	sub    $0x8,%esp
   116aa:	68 04 01 01 00       	push   $0x10104
   116af:	6a 06                	push   $0x6
   116b1:	e8 f9 00 00 00       	call   117af <irq_install>
   116b6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   116b9:	83 ec 08             	sub    $0x8,%esp
   116bc:	68 23 01 01 00       	push   $0x10123
   116c1:	6a 07                	push   $0x7
   116c3:	e8 e7 00 00 00       	call   117af <irq_install>
   116c8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   116cb:	83 ec 08             	sub    $0x8,%esp
   116ce:	68 42 01 01 00       	push   $0x10142
   116d3:	6a 08                	push   $0x8
   116d5:	e8 d5 00 00 00       	call   117af <irq_install>
   116da:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   116dd:	83 ec 08             	sub    $0x8,%esp
   116e0:	68 5f 01 01 00       	push   $0x1015f
   116e5:	6a 0a                	push   $0xa
   116e7:	e8 c3 00 00 00       	call   117af <irq_install>
   116ec:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   116ef:	83 ec 08             	sub    $0x8,%esp
   116f2:	68 7c 01 01 00       	push   $0x1017c
   116f7:	6a 0b                	push   $0xb
   116f9:	e8 b1 00 00 00       	call   117af <irq_install>
   116fe:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   11701:	83 ec 08             	sub    $0x8,%esp
   11704:	68 99 01 01 00       	push   $0x10199
   11709:	6a 0c                	push   $0xc
   1170b:	e8 9f 00 00 00       	call   117af <irq_install>
   11710:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   11713:	83 ec 08             	sub    $0x8,%esp
   11716:	68 b6 01 01 00       	push   $0x101b6
   1171b:	6a 0d                	push   $0xd
   1171d:	e8 8d 00 00 00       	call   117af <irq_install>
   11722:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   11725:	83 ec 08             	sub    $0x8,%esp
   11728:	68 d3 01 01 00       	push   $0x101d3
   1172d:	6a 0e                	push   $0xe
   1172f:	e8 7b 00 00 00       	call   117af <irq_install>
   11734:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   11737:	83 ec 08             	sub    $0x8,%esp
   1173a:	68 f0 01 01 00       	push   $0x101f0
   1173f:	6a 10                	push   $0x10
   11741:	e8 69 00 00 00       	call   117af <irq_install>
   11746:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11749:	83 ec 08             	sub    $0x8,%esp
   1174c:	68 0f 02 01 00       	push   $0x1020f
   11751:	6a 11                	push   $0x11
   11753:	e8 57 00 00 00       	call   117af <irq_install>
   11758:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   1175b:	83 ec 08             	sub    $0x8,%esp
   1175e:	68 2c 02 01 00       	push   $0x1022c
   11763:	6a 12                	push   $0x12
   11765:	e8 45 00 00 00       	call   117af <irq_install>
   1176a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   1176d:	83 ec 08             	sub    $0x8,%esp
   11770:	68 4b 02 01 00       	push   $0x1024b
   11775:	6a 13                	push   $0x13
   11777:	e8 33 00 00 00       	call   117af <irq_install>
   1177c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   1177f:	83 ec 08             	sub    $0x8,%esp
   11782:	68 6a 02 01 00       	push   $0x1026a
   11787:	6a 14                	push   $0x14
   11789:	e8 21 00 00 00       	call   117af <irq_install>
   1178e:	83 c4 10             	add    $0x10,%esp

    // 加载IDT表
    lidt((uint32_t)idt_table, sizeof(idt_table));
   11791:	b8 00 8a 01 00       	mov    $0x18a00,%eax
   11796:	83 ec 08             	sub    $0x8,%esp
   11799:	68 00 04 00 00       	push   $0x400
   1179e:	50                   	push   %eax
   1179f:	e8 f2 f9 ff ff       	call   11196 <lidt>
   117a4:	83 c4 10             	add    $0x10,%esp

    init_pic(); // 初始化8259芯片
   117a7:	e8 97 fd ff ff       	call   11543 <init_pic>
}
   117ac:	90                   	nop
   117ad:	c9                   	leave  
   117ae:	c3                   	ret    

000117af <irq_install>:
 * @param         {int} irq_num:
 * @param         {irq_handler_t} handler:
 * @return        {*}
 **/
int irq_install(int irq_num, irq_handler_t handler)
{
   117af:	55                   	push   %ebp
   117b0:	89 e5                	mov    %esp,%ebp
   117b2:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   117b5:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   117b9:	7e 07                	jle    117c2 <irq_install+0x13>
    {
        return -1;
   117bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   117c0:	eb 25                	jmp    117e7 <irq_install+0x38>
    }
    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   117c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   117c5:	8b 55 08             	mov    0x8(%ebp),%edx
   117c8:	c1 e2 03             	shl    $0x3,%edx
   117cb:	81 c2 00 8a 01 00    	add    $0x18a00,%edx
   117d1:	68 00 8e 00 00       	push   $0x8e00
   117d6:	50                   	push   %eax
   117d7:	6a 08                	push   $0x8
   117d9:	52                   	push   %edx
   117da:	e8 da f7 ff ff       	call   10fb9 <gate_desc_set>
   117df:	83 c4 10             	add    $0x10,%esp
    return 0;
   117e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   117e7:	c9                   	leave  
   117e8:	c3                   	ret    

000117e9 <irq_enable>:
 * @brief        : 开启特定中断
 * @param         {int} irq_num: 特定中断号
 * @return        {*}
 **/
void irq_enable(int irq_num)
{
   117e9:	55                   	push   %ebp
   117ea:	89 e5                	mov    %esp,%ebp
   117ec:	53                   	push   %ebx
   117ed:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   117f0:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   117f4:	7e 78                	jle    1186e <irq_enable+0x85>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   117f6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   117fa:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   117fe:	7f 32                	jg     11832 <irq_enable+0x49>
    {
        // 第一块8259中的中断
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11800:	6a 21                	push   $0x21
   11802:	e8 53 f9 ff ff       	call   1115a <inb>
   11807:	83 c4 04             	add    $0x4,%esp
   1180a:	89 c2                	mov    %eax,%edx
   1180c:	8b 45 08             	mov    0x8(%ebp),%eax
   1180f:	bb 01 00 00 00       	mov    $0x1,%ebx
   11814:	89 c1                	mov    %eax,%ecx
   11816:	d3 e3                	shl    %cl,%ebx
   11818:	89 d8                	mov    %ebx,%eax
   1181a:	f7 d0                	not    %eax
   1181c:	21 d0                	and    %edx,%eax
   1181e:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11821:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11825:	50                   	push   %eax
   11826:	6a 21                	push   $0x21
   11828:	e8 4a f9 ff ff       	call   11177 <outb>
   1182d:	83 c4 08             	add    $0x8,%esp
   11830:	eb 3d                	jmp    1186f <irq_enable+0x86>
    }
    else
    {
        // 第二块8259的中断
        irq_num -= 8;
   11832:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11836:	68 a1 00 00 00       	push   $0xa1
   1183b:	e8 1a f9 ff ff       	call   1115a <inb>
   11840:	83 c4 04             	add    $0x4,%esp
   11843:	89 c2                	mov    %eax,%edx
   11845:	8b 45 08             	mov    0x8(%ebp),%eax
   11848:	bb 01 00 00 00       	mov    $0x1,%ebx
   1184d:	89 c1                	mov    %eax,%ecx
   1184f:	d3 e3                	shl    %cl,%ebx
   11851:	89 d8                	mov    %ebx,%eax
   11853:	f7 d0                	not    %eax
   11855:	21 d0                	and    %edx,%eax
   11857:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1185a:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1185e:	50                   	push   %eax
   1185f:	68 a1 00 00 00       	push   $0xa1
   11864:	e8 0e f9 ff ff       	call   11177 <outb>
   11869:	83 c4 08             	add    $0x8,%esp
   1186c:	eb 01                	jmp    1186f <irq_enable+0x86>
        return;
   1186e:	90                   	nop
    }
}
   1186f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11872:	c9                   	leave  
   11873:	c3                   	ret    

00011874 <irq_disable>:
 * @brief        : 关闭特定中断
 * @param         {int} irq_num: 特定中断号
 * @return        {*}
 **/
void irq_disable(int irq_num)
{
   11874:	55                   	push   %ebp
   11875:	89 e5                	mov    %esp,%ebp
   11877:	53                   	push   %ebx
   11878:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   1187b:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1187f:	7e 74                	jle    118f5 <irq_disable+0x81>
    {
        return;
    }
    irq_num -= IRQ_PIC_START;
   11881:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11885:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11889:	7f 30                	jg     118bb <irq_disable+0x47>
    {
        // 第一块8259中的中断
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1188b:	6a 21                	push   $0x21
   1188d:	e8 c8 f8 ff ff       	call   1115a <inb>
   11892:	83 c4 04             	add    $0x4,%esp
   11895:	89 c3                	mov    %eax,%ebx
   11897:	8b 45 08             	mov    0x8(%ebp),%eax
   1189a:	ba 01 00 00 00       	mov    $0x1,%edx
   1189f:	89 c1                	mov    %eax,%ecx
   118a1:	d3 e2                	shl    %cl,%edx
   118a3:	89 d0                	mov    %edx,%eax
   118a5:	09 d8                	or     %ebx,%eax
   118a7:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   118aa:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   118ae:	50                   	push   %eax
   118af:	6a 21                	push   $0x21
   118b1:	e8 c1 f8 ff ff       	call   11177 <outb>
   118b6:	83 c4 08             	add    $0x8,%esp
   118b9:	eb 3b                	jmp    118f6 <irq_disable+0x82>
    }
    else
    {
        // 第二块8259的中断
        irq_num -= 8;
   118bb:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   118bf:	68 a1 00 00 00       	push   $0xa1
   118c4:	e8 91 f8 ff ff       	call   1115a <inb>
   118c9:	83 c4 04             	add    $0x4,%esp
   118cc:	89 c3                	mov    %eax,%ebx
   118ce:	8b 45 08             	mov    0x8(%ebp),%eax
   118d1:	ba 01 00 00 00       	mov    $0x1,%edx
   118d6:	89 c1                	mov    %eax,%ecx
   118d8:	d3 e2                	shl    %cl,%edx
   118da:	89 d0                	mov    %edx,%eax
   118dc:	09 d8                	or     %ebx,%eax
   118de:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   118e1:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   118e5:	50                   	push   %eax
   118e6:	68 a1 00 00 00       	push   $0xa1
   118eb:	e8 87 f8 ff ff       	call   11177 <outb>
   118f0:	83 c4 08             	add    $0x8,%esp
   118f3:	eb 01                	jmp    118f6 <irq_disable+0x82>
        return;
   118f5:	90                   	nop
    }
}
   118f6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   118f9:	c9                   	leave  
   118fa:	c3                   	ret    

000118fb <irq_disable_global>:
/**
 * @brief        : 全局中断关闭eflags置0
 * @return        {*}
 **/
void irq_disable_global(void)
{
   118fb:	55                   	push   %ebp
   118fc:	89 e5                	mov    %esp,%ebp
    cli();
   118fe:	e8 49 f8 ff ff       	call   1114c <cli>
}
   11903:	90                   	nop
   11904:	5d                   	pop    %ebp
   11905:	c3                   	ret    

00011906 <irq_enable_global>:
/**
 * @brief        : 全局中断开启eflags置1
 * @return        {*}
 **/
void irq_enable_global(void)
{
   11906:	55                   	push   %ebp
   11907:	89 e5                	mov    %esp,%ebp
    sti();
   11909:	e8 45 f8 ff ff       	call   11153 <sti>
}
   1190e:	90                   	nop
   1190f:	5d                   	pop    %ebp
   11910:	c3                   	ret    

00011911 <irq_enter_protection>:
/**
 * @brief        : 进入临界区,读取eflags的值，关中断
 * @return        {irq_state_t}eflags的值
 **/
irq_state_t irq_enter_protection(void)
{
   11911:	55                   	push   %ebp
   11912:	89 e5                	mov    %esp,%ebp
   11914:	83 ec 10             	sub    $0x10,%esp

    irq_state_t state = read_eflags();
   11917:	e8 a9 f8 ff ff       	call   111c5 <read_eflags>
   1191c:	89 45 fc             	mov    %eax,-0x4(%ebp)

    irq_disable_global();
   1191f:	e8 d7 ff ff ff       	call   118fb <irq_disable_global>

    return state;
   11924:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11927:	c9                   	leave  
   11928:	c3                   	ret    

00011929 <irq_leave_protection>:
 * @brief        : 退出临界区,将eflags原来的值写回
 * @param         {irq_state_t} state: 原eflags的值
 * @return        {*}
 **/
void irq_leave_protection(irq_state_t state)
{
   11929:	55                   	push   %ebp
   1192a:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1192c:	ff 75 08             	pushl  0x8(%ebp)
   1192f:	e8 a1 f8 ff ff       	call   111d5 <write_eflags>
   11934:	83 c4 04             	add    $0x4,%esp
}
   11937:	90                   	nop
   11938:	c9                   	leave  
   11939:	c3                   	ret    

0001193a <outb>:
{
   1193a:	55                   	push   %ebp
   1193b:	89 e5                	mov    %esp,%ebp
   1193d:	83 ec 08             	sub    $0x8,%esp
   11940:	8b 55 08             	mov    0x8(%ebp),%edx
   11943:	8b 45 0c             	mov    0xc(%ebp),%eax
   11946:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1194a:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   1194d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11951:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11955:	ee                   	out    %al,(%dx)
}
   11956:	90                   	nop
   11957:	c9                   	leave  
   11958:	c3                   	ret    

00011959 <do_handler_timer>:
 * @brief        : 定时器中断处理函数
 * @param         {exception_frame_t} *frame: 异常信息
 * @return        {*}
**/
void do_handler_timer(exception_frame_t *frame)
{
   11959:	55                   	push   %ebp
   1195a:	89 e5                	mov    %esp,%ebp
   1195c:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1195f:	a1 00 8e 01 00       	mov    0x18e00,%eax
   11964:	83 c0 01             	add    $0x1,%eax
   11967:	a3 00 8e 01 00       	mov    %eax,0x18e00

    pic_send_eoi(IRQ0_TIMER);
   1196c:	83 ec 0c             	sub    $0xc,%esp
   1196f:	6a 20                	push   $0x20
   11971:	e8 60 fc ff ff       	call   115d6 <pic_send_eoi>
   11976:	83 c4 10             	add    $0x10,%esp

    task_time_ticks();
   11979:	e8 ee f3 ff ff       	call   10d6c <task_time_ticks>
}
   1197e:	90                   	nop
   1197f:	c9                   	leave  
   11980:	c3                   	ret    

00011981 <init_pit>:
/**
 * @brief        : 初始化
 * @return        {*}
 **/
static void init_pit()
{
   11981:	55                   	push   %ebp
   11982:	89 e5                	mov    %esp,%ebp
   11984:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 * OS_TICKS_MS);
   11987:	c7 45 f4 77 00 00 00 	movl   $0x77,-0xc(%ebp)

    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNEL0 | PIT_LOAD_LOHI | PIT_MODE3);
   1198e:	6a 36                	push   $0x36
   11990:	6a 43                	push   $0x43
   11992:	e8 a3 ff ff ff       	call   1193a <outb>
   11997:	83 c4 08             	add    $0x8,%esp

    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF); // 加载低8位
   1199a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1199d:	0f b6 c0             	movzbl %al,%eax
   119a0:	50                   	push   %eax
   119a1:	6a 40                	push   $0x40
   119a3:	e8 92 ff ff ff       	call   1193a <outb>
   119a8:	83 c4 08             	add    $0x8,%esp

    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 加载高8位
   119ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119ae:	c1 e8 08             	shr    $0x8,%eax
   119b1:	0f b6 c0             	movzbl %al,%eax
   119b4:	50                   	push   %eax
   119b5:	6a 40                	push   $0x40
   119b7:	e8 7e ff ff ff       	call   1193a <outb>
   119bc:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   119bf:	83 ec 08             	sub    $0x8,%esp
   119c2:	68 a6 02 01 00       	push   $0x102a6
   119c7:	6a 20                	push   $0x20
   119c9:	e8 e1 fd ff ff       	call   117af <irq_install>
   119ce:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   119d1:	83 ec 0c             	sub    $0xc,%esp
   119d4:	6a 20                	push   $0x20
   119d6:	e8 0e fe ff ff       	call   117e9 <irq_enable>
   119db:	83 c4 10             	add    $0x10,%esp
}
   119de:	90                   	nop
   119df:	c9                   	leave  
   119e0:	c3                   	ret    

000119e1 <time_init>:
/**
 * @brief        : 定时器初始化函数
 * @return        {*}
 **/
void time_init(void)
{
   119e1:	55                   	push   %ebp
   119e2:	89 e5                	mov    %esp,%ebp
   119e4:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   119e7:	c7 05 00 8e 01 00 00 	movl   $0x0,0x18e00
   119ee:	00 00 00 
    init_pit();
   119f1:	e8 8b ff ff ff       	call   11981 <init_pit>
   119f6:	90                   	nop
   119f7:	c9                   	leave  
   119f8:	c3                   	ret    

000119f9 <list_first>:
{
   119f9:	55                   	push   %ebp
   119fa:	89 e5                	mov    %esp,%ebp
    return list->first;
   119fc:	8b 45 08             	mov    0x8(%ebp),%eax
   119ff:	8b 00                	mov    (%eax),%eax
}
   11a01:	5d                   	pop    %ebp
   11a02:	c3                   	ret    

00011a03 <list_last>:
{
   11a03:	55                   	push   %ebp
   11a04:	89 e5                	mov    %esp,%ebp
    return list->last;
   11a06:	8b 45 08             	mov    0x8(%ebp),%eax
   11a09:	8b 40 04             	mov    0x4(%eax),%eax
}
   11a0c:	5d                   	pop    %ebp
   11a0d:	c3                   	ret    

00011a0e <list_count>:
{
   11a0e:	55                   	push   %ebp
   11a0f:	89 e5                	mov    %esp,%ebp
    return list->count;
   11a11:	8b 45 08             	mov    0x8(%ebp),%eax
   11a14:	8b 40 08             	mov    0x8(%eax),%eax
}
   11a17:	5d                   	pop    %ebp
   11a18:	c3                   	ret    

00011a19 <test>:
#include "core/memory.h"
static boot_info_t *init_boot_info; // 启动信息

static sem_t sem;
void test()
{
   11a19:	55                   	push   %ebp
   11a1a:	89 e5                	mov    %esp,%ebp
    
}
   11a1c:	90                   	nop
   11a1d:	5d                   	pop    %ebp
   11a1e:	c3                   	ret    

00011a1f <kernel_init>:
 * @brief        : 内核初始化
 * @param         {boot_info_t} *boot_info: 启动信息
 * @return        {*}
 **/
void kernel_init(boot_info_t *boot_info)
{
   11a1f:	55                   	push   %ebp
   11a20:	89 e5                	mov    %esp,%ebp
   11a22:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   11a25:	8b 45 08             	mov    0x8(%ebp),%eax
   11a28:	a3 20 8e 01 00       	mov    %eax,0x18e20
    cpu_init();
   11a2d:	e8 fc f6 ff ff       	call   1112e <cpu_init>

    memory_init(boot_info);
   11a32:	83 ec 0c             	sub    $0xc,%esp
   11a35:	ff 75 08             	pushl  0x8(%ebp)
   11a38:	e8 51 ed ff ff       	call   1078e <memory_init>
   11a3d:	83 c4 10             	add    $0x10,%esp
    log_init();
   11a40:	e8 63 10 00 00       	call   12aa8 <log_init>
    irq_init();
   11a45:	e8 b7 fb ff ff       	call   11601 <irq_init>
    time_init();
   11a4a:	e8 92 ff ff ff       	call   119e1 <time_init>
    task_manager_init();
   11a4f:	e8 64 f2 ff ff       	call   10cb8 <task_manager_init>
}
   11a54:	90                   	nop
   11a55:	c9                   	leave  
   11a56:	c3                   	ret    

00011a57 <first_task_entry>:

static task_t init_task;  // 初始任务
static task_t first_task; // 第一个任务
static uint32_t first_task_stack[1024];
void first_task_entry(void)
{
   11a57:	55                   	push   %ebp
   11a58:	89 e5                	mov    %esp,%ebp
   11a5a:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   11a5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        sem_wait(&sem);
   11a64:	83 ec 0c             	sub    $0xc,%esp
   11a67:	68 24 8e 01 00       	push   $0x18e24
   11a6c:	e8 45 05 00 00       	call   11fb6 <sem_wait>
   11a71:	83 c4 10             	add    $0x10,%esp
        log_printf("first_task_entry , count is %d", count++);
   11a74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a77:	8d 50 01             	lea    0x1(%eax),%edx
   11a7a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11a7d:	83 ec 08             	sub    $0x8,%esp
   11a80:	50                   	push   %eax
   11a81:	68 c4 30 01 00       	push   $0x130c4
   11a86:	e8 ba 10 00 00       	call   12b45 <log_printf>
   11a8b:	83 c4 10             	add    $0x10,%esp
        sem_wait(&sem);
   11a8e:	eb d4                	jmp    11a64 <first_task_entry+0xd>

00011a90 <list_test>:
        // sys_sleep(10000);
    }
}

void list_test()
{
   11a90:	55                   	push   %ebp
   11a91:	89 e5                	mov    %esp,%ebp
   11a93:	56                   	push   %esi
   11a94:	53                   	push   %ebx
   11a95:	83 ec 60             	sub    $0x60,%esp
    list_t list;
    list_init(&list);
   11a98:	83 ec 0c             	sub    $0xc,%esp
   11a9b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11a9e:	50                   	push   %eax
   11a9f:	e8 e1 0d 00 00       	call   12885 <list_init>
   11aa4:	83 c4 10             	add    $0x10,%esp

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11aa7:	83 ec 0c             	sub    $0xc,%esp
   11aaa:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11aad:	50                   	push   %eax
   11aae:	e8 5b ff ff ff       	call   11a0e <list_count>
   11ab3:	83 c4 10             	add    $0x10,%esp
   11ab6:	89 c6                	mov    %eax,%esi
   11ab8:	83 ec 0c             	sub    $0xc,%esp
   11abb:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11abe:	50                   	push   %eax
   11abf:	e8 3f ff ff ff       	call   11a03 <list_last>
   11ac4:	83 c4 10             	add    $0x10,%esp
   11ac7:	89 c3                	mov    %eax,%ebx
   11ac9:	83 ec 0c             	sub    $0xc,%esp
   11acc:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11acf:	50                   	push   %eax
   11ad0:	e8 24 ff ff ff       	call   119f9 <list_first>
   11ad5:	83 c4 10             	add    $0x10,%esp
   11ad8:	56                   	push   %esi
   11ad9:	53                   	push   %ebx
   11ada:	50                   	push   %eax
   11adb:	68 e4 30 01 00       	push   $0x130e4
   11ae0:	e8 60 10 00 00       	call   12b45 <log_printf>
   11ae5:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    list_node_t nodes[5];

    for (int i = 0; i < 5; i++)
   11ae8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11aef:	eb 3f                	jmp    11b30 <list_test+0xa0>
    {
        list_node_t *node = nodes + i;
   11af1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11af4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11afb:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11afe:	01 d0                	add    %edx,%eax
   11b00:	89 45 d0             	mov    %eax,-0x30(%ebp)
        log_printf("insert head to list : %d , 0x%x \n", i, (uint32_t)node);
   11b03:	8b 45 d0             	mov    -0x30(%ebp),%eax
   11b06:	83 ec 04             	sub    $0x4,%esp
   11b09:	50                   	push   %eax
   11b0a:	ff 75 f4             	pushl  -0xc(%ebp)
   11b0d:	68 14 31 01 00       	push   $0x13114
   11b12:	e8 2e 10 00 00       	call   12b45 <log_printf>
   11b17:	83 c4 10             	add    $0x10,%esp
        list_insert_first(&list, node);
   11b1a:	83 ec 08             	sub    $0x8,%esp
   11b1d:	ff 75 d0             	pushl  -0x30(%ebp)
   11b20:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b23:	50                   	push   %eax
   11b24:	e8 81 0d 00 00       	call   128aa <list_insert_first>
   11b29:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11b2c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11b30:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   11b34:	7e bb                	jle    11af1 <list_test+0x61>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11b36:	83 ec 0c             	sub    $0xc,%esp
   11b39:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b3c:	50                   	push   %eax
   11b3d:	e8 cc fe ff ff       	call   11a0e <list_count>
   11b42:	83 c4 10             	add    $0x10,%esp
   11b45:	89 c6                	mov    %eax,%esi
   11b47:	83 ec 0c             	sub    $0xc,%esp
   11b4a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b4d:	50                   	push   %eax
   11b4e:	e8 b0 fe ff ff       	call   11a03 <list_last>
   11b53:	83 c4 10             	add    $0x10,%esp
   11b56:	89 c3                	mov    %eax,%ebx
   11b58:	83 ec 0c             	sub    $0xc,%esp
   11b5b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b5e:	50                   	push   %eax
   11b5f:	e8 95 fe ff ff       	call   119f9 <list_first>
   11b64:	83 c4 10             	add    $0x10,%esp
   11b67:	56                   	push   %esi
   11b68:	53                   	push   %ebx
   11b69:	50                   	push   %eax
   11b6a:	68 e4 30 01 00       	push   $0x130e4
   11b6f:	e8 d1 0f 00 00       	call   12b45 <log_printf>
   11b74:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    list_init(&list);
   11b77:	83 ec 0c             	sub    $0xc,%esp
   11b7a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11b7d:	50                   	push   %eax
   11b7e:	e8 02 0d 00 00       	call   12885 <list_init>
   11b83:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11b86:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11b8d:	eb 3f                	jmp    11bce <list_test+0x13e>
    {
        list_node_t *node = nodes + i;
   11b8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b92:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11b99:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11b9c:	01 d0                	add    %edx,%eax
   11b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        log_printf("insert last to list : %d , 0x%x \n", i, (uint32_t)node);
   11ba1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
   11ba4:	83 ec 04             	sub    $0x4,%esp
   11ba7:	50                   	push   %eax
   11ba8:	ff 75 f0             	pushl  -0x10(%ebp)
   11bab:	68 38 31 01 00       	push   $0x13138
   11bb0:	e8 90 0f 00 00       	call   12b45 <log_printf>
   11bb5:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&list, node);
   11bb8:	83 ec 08             	sub    $0x8,%esp
   11bbb:	ff 75 d4             	pushl  -0x2c(%ebp)
   11bbe:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11bc1:	50                   	push   %eax
   11bc2:	e8 43 0d 00 00       	call   1290a <list_insert_last>
   11bc7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11bca:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11bce:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   11bd2:	7e bb                	jle    11b8f <list_test+0xff>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11bd4:	83 ec 0c             	sub    $0xc,%esp
   11bd7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11bda:	50                   	push   %eax
   11bdb:	e8 2e fe ff ff       	call   11a0e <list_count>
   11be0:	83 c4 10             	add    $0x10,%esp
   11be3:	89 c6                	mov    %eax,%esi
   11be5:	83 ec 0c             	sub    $0xc,%esp
   11be8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11beb:	50                   	push   %eax
   11bec:	e8 12 fe ff ff       	call   11a03 <list_last>
   11bf1:	83 c4 10             	add    $0x10,%esp
   11bf4:	89 c3                	mov    %eax,%ebx
   11bf6:	83 ec 0c             	sub    $0xc,%esp
   11bf9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11bfc:	50                   	push   %eax
   11bfd:	e8 f7 fd ff ff       	call   119f9 <list_first>
   11c02:	83 c4 10             	add    $0x10,%esp
   11c05:	56                   	push   %esi
   11c06:	53                   	push   %ebx
   11c07:	50                   	push   %eax
   11c08:	68 e4 30 01 00       	push   $0x130e4
   11c0d:	e8 33 0f 00 00       	call   12b45 <log_printf>
   11c12:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    // remove first
    for (int i = 0; i < 5; i++)
   11c15:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   11c1c:	eb 2d                	jmp    11c4b <list_test+0x1bb>
    {
        list_node_t *node = list_remove_first(&list);
   11c1e:	83 ec 0c             	sub    $0xc,%esp
   11c21:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c24:	50                   	push   %eax
   11c25:	e8 44 0d 00 00       	call   1296e <list_remove_first>
   11c2a:	83 c4 10             	add    $0x10,%esp
   11c2d:	89 45 d8             	mov    %eax,-0x28(%ebp)
        log_printf("remove head to list : %d , 0x%x \n", i, (uint32_t)node);
   11c30:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11c33:	83 ec 04             	sub    $0x4,%esp
   11c36:	50                   	push   %eax
   11c37:	ff 75 ec             	pushl  -0x14(%ebp)
   11c3a:	68 5c 31 01 00       	push   $0x1315c
   11c3f:	e8 01 0f 00 00       	call   12b45 <log_printf>
   11c44:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11c47:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   11c4b:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)
   11c4f:	7e cd                	jle    11c1e <list_test+0x18e>
    }

    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11c51:	83 ec 0c             	sub    $0xc,%esp
   11c54:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c57:	50                   	push   %eax
   11c58:	e8 b1 fd ff ff       	call   11a0e <list_count>
   11c5d:	83 c4 10             	add    $0x10,%esp
   11c60:	89 c6                	mov    %eax,%esi
   11c62:	83 ec 0c             	sub    $0xc,%esp
   11c65:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c68:	50                   	push   %eax
   11c69:	e8 95 fd ff ff       	call   11a03 <list_last>
   11c6e:	83 c4 10             	add    $0x10,%esp
   11c71:	89 c3                	mov    %eax,%ebx
   11c73:	83 ec 0c             	sub    $0xc,%esp
   11c76:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c79:	50                   	push   %eax
   11c7a:	e8 7a fd ff ff       	call   119f9 <list_first>
   11c7f:	83 c4 10             	add    $0x10,%esp
   11c82:	56                   	push   %esi
   11c83:	53                   	push   %ebx
   11c84:	50                   	push   %eax
   11c85:	68 e4 30 01 00       	push   $0x130e4
   11c8a:	e8 b6 0e 00 00       	call   12b45 <log_printf>
   11c8f:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));

    // remove node
    list_init(&list);
   11c92:	83 ec 0c             	sub    $0xc,%esp
   11c95:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11c98:	50                   	push   %eax
   11c99:	e8 e7 0b 00 00       	call   12885 <list_init>
   11c9e:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11ca1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   11ca8:	eb 28                	jmp    11cd2 <list_test+0x242>
    {
        list_node_t *node = nodes + i;
   11caa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11cad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11cb4:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11cb7:	01 d0                	add    %edx,%eax
   11cb9:	89 45 dc             	mov    %eax,-0x24(%ebp)
        list_insert_last(&list, node);
   11cbc:	83 ec 08             	sub    $0x8,%esp
   11cbf:	ff 75 dc             	pushl  -0x24(%ebp)
   11cc2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11cc5:	50                   	push   %eax
   11cc6:	e8 3f 0c 00 00       	call   1290a <list_insert_last>
   11ccb:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11cce:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   11cd2:	83 7d e8 04          	cmpl   $0x4,-0x18(%ebp)
   11cd6:	7e d2                	jle    11caa <list_test+0x21a>
    }

    for (int i = 0; i < 5; i++)
   11cd8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
   11cdf:	eb 3f                	jmp    11d20 <list_test+0x290>
    {
        list_node_t *node = nodes + i;
   11ce1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ce4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   11ceb:	8d 45 9c             	lea    -0x64(%ebp),%eax
   11cee:	01 d0                	add    %edx,%eax
   11cf0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        list_remove(&list, node);
   11cf3:	83 ec 08             	sub    $0x8,%esp
   11cf6:	ff 75 e0             	pushl  -0x20(%ebp)
   11cf9:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11cfc:	50                   	push   %eax
   11cfd:	e8 e5 0c 00 00       	call   129e7 <list_remove>
   11d02:	83 c4 10             	add    $0x10,%esp
        log_printf("remove node to list : %d , 0x%x \n", i, (uint32_t)node);
   11d05:	8b 45 e0             	mov    -0x20(%ebp),%eax
   11d08:	83 ec 04             	sub    $0x4,%esp
   11d0b:	50                   	push   %eax
   11d0c:	ff 75 e4             	pushl  -0x1c(%ebp)
   11d0f:	68 80 31 01 00       	push   $0x13180
   11d14:	e8 2c 0e 00 00       	call   12b45 <log_printf>
   11d19:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 5; i++)
   11d1c:	83 45 e4 01          	addl   $0x1,-0x1c(%ebp)
   11d20:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
   11d24:	7e bb                	jle    11ce1 <list_test+0x251>
    }
    log_printf("list: first = 0x%x , last = 0x%x ,count = %d\n",
   11d26:	83 ec 0c             	sub    $0xc,%esp
   11d29:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d2c:	50                   	push   %eax
   11d2d:	e8 dc fc ff ff       	call   11a0e <list_count>
   11d32:	83 c4 10             	add    $0x10,%esp
   11d35:	89 c6                	mov    %eax,%esi
   11d37:	83 ec 0c             	sub    $0xc,%esp
   11d3a:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d3d:	50                   	push   %eax
   11d3e:	e8 c0 fc ff ff       	call   11a03 <list_last>
   11d43:	83 c4 10             	add    $0x10,%esp
   11d46:	89 c3                	mov    %eax,%ebx
   11d48:	83 ec 0c             	sub    $0xc,%esp
   11d4b:	8d 45 c4             	lea    -0x3c(%ebp),%eax
   11d4e:	50                   	push   %eax
   11d4f:	e8 a5 fc ff ff       	call   119f9 <list_first>
   11d54:	83 c4 10             	add    $0x10,%esp
   11d57:	56                   	push   %esi
   11d58:	53                   	push   %ebx
   11d59:	50                   	push   %eax
   11d5a:	68 e4 30 01 00       	push   $0x130e4
   11d5f:	e8 e1 0d 00 00       	call   12b45 <log_printf>
   11d64:	83 c4 10             	add    $0x10,%esp
               list_first(&list), list_last(&list), list_count(&list));
}
   11d67:	90                   	nop
   11d68:	8d 65 f8             	lea    -0x8(%ebp),%esp
   11d6b:	5b                   	pop    %ebx
   11d6c:	5e                   	pop    %esi
   11d6d:	5d                   	pop    %ebp
   11d6e:	c3                   	ret    

00011d6f <init_main>:

void init_main()
{
   11d6f:	55                   	push   %ebp
   11d70:	89 e5                	mov    %esp,%ebp
   11d72:	83 ec 18             	sub    $0x18,%esp
    // int a = 3 / 0;
    log_printf("Kernel is running . . .");
   11d75:	83 ec 0c             	sub    $0xc,%esp
   11d78:	68 a2 31 01 00       	push   $0x131a2
   11d7d:	e8 c3 0d 00 00       	call   12b45 <log_printf>
   11d82:	83 c4 10             	add    $0x10,%esp
    log_printf("Version:%s", OS_VERSION);
   11d85:	83 ec 08             	sub    $0x8,%esp
   11d88:	68 ba 31 01 00       	push   $0x131ba
   11d8d:	68 c0 31 01 00       	push   $0x131c0
   11d92:	e8 ae 0d 00 00       	call   12b45 <log_printf>
   11d97:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, "init task", (uint32_t)first_task_entry, (uint32_t)&first_task_stack[1024]); // x86栈地址由高到低增长 ,同时init_task需要一个单独的栈空间。
   11d9a:	ba 00 a0 01 00       	mov    $0x1a000,%edx
   11d9f:	b8 57 1a 01 00       	mov    $0x11a57,%eax
   11da4:	52                   	push   %edx
   11da5:	50                   	push   %eax
   11da6:	68 cb 31 01 00       	push   $0x131cb
   11dab:	68 20 8f 01 00       	push   $0x18f20
   11db0:	e8 d4 ed ff ff       	call   10b89 <task_init>
   11db5:	83 c4 10             	add    $0x10,%esp
    task_first_init();
   11db8:	e8 68 ef ff ff       	call   10d25 <task_first_init>
    // list_test();

    sem_init(&sem, 0);   // 初始化信号量
   11dbd:	83 ec 08             	sub    $0x8,%esp
   11dc0:	6a 00                	push   $0x0
   11dc2:	68 24 8e 01 00       	push   $0x18e24
   11dc7:	e8 c7 01 00 00       	call   11f93 <sem_init>
   11dcc:	83 c4 10             	add    $0x10,%esp
    irq_enable_global(); // 测试打开全局中断
   11dcf:	e8 32 fb ff ff       	call   11906 <irq_enable_global>

    int count = 0;
   11dd4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("init main , count is %d", count++);
   11ddb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dde:	8d 50 01             	lea    0x1(%eax),%edx
   11de1:	89 55 f4             	mov    %edx,-0xc(%ebp)
   11de4:	83 ec 08             	sub    $0x8,%esp
   11de7:	50                   	push   %eax
   11de8:	68 d5 31 01 00       	push   $0x131d5
   11ded:	e8 53 0d 00 00       	call   12b45 <log_printf>
   11df2:	83 c4 10             	add    $0x10,%esp
        sem_signal(&sem);
   11df5:	83 ec 0c             	sub    $0xc,%esp
   11df8:	68 24 8e 01 00       	push   $0x18e24
   11dfd:	e8 1f 02 00 00       	call   12021 <sem_signal>
   11e02:	83 c4 10             	add    $0x10,%esp
        log_printf("init main , count is %d", count++);
   11e05:	eb d4                	jmp    11ddb <init_main+0x6c>

00011e07 <list_count>:
{
   11e07:	55                   	push   %ebp
   11e08:	89 e5                	mov    %esp,%ebp
    return list->count;
   11e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   11e0d:	8b 40 08             	mov    0x8(%eax),%eax
}
   11e10:	5d                   	pop    %ebp
   11e11:	c3                   	ret    

00011e12 <mutex_init>:
 * @brief        : 互斥锁的初始化，包括上锁次数，锁的拥有进程为空，初始化等待队列
 * @param         {mutex_t} *mutex: 待初始化的互斥锁
 * @return        {*}
 **/
void mutex_init(mutex_t *mutex)
{
   11e12:	55                   	push   %ebp
   11e13:	89 e5                	mov    %esp,%ebp
   11e15:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   11e18:	8b 45 08             	mov    0x8(%ebp),%eax
   11e1b:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    mutex->owner = (task_t *)0;
   11e22:	8b 45 08             	mov    0x8(%ebp),%eax
   11e25:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    list_init(&mutex->wait_list);
   11e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e2f:	83 ec 0c             	sub    $0xc,%esp
   11e32:	50                   	push   %eax
   11e33:	e8 4d 0a 00 00       	call   12885 <list_init>
   11e38:	83 c4 10             	add    $0x10,%esp
}
   11e3b:	90                   	nop
   11e3c:	c9                   	leave  
   11e3d:	c3                   	ret    

00011e3e <mutex_lock>:
 * @brief        : 对互斥锁进行上锁，未上锁则上锁（次数加1，拥有者为上锁进程）；已上锁，且为当前进程上的锁，次数增加即可；已上锁，但非当前进程所上的，
 * @param         {mutex_t} *mutex: 需要上锁的互斥锁
 * @return        {*}
 **/
void mutex_lock(mutex_t *mutex)
{
   11e3e:	55                   	push   %ebp
   11e3f:	89 e5                	mov    %esp,%ebp
   11e41:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11e44:	e8 c8 fa ff ff       	call   11911 <irq_enter_protection>
   11e49:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *curr = task_current();
   11e4c:	e8 cd ea ff ff       	call   1091e <task_current>
   11e51:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) // 未上锁
   11e54:	8b 45 08             	mov    0x8(%ebp),%eax
   11e57:	8b 40 10             	mov    0x10(%eax),%eax
   11e5a:	85 c0                	test   %eax,%eax
   11e5c:	75 1a                	jne    11e78 <mutex_lock+0x3a>
    {
        mutex->locked_count++; // 上锁
   11e5e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e61:	8b 40 10             	mov    0x10(%eax),%eax
   11e64:	8d 50 01             	lea    0x1(%eax),%edx
   11e67:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6a:	89 50 10             	mov    %edx,0x10(%eax)
        mutex->owner = curr;   // 锁的拥有者为当前执行的进程
   11e6d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e70:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11e73:	89 50 0c             	mov    %edx,0xc(%eax)
   11e76:	eb 45                	jmp    11ebd <mutex_lock+0x7f>
    }
    else if (mutex->owner == curr) // 已经上锁，且为当前进程再次上锁
   11e78:	8b 45 08             	mov    0x8(%ebp),%eax
   11e7b:	8b 40 0c             	mov    0xc(%eax),%eax
   11e7e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e81:	75 11                	jne    11e94 <mutex_lock+0x56>
    {
        mutex->locked_count++; // 上锁次数增加即可
   11e83:	8b 45 08             	mov    0x8(%ebp),%eax
   11e86:	8b 40 10             	mov    0x10(%eax),%eax
   11e89:	8d 50 01             	lea    0x1(%eax),%edx
   11e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8f:	89 50 10             	mov    %edx,0x10(%eax)
   11e92:	eb 29                	jmp    11ebd <mutex_lock+0x7f>
    }
    else // 已经上锁，且为非当前进程再次上锁
    {
        task_set_block(curr);                                  // 当前进程需要等待，等待锁释放
   11e94:	83 ec 0c             	sub    $0xc,%esp
   11e97:	ff 75 f0             	pushl  -0x10(%ebp)
   11e9a:	e8 79 eb ff ff       	call   10a18 <task_set_block>
   11e9f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node); // 插入到等待队列
   11ea2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ea5:	8d 50 60             	lea    0x60(%eax),%edx
   11ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   11eab:	83 ec 08             	sub    $0x8,%esp
   11eae:	52                   	push   %edx
   11eaf:	50                   	push   %eax
   11eb0:	e8 55 0a 00 00       	call   1290a <list_insert_last>
   11eb5:	83 c4 10             	add    $0x10,%esp
        task_dispatch();                                       // 调度下一个任务
   11eb8:	e8 6b ea ff ff       	call   10928 <task_dispatch>
    }
    irq_leave_protection(state);
   11ebd:	83 ec 0c             	sub    $0xc,%esp
   11ec0:	ff 75 f4             	pushl  -0xc(%ebp)
   11ec3:	e8 61 fa ff ff       	call   11929 <irq_leave_protection>
   11ec8:	83 c4 10             	add    $0x10,%esp
}
   11ecb:	90                   	nop
   11ecc:	c9                   	leave  
   11ecd:	c3                   	ret    

00011ece <mutex_unlock>:
 * @param         {mutex_t} *mutex: 待解锁的互斥锁
 * @return        {void}
 * @note         : 此函数在中断保护状态下执行，确保操作的原子性
 **/
void mutex_unlock(mutex_t *mutex)
{
   11ece:	55                   	push   %ebp
   11ecf:	89 e5                	mov    %esp,%ebp
   11ed1:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11ed4:	e8 38 fa ff ff       	call   11911 <irq_enter_protection>
   11ed9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current(); // 获取当前进程
   11edc:	e8 3d ea ff ff       	call   1091e <task_current>
   11ee1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if (mutex->owner == curr) // 只有锁的持有者才能解锁
   11ee4:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee7:	8b 40 0c             	mov    0xc(%eax),%eax
   11eea:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11eed:	0f 85 84 00 00 00    	jne    11f77 <mutex_unlock+0xa9>
    {
        if (--mutex->locked_count == 0) // 锁完全释放
   11ef3:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef6:	8b 40 10             	mov    0x10(%eax),%eax
   11ef9:	8d 50 ff             	lea    -0x1(%eax),%edx
   11efc:	8b 45 08             	mov    0x8(%ebp),%eax
   11eff:	89 50 10             	mov    %edx,0x10(%eax)
   11f02:	8b 45 08             	mov    0x8(%ebp),%eax
   11f05:	8b 40 10             	mov    0x10(%eax),%eax
   11f08:	85 c0                	test   %eax,%eax
   11f0a:	75 6b                	jne    11f77 <mutex_unlock+0xa9>
        {
            mutex->owner = (task_t *)0; // 锁的拥有者清空
   11f0c:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)

            if (list_count(&mutex->wait_list)) // 等待队列非空
   11f16:	8b 45 08             	mov    0x8(%ebp),%eax
   11f19:	83 ec 0c             	sub    $0xc,%esp
   11f1c:	50                   	push   %eax
   11f1d:	e8 e5 fe ff ff       	call   11e07 <list_count>
   11f22:	83 c4 10             	add    $0x10,%esp
   11f25:	85 c0                	test   %eax,%eax
   11f27:	74 4e                	je     11f77 <mutex_unlock+0xa9>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list); // 取出等待队列头节点（第一个进程）
   11f29:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2c:	83 ec 0c             	sub    $0xc,%esp
   11f2f:	50                   	push   %eax
   11f30:	e8 39 0a 00 00       	call   1296e <list_remove_first>
   11f35:	83 c4 10             	add    $0x10,%esp
   11f38:	89 45 ec             	mov    %eax,-0x14(%ebp)

                task_t *task = list_node_parent(task_node, task_t, wait_node); // // 从节点获取对应的进程
   11f3b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f3f:	74 08                	je     11f49 <mutex_unlock+0x7b>
   11f41:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f44:	83 e8 60             	sub    $0x60,%eax
   11f47:	eb 05                	jmp    11f4e <mutex_unlock+0x80>
   11f49:	b8 00 00 00 00       	mov    $0x0,%eax
   11f4e:	89 45 e8             	mov    %eax,-0x18(%ebp)

                task_set_ready(task); // // 将任务从阻塞状态改为就绪状态
   11f51:	83 ec 0c             	sub    $0xc,%esp
   11f54:	ff 75 e8             	pushl  -0x18(%ebp)
   11f57:	e8 27 ea ff ff       	call   10983 <task_set_ready>
   11f5c:	83 c4 10             	add    $0x10,%esp

                mutex->locked_count = 1; // 当前进程获得该所，即上锁一次
   11f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   11f62:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)

                mutex->owner = task; // 更新锁的拥有者为当前进程
   11f69:	8b 45 08             	mov    0x8(%ebp),%eax
   11f6c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11f6f:	89 50 0c             	mov    %edx,0xc(%eax)

                task_dispatch(); // 调度该进程
   11f72:	e8 b1 e9 ff ff       	call   10928 <task_dispatch>
            }
        }
    }

    irq_leave_protection(state);
   11f77:	83 ec 0c             	sub    $0xc,%esp
   11f7a:	ff 75 f4             	pushl  -0xc(%ebp)
   11f7d:	e8 a7 f9 ff ff       	call   11929 <irq_leave_protection>
   11f82:	83 c4 10             	add    $0x10,%esp
   11f85:	90                   	nop
   11f86:	c9                   	leave  
   11f87:	c3                   	ret    

00011f88 <list_count>:
{
   11f88:	55                   	push   %ebp
   11f89:	89 e5                	mov    %esp,%ebp
    return list->count;
   11f8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11f91:	5d                   	pop    %ebp
   11f92:	c3                   	ret    

00011f93 <sem_init>:
 * @param         {sem_t} *sem: 待初始化的信号量
 * @param         {int} init_count: 初始计数值
 * @return        {*}
 **/
void sem_init(sem_t *sem, int init_count)
{
   11f93:	55                   	push   %ebp
   11f94:	89 e5                	mov    %esp,%ebp
   11f96:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   11f99:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9c:	8b 55 0c             	mov    0xc(%ebp),%edx
   11f9f:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   11fa1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa4:	83 c0 04             	add    $0x4,%eax
   11fa7:	83 ec 0c             	sub    $0xc,%esp
   11faa:	50                   	push   %eax
   11fab:	e8 d5 08 00 00       	call   12885 <list_init>
   11fb0:	83 c4 10             	add    $0x10,%esp
}
   11fb3:	90                   	nop
   11fb4:	c9                   	leave  
   11fb5:	c3                   	ret    

00011fb6 <sem_wait>:
 * @brief        : 等信号（p，wait)，如果当前信号量的计数值为0，则当前进程需等待，调度下一进程执行；反之。计数值减一，并继续执行
 * @param         {sem_t} *sem: 信号量
 * @return        {*}
 **/
void sem_wait(sem_t *sem)
{
   11fb6:	55                   	push   %ebp
   11fb7:	89 e5                	mov    %esp,%ebp
   11fb9:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11fbc:	e8 50 f9 ff ff       	call   11911 <irq_enter_protection>
   11fc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->count > 0)
   11fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc7:	8b 00                	mov    (%eax),%eax
   11fc9:	85 c0                	test   %eax,%eax
   11fcb:	7e 0f                	jle    11fdc <sem_wait+0x26>
    {
        sem->count--;
   11fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd0:	8b 00                	mov    (%eax),%eax
   11fd2:	8d 50 ff             	lea    -0x1(%eax),%edx
   11fd5:	8b 45 08             	mov    0x8(%ebp),%eax
   11fd8:	89 10                	mov    %edx,(%eax)
   11fda:	eb 34                	jmp    12010 <sem_wait+0x5a>
    }
    else
    {
        task_t *curr = task_current();
   11fdc:	e8 3d e9 ff ff       	call   1091e <task_current>
   11fe1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);                                // 阻塞当前进程
   11fe4:	83 ec 0c             	sub    $0xc,%esp
   11fe7:	ff 75 f0             	pushl  -0x10(%ebp)
   11fea:	e8 29 ea ff ff       	call   10a18 <task_set_block>
   11fef:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node); // 插入到等待队列中
   11ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ff5:	8d 50 60             	lea    0x60(%eax),%edx
   11ff8:	8b 45 08             	mov    0x8(%ebp),%eax
   11ffb:	83 c0 04             	add    $0x4,%eax
   11ffe:	83 ec 08             	sub    $0x8,%esp
   12001:	52                   	push   %edx
   12002:	50                   	push   %eax
   12003:	e8 02 09 00 00       	call   1290a <list_insert_last>
   12008:	83 c4 10             	add    $0x10,%esp
        task_dispatch();                                     // 调度下一进程
   1200b:	e8 18 e9 ff ff       	call   10928 <task_dispatch>
    }
    irq_leave_protection(state);
   12010:	83 ec 0c             	sub    $0xc,%esp
   12013:	ff 75 f4             	pushl  -0xc(%ebp)
   12016:	e8 0e f9 ff ff       	call   11929 <irq_leave_protection>
   1201b:	83 c4 10             	add    $0x10,%esp
}
   1201e:	90                   	nop
   1201f:	c9                   	leave  
   12020:	c3                   	ret    

00012021 <sem_signal>:
/**
 * @brief        : 发信号（v,signal），某些事件完成或某些资源到达，等待队列中有进程则插入就绪队列，否则，信号量计数值加1，
 * @return        {*}
 **/
void sem_signal(sem_t *sem)
{
   12021:	55                   	push   %ebp
   12022:	89 e5                	mov    %esp,%ebp
   12024:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12027:	e8 e5 f8 ff ff       	call   11911 <irq_enter_protection>
   1202c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&sem->wait_list)) // 等待队列中是否有进程在等待
   1202f:	8b 45 08             	mov    0x8(%ebp),%eax
   12032:	83 c0 04             	add    $0x4,%eax
   12035:	83 ec 0c             	sub    $0xc,%esp
   12038:	50                   	push   %eax
   12039:	e8 4a ff ff ff       	call   11f88 <list_count>
   1203e:	83 c4 10             	add    $0x10,%esp
   12041:	85 c0                	test   %eax,%eax
   12043:	74 40                	je     12085 <sem_signal+0x64>
    {
        list_node_t *node = list_remove_first(&sem->wait_list);   // 有则将取出等待队列中第一个进程
   12045:	8b 45 08             	mov    0x8(%ebp),%eax
   12048:	83 c0 04             	add    $0x4,%eax
   1204b:	83 ec 0c             	sub    $0xc,%esp
   1204e:	50                   	push   %eax
   1204f:	e8 1a 09 00 00       	call   1296e <list_remove_first>
   12054:	83 c4 10             	add    $0x10,%esp
   12057:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node); // 找到该进程
   1205a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1205e:	74 08                	je     12068 <sem_signal+0x47>
   12060:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12063:	83 e8 60             	sub    $0x60,%eax
   12066:	eb 05                	jmp    1206d <sem_signal+0x4c>
   12068:	b8 00 00 00 00       	mov    $0x0,%eax
   1206d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);                                     // 插入就绪队列
   12070:	83 ec 0c             	sub    $0xc,%esp
   12073:	ff 75 ec             	pushl  -0x14(%ebp)
   12076:	e8 08 e9 ff ff       	call   10983 <task_set_ready>
   1207b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();                                          // 调度下一个进程
   1207e:	e8 a5 e8 ff ff       	call   10928 <task_dispatch>
   12083:	eb 0d                	jmp    12092 <sem_signal+0x71>
    }
    else // 等待队列没有进程等待
    {
        sem->count++; // 计数值++，表示有新的资源
   12085:	8b 45 08             	mov    0x8(%ebp),%eax
   12088:	8b 00                	mov    (%eax),%eax
   1208a:	8d 50 01             	lea    0x1(%eax),%edx
   1208d:	8b 45 08             	mov    0x8(%ebp),%eax
   12090:	89 10                	mov    %edx,(%eax)
    }
    irq_leave_protection(state);
   12092:	83 ec 0c             	sub    $0xc,%esp
   12095:	ff 75 f4             	pushl  -0xc(%ebp)
   12098:	e8 8c f8 ff ff       	call   11929 <irq_leave_protection>
   1209d:	83 c4 10             	add    $0x10,%esp
}
   120a0:	90                   	nop
   120a1:	c9                   	leave  
   120a2:	c3                   	ret    

000120a3 <sem_count>:
 * @brief        : 返回当前信号量的计数值
 * @param         {sem_t} *sem: 须知晓计数值的信号量
 * @return        {int} 当前信号量的计数值
 **/
int sem_count(sem_t *sem)
{
   120a3:	55                   	push   %ebp
   120a4:	89 e5                	mov    %esp,%ebp
   120a6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   120a9:	e8 63 f8 ff ff       	call   11911 <irq_enter_protection>
   120ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   120b1:	8b 45 08             	mov    0x8(%ebp),%eax
   120b4:	8b 00                	mov    (%eax),%eax
   120b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(state);
   120b9:	83 ec 0c             	sub    $0xc,%esp
   120bc:	ff 75 f4             	pushl  -0xc(%ebp)
   120bf:	e8 65 f8 ff ff       	call   11929 <irq_leave_protection>
   120c4:	83 c4 10             	add    $0x10,%esp
    return count;
   120c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   120ca:	c9                   	leave  
   120cb:	c3                   	ret    

000120cc <bitmap_byte_count>:
 * @brief        : 获取所需要的字节数量
 * @param         {int} bit_count: 位图位数
 * @return        {int} 需要的字节数
 **/
int bitmap_byte_count(int bit_count)
{
   120cc:	55                   	push   %ebp
   120cd:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   120cf:	8b 45 08             	mov    0x8(%ebp),%eax
   120d2:	83 c0 07             	add    $0x7,%eax
   120d5:	8d 50 07             	lea    0x7(%eax),%edx
   120d8:	85 c0                	test   %eax,%eax
   120da:	0f 48 c2             	cmovs  %edx,%eax
   120dd:	c1 f8 03             	sar    $0x3,%eax
}
   120e0:	5d                   	pop    %ebp
   120e1:	c3                   	ret    

000120e2 <bitmap_init>:
 * @param         {int} count: 位图的总位数
 * @param         {int} init_bit: 初始化为0还是1
 * @return        {*}
 **/
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   120e2:	55                   	push   %ebp
   120e3:	89 e5                	mov    %esp,%ebp
   120e5:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   120e8:	8b 45 08             	mov    0x8(%ebp),%eax
   120eb:	8b 55 10             	mov    0x10(%ebp),%edx
   120ee:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   120f0:	8b 45 08             	mov    0x8(%ebp),%eax
   120f3:	8b 55 0c             	mov    0xc(%ebp),%edx
   120f6:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   120f9:	8b 45 08             	mov    0x8(%ebp),%eax
   120fc:	8b 00                	mov    (%eax),%eax
   120fe:	50                   	push   %eax
   120ff:	e8 c8 ff ff ff       	call   120cc <bitmap_byte_count>
   12104:	83 c4 04             	add    $0x4,%esp
   12107:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 对该位图所在区域清空
    kernel_memset((void *)bitmap->bits, init_bit ? 0xFF : 0, bytes);
   1210a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1210e:	74 07                	je     12117 <bitmap_init+0x35>
   12110:	ba ff 00 00 00       	mov    $0xff,%edx
   12115:	eb 05                	jmp    1211c <bitmap_init+0x3a>
   12117:	ba 00 00 00 00       	mov    $0x0,%edx
   1211c:	8b 45 08             	mov    0x8(%ebp),%eax
   1211f:	8b 40 04             	mov    0x4(%eax),%eax
   12122:	83 ec 04             	sub    $0x4,%esp
   12125:	ff 75 f4             	pushl  -0xc(%ebp)
   12128:	52                   	push   %edx
   12129:	50                   	push   %eax
   1212a:	e8 ab 03 00 00       	call   124da <kernel_memset>
   1212f:	83 c4 10             	add    $0x10,%esp
}
   12132:	90                   	nop
   12133:	c9                   	leave  
   12134:	c3                   	ret    

00012135 <bitmap_get_bit>:
 * @param         {bitmap_t} *bitmap: 位图指针
 * @param         {int} index: 指定位图的索引
 * @return        {int} 1为已被分配，0为未被分配
 **/
int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   12135:	55                   	push   %ebp
   12136:	89 e5                	mov    %esp,%ebp
   12138:	53                   	push   %ebx
    // index/8 第几个字节
    // index%8 index在字节中的偏移量
    // @todo
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   12139:	8b 45 08             	mov    0x8(%ebp),%eax
   1213c:	8b 50 04             	mov    0x4(%eax),%edx
   1213f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12142:	8d 48 07             	lea    0x7(%eax),%ecx
   12145:	85 c0                	test   %eax,%eax
   12147:	0f 48 c1             	cmovs  %ecx,%eax
   1214a:	c1 f8 03             	sar    $0x3,%eax
   1214d:	01 d0                	add    %edx,%eax
   1214f:	0f b6 00             	movzbl (%eax),%eax
   12152:	0f b6 d8             	movzbl %al,%ebx
   12155:	8b 45 0c             	mov    0xc(%ebp),%eax
   12158:	99                   	cltd   
   12159:	c1 ea 1d             	shr    $0x1d,%edx
   1215c:	01 d0                	add    %edx,%eax
   1215e:	83 e0 07             	and    $0x7,%eax
   12161:	29 d0                	sub    %edx,%eax
   12163:	89 c1                	mov    %eax,%ecx
   12165:	d3 fb                	sar    %cl,%ebx
   12167:	89 d8                	mov    %ebx,%eax
   12169:	83 e0 01             	and    $0x1,%eax
}
   1216c:	5b                   	pop    %ebx
   1216d:	5d                   	pop    %ebp
   1216e:	c3                   	ret    

0001216f <bitmap_set_bit>:
 * @param         {int} count: 设置多少个连续的位
 * @param         {int} bit: 置0或1
 * @return        {*}
 **/
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   1216f:	55                   	push   %ebp
   12170:	89 e5                	mov    %esp,%ebp
   12172:	56                   	push   %esi
   12173:	53                   	push   %ebx
   12174:	83 ec 10             	sub    $0x10,%esp
    /**
     * @todo 后续考虑优化加速
     */
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   12177:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1217e:	e9 a2 00 00 00       	jmp    12225 <bitmap_set_bit+0xb6>
    {
        if (bit)
   12183:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12187:	74 4a                	je     121d3 <bitmap_set_bit+0x64>
        {
            // index / 8：确定目标位所在的字节位置
            // index % 8: 确定目标位所在的字节偏移位置0~7
            bitmap->bits[index / 8] |= 1 << (index % 8);
   12189:	8b 45 08             	mov    0x8(%ebp),%eax
   1218c:	8b 50 04             	mov    0x4(%eax),%edx
   1218f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12192:	8d 48 07             	lea    0x7(%eax),%ecx
   12195:	85 c0                	test   %eax,%eax
   12197:	0f 48 c1             	cmovs  %ecx,%eax
   1219a:	c1 f8 03             	sar    $0x3,%eax
   1219d:	89 c3                	mov    %eax,%ebx
   1219f:	89 d8                	mov    %ebx,%eax
   121a1:	01 d0                	add    %edx,%eax
   121a3:	0f b6 00             	movzbl (%eax),%eax
   121a6:	89 c6                	mov    %eax,%esi
   121a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ab:	99                   	cltd   
   121ac:	c1 ea 1d             	shr    $0x1d,%edx
   121af:	01 d0                	add    %edx,%eax
   121b1:	83 e0 07             	and    $0x7,%eax
   121b4:	29 d0                	sub    %edx,%eax
   121b6:	ba 01 00 00 00       	mov    $0x1,%edx
   121bb:	89 c1                	mov    %eax,%ecx
   121bd:	d3 e2                	shl    %cl,%edx
   121bf:	89 d0                	mov    %edx,%eax
   121c1:	89 f2                	mov    %esi,%edx
   121c3:	09 c2                	or     %eax,%edx
   121c5:	8b 45 08             	mov    0x8(%ebp),%eax
   121c8:	8b 40 04             	mov    0x4(%eax),%eax
   121cb:	89 d9                	mov    %ebx,%ecx
   121cd:	01 c8                	add    %ecx,%eax
   121cf:	88 10                	mov    %dl,(%eax)
   121d1:	eb 4a                	jmp    1221d <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   121d3:	8b 45 08             	mov    0x8(%ebp),%eax
   121d6:	8b 50 04             	mov    0x4(%eax),%edx
   121d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121dc:	8d 48 07             	lea    0x7(%eax),%ecx
   121df:	85 c0                	test   %eax,%eax
   121e1:	0f 48 c1             	cmovs  %ecx,%eax
   121e4:	c1 f8 03             	sar    $0x3,%eax
   121e7:	89 c3                	mov    %eax,%ebx
   121e9:	89 d8                	mov    %ebx,%eax
   121eb:	01 d0                	add    %edx,%eax
   121ed:	0f b6 00             	movzbl (%eax),%eax
   121f0:	89 c6                	mov    %eax,%esi
   121f2:	8b 45 0c             	mov    0xc(%ebp),%eax
   121f5:	99                   	cltd   
   121f6:	c1 ea 1d             	shr    $0x1d,%edx
   121f9:	01 d0                	add    %edx,%eax
   121fb:	83 e0 07             	and    $0x7,%eax
   121fe:	29 d0                	sub    %edx,%eax
   12200:	ba 01 00 00 00       	mov    $0x1,%edx
   12205:	89 c1                	mov    %eax,%ecx
   12207:	d3 e2                	shl    %cl,%edx
   12209:	89 d0                	mov    %edx,%eax
   1220b:	f7 d0                	not    %eax
   1220d:	89 f2                	mov    %esi,%edx
   1220f:	21 c2                	and    %eax,%edx
   12211:	8b 45 08             	mov    0x8(%ebp),%eax
   12214:	8b 40 04             	mov    0x4(%eax),%eax
   12217:	89 d9                	mov    %ebx,%ecx
   12219:	01 c8                	add    %ecx,%eax
   1221b:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   1221d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12221:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   12225:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12228:	3b 45 10             	cmp    0x10(%ebp),%eax
   1222b:	7d 0e                	jge    1223b <bitmap_set_bit+0xcc>
   1222d:	8b 45 08             	mov    0x8(%ebp),%eax
   12230:	8b 00                	mov    (%eax),%eax
   12232:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12235:	0f 8c 48 ff ff ff    	jl     12183 <bitmap_set_bit+0x14>
        }
    }
}
   1223b:	90                   	nop
   1223c:	83 c4 10             	add    $0x10,%esp
   1223f:	5b                   	pop    %ebx
   12240:	5e                   	pop    %esi
   12241:	5d                   	pop    %ebp
   12242:	c3                   	ret    

00012243 <bitmap_is_set>:
 * @param         {bitmap_t} *bitmap:位图指针
 * @param         {int} index: 需要检查的位置的索引
 * @return        {int} 1为已被设置；0为未被设置
 **/
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   12243:	55                   	push   %ebp
   12244:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12246:	ff 75 0c             	pushl  0xc(%ebp)
   12249:	ff 75 08             	pushl  0x8(%ebp)
   1224c:	e8 e4 fe ff ff       	call   12135 <bitmap_get_bit>
   12251:	83 c4 08             	add    $0x8,%esp
   12254:	85 c0                	test   %eax,%eax
   12256:	0f 95 c0             	setne  %al
   12259:	0f b6 c0             	movzbl %al,%eax
}
   1225c:	c9                   	leave  
   1225d:	c3                   	ret    

0001225e <bitmap_alloc_nbits>:
 * @param         {int} bit: 待设置的值1或0
 * @param         {int} count: 需要设置的位数
 * @return        {int} 连续分配的索引
 **/
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   1225e:	55                   	push   %ebp
   1225f:	89 e5                	mov    %esp,%ebp
   12261:	83 ec 10             	sub    $0x10,%esp
    /**
     * @todo 后续考虑优化
     */
    int search_index = 0;
   12264:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_index = -1;
   1226b:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_index < bitmap->bit_count)
   12272:	e9 91 00 00 00       	jmp    12308 <bitmap_alloc_nbits+0xaa>
    {
        if (bitmap_get_bit(bitmap, search_index) != bit)
   12277:	ff 75 fc             	pushl  -0x4(%ebp)
   1227a:	ff 75 08             	pushl  0x8(%ebp)
   1227d:	e8 b3 fe ff ff       	call   12135 <bitmap_get_bit>
   12282:	83 c4 08             	add    $0x8,%esp
   12285:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12288:	74 06                	je     12290 <bitmap_alloc_nbits+0x32>
        {
            search_index++;
   1228a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1228e:	eb 78                	jmp    12308 <bitmap_alloc_nbits+0xaa>
        }
        // 找到了
        ok_index = search_index;
   12290:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12293:	89 45 f8             	mov    %eax,-0x8(%ebp)
        int i = 0;
   12296:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        for (i = 1; (i < count) && (search_index < bitmap->bit_count); i++)
   1229d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   122a4:	eb 27                	jmp    122cd <bitmap_alloc_nbits+0x6f>
        {
            if (bitmap_get_bit(bitmap, search_index++) != bit)
   122a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122a9:	8d 50 01             	lea    0x1(%eax),%edx
   122ac:	89 55 fc             	mov    %edx,-0x4(%ebp)
   122af:	50                   	push   %eax
   122b0:	ff 75 08             	pushl  0x8(%ebp)
   122b3:	e8 7d fe ff ff       	call   12135 <bitmap_get_bit>
   122b8:	83 c4 08             	add    $0x8,%esp
   122bb:	39 45 0c             	cmp    %eax,0xc(%ebp)
   122be:	74 09                	je     122c9 <bitmap_alloc_nbits+0x6b>
            {
                ok_index = -1;
   122c0:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   122c7:	eb 16                	jmp    122df <bitmap_alloc_nbits+0x81>
        for (i = 1; (i < count) && (search_index < bitmap->bit_count); i++)
   122c9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122d0:	3b 45 10             	cmp    0x10(%ebp),%eax
   122d3:	7d 0a                	jge    122df <bitmap_alloc_nbits+0x81>
   122d5:	8b 45 08             	mov    0x8(%ebp),%eax
   122d8:	8b 00                	mov    (%eax),%eax
   122da:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   122dd:	7c c7                	jl     122a6 <bitmap_alloc_nbits+0x48>
            }
        }
        if (i >= count)
   122df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122e2:	3b 45 10             	cmp    0x10(%ebp),%eax
   122e5:	7c 21                	jl     12308 <bitmap_alloc_nbits+0xaa>
        {
            bitmap_set_bit(bitmap, ok_index, count, !bit);
   122e7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   122eb:	0f 94 c0             	sete   %al
   122ee:	0f b6 c0             	movzbl %al,%eax
   122f1:	50                   	push   %eax
   122f2:	ff 75 10             	pushl  0x10(%ebp)
   122f5:	ff 75 f8             	pushl  -0x8(%ebp)
   122f8:	ff 75 08             	pushl  0x8(%ebp)
   122fb:	e8 6f fe ff ff       	call   1216f <bitmap_set_bit>
   12300:	83 c4 10             	add    $0x10,%esp
            return ok_index;
   12303:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12306:	eb 13                	jmp    1231b <bitmap_alloc_nbits+0xbd>
    while (search_index < bitmap->bit_count)
   12308:	8b 45 08             	mov    0x8(%ebp),%eax
   1230b:	8b 00                	mov    (%eax),%eax
   1230d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   12310:	0f 8c 61 ff ff ff    	jl     12277 <bitmap_alloc_nbits+0x19>
        }
    }
    return -1;
   12316:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1231b:	c9                   	leave  
   1231c:	c3                   	ret    

0001231d <hlt>:
{
   1231d:	55                   	push   %ebp
   1231e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12320:	f4                   	hlt    
}
   12321:	90                   	nop
   12322:	5d                   	pop    %ebp
   12323:	c3                   	ret    

00012324 <kernel_strcpy>:
 * @param         {char *} dest:目的地址
 * @param         {char *} src:源字符串地址
 * @return        {*}
 **/
void kernel_strcpy(char *dest, const char *src)
{
   12324:	55                   	push   %ebp
   12325:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   12327:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1232b:	74 2f                	je     1235c <kernel_strcpy+0x38>
   1232d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12331:	74 29                	je     1235c <kernel_strcpy+0x38>
    {
        return;
    }
    while (*dest && *src)
   12333:	eb 0b                	jmp    12340 <kernel_strcpy+0x1c>
    {
        *dest = *src;
   12335:	8b 45 0c             	mov    0xc(%ebp),%eax
   12338:	0f b6 10             	movzbl (%eax),%edx
   1233b:	8b 45 08             	mov    0x8(%ebp),%eax
   1233e:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   12340:	8b 45 08             	mov    0x8(%ebp),%eax
   12343:	0f b6 00             	movzbl (%eax),%eax
   12346:	84 c0                	test   %al,%al
   12348:	74 0a                	je     12354 <kernel_strcpy+0x30>
   1234a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1234d:	0f b6 00             	movzbl (%eax),%eax
   12350:	84 c0                	test   %al,%al
   12352:	75 e1                	jne    12335 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   12354:	8b 45 08             	mov    0x8(%ebp),%eax
   12357:	c6 00 00             	movb   $0x0,(%eax)
   1235a:	eb 01                	jmp    1235d <kernel_strcpy+0x39>
        return;
   1235c:	90                   	nop
}
   1235d:	5d                   	pop    %ebp
   1235e:	c3                   	ret    

0001235f <kernel_strncpy>:
 * @param         {char *} src:源字符串地址
 * @param         {int} size:大小
 * @return        {*}
 **/
void kernel_strncpy(char *dest, const char *src, int size)
{
   1235f:	55                   	push   %ebp
   12360:	89 e5                	mov    %esp,%ebp
   12362:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   12365:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12369:	74 61                	je     123cc <kernel_strncpy+0x6d>
   1236b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1236f:	74 5b                	je     123cc <kernel_strncpy+0x6d>
   12371:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12375:	74 55                	je     123cc <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   12377:	8b 45 08             	mov    0x8(%ebp),%eax
   1237a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   1237d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12380:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   12383:	eb 17                	jmp    1239c <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   12385:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12388:	8d 42 01             	lea    0x1(%edx),%eax
   1238b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1238e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12391:	8d 48 01             	lea    0x1(%eax),%ecx
   12394:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12397:	0f b6 12             	movzbl (%edx),%edx
   1239a:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   1239c:	8b 45 10             	mov    0x10(%ebp),%eax
   1239f:	8d 50 ff             	lea    -0x1(%eax),%edx
   123a2:	89 55 10             	mov    %edx,0x10(%ebp)
   123a5:	85 c0                	test   %eax,%eax
   123a7:	7e 0a                	jle    123b3 <kernel_strncpy+0x54>
   123a9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   123ac:	0f b6 00             	movzbl (%eax),%eax
   123af:	84 c0                	test   %al,%al
   123b1:	75 d2                	jne    12385 <kernel_strncpy+0x26>
    }

    if (size == 0)
   123b3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   123b7:	75 0b                	jne    123c4 <kernel_strncpy+0x65>
    {

        *(d - 1) = '\0';
   123b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123bc:	83 e8 01             	sub    $0x1,%eax
   123bf:	c6 00 00             	movb   $0x0,(%eax)
   123c2:	eb 09                	jmp    123cd <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   123c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   123c7:	c6 00 00             	movb   $0x0,(%eax)
   123ca:	eb 01                	jmp    123cd <kernel_strncpy+0x6e>
        return;
   123cc:	90                   	nop
    }
}
   123cd:	c9                   	leave  
   123ce:	c3                   	ret    

000123cf <kernel_strncmp>:
 * @param         {char *} s2: 字符串2
 * @param         {int} size: 需要比较的字符串长度
 * @return        {*}相等返回0 ,否则返回-1
 **/
int kernel_strncmp(const char *s1, const char *s2, int size)
{
   123cf:	55                   	push   %ebp
   123d0:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   123d2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   123d6:	74 06                	je     123de <kernel_strncmp+0xf>
   123d8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   123dc:	75 0f                	jne    123ed <kernel_strncmp+0x1e>
    {
        return -1;
   123de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   123e3:	eb 69                	jmp    1244e <kernel_strncmp+0x7f>
    }
    while (*s1 && *s2 && (*s1 == *s2) && size--)
    {
        s1++;
   123e5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   123e9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size--)
   123ed:	8b 45 08             	mov    0x8(%ebp),%eax
   123f0:	0f b6 00             	movzbl (%eax),%eax
   123f3:	84 c0                	test   %al,%al
   123f5:	74 27                	je     1241e <kernel_strncmp+0x4f>
   123f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   123fa:	0f b6 00             	movzbl (%eax),%eax
   123fd:	84 c0                	test   %al,%al
   123ff:	74 1d                	je     1241e <kernel_strncmp+0x4f>
   12401:	8b 45 08             	mov    0x8(%ebp),%eax
   12404:	0f b6 10             	movzbl (%eax),%edx
   12407:	8b 45 0c             	mov    0xc(%ebp),%eax
   1240a:	0f b6 00             	movzbl (%eax),%eax
   1240d:	38 c2                	cmp    %al,%dl
   1240f:	75 0d                	jne    1241e <kernel_strncmp+0x4f>
   12411:	8b 45 10             	mov    0x10(%ebp),%eax
   12414:	8d 50 ff             	lea    -0x1(%eax),%edx
   12417:	89 55 10             	mov    %edx,0x10(%ebp)
   1241a:	85 c0                	test   %eax,%eax
   1241c:	75 c7                	jne    123e5 <kernel_strncmp+0x16>
    }
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1241e:	8b 45 08             	mov    0x8(%ebp),%eax
   12421:	0f b6 00             	movzbl (%eax),%eax
   12424:	84 c0                	test   %al,%al
   12426:	74 21                	je     12449 <kernel_strncmp+0x7a>
   12428:	8b 45 0c             	mov    0xc(%ebp),%eax
   1242b:	0f b6 00             	movzbl (%eax),%eax
   1242e:	84 c0                	test   %al,%al
   12430:	74 17                	je     12449 <kernel_strncmp+0x7a>
   12432:	8b 45 08             	mov    0x8(%ebp),%eax
   12435:	0f b6 10             	movzbl (%eax),%edx
   12438:	8b 45 0c             	mov    0xc(%ebp),%eax
   1243b:	0f b6 00             	movzbl (%eax),%eax
   1243e:	38 c2                	cmp    %al,%dl
   12440:	74 07                	je     12449 <kernel_strncmp+0x7a>
   12442:	b8 01 00 00 00       	mov    $0x1,%eax
   12447:	eb 05                	jmp    1244e <kernel_strncmp+0x7f>
   12449:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1244e:	5d                   	pop    %ebp
   1244f:	c3                   	ret    

00012450 <kernel_strlen>:
 * @brief        : 字符串的长度
 * @param         {char *} str: 字符串
 * @return        {*} 字符串的长度
 **/
int kernel_strlen(const char *str)
{
   12450:	55                   	push   %ebp
   12451:	89 e5                	mov    %esp,%ebp
   12453:	83 ec 10             	sub    $0x10,%esp
    if (!str)
   12456:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1245a:	75 07                	jne    12463 <kernel_strlen+0x13>
    {
        return 0;
   1245c:	b8 00 00 00 00       	mov    $0x0,%eax
   12461:	eb 26                	jmp    12489 <kernel_strlen+0x39>
    }
    const char *c = str;
   12463:	8b 45 08             	mov    0x8(%ebp),%eax
   12466:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int len = 0;
   12469:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   12470:	eb 04                	jmp    12476 <kernel_strlen+0x26>
    {
        len++;
   12472:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   12476:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12479:	8d 50 01             	lea    0x1(%eax),%edx
   1247c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1247f:	0f b6 00             	movzbl (%eax),%eax
   12482:	84 c0                	test   %al,%al
   12484:	75 ec                	jne    12472 <kernel_strlen+0x22>
    }
    return len;
   12486:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12489:	c9                   	leave  
   1248a:	c3                   	ret    

0001248b <kernel_memcpy>:
 * @param         {void *} src: 源地址
 * @param         {int} size: 需要复制的字节大小
 * @return        {*}
 **/
void kernel_memcpy(void *dest, void *src, int size)
{
   1248b:	55                   	push   %ebp
   1248c:	89 e5                	mov    %esp,%ebp
   1248e:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   12491:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12495:	74 40                	je     124d7 <kernel_memcpy+0x4c>
   12497:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1249b:	74 3a                	je     124d7 <kernel_memcpy+0x4c>
   1249d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124a1:	74 34                	je     124d7 <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   124a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   124a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   124a9:	8b 45 08             	mov    0x8(%ebp),%eax
   124ac:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   124af:	eb 17                	jmp    124c8 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   124b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
   124b4:	8d 42 01             	lea    0x1(%edx),%eax
   124b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
   124ba:	8b 45 f8             	mov    -0x8(%ebp),%eax
   124bd:	8d 48 01             	lea    0x1(%eax),%ecx
   124c0:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   124c3:	0f b6 12             	movzbl (%edx),%edx
   124c6:	88 10                	mov    %dl,(%eax)
    while (size--)
   124c8:	8b 45 10             	mov    0x10(%ebp),%eax
   124cb:	8d 50 ff             	lea    -0x1(%eax),%edx
   124ce:	89 55 10             	mov    %edx,0x10(%ebp)
   124d1:	85 c0                	test   %eax,%eax
   124d3:	75 dc                	jne    124b1 <kernel_memcpy+0x26>
   124d5:	eb 01                	jmp    124d8 <kernel_memcpy+0x4d>
        return;
   124d7:	90                   	nop
    }
}
   124d8:	c9                   	leave  
   124d9:	c3                   	ret    

000124da <kernel_memset>:
 * @param         {uint8_t} v: 设置成的数据
 * @param         {int} size: 字节大小
 * @return        {*}
 **/
void kernel_memset(void *dest, uint8_t v, int size)
{
   124da:	55                   	push   %ebp
   124db:	89 e5                	mov    %esp,%ebp
   124dd:	83 ec 14             	sub    $0x14,%esp
   124e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e3:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   124e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   124ea:	74 2c                	je     12518 <kernel_memset+0x3e>
   124ec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   124f0:	74 26                	je     12518 <kernel_memset+0x3e>
    {
        return;
    }
    uint8_t *d = dest;
   124f2:	8b 45 08             	mov    0x8(%ebp),%eax
   124f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   124f8:	eb 0f                	jmp    12509 <kernel_memset+0x2f>
    {
        *d++ = v;
   124fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   124fd:	8d 50 01             	lea    0x1(%eax),%edx
   12500:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12503:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   12507:	88 10                	mov    %dl,(%eax)
    while (size--)
   12509:	8b 45 10             	mov    0x10(%ebp),%eax
   1250c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1250f:	89 55 10             	mov    %edx,0x10(%ebp)
   12512:	85 c0                	test   %eax,%eax
   12514:	75 e4                	jne    124fa <kernel_memset+0x20>
   12516:	eb 01                	jmp    12519 <kernel_memset+0x3f>
        return;
   12518:	90                   	nop
    }
}
   12519:	c9                   	leave  
   1251a:	c3                   	ret    

0001251b <kernel_memcmp>:
 * @param         {void *} d2:数据d2的地址
 * @param         {int} size: 比较的字节大小
 * @return        {*}d1=d2返回0，相等返回非0;
 **/
int kernel_memcmp(void *d1, void *d2, int size)
{
   1251b:	55                   	push   %ebp
   1251c:	89 e5                	mov    %esp,%ebp
   1251e:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2 || !size)
   12521:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12525:	74 0c                	je     12533 <kernel_memcmp+0x18>
   12527:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1252b:	74 06                	je     12533 <kernel_memcmp+0x18>
   1252d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12531:	75 07                	jne    1253a <kernel_memcmp+0x1f>
    {
        return 1;
   12533:	b8 01 00 00 00       	mov    $0x1,%eax
   12538:	eb 43                	jmp    1257d <kernel_memcmp+0x62>
    }
    uint8_t *p_d1 = d1;
   1253a:	8b 45 08             	mov    0x8(%ebp),%eax
   1253d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = d2;
   12540:	8b 45 0c             	mov    0xc(%ebp),%eax
   12543:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   12546:	eb 23                	jmp    1256b <kernel_memcmp+0x50>
    {
        if (*p_d1++ != *p_d2++)
   12548:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1254b:	8d 50 01             	lea    0x1(%eax),%edx
   1254e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12551:	0f b6 08             	movzbl (%eax),%ecx
   12554:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12557:	8d 50 01             	lea    0x1(%eax),%edx
   1255a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1255d:	0f b6 00             	movzbl (%eax),%eax
   12560:	38 c1                	cmp    %al,%cl
   12562:	74 07                	je     1256b <kernel_memcmp+0x50>
        {
            return 1;
   12564:	b8 01 00 00 00       	mov    $0x1,%eax
   12569:	eb 12                	jmp    1257d <kernel_memcmp+0x62>
    while (size--)
   1256b:	8b 45 10             	mov    0x10(%ebp),%eax
   1256e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12571:	89 55 10             	mov    %edx,0x10(%ebp)
   12574:	85 c0                	test   %eax,%eax
   12576:	75 d0                	jne    12548 <kernel_memcmp+0x2d>
        }
    }
    return 0;
   12578:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1257d:	c9                   	leave  
   1257e:	c3                   	ret    

0001257f <kernel_sprintf>:
 * @param         {char} *buf: 输出字符缓冲区
 * @param         {char} *fmt: 格式化字符串
 * @return        {*}
 **/
void kernel_sprintf(char *buf, const char *fmt, ...)
{
   1257f:	55                   	push   %ebp
   12580:	89 e5                	mov    %esp,%ebp
   12582:	83 ec 18             	sub    $0x18,%esp
    va_list args;                          // 可变参数存储变量
    kernel_memset(buf, '\0', sizeof(buf)); // 清空缓冲区
   12585:	6a 04                	push   $0x4
   12587:	6a 00                	push   $0x0
   12589:	ff 75 08             	pushl  0x8(%ebp)
   1258c:	e8 49 ff ff ff       	call   124da <kernel_memset>
   12591:	83 c4 0c             	add    $0xc,%esp
    va_start(args, fmt);                   // 将fmt后的可变参数存储到args中
   12594:	8d 45 10             	lea    0x10(%ebp),%eax
   12597:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buf, fmt, args);       // 将可变参数放入缓冲区
   1259a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1259d:	83 ec 04             	sub    $0x4,%esp
   125a0:	50                   	push   %eax
   125a1:	ff 75 0c             	pushl  0xc(%ebp)
   125a4:	ff 75 08             	pushl  0x8(%ebp)
   125a7:	e8 45 01 00 00       	call   126f1 <kernel_vsprintf>
   125ac:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   125af:	90                   	nop
   125b0:	c9                   	leave  
   125b1:	c3                   	ret    

000125b2 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   125b2:	55                   	push   %ebp
   125b3:	89 e5                	mov    %esp,%ebp
   125b5:	53                   	push   %ebx
   125b6:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   125b9:	8b 45 08             	mov    0x8(%ebp),%eax
   125bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   125bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   125c2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   125c5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   125c9:	74 1d                	je     125e8 <kernel_itoa+0x36>
   125cb:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   125cf:	74 17                	je     125e8 <kernel_itoa+0x36>
   125d1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   125d5:	74 11                	je     125e8 <kernel_itoa+0x36>
   125d7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   125db:	74 0b                	je     125e8 <kernel_itoa+0x36>
    {
        *p = '\0';
   125dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125e0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   125e3:	e9 03 01 00 00       	jmp    126eb <kernel_itoa+0x139>
    }
    // 只支持十进制负数
    int signed_num = 0;
   125e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   125ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125f3:	79 19                	jns    1260e <kernel_itoa+0x5c>
   125f5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   125f9:	75 13                	jne    1260e <kernel_itoa+0x5c>
    {
        *p++ = '-';
   125fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125fe:	8d 50 01             	lea    0x1(%eax),%edx
   12601:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12604:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12607:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   1260e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12612:	74 3b                	je     1264f <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   12614:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1261a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1261d:	99                   	cltd   
   1261e:	f7 7d 10             	idivl  0x10(%ebp)
   12621:	89 d0                	mov    %edx,%eax
   12623:	83 c0 0f             	add    $0xf,%eax
   12626:	01 c8                	add    %ecx,%eax
   12628:	0f b6 00             	movzbl (%eax),%eax
   1262b:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1262e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12631:	8d 50 01             	lea    0x1(%eax),%edx
   12634:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12637:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1263b:	88 10                	mov    %dl,(%eax)
            num /= base;
   1263d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12640:	99                   	cltd   
   12641:	f7 7d 10             	idivl  0x10(%ebp)
   12644:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   12647:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1264b:	75 c7                	jne    12614 <kernel_itoa+0x62>
   1264d:	eb 4b                	jmp    1269a <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   1264f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12652:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   12655:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   1265b:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1265e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12661:	ba 00 00 00 00       	mov    $0x0,%edx
   12666:	f7 f3                	div    %ebx
   12668:	89 d0                	mov    %edx,%eax
   1266a:	83 c0 0f             	add    $0xf,%eax
   1266d:	01 c8                	add    %ecx,%eax
   1266f:	0f b6 00             	movzbl (%eax),%eax
   12672:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12675:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12678:	8d 50 01             	lea    0x1(%eax),%edx
   1267b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1267e:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12682:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12684:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12687:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1268a:	ba 00 00 00 00       	mov    $0x0,%edx
   1268f:	f7 f3                	div    %ebx
   12691:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12694:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12698:	75 bb                	jne    12655 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1269a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1269d:	8d 50 ff             	lea    -0x1(%eax),%edx
   126a0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126a3:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   126a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   126aa:	74 08                	je     126b4 <kernel_itoa+0x102>
   126ac:	8b 45 08             	mov    0x8(%ebp),%eax
   126af:	83 c0 01             	add    $0x1,%eax
   126b2:	eb 03                	jmp    126b7 <kernel_itoa+0x105>
   126b4:	8b 45 08             	mov    0x8(%ebp),%eax
   126b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   126ba:	eb 27                	jmp    126e3 <kernel_itoa+0x131>
    {
        char ch = *start;
   126bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   126bf:	0f b6 00             	movzbl (%eax),%eax
   126c2:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   126c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126c8:	0f b6 10             	movzbl (%eax),%edx
   126cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   126ce:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   126d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   126d3:	8d 50 ff             	lea    -0x1(%eax),%edx
   126d6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   126d9:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   126dd:	88 10                	mov    %dl,(%eax)
        start++;
   126df:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   126e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   126e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   126e9:	72 d1                	jb     126bc <kernel_itoa+0x10a>
    }
}
   126eb:	83 c4 20             	add    $0x20,%esp
   126ee:	5b                   	pop    %ebx
   126ef:	5d                   	pop    %ebp
   126f0:	c3                   	ret    

000126f1 <kernel_vsprintf>:
 * @param         {char} *fmt: 格式化字符串
 * @param         {va_list} args: 参数
 * @return        {*}
 **/
void kernel_vsprintf(char *buffer, const char *fmt, va_list args)
{
   126f1:	55                   	push   %ebp
   126f2:	89 e5                	mov    %esp,%ebp
   126f4:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   126f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buffer;
   126fe:	8b 45 08             	mov    0x8(%ebp),%eax
   12701:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   12704:	e9 17 01 00 00       	jmp    12820 <kernel_vsprintf+0x12f>
    {
        switch (state)
   12709:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1270c:	85 c0                	test   %eax,%eax
   1270e:	74 0a                	je     1271a <kernel_vsprintf+0x29>
   12710:	83 f8 01             	cmp    $0x1,%eax
   12713:	74 2b                	je     12740 <kernel_vsprintf+0x4f>
   12715:	e9 06 01 00 00       	jmp    12820 <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   1271a:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1271e:	75 0c                	jne    1272c <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   12720:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   12727:	e9 f4 00 00 00       	jmp    12820 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   1272c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1272f:	8d 50 01             	lea    0x1(%eax),%edx
   12732:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12735:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   12739:	88 10                	mov    %dl,(%eax)
            }
            break;
   1273b:	e9 e0 00 00 00       	jmp    12820 <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   12740:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   12744:	75 31                	jne    12777 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   12746:	8b 45 10             	mov    0x10(%ebp),%eax
   12749:	8d 50 04             	lea    0x4(%eax),%edx
   1274c:	89 55 10             	mov    %edx,0x10(%ebp)
   1274f:	8b 00                	mov    (%eax),%eax
   12751:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   12754:	6a 0a                	push   $0xa
   12756:	ff 75 e4             	pushl  -0x1c(%ebp)
   12759:	ff 75 f8             	pushl  -0x8(%ebp)
   1275c:	e8 51 fe ff ff       	call   125b2 <kernel_itoa>
   12761:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12764:	ff 75 f8             	pushl  -0x8(%ebp)
   12767:	e8 e4 fc ff ff       	call   12450 <kernel_strlen>
   1276c:	83 c4 04             	add    $0x4,%esp
   1276f:	01 45 f8             	add    %eax,-0x8(%ebp)
   12772:	e9 a1 00 00 00       	jmp    12818 <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   12777:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1277b:	75 2e                	jne    127ab <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   1277d:	8b 45 10             	mov    0x10(%ebp),%eax
   12780:	8d 50 04             	lea    0x4(%eax),%edx
   12783:	89 55 10             	mov    %edx,0x10(%ebp)
   12786:	8b 00                	mov    (%eax),%eax
   12788:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   1278b:	6a 10                	push   $0x10
   1278d:	ff 75 e8             	pushl  -0x18(%ebp)
   12790:	ff 75 f8             	pushl  -0x8(%ebp)
   12793:	e8 1a fe ff ff       	call   125b2 <kernel_itoa>
   12798:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1279b:	ff 75 f8             	pushl  -0x8(%ebp)
   1279e:	e8 ad fc ff ff       	call   12450 <kernel_strlen>
   127a3:	83 c4 04             	add    $0x4,%esp
   127a6:	01 45 f8             	add    %eax,-0x8(%ebp)
   127a9:	eb 6d                	jmp    12818 <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   127ab:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   127af:	75 1f                	jne    127d0 <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   127b1:	8b 45 10             	mov    0x10(%ebp),%eax
   127b4:	8d 50 04             	lea    0x4(%eax),%edx
   127b7:	89 55 10             	mov    %edx,0x10(%ebp)
   127ba:	8b 00                	mov    (%eax),%eax
   127bc:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   127bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   127c2:	8d 50 01             	lea    0x1(%eax),%edx
   127c5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   127c8:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   127cc:	88 10                	mov    %dl,(%eax)
   127ce:	eb 48                	jmp    12818 <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   127d0:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   127d4:	75 42                	jne    12818 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   127d6:	8b 45 10             	mov    0x10(%ebp),%eax
   127d9:	8d 50 04             	lea    0x4(%eax),%edx
   127dc:	89 55 10             	mov    %edx,0x10(%ebp)
   127df:	8b 00                	mov    (%eax),%eax
   127e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   127e4:	ff 75 f4             	pushl  -0xc(%ebp)
   127e7:	e8 64 fc ff ff       	call   12450 <kernel_strlen>
   127ec:	83 c4 04             	add    $0x4,%esp
   127ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   127f2:	eb 17                	jmp    1280b <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   127f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   127f7:	8d 42 01             	lea    0x1(%edx),%eax
   127fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
   127fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12800:	8d 48 01             	lea    0x1(%eax),%ecx
   12803:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12806:	0f b6 12             	movzbl (%edx),%edx
   12809:	88 10                	mov    %dl,(%eax)
                while (len--)
   1280b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1280e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12811:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12814:	85 c0                	test   %eax,%eax
   12816:	75 dc                	jne    127f4 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   12818:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1281f:	90                   	nop
    while ((ch = *fmt++))
   12820:	8b 45 0c             	mov    0xc(%ebp),%eax
   12823:	8d 50 01             	lea    0x1(%eax),%edx
   12826:	89 55 0c             	mov    %edx,0xc(%ebp)
   12829:	0f b6 00             	movzbl (%eax),%eax
   1282c:	88 45 ef             	mov    %al,-0x11(%ebp)
   1282f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12833:	0f 85 d0 fe ff ff    	jne    12709 <kernel_vsprintf+0x18>
        }
    }
}
   12839:	90                   	nop
   1283a:	c9                   	leave  
   1283b:	c3                   	ret    

0001283c <pannic>:
 * @param         {char} *func: 函数名
 * @param         {char} *cond: 表达式
 * @return        {*}
**/
void pannic(const char *file, int line, const char *func, const char *cond)
{
   1283c:	55                   	push   %ebp
   1283d:	89 e5                	mov    %esp,%ebp
   1283f:	83 ec 08             	sub    $0x8,%esp
    log_printf("ASSERT FAILED! %s", cond);
   12842:	83 ec 08             	sub    $0x8,%esp
   12845:	ff 75 14             	pushl  0x14(%ebp)
   12848:	68 f0 31 01 00       	push   $0x131f0
   1284d:	e8 f3 02 00 00       	call   12b45 <log_printf>
   12852:	83 c4 10             	add    $0x10,%esp
    log_printf("File is : %s \nLine is : %d\nFunc is : %s\n", file, line, func);
   12855:	ff 75 10             	pushl  0x10(%ebp)
   12858:	ff 75 0c             	pushl  0xc(%ebp)
   1285b:	ff 75 08             	pushl  0x8(%ebp)
   1285e:	68 04 32 01 00       	push   $0x13204
   12863:	e8 dd 02 00 00       	call   12b45 <log_printf>
   12868:	83 c4 10             	add    $0x10,%esp
    for(;;)
    {
        hlt();
   1286b:	e8 ad fa ff ff       	call   1231d <hlt>
   12870:	eb f9                	jmp    1286b <pannic+0x2f>

00012872 <list_is_empty>:
{
   12872:	55                   	push   %ebp
   12873:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12875:	8b 45 08             	mov    0x8(%ebp),%eax
   12878:	8b 40 08             	mov    0x8(%eax),%eax
   1287b:	85 c0                	test   %eax,%eax
   1287d:	0f 94 c0             	sete   %al
   12880:	0f b6 c0             	movzbl %al,%eax
}
   12883:	5d                   	pop    %ebp
   12884:	c3                   	ret    

00012885 <list_init>:
 * @brief        : 链表初始化函数
 * @param         {list_t *} list: 待初始化的链表
 * @return        {*}
 **/
void list_init(list_t *list)
{
   12885:	55                   	push   %ebp
   12886:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12888:	8b 45 08             	mov    0x8(%ebp),%eax
   1288b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12892:	8b 45 08             	mov    0x8(%ebp),%eax
   12895:	8b 50 04             	mov    0x4(%eax),%edx
   12898:	8b 45 08             	mov    0x8(%ebp),%eax
   1289b:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1289d:	8b 45 08             	mov    0x8(%ebp),%eax
   128a0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   128a7:	90                   	nop
   128a8:	5d                   	pop    %ebp
   128a9:	c3                   	ret    

000128aa <list_insert_first>:
 * @param         {list_t} *list: 待插入的链表
 * @param         {list_node_t} *node: 待插入的结点
 * @return        {*}
**/
void list_insert_first(list_t *list, list_node_t *node)
{
   128aa:	55                   	push   %ebp
   128ab:	89 e5                	mov    %esp,%ebp
    node->next = list->first;
   128ad:	8b 45 08             	mov    0x8(%ebp),%eax
   128b0:	8b 10                	mov    (%eax),%edx
   128b2:	8b 45 0c             	mov    0xc(%ebp),%eax
   128b5:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   128b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   128bb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    // 链表为空;
    if (list_is_empty(list))
   128c1:	ff 75 08             	pushl  0x8(%ebp)
   128c4:	e8 a9 ff ff ff       	call   12872 <list_is_empty>
   128c9:	83 c4 04             	add    $0x4,%esp
   128cc:	85 c0                	test   %eax,%eax
   128ce:	74 16                	je     128e6 <list_insert_first+0x3c>
    {
        list->first = list->last = node;
   128d0:	8b 45 08             	mov    0x8(%ebp),%eax
   128d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   128d6:	89 50 04             	mov    %edx,0x4(%eax)
   128d9:	8b 45 08             	mov    0x8(%ebp),%eax
   128dc:	8b 50 04             	mov    0x4(%eax),%edx
   128df:	8b 45 08             	mov    0x8(%ebp),%eax
   128e2:	89 10                	mov    %edx,(%eax)
   128e4:	eb 12                	jmp    128f8 <list_insert_first+0x4e>
    }
    else
    {
        list->first->pre = node;
   128e6:	8b 45 08             	mov    0x8(%ebp),%eax
   128e9:	8b 00                	mov    (%eax),%eax
   128eb:	8b 55 0c             	mov    0xc(%ebp),%edx
   128ee:	89 10                	mov    %edx,(%eax)
        list->first = node;
   128f0:	8b 45 08             	mov    0x8(%ebp),%eax
   128f3:	8b 55 0c             	mov    0xc(%ebp),%edx
   128f6:	89 10                	mov    %edx,(%eax)
    }
    list->count++;
   128f8:	8b 45 08             	mov    0x8(%ebp),%eax
   128fb:	8b 40 08             	mov    0x8(%eax),%eax
   128fe:	8d 50 01             	lea    0x1(%eax),%edx
   12901:	8b 45 08             	mov    0x8(%ebp),%eax
   12904:	89 50 08             	mov    %edx,0x8(%eax)
}
   12907:	90                   	nop
   12908:	c9                   	leave  
   12909:	c3                   	ret    

0001290a <list_insert_last>:
 * @param         {list_t} *list: 待插入的链表
 * @param         {list_node_t} *node: 待插入的结点
 * @return        {*}
**/
void list_insert_last(list_t *list, list_node_t *node)
{
   1290a:	55                   	push   %ebp
   1290b:	89 e5                	mov    %esp,%ebp
    node->pre = list->last;
   1290d:	8b 45 08             	mov    0x8(%ebp),%eax
   12910:	8b 50 04             	mov    0x4(%eax),%edx
   12913:	8b 45 0c             	mov    0xc(%ebp),%eax
   12916:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12918:	8b 45 0c             	mov    0xc(%ebp),%eax
   1291b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    if (list_is_empty(list))
   12922:	ff 75 08             	pushl  0x8(%ebp)
   12925:	e8 48 ff ff ff       	call   12872 <list_is_empty>
   1292a:	83 c4 04             	add    $0x4,%esp
   1292d:	85 c0                	test   %eax,%eax
   1292f:	74 16                	je     12947 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12931:	8b 45 08             	mov    0x8(%ebp),%eax
   12934:	8b 55 0c             	mov    0xc(%ebp),%edx
   12937:	89 50 04             	mov    %edx,0x4(%eax)
   1293a:	8b 45 08             	mov    0x8(%ebp),%eax
   1293d:	8b 50 04             	mov    0x4(%eax),%edx
   12940:	8b 45 08             	mov    0x8(%ebp),%eax
   12943:	89 10                	mov    %edx,(%eax)
   12945:	eb 15                	jmp    1295c <list_insert_last+0x52>
    }
    else
    {
        list->last->next = node;
   12947:	8b 45 08             	mov    0x8(%ebp),%eax
   1294a:	8b 40 04             	mov    0x4(%eax),%eax
   1294d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12950:	89 50 04             	mov    %edx,0x4(%eax)
        list->last = node;
   12953:	8b 45 08             	mov    0x8(%ebp),%eax
   12956:	8b 55 0c             	mov    0xc(%ebp),%edx
   12959:	89 50 04             	mov    %edx,0x4(%eax)
    }
    list->count++;
   1295c:	8b 45 08             	mov    0x8(%ebp),%eax
   1295f:	8b 40 08             	mov    0x8(%eax),%eax
   12962:	8d 50 01             	lea    0x1(%eax),%edx
   12965:	8b 45 08             	mov    0x8(%ebp),%eax
   12968:	89 50 08             	mov    %edx,0x8(%eax)
}
   1296b:	90                   	nop
   1296c:	c9                   	leave  
   1296d:	c3                   	ret    

0001296e <list_remove_first>:
 * @brief        : 移除链表的头结点
 * @param         {list_t} *list: 待移除结点的链表的指针
 * @return        {list_node_t*}: 被移除的结点的指针
 **/
list_node_t *list_remove_first(list_t *list)
{
   1296e:	55                   	push   %ebp
   1296f:	89 e5                	mov    %esp,%ebp
   12971:	83 ec 10             	sub    $0x10,%esp
    if (list_is_empty(list))
   12974:	ff 75 08             	pushl  0x8(%ebp)
   12977:	e8 f6 fe ff ff       	call   12872 <list_is_empty>
   1297c:	83 c4 04             	add    $0x4,%esp
   1297f:	85 c0                	test   %eax,%eax
   12981:	74 07                	je     1298a <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12983:	b8 00 00 00 00       	mov    $0x0,%eax
   12988:	eb 5b                	jmp    129e5 <list_remove_first+0x77>
    }

    list_node_t *remove_node = list->first;
   1298a:	8b 45 08             	mov    0x8(%ebp),%eax
   1298d:	8b 00                	mov    (%eax),%eax
   1298f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    list->first = remove_node->next;
   12992:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12995:	8b 50 04             	mov    0x4(%eax),%edx
   12998:	8b 45 08             	mov    0x8(%ebp),%eax
   1299b:	89 10                	mov    %edx,(%eax)

    if (list->first == (list_node_t *)0)
   1299d:	8b 45 08             	mov    0x8(%ebp),%eax
   129a0:	8b 00                	mov    (%eax),%eax
   129a2:	85 c0                	test   %eax,%eax
   129a4:	75 0c                	jne    129b2 <list_remove_first+0x44>
    {
        list->last = (list_node_t *)0;
   129a6:	8b 45 08             	mov    0x8(%ebp),%eax
   129a9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   129b0:	eb 0c                	jmp    129be <list_remove_first+0x50>
    }
    else
    {
        remove_node->next->pre = (list_node_t *)0;
   129b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129b5:	8b 40 04             	mov    0x4(%eax),%eax
   129b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        // list->first->pre = (list_node_t *) 0;
    }

    remove_node->pre = remove_node->next = (list_node_t *)0;
   129be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129c1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   129c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129cb:	8b 50 04             	mov    0x4(%eax),%edx
   129ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   129d1:	89 10                	mov    %edx,(%eax)
    list->count--;
   129d3:	8b 45 08             	mov    0x8(%ebp),%eax
   129d6:	8b 40 08             	mov    0x8(%eax),%eax
   129d9:	8d 50 ff             	lea    -0x1(%eax),%edx
   129dc:	8b 45 08             	mov    0x8(%ebp),%eax
   129df:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   129e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   129e5:	c9                   	leave  
   129e6:	c3                   	ret    

000129e7 <list_remove>:
 * @param         {list_t} *list: 待移除结点的链表的指针
 * @param         {list_node_t} *node: 需要移除的结点的指针
 * @return        {list_node_t*}: 被移除的结点的指针
**/
list_node_t *list_remove(list_t *list, list_node_t *node)
{
   129e7:	55                   	push   %ebp
   129e8:	89 e5                	mov    %esp,%ebp
    if (node == list->first)
   129ea:	8b 45 08             	mov    0x8(%ebp),%eax
   129ed:	8b 00                	mov    (%eax),%eax
   129ef:	39 45 0c             	cmp    %eax,0xc(%ebp)
   129f2:	75 0b                	jne    129ff <list_remove+0x18>
    {
        list->first = node->next;
   129f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   129f7:	8b 50 04             	mov    0x4(%eax),%edx
   129fa:	8b 45 08             	mov    0x8(%ebp),%eax
   129fd:	89 10                	mov    %edx,(%eax)
    }

    if (node == list->last)
   129ff:	8b 45 08             	mov    0x8(%ebp),%eax
   12a02:	8b 40 04             	mov    0x4(%eax),%eax
   12a05:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12a08:	75 0b                	jne    12a15 <list_remove+0x2e>
    {
        list->last = node->pre;
   12a0a:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a0d:	8b 10                	mov    (%eax),%edx
   12a0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12a12:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->pre)
   12a15:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a18:	8b 00                	mov    (%eax),%eax
   12a1a:	85 c0                	test   %eax,%eax
   12a1c:	74 0e                	je     12a2c <list_remove+0x45>
    {
        node->pre->next = node->next;
   12a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a21:	8b 00                	mov    (%eax),%eax
   12a23:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a26:	8b 52 04             	mov    0x4(%edx),%edx
   12a29:	89 50 04             	mov    %edx,0x4(%eax)
    }

    if (node->next)
   12a2c:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a2f:	8b 40 04             	mov    0x4(%eax),%eax
   12a32:	85 c0                	test   %eax,%eax
   12a34:	74 0d                	je     12a43 <list_remove+0x5c>
    {
        node->next->pre = node->pre;
   12a36:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a39:	8b 40 04             	mov    0x4(%eax),%eax
   12a3c:	8b 55 0c             	mov    0xc(%ebp),%edx
   12a3f:	8b 12                	mov    (%edx),%edx
   12a41:	89 10                	mov    %edx,(%eax)
    }
    node->pre = node->next = (list_node_t *)0;
   12a43:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12a4d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a50:	8b 50 04             	mov    0x4(%eax),%edx
   12a53:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a56:	89 10                	mov    %edx,(%eax)

    list->count--;
   12a58:	8b 45 08             	mov    0x8(%ebp),%eax
   12a5b:	8b 40 08             	mov    0x8(%eax),%eax
   12a5e:	8d 50 ff             	lea    -0x1(%eax),%edx
   12a61:	8b 45 08             	mov    0x8(%ebp),%eax
   12a64:	89 50 08             	mov    %edx,0x8(%eax)
    return node;
   12a67:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a6a:	5d                   	pop    %ebp
   12a6b:	c3                   	ret    

00012a6c <inb>:
{
   12a6c:	55                   	push   %ebp
   12a6d:	89 e5                	mov    %esp,%ebp
   12a6f:	83 ec 14             	sub    $0x14,%esp
   12a72:	8b 45 08             	mov    0x8(%ebp),%eax
   12a75:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p],%[v]" : [v] "=a"(rv) : [p] "d"(port));
   12a79:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12a7d:	89 c2                	mov    %eax,%edx
   12a7f:	ec                   	in     (%dx),%al
   12a80:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12a83:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12a87:	c9                   	leave  
   12a88:	c3                   	ret    

00012a89 <outb>:
{
   12a89:	55                   	push   %ebp
   12a8a:	89 e5                	mov    %esp,%ebp
   12a8c:	83 ec 08             	sub    $0x8,%esp
   12a8f:	8b 55 08             	mov    0x8(%ebp),%edx
   12a92:	8b 45 0c             	mov    0xc(%ebp),%eax
   12a95:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12a99:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v],%[p]" ::[p] "d"(port), [v] "a"(data));
   12a9c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12aa0:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12aa4:	ee                   	out    %al,(%dx)
}
   12aa5:	90                   	nop
   12aa6:	c9                   	leave  
   12aa7:	c3                   	ret    

00012aa8 <log_init>:
/**
 * @brief        : 日志输出初始化函数，对相应寄存器进行设置
 * @return        {*}
 **/
void log_init(void)
{
   12aa8:	55                   	push   %ebp
   12aa9:	89 e5                	mov    %esp,%ebp
   12aab:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12aae:	83 ec 0c             	sub    $0xc,%esp
   12ab1:	68 00 a0 01 00       	push   $0x1a000
   12ab6:	e8 57 f3 ff ff       	call   11e12 <mutex_init>
   12abb:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00); // 中断相关
   12abe:	83 ec 08             	sub    $0x8,%esp
   12ac1:	6a 00                	push   $0x0
   12ac3:	68 f9 03 00 00       	push   $0x3f9
   12ac8:	e8 bc ff ff ff       	call   12a89 <outb>
   12acd:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x80); // 发送速度
   12ad0:	83 ec 08             	sub    $0x8,%esp
   12ad3:	68 80 00 00 00       	push   $0x80
   12ad8:	68 fb 03 00 00       	push   $0x3fb
   12add:	e8 a7 ff ff ff       	call   12a89 <outb>
   12ae2:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 0, 0x3);
   12ae5:	83 ec 08             	sub    $0x8,%esp
   12ae8:	6a 03                	push   $0x3
   12aea:	68 f8 03 00 00       	push   $0x3f8
   12aef:	e8 95 ff ff ff       	call   12a89 <outb>
   12af4:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 1, 0x00);
   12af7:	83 ec 08             	sub    $0x8,%esp
   12afa:	6a 00                	push   $0x0
   12afc:	68 f9 03 00 00       	push   $0x3f9
   12b01:	e8 83 ff ff ff       	call   12a89 <outb>
   12b06:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 3, 0x03);
   12b09:	83 ec 08             	sub    $0x8,%esp
   12b0c:	6a 03                	push   $0x3
   12b0e:	68 fb 03 00 00       	push   $0x3fb
   12b13:	e8 71 ff ff ff       	call   12a89 <outb>
   12b18:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 2, 0xC7);
   12b1b:	83 ec 08             	sub    $0x8,%esp
   12b1e:	68 c7 00 00 00       	push   $0xc7
   12b23:	68 fa 03 00 00       	push   $0x3fa
   12b28:	e8 5c ff ff ff       	call   12a89 <outb>
   12b2d:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT + 4, 0x0F);
   12b30:	83 ec 08             	sub    $0x8,%esp
   12b33:	6a 0f                	push   $0xf
   12b35:	68 fc 03 00 00       	push   $0x3fc
   12b3a:	e8 4a ff ff ff       	call   12a89 <outb>
   12b3f:	83 c4 10             	add    $0x10,%esp
}
   12b42:	90                   	nop
   12b43:	c9                   	leave  
   12b44:	c3                   	ret    

00012b45 <log_printf>:
 * @brief        : 实现打印的功能(类似printf)
 * @param         {char} *fmt: 格式化字符串
 * @return        {*}
 **/
void log_printf(const char *fmt, ...)
{
   12b45:	55                   	push   %ebp
   12b46:	89 e5                	mov    %esp,%ebp
   12b48:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;                                  // 可变参数存储变量
    kernel_memset(str_buf, '\0', sizeof(str_buf)); // 清空缓冲区
   12b4e:	83 ec 04             	sub    $0x4,%esp
   12b51:	68 80 00 00 00       	push   $0x80
   12b56:	6a 00                	push   $0x0
   12b58:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12b5e:	50                   	push   %eax
   12b5f:	e8 76 f9 ff ff       	call   124da <kernel_memset>
   12b64:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);                           // 将fmt后的可变参数存储到args中
   12b67:	8d 45 0c             	lea    0xc(%ebp),%eax
   12b6a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);           // 将可变参数放入缓冲区
   12b70:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12b76:	83 ec 04             	sub    $0x4,%esp
   12b79:	50                   	push   %eax
   12b7a:	ff 75 08             	pushl  0x8(%ebp)
   12b7d:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12b83:	50                   	push   %eax
   12b84:	e8 68 fb ff ff       	call   126f1 <kernel_vsprintf>
   12b89:	83 c4 10             	add    $0x10,%esp
    va_end(args);
    // irq_state_t state = irq_enter_protection(); // 进入临界区
    mutex_lock(&mutex);
   12b8c:	83 ec 0c             	sub    $0xc,%esp
   12b8f:	68 00 a0 01 00       	push   $0x1a000
   12b94:	e8 a5 f2 ff ff       	call   11e3e <mutex_lock>
   12b99:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   12b9c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12ba2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12ba5:	eb 3b                	jmp    12be2 <log_printf+0x9d>
    {
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0) // 正在忙则等待
   12ba7:	90                   	nop
   12ba8:	83 ec 0c             	sub    $0xc,%esp
   12bab:	68 fd 03 00 00       	push   $0x3fd
   12bb0:	e8 b7 fe ff ff       	call   12a6c <inb>
   12bb5:	83 c4 10             	add    $0x10,%esp
   12bb8:	0f b6 c0             	movzbl %al,%eax
   12bbb:	83 e0 40             	and    $0x40,%eax
   12bbe:	85 c0                	test   %eax,%eax
   12bc0:	74 e6                	je     12ba8 <log_printf+0x63>
            ;
        outb(COM1_PORT, *p++); // 发送数据
   12bc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12bc5:	8d 50 01             	lea    0x1(%eax),%edx
   12bc8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12bcb:	0f b6 00             	movzbl (%eax),%eax
   12bce:	0f b6 c0             	movzbl %al,%eax
   12bd1:	83 ec 08             	sub    $0x8,%esp
   12bd4:	50                   	push   %eax
   12bd5:	68 f8 03 00 00       	push   $0x3f8
   12bda:	e8 aa fe ff ff       	call   12a89 <outb>
   12bdf:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   12be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12be5:	0f b6 00             	movzbl (%eax),%eax
   12be8:	84 c0                	test   %al,%al
   12bea:	75 bb                	jne    12ba7 <log_printf+0x62>
    }
    outb(COM1_PORT, '\r');
   12bec:	83 ec 08             	sub    $0x8,%esp
   12bef:	6a 0d                	push   $0xd
   12bf1:	68 f8 03 00 00       	push   $0x3f8
   12bf6:	e8 8e fe ff ff       	call   12a89 <outb>
   12bfb:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n');
   12bfe:	83 ec 08             	sub    $0x8,%esp
   12c01:	6a 0a                	push   $0xa
   12c03:	68 f8 03 00 00       	push   $0x3f8
   12c08:	e8 7c fe ff ff       	call   12a89 <outb>
   12c0d:	83 c4 10             	add    $0x10,%esp
    // irq_leave_protection(state); // 退出临界区
    mutex_unlock(&mutex);
   12c10:	83 ec 0c             	sub    $0xc,%esp
   12c13:	68 00 a0 01 00       	push   $0x1a000
   12c18:	e8 b1 f2 ff ff       	call   11ece <mutex_unlock>
   12c1d:	83 c4 10             	add    $0x10,%esp
}
   12c20:	90                   	nop
   12c21:	c9                   	leave  
   12c22:	c3                   	ret    
