
E:/OS/MyOs/YesOS_code/code/build/source/kernel/kernel.elf:     file format elf32-i386
E:/OS/MyOs/YesOS_code/code/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00009d05 memsz 0x00009d05 flags r-x
    LOAD off    0x0000b000 vaddr 0x0001a000 paddr 0x0001a000 align 2**12
         filesz 0x00000178 memsz 0x000460c0 flags rw-
    LOAD off    0x0000c000 vaddr 0x80000000 paddr 0x000600c0 align 2**12
         filesz 0x00000387 memsz 0x00000387 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008970  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001385  00018980  00018980  00009980  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001a000  0001a000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000450c0  0001b000  0001b000  0000b178  2**12
                  ALLOC
  4 .first_task   00000387  80000000  000600c0  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00004b1f  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012c79  00000000  00000000  00010ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032bf  00000000  00000000  00023b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000340  00000000  00000000  00026de0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00027120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c2b  00000000  00000000  000271f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00029e23  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002b84  00000000  00000000  00029e34  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00018980 l    d  .rodata	00000000 .rodata
0001a000 l    d  .data	00000000 .data
0001b000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010323 l     F .text	00000017 up2
0001033a l     F .text	0000000d down2
00010347 l     F .text	0000000c write_cr3
00010353 l     F .text	00000014 pde_index
00010367 l     F .text	00000027 pde_paddr
0001038e l     F .text	00000010 pte_index
0001039e l     F .text	00000027 pte_paddr
000103c5 l     F .text	0000000f get_pte_perm
000103d4 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00000028 paddr_alloc
0001c000 l     O .bss	00001000 kernel_page_dir
000103e5 l     F .text	00000013 current_page_dir
000103f8 l     F .text	00000058 addr_alloc_init
00010450 l     F .text	00000067 addr_alloc_page
000104b7 l     F .text	00000062 addr_free_page
00010519 l     F .text	00000066 show_mem_info
0001057f l     F .text	0000003c total_mem_size
00018abc l     O .rodata	00000012 __func__.2380
0001a000 l     O .data	00000050 kernel_map.2392
00018ad0 l     O .rodata	00000013 __func__.2420
00018ae4 l     O .rodata	00000011 __func__.2498
00018af8 l     O .rodata	0000000c __func__.2505
00018b04 l     O .rodata	00000009 __func__.2513
00000000 l    df *ABS*	00000000 syscall.c
00018b20 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010f88 l     F .text	0000000c write_cr3
00010f94 l     F .text	00000007 hlt
00010f9b l     F .text	0000000c write_tr
00010fa7 l     F .text	0000001b list_node_init
00010fc2 l     F .text	0000000b list_node_next
00010fcd l     F .text	0000000b list_count
00010fd8 l     F .text	0000000a list_first
00010fe2 l     F .text	00000011 mmu_set_page_dir
0001d000 l     O .bss	000005c0 task_manager
0001d5c0 l     O .bss	00001000 idle_task_stack
0001e5c0 l     O .bss	00016400 task_table
000349c0 l     O .bss	00000014 task_table_mutex
00010ff3 l     F .text	000001cd tss_init
00018e68 l     O .rodata	0000000a __func__.3102
00018e74 l     O .rodata	00000010 __func__.3128
000114e3 l     F .text	0000000a idle_task_entry
0001162d l     F .text	00000045 task_next_run
0001190f l     F .text	00000069 alloc_task
00011978 l     F .text	00000030 free_task
00011a0c l     F .text	00000062 copy_opened_files
00011c0a l     F .text	00000129 load_phdr
00018e84 l     O .rodata	0000000a __func__.3240
00011d33 l     F .text	00000213 load_elf_file
00011f46 l     F .text	00000130 copy_args
00018e90 l     O .rodata	0000000a __func__.3275
00000000 l    df *ABS*	00000000 cpu.c
000124b1 l     F .text	00000028 lgdt
000124d9 l     F .text	0000001a far_jump
000349e0 l     O .bss	00000800 gdt_table
000351e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
0001272b l     F .text	0000001d inb
00012748 l     F .text	0000001f outb
00012767 l     F .text	00000007 cli
0001276e l     F .text	00000007 sti
00012775 l     F .text	00000011 read_cr2
00012786 l     F .text	00000028 lidt
000127ae l     F .text	00000007 hlt
000127b5 l     F .text	00000010 read_eflags
000127c5 l     F .text	0000000b write_eflags
00035200 l     O .bss	00000400 idt_table
000127d0 l     F .text	000000ff dump_core_regs
000128cf l     F .text	00000071 do_default_handler
00012d07 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
000130fe l     F .text	0000001d inb
0001311b l     F .text	0000001f outb
00035600 l     O .bss	00000340 console_buf
0001313a l     F .text	00000074 read_cursor_pos
000131ae l     F .text	000000c1 update_cursor_pos
0001331e l     F .text	00000091 erase_rows
000133af l     F .text	00000088 scroll_up
00013437 l     F .text	00000010 move_to_col0
00013447 l     F .text	00000038 move_next_line
0001347f l     F .text	00000076 move_forward
000134f5 l     F .text	00000094 show_char
00013589 l     F .text	00000078 move_backword
00013601 l     F .text	00000085 clear_display
00013686 l     F .text	00000073 move_next_tab
0001381c l     F .text	0000003a erase_backword
00013856 l     F .text	000000b8 write_normal
0001390e l     F .text	00000029 clear_esc_param
00013937 l     F .text	00000075 write_esc
000139ac l     F .text	00000099 set_font_style
00019440 l     O .rodata	00000020 color_table.2390
00013a45 l     F .text	00000037 move_left
00013a7c l     F .text	00000049 move_right
00013ac5 l     F .text	00000033 move_cursor
00013af8 l     F .text	00000051 erase_in_display
00013b49 l     F .text	000000f7 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001a050 l     O .data	00000008 dev_desc_tbl
00035940 l     O .bss	00000a00 dev_tbl
00013d3d l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 disk.c
0001402e l     F .text	0000001d inb
0001404b l     F .text	0000001f inw
0001406a l     F .text	0000001f outb
00014089 l     F .text	00000021 outw
00036340 l     O .bss	00000250 disk_buf
00036590 l     O .bss	00000014 mutex
000365a4 l     O .bss	00000010 op_sem
000365b4 l     O .bss	00000004 task_on_op
000140aa l     F .text	00000130 data_send_cmd
000141da l     F .text	00000050 data_read_data
0001422a l     F .text	00000050 data_write_data
0001427a l     F .text	0000004b data_wait_data
000142c5 l     F .text	000000fe print_disk_info
000143c3 l     F .text	00000119 detect_part_info
000144dc l     F .text	00000127 identify_disk
00000000 l    df *ABS*	00000000 kbd.c
00014ab8 l     F .text	0000001d inb
00014ad5 l     F .text	0000001f outb
000365b8 l     O .bss	00000004 kbd_state
00019620 l     O .rodata	00000200 map_table
00014af4 l     F .text	00000015 get_key
00014b09 l     F .text	0000001a is_make_code
00014bcd l     F .text	00000045 update_led_status
00014c12 l     F .text	0000003c do_fx_key
00014c4e l     F .text	000001d0 do_normal_key
00014e1e l     F .text	0000008a do_e0_key
000365bc l     O .bss	00000004 recv_state.2129
000365c0 l     O .bss	00000004 inited.2139
00000000 l    df *ABS*	00000000 time.c
00014faa l     F .text	0000001f outb
000365c4 l     O .bss	00000004 sys_tick
00014ff1 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 tty.c
000365e0 l     O .bss	000022a0 tty_devs
00038880 l     O .bss	00000004 curr_tty
000151a9 l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 devfs.c
0001a0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
000157d5 l     F .text	00000017 up2
000157ec l     F .text	00000059 bread_sector
00015845 l     F .text	0000003e bwrite_sector
00015883 l     F .text	00000087 to_sfn
00015a18 l     F .text	00000080 read_dir_entry
00015b9a l     F .text	00000082 move_file_pos
00015caa l     F .text	000000aa write_dir_entry
00015fcf l     F .text	00000065 read_from_diritem
000162f5 l     F .text	00000175 expand_file
00000000 l    df *ABS*	00000000 file.c
000388a0 l     O .bss	00024000 file_table
0005c8a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00016e60 l     F .text	0000000b list_node_next
00016e6b l     F .text	0000000a list_first
0005c8c0 l     O .bss	0000000c mounted_list
0005c8cc l     O .bss	0000000c free_list
0005c8e0 l     O .bss	000017c0 fs_tbl
0005e0a0 l     O .bss	00000004 root_fs
00016e75 l     F .text	0000001d is_fd_bad
00016e92 l     F .text	00000026 get_fs_op
00016eb8 l     F .text	000001c7 mount
0001707f l     F .text	00000060 mount_list_init
00019bdc l     O .rodata	00000008 __func__.3073
00017272 l     F .text	0000002b fs_protect
0001729d l     F .text	0000002b fs_unprotect
00019be4 l     O .rodata	0000000a __func__.3155
00000000 l    df *ABS*	00000000 init.c
0005e0a4 l     O .bss	00000004 init_boot_info
00019c78 l     O .rodata	00000013 __func__.3080
00000000 l    df *ABS*	00000000 mutex.c
00017ba3 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00017d32 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000180c0 l     F .text	00000007 hlt
0001a174 l     O .data	00000004 num2ch.1951
00000000 l    df *ABS*	00000000 list.c
0001867c l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0005e0a8 l     O .bss	00000014 mutex
0005e0bc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
000159d4 g     F .text	00000044 diritem_get_type
00017fb8 g     F .text	0000003a bitmap_get_bit
000182aa g     F .text	0000004f kernel_memcpy
00017706 g     F .text	000000fc sys_close
000116d0 g     F .text	0000000a task_current
000171ca g     F .text	00000050 path_begin_with
800001d1 g     F .first_task	0000001b yield
000130ca g     F .text	0000000b irq_enable_global
00018713 g     F .text	00000064 list_insert_last
000116da g     F .text	00000032 task_file
000102a5 g       .text	00000000 exception_handler_kbd
00010dcd g     F .text	0000010c sys_sbrk
00011786 g     F .text	00000061 sys_yield
000119a8 g     F .text	00000064 sys_msleep
00012a74 g     F .text	0000001c do_handler_segment_not_present
000115ce g     F .text	00000034 task_set_ready
000161c8 g     F .text	0000012d cluster_alloc_free
00017ff2 g     F .text	0000001b bitmap_is_set
000182f9 g     F .text	00000041 kernel_memset
00013f13 g     F .text	0000004c dev_write
00017671 g     F .text	00000095 sys_lseek
00014f6a g     F .text	00000040 kbd_init
00016034 g     F .text	0000013a cluster_set_next
00010267 g       .text	00000000 exception_handler_virtual_exception
00014a7a g     F .text	00000006 disk_close
00010ef3 g     F .text	00000095 do_handler_syscall
000180c7 g     F .text	0000002d strings_count
0001270d g     F .text	0000001e cpu_init
00018874 g     F .text	0000002f log_init
00016b41 g     F .text	000000f4 fatfs_readdir
00011a6e g     F .text	0000019c sys_fork
00017b70 g     F .text	00000033 init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00014a70 g     F .text	0000000a disk_control
000125c0 g     F .text	00000039 gdt_free_sel
00010ed9 g     F .text	0000001a sys_print_msg
0001a140 g     O .data	00000034 fatfs_op
0001813a g     F .text	00000047 kernel_strcpy
0001a000 g       .data	00000000 s_data
800001a4 g     F .first_task	0000002d execve
80000147 g     F .first_task	0000001b getpid
00012fad g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00015941 g     F .text	00000093 diritem_get_name
0001590a g     F .text	00000037 diritem_name_match
000100a4 g       .text	00000000 exception_handler_breakpoint
000129cc g     F .text	0000001c do_handler_overflow
00012c97 g     F .text	0000001c do_handler_alignment_check
0001066b g     F .text	0000008c memory_create_map
000174e8 g     F .text	000000c5 sys_read
0001721a g     F .text	00000058 path_next_child
00014b84 g     F .text	00000035 kbd_wait_recv_ready
0001679d g     F .text	0000021e fatfs_write
0001326f g     F .text	000000af console_select
000101b3 g       .text	00000000 exception_handler_general_protection
00012aac g     F .text	000000d8 do_handler_general_protection
00013717 g     F .text	0000001e restore_cursor
00017e52 g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
0001295c g     F .text	0000001c do_handler_divider
00017ee4 g     F .text	000000d4 bitmap_set_bit
00012a3c g     F .text	0000001c do_handler_double_fault
00016c35 g     F .text	0000000a fatfs_closedir
00012b84 g     F .text	000000f7 do_handler_page_fault
00015d54 g     F .text	0000023f fatfs_mount
80000324 g     F .first_task	00000021 isatty
000165f8 g     F .text	000001a5 fatfs_read
0001013f g       .text	00000000 exception_handler_double_fault
00012d9a g     F .text	0000002b pic_send_eoi
000114d9 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107b2 g     F .text	00000085 memory_create_uvm
00017d60 g     F .text	0000006e sem_wait
00010c4d g     F .text	00000025 memory_alloc_page_for
00014fc9 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001784d g     F .text	00000093 sys_fstat
00013ec7 g     F .text	0000004c dev_read
00016a45 g     F .text	000000df fatfs_seek
000169bb g     F .text	0000008a fatfs_close
00012ceb g     F .text	0000001c do_handler_virtual_exception
000157ab g     F .text	0000000a devfs_stat
000100c3 g       .text	00000000 exception_handler_overflow
000102e3 g       .text	00000000 simple_switch
000102c4 g       .text	00000000 exception_handler_ide_primary
00015f93 g     F .text	0000003c fatfs_unmount
800002d0 g     F .first_task	0000002d lseek
0005e0c0 g     O .bss	00002000 stack
00014603 g     F .text	000000f8 disk_init
000170df g     F .text	00000090 fs_init
00016df8 g     F .text	00000038 file_inc_ref
00010c8c g     F .text	00000099 memory_free_page
000600c0 g       *ABS*	00000000 s_first_task
0001175f g     F .text	00000027 task_remove_fd
000154ff g     F .text	0000005f tty_control
00013735 g     F .text	000000e7 console_init
000153de g     F .text	00000121 tty_read
00011339 g     F .text	0000008f task_uninit
00010b64 g     F .text	000000e9 memory_alloc_for_page_dir
000157b5 g     F .text	00000020 devfs_ioctl
000150a0 g     F .text	0000007f tty_fifo_get
000100e2 g       .text	00000000 exception_handler_bound_range
00015564 g     F .text	0000006d tty_in
00015ac1 g     F .text	000000d9 cluster_get_next
00017dce g     F .text	00000084 sem_notify
00010ae1 g     F .text	00000083 memory_copy_uvm_data
00013f5f g     F .text	0000004c dev_control
00014ea8 g     F .text	000000c2 do_handler_kbd
00012a04 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00017933 g     F .text	00000053 sys_readdir
00012c7b g     F .text	0000001c do_handler_fpu_error
000113ea g     F .text	000000ef task_first_init
00012cb3 g     F .text	0000001c do_handler_machine_check
80000282 g     F .first_task	0000002d write
000172c8 g     F .text	00000182 sys_open
00012978 g     F .text	0000001c do_handler_Debug
800002fd g     F .first_task	00000027 fstat
00017802 g     F .text	0000004b sys_isatty
000186b4 g     F .text	0000005f list_insert_first
00013d7b g     F .text	0000014c dev_open
0001716f g     F .text	0000005b path_to_num
000116ae g     F .text	00000022 task_set_wakeup
00012994 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00015069 g     F .text	00000037 tty_fifo_init
0001a060 g     O .data	00000038 dev_disk_desc
00018181 g     F .text	00000070 kernel_strncpy
000130bf g     F .text	0000000b irq_disable_global
000175ad g     F .text	000000c4 sys_write
800001ec g     F .first_task	00000021 wait
00060447 g       *ABS*	00000000 mem_free_start
00014b58 g     F .text	0000002c kbd_write
00017acd g     F .text	0000003d kernel_init
00017d3d g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
000184fb g     F .text	0000014b kernel_vsprintf
000180f4 g     F .text	00000046 get_file_name
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
00013fab g     F .text	00000083 dev_close
000136f9 g     F .text	0000001e save_cursor
000600c0 g       .bss	00000000 e_data
80000255 g     F .first_task	0000002d read
00017bdc g     F .text	00000097 mutex_lock
00017986 g     F .text	00000050 sys_closedir
0001170c g     F .text	00000053 task_alloc_fd
000157a1 g     F .text	0000000a devfs_seek
00010229 g       .text	00000000 exception_handler_machine_check
000152f1 g     F .text	000000ed tty_write
00012a58 g     F .text	0000001c do_handler_invalid_tss
00016c3f g     F .text	000000ec unlink
00000000 g       *ABS*	00000000 kernel_base
0001511f g     F .text	0000008a tty_fifo_put
00060447 g       *ABS*	00000000 e_first_task
00011672 g     F .text	0000003c task_set_sleep
0001744a g     F .text	0000009e sys_dup
00018646 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00012f73 g     F .text	0000003a irq_install
00012672 g     F .text	00000088 init_gdt
000155fa g     F .text	00000017 devfs_mount
000151f8 g     F .text	000000f9 tty_open
80000189 g     F .first_task	0000001b fork
000130d5 g     F .text	00000018 irq_enter_protection
00017bae g     F .text	0000002e mutex_init
00013038 g     F .text	00000087 irq_disable
80000345 g     F .first_task	00000021 sbrk
0001a100 g     O .data	00000034 devfs_op
00015617 g     F .text	00000127 devfs_open
00010248 g       .text	00000000 exception_handler_smd_exception
000179d6 g     F .text	000000a7 sys_ioctl
00010837 g     F .text	0000010f memory_destroy_uvm
00017e7b g     F .text	00000016 bitmap_byte_count
00012a20 g     F .text	0000001c do_handler_device_unavailable
00017a7d g     F .text	00000050 sys_unlink
00015a98 g     F .text	00000029 cluster_is_valid
00016b2e g     F .text	00000013 fatfs_opendir
000117e7 g     F .text	0000003c task_dispatch
00010946 g     F .text	00000155 memory_copy_uvm
0001555e g     F .text	00000006 tty_close
00015762 g     F .text	00000024 devfs_write
00017b0a g     F .text	00000066 move_to_first_task
000126fa g     F .text	00000013 switch_to_tss
00015786 g     F .text	0000001b devfs_close
00013c40 g     F .text	000000f7 console_write
00014b23 g     F .text	00000035 kbd_wait_send_ready
80000366 g     F .first_task	00000021 dup
0001833a g     F .text	0000005e kernel_memcmp
000106f7 g     F .text	000000bb create_kernel_table
0001868f g     F .text	00000025 list_init
00012ccf g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00011602 g     F .text	0000002b task_set_block
00012940 g     F .text	0000001c do_handler_unknown
00010c72 g     F .text	0000001a memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
000113c8 g     F .text	00000022 task_switch_from_to
00012dc5 g     F .text	000001ae irq_init
00017c73 g     F .text	000000bf mutex_unlock
00016e30 g     F .text	00000030 file_table_init
000130ed g     F .text	00000011 irq_leave_protection
00016db6 g     F .text	00000042 file_free
00014bb9 g     F .text	00000014 kbd_read
00015c1c g     F .text	0000008e diritem_init
80000162 g     F .first_task	00000027 print_msg
000181f1 g     F .text	0000003b kernel_strlen
000124f3 g     F .text	00000086 segment_desc_set
000129e8 g     F .text	0000001c do_handler_bound_range
000102f8 g       .text	00000000 exception_handler_syscall
000146fb g     F .text	000000f5 disk_open
0001646a g     F .text	0000018e fatfs_open
00018777 g     F .text	00000078 list_remove_first
00019d05 g       .rodata	00000000 e_text
0001822c g     F .text	0000007e kernel_strncmp
000178e0 g     F .text	00000053 sys_opendir
00017e91 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
00010085 g       .text	00000000 exception_handler_NMI
00016b24 g     F .text	0000000a fatfs_stat
0001800d g     F .text	000000b3 bitmap_alloc_nbits
00016d2b g     F .text	0000008b file_alloc
000114ed g     F .text	000000e1 task_manager_init
0001130c g     F .text	0000002d task_start
00010066 g       .text	00000000 exception_handler_Debug
00011823 g     F .text	000000ec task_time_tick
00010d25 g     F .text	000000a8 memory_init
00012076 g     F .text	000001bd sys_execve
00014930 g     F .text	00000140 disk_write
00012249 g     F .text	00000115 sys_wait
0001235e g     F .text	00000153 sys_exit
000155d1 g     F .text	00000029 tty_select
00013d37 g     F .text	00000006 console_close
00010a9b g     F .text	00000046 memory_get_paddr
00012a90 g     F .text	0000001c do_handler_stack_segment_fault
000129b0 g     F .text	0000001c do_handler_breakpoint
00015611 g     F .text	00000006 devfs_unmount
8000020d g     F .first_task	00000021 _exit
0001573e g     F .text	00000024 devfs_read
000188a3 g     F .text	000000cd log_printf
000111c0 g     F .text	0000014c task_init
000147f0 g     F .text	00000140 disk_read
8000022e g     F .first_task	00000027 open
0001616e g     F .text	0000005a cluster_free_chain
000184d7 g     F .text	00000024 kernel_sprintf
00012233 g     F .text	00000016 sys_getpid
000125f9 g     F .text	00000079 gdt_alloc_desc
00018398 g     F .text	0000013f kernel_itoa
000187ef g     F .text	00000085 list_remove
00012579 g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002e msleep
800002af g     F .first_task	00000021 close
00014a80 g     F .text	00000038 do_handler_ide_primary
000105bb g     F .text	000000b0 find_pte
00015051 g     F .text	00000018 time_init
0001a0a0 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 c4 7a 00 00       	call   17acd <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc c0 00 06 00       	mov    $0x600c0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 48 7b 00 00       	jmp    17b70 <init_main>

00010028 <exception_handler_unknown>:
		// 跳过压入的异常号和错误码
		add $(2*4), %esp
		iret
.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 07 29 00 00       	call   12940 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 04 29 00 00       	call   1295c <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 01 29 00 00       	call   12978 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 fe 28 00 00       	call   12994 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 fb 28 00 00       	call   129b0 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 f8 28 00 00       	call   129cc <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 f5 28 00 00       	call   129e8 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 f2 28 00 00       	call   12a04 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 ef 28 00 00       	call   12a20 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 ee 28 00 00       	call   12a3c <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 ed 28 00 00       	call   12a58 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 ec 28 00 00       	call   12a74 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 eb 28 00 00       	call   12a90 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 ea 28 00 00       	call   12aac <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 a5 29 00 00       	call   12b84 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 7d 2a 00 00       	call   12c7b <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 7c 2a 00 00       	call   12c97 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 79 2a 00 00       	call   12cb3 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 76 2a 00 00       	call   12ccf <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 73 2a 00 00       	call   12ceb <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 32 4d 00 00       	call   14fc9 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102a5:	6a 00                	push   $0x0
   102a7:	6a 21                	push   $0x21
   102a9:	60                   	pusha  
   102aa:	1e                   	push   %ds
   102ab:	06                   	push   %es
   102ac:	0f a0                	push   %fs
   102ae:	0f a8                	push   %gs
   102b0:	54                   	push   %esp
   102b1:	e8 f2 4b 00 00       	call   14ea8 <do_handler_kbd>
   102b6:	83 c4 04             	add    $0x4,%esp
   102b9:	0f a9                	pop    %gs
   102bb:	0f a1                	pop    %fs
   102bd:	07                   	pop    %es
   102be:	1f                   	pop    %ds
   102bf:	61                   	popa   
   102c0:	83 c4 08             	add    $0x8,%esp
   102c3:	cf                   	iret   

000102c4 <exception_handler_ide_primary>:
exception_handler ide_primary, 0x2E, 0
   102c4:	6a 00                	push   $0x0
   102c6:	6a 2e                	push   $0x2e
   102c8:	60                   	pusha  
   102c9:	1e                   	push   %ds
   102ca:	06                   	push   %es
   102cb:	0f a0                	push   %fs
   102cd:	0f a8                	push   %gs
   102cf:	54                   	push   %esp
   102d0:	e8 ab 47 00 00       	call   14a80 <do_handler_ide_primary>
   102d5:	83 c4 04             	add    $0x4,%esp
   102d8:	0f a9                	pop    %gs
   102da:	0f a1                	pop    %fs
   102dc:	07                   	pop    %es
   102dd:	1f                   	pop    %ds
   102de:	61                   	popa   
   102df:	83 c4 08             	add    $0x8,%esp
   102e2:	cf                   	iret   

000102e3 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
	.text
	.global simple_switch
simple_switch:
	movl 4(%esp), %eax   // 取from->stack
   102e3:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102e7:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102eb:	55                   	push   %ebp
	push %ebx
   102ec:	53                   	push   %ebx
	push %esi
   102ed:	56                   	push   %esi
	push %edi
   102ee:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102ef:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102f1:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102f3:	5f                   	pop    %edi
	pop %esi
   102f4:	5e                   	pop    %esi
	pop %ebx
   102f5:	5b                   	pop    %ebx
	pop %ebp
   102f6:	5d                   	pop    %ebp
  	ret
   102f7:	c3                   	ret    

000102f8 <exception_handler_syscall>:

     .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
	// 保存前一任务的状态
	pusha
   102f8:	60                   	pusha  
	push %ds
   102f9:	1e                   	push   %ds
	push %es
   102fa:	06                   	push   %es
	push %fs
   102fb:	0f a0                	push   %fs
	push %gs
   102fd:	0f a8                	push   %gs
	pushf
   102ff:	9c                   	pushf  

	// 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   10300:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   10305:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   10307:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   10309:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   1030b:	8e e8                	mov    %eax,%gs

    // 调用处理函数
    mov %esp, %eax
   1030d:	89 e0                	mov    %esp,%eax
    push %eax
   1030f:	50                   	push   %eax
	call do_handler_syscall
   10310:	e8 de 0b 00 00       	call   10ef3 <do_handler_syscall>
	add $4, %esp
   10315:	83 c4 04             	add    $0x4,%esp

    // 再切换回来
	popf
   10318:	9d                   	popf   
	pop %gs
   10319:	0f a9                	pop    %gs
	pop %fs
   1031b:	0f a1                	pop    %fs
	pop %es
   1031d:	07                   	pop    %es
	pop %ds
   1031e:	1f                   	pop    %ds
	popa
   1031f:	61                   	popa   
	
	// 5个参数，加上5*4，不加会导致返回时ss取不出来，最后返回出现问题
   10320:	ca 14 00             	lret   $0x14

00010323 <up2>:

#include <stdarg.h>
#include "comm/types.h"

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10323:	55                   	push   %ebp
   10324:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10326:	8b 55 08             	mov    0x8(%ebp),%edx
   10329:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032c:	01 d0                	add    %edx,%eax
   1032e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10331:	8b 45 0c             	mov    0xc(%ebp),%eax
   10334:	f7 d8                	neg    %eax
   10336:	21 d0                	and    %edx,%eax
}
   10338:	5d                   	pop    %ebp
   10339:	c3                   	ret    

0001033a <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   1033a:	55                   	push   %ebp
   1033b:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1033d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10340:	f7 d8                	neg    %eax
   10342:	23 45 08             	and    0x8(%ebp),%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	0f 22 d8             	mov    %eax,%cr3
}
   10350:	90                   	nop
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <pde_index>:
#pragma pack()

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
   10356:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	c1 e8 16             	shr    $0x16,%eax
   1035f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10362:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10365:	c9                   	leave  
   10366:	c3                   	ret    

00010367 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10367:	55                   	push   %ebp
   10368:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10371:	c0 ea 04             	shr    $0x4,%dl
   10374:	0f b6 d2             	movzbl %dl,%edx
   10377:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1037b:	c1 e1 04             	shl    $0x4,%ecx
   1037e:	09 ca                	or     %ecx,%edx
   10380:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10384:	c1 e0 0c             	shl    $0xc,%eax
   10387:	09 d0                	or     %edx,%eax
   10389:	c1 e0 0c             	shl    $0xc,%eax
}
   1038c:	5d                   	pop    %ebp
   1038d:	c3                   	ret    

0001038e <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index (uint32_t vaddr) {
   1038e:	55                   	push   %ebp
   1038f:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	c1 e8 0c             	shr    $0xc,%eax
   10397:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1039c:	5d                   	pop    %ebp
   1039d:	c3                   	ret    

0001039e <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1039e:	55                   	push   %ebp
   1039f:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   103a8:	c0 ea 04             	shr    $0x4,%dl
   103ab:	0f b6 d2             	movzbl %dl,%edx
   103ae:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103b2:	c1 e1 04             	shl    $0x4,%ecx
   103b5:	09 ca                	or     %ecx,%edx
   103b7:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103bb:	c1 e0 0c             	shl    $0xc,%eax
   103be:	09 d0                	or     %edx,%eax
   103c0:	c1 e0 0c             	shl    $0xc,%eax
}
   103c3:	5d                   	pop    %ebp
   103c4:	c3                   	ret    

000103c5 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm (pte_t * pte) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);                   // 2023年2月19 同学发现有问题，改了下
   103c8:	8b 45 08             	mov    0x8(%ebp),%eax
   103cb:	8b 00                	mov    (%eax),%eax
   103cd:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103d2:	5d                   	pop    %ebp
   103d3:	c3                   	ret    

000103d4 <mmu_set_page_dir>:

/**
 * @brief 重新加载整个页表
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir (uint32_t paddr) {
   103d4:	55                   	push   %ebp
   103d5:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103d7:	ff 75 08             	pushl  0x8(%ebp)
   103da:	e8 68 ff ff ff       	call   10347 <write_cr3>
   103df:	83 c4 04             	add    $0x4,%esp
}
   103e2:	90                   	nop
   103e3:	c9                   	leave  
   103e4:	c3                   	ret    

000103e5 <current_page_dir>:
static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); // 内核页目录表

/**
 * @brief 获取当前页表地址
 */
static pde_t * current_page_dir (void) {
   103e5:	55                   	push   %ebp
   103e6:	89 e5                	mov    %esp,%ebp
   103e8:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103eb:	e8 e0 12 00 00       	call   116d0 <task_current>
   103f0:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
}
   103f6:	c9                   	leave  
   103f7:	c3                   	ret    

000103f8 <addr_alloc_init>:
/**
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
                    uint32_t start, uint32_t size, uint32_t page_size) {
   103f8:	55                   	push   %ebp
   103f9:	89 e5                	mov    %esp,%ebp
   103fb:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	83 ec 0c             	sub    $0xc,%esp
   10404:	50                   	push   %eax
   10405:	e8 a4 77 00 00       	call   17bae <mutex_init>
   1040a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 10             	mov    0x10(%ebp),%edx
   10413:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 55 14             	mov    0x14(%ebp),%edx
   1041c:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 55 18             	mov    0x18(%ebp),%edx
   10425:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 40 24             	mov    0x24(%eax),%eax
   1042e:	ba 00 00 00 00       	mov    $0x0,%edx
   10433:	f7 75 18             	divl   0x18(%ebp)
   10436:	89 c2                	mov    %eax,%edx
   10438:	8b 45 08             	mov    0x8(%ebp),%eax
   1043b:	83 c0 14             	add    $0x14,%eax
   1043e:	6a 00                	push   $0x0
   10440:	52                   	push   %edx
   10441:	ff 75 0c             	pushl  0xc(%ebp)
   10444:	50                   	push   %eax
   10445:	e8 47 7a 00 00       	call   17e91 <bitmap_init>
   1044a:	83 c4 10             	add    $0x10,%esp
}
   1044d:	90                   	nop
   1044e:	c9                   	leave  
   1044f:	c3                   	ret    

00010450 <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   10450:	55                   	push   %ebp
   10451:	89 e5                	mov    %esp,%ebp
   10453:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	83 ec 0c             	sub    $0xc,%esp
   10463:	50                   	push   %eax
   10464:	e8 73 77 00 00       	call   17bdc <mutex_lock>
   10469:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	83 c0 14             	add    $0x14,%eax
   10472:	83 ec 04             	sub    $0x4,%esp
   10475:	ff 75 0c             	pushl  0xc(%ebp)
   10478:	6a 00                	push   $0x0
   1047a:	50                   	push   %eax
   1047b:	e8 8d 7b 00 00       	call   1800d <bitmap_alloc_nbits>
   10480:	83 c4 10             	add    $0x10,%esp
   10483:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1048a:	78 17                	js     104a3 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 20             	mov    0x20(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10498:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1049b:	0f af c1             	imul   %ecx,%eax
   1049e:	01 d0                	add    %edx,%eax
   104a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	83 ec 0c             	sub    $0xc,%esp
   104a9:	50                   	push   %eax
   104aa:	e8 c4 77 00 00       	call   17c73 <mutex_unlock>
   104af:	83 c4 10             	add    $0x10,%esp
    return addr;
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104b5:	c9                   	leave  
   104b6:	c3                   	ret    

000104b7 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   104b7:	55                   	push   %ebp
   104b8:	89 e5                	mov    %esp,%ebp
   104ba:	53                   	push   %ebx
   104bb:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 12 77 00 00       	call   17bdc <mutex_lock>
   104ca:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	8b 40 20             	mov    0x20(%eax),%eax
   104d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   104d6:	89 d1                	mov    %edx,%ecx
   104d8:	29 c1                	sub    %eax,%ecx
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104e0:	89 c8                	mov    %ecx,%eax
   104e2:	ba 00 00 00 00       	mov    $0x0,%edx
   104e7:	f7 f3                	div    %ebx
   104e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ef:	8b 55 08             	mov    0x8(%ebp),%edx
   104f2:	83 c2 14             	add    $0x14,%edx
   104f5:	6a 00                	push   $0x0
   104f7:	ff 75 10             	pushl  0x10(%ebp)
   104fa:	50                   	push   %eax
   104fb:	52                   	push   %edx
   104fc:	e8 e3 79 00 00       	call   17ee4 <bitmap_set_bit>
   10501:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	50                   	push   %eax
   1050b:	e8 63 77 00 00       	call   17c73 <mutex_unlock>
   10510:	83 c4 10             	add    $0x10,%esp
}
   10513:	90                   	nop
   10514:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10517:	c9                   	leave  
   10518:	c3                   	ret    

00010519 <show_mem_info>:

static void show_mem_info (boot_info_t * boot_info) {
   10519:	55                   	push   %ebp
   1051a:	89 e5                	mov    %esp,%ebp
   1051c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1051f:	83 ec 0c             	sub    $0xc,%esp
   10522:	68 80 89 01 00       	push   $0x18980
   10527:	e8 77 83 00 00       	call   188a3 <log_printf>
   1052c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10536:	eb 29                	jmp    10561 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i,
   10538:	8b 45 08             	mov    0x8(%ebp),%eax
   1053b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1053e:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10548:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1054b:	52                   	push   %edx
   1054c:	50                   	push   %eax
   1054d:	ff 75 f4             	pushl  -0xc(%ebp)
   10550:	68 8c 89 01 00       	push   $0x1898c
   10555:	e8 49 83 00 00       	call   188a3 <log_printf>
   1055a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	8b 40 50             	mov    0x50(%eax),%eax
   10567:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1056a:	7c cc                	jl     10538 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1056c:	83 ec 0c             	sub    $0xc,%esp
   1056f:	68 9e 89 01 00       	push   $0x1899e
   10574:	e8 2a 83 00 00       	call   188a3 <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp
}
   1057c:	90                   	nop
   1057d:	c9                   	leave  
   1057e:	c3                   	ret    

0001057f <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t * boot_info) {
   1057f:	55                   	push   %ebp
   10580:	89 e5                	mov    %esp,%ebp
   10582:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1058c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10593:	eb 16                	jmp    105ab <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1059b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1059f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105a2:	01 d0                	add    %edx,%eax
   105a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   105a7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	8b 40 50             	mov    0x50(%eax),%eax
   105b1:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105b4:	7c df                	jl     10595 <total_mem_size+0x16>
    }
    return mem_size;
   105b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105b9:	c9                   	leave  
   105ba:	c3                   	ret    

000105bb <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   105bb:	55                   	push   %ebp
   105bc:	89 e5                	mov    %esp,%ebp
   105be:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105c1:	ff 75 0c             	pushl  0xc(%ebp)
   105c4:	e8 8a fd ff ff       	call   10353 <pde_index>
   105c9:	83 c4 04             	add    $0x4,%esp
   105cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	01 d0                	add    %edx,%eax
   105d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   105db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105de:	0f b6 00             	movzbl (%eax),%eax
   105e1:	83 e0 01             	and    $0x1,%eax
   105e4:	84 c0                	test   %al,%al
   105e6:	74 10                	je     105f8 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   105e8:	ff 75 f0             	pushl  -0x10(%ebp)
   105eb:	e8 77 fd ff ff       	call   10367 <pde_paddr>
   105f0:	83 c4 04             	add    $0x4,%esp
   105f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105f6:	eb 57                	jmp    1064f <find_pte+0x94>
    } else {
        // 如果不存在，则考虑分配一个
        if (alloc == 0) {
   105f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105fc:	75 07                	jne    10605 <find_pte+0x4a>
            return (pte_t *)0;
   105fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10603:	eb 64                	jmp    10669 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10605:	83 ec 08             	sub    $0x8,%esp
   10608:	6a 01                	push   $0x1
   1060a:	68 00 b0 01 00       	push   $0x1b000
   1060f:	e8 3c fe ff ff       	call   10450 <addr_alloc_page>
   10614:	83 c4 10             	add    $0x10,%esp
   10617:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1061a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1061e:	75 07                	jne    10627 <find_pte+0x6c>
            return (pte_t *)0;
   10620:	b8 00 00 00 00       	mov    $0x0,%eax
   10625:	eb 42                	jmp    10669 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10627:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1062a:	83 c8 07             	or     $0x7,%eax
   1062d:	89 c2                	mov    %eax,%edx
   1062f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10632:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        //kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10637:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1063a:	83 ec 04             	sub    $0x4,%esp
   1063d:	68 00 10 00 00       	push   $0x1000
   10642:	6a 00                	push   $0x0
   10644:	ff 75 f4             	pushl  -0xc(%ebp)
   10647:	e8 ad 7c 00 00       	call   182f9 <kernel_memset>
   1064c:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1064f:	83 ec 0c             	sub    $0xc,%esp
   10652:	ff 75 0c             	pushl  0xc(%ebp)
   10655:	e8 34 fd ff ff       	call   1038e <pte_index>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10667:	01 d0                	add    %edx,%eax
}
   10669:	c9                   	leave  
   1066a:	c3                   	ret    

0001066b <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   1066b:	55                   	push   %ebp
   1066c:	89 e5                	mov    %esp,%ebp
   1066e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10678:	eb 6e                	jmp    106e8 <memory_create_map+0x7d>
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   1067a:	83 ec 04             	sub    $0x4,%esp
   1067d:	6a 01                	push   $0x1
   1067f:	ff 75 0c             	pushl  0xc(%ebp)
   10682:	ff 75 08             	pushl  0x8(%ebp)
   10685:	e8 31 ff ff ff       	call   105bb <find_pte>
   1068a:	83 c4 10             	add    $0x10,%esp
   1068d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   10690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10694:	75 07                	jne    1069d <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1069b:	eb 58                	jmp    106f5 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1069d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a0:	0f b6 00             	movzbl (%eax),%eax
   106a3:	83 e0 01             	and    $0x1,%eax
   106a6:	84 c0                	test   %al,%al
   106a8:	74 1c                	je     106c6 <memory_create_map+0x5b>
   106aa:	68 a0 89 01 00       	push   $0x189a0
   106af:	68 bc 8a 01 00       	push   $0x18abc
   106b4:	68 8a 00 00 00       	push   $0x8a
   106b9:	68 b4 89 01 00       	push   $0x189b4
   106be:	e8 83 7f 00 00       	call   18646 <panic>
   106c3:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106c6:	8b 45 10             	mov    0x10(%ebp),%eax
   106c9:	0b 45 18             	or     0x18(%ebp),%eax
   106cc:	83 c8 01             	or     $0x1,%eax
   106cf:	89 c2                	mov    %eax,%edx
   106d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d4:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106d6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106dd:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106eb:	3b 45 14             	cmp    0x14(%ebp),%eax
   106ee:	7c 8a                	jl     1067a <memory_create_map+0xf>
    }

    return 0;
   106f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106f5:	c9                   	leave  
   106f6:	c3                   	ret    

000106f7 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table (void) {
   106f7:	55                   	push   %ebp
   106f8:	89 e5                	mov    %esp,%ebp
   106fa:	83 ec 28             	sub    $0x28,%esp
        // 扩展存储空间一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106fd:	83 ec 04             	sub    $0x4,%esp
   10700:	68 00 10 00 00       	push   $0x1000
   10705:	6a 00                	push   $0x0
   10707:	68 00 c0 01 00       	push   $0x1c000
   1070c:	e8 e8 7b 00 00       	call   182f9 <kernel_memset>
   10711:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1071b:	e9 83 00 00 00       	jmp    107a3 <create_kernel_table+0xac>
        memory_map_t * map = kernel_map + i;
   10720:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10723:	c1 e0 04             	shl    $0x4,%eax
   10726:	05 00 a0 01 00       	add    $0x1a000,%eax
   1072b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1072e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10731:	8b 00                	mov    (%eax),%eax
   10733:	83 ec 08             	sub    $0x8,%esp
   10736:	68 00 10 00 00       	push   $0x1000
   1073b:	50                   	push   %eax
   1073c:	e8 f9 fb ff ff       	call   1033a <down2>
   10741:	83 c4 10             	add    $0x10,%esp
   10744:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10747:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074a:	8b 40 04             	mov    0x4(%eax),%eax
   1074d:	83 ec 08             	sub    $0x8,%esp
   10750:	68 00 10 00 00       	push   $0x1000
   10755:	50                   	push   %eax
   10756:	e8 c8 fb ff ff       	call   10323 <up2>
   1075b:	83 c4 10             	add    $0x10,%esp
   1075e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10761:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10764:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10767:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1076d:	85 c0                	test   %eax,%eax
   1076f:	0f 48 c2             	cmovs  %edx,%eax
   10772:	c1 f8 0c             	sar    $0xc,%eax
   10775:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10778:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1077b:	8b 50 0c             	mov    0xc(%eax),%edx
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 40 08             	mov    0x8(%eax),%eax
   10784:	89 c1                	mov    %eax,%ecx
   10786:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10789:	83 ec 0c             	sub    $0xc,%esp
   1078c:	52                   	push   %edx
   1078d:	ff 75 e4             	pushl  -0x1c(%ebp)
   10790:	51                   	push   %ecx
   10791:	50                   	push   %eax
   10792:	68 00 c0 01 00       	push   $0x1c000
   10797:	e8 cf fe ff ff       	call   1066b <memory_create_map>
   1079c:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1079f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a6:	83 f8 04             	cmp    $0x4,%eax
   107a9:	0f 86 71 ff ff ff    	jbe    10720 <create_kernel_table+0x29>
    }
}
   107af:	90                   	nop
   107b0:	c9                   	leave  
   107b1:	c3                   	ret    

000107b2 <memory_create_uvm>:

/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm (void) {
   107b2:	55                   	push   %ebp
   107b3:	89 e5                	mov    %esp,%ebp
   107b5:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107b8:	83 ec 08             	sub    $0x8,%esp
   107bb:	6a 01                	push   $0x1
   107bd:	68 00 b0 01 00       	push   $0x1b000
   107c2:	e8 89 fc ff ff       	call   10450 <addr_alloc_page>
   107c7:	83 c4 10             	add    $0x10,%esp
   107ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107d1:	75 07                	jne    107da <memory_create_uvm+0x28>
        return 0;
   107d3:	b8 00 00 00 00       	mov    $0x0,%eax
   107d8:	eb 5b                	jmp    10835 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107da:	83 ec 04             	sub    $0x4,%esp
   107dd:	68 00 10 00 00       	push   $0x1000
   107e2:	6a 00                	push   $0x0
   107e4:	ff 75 f0             	pushl  -0x10(%ebp)
   107e7:	e8 0d 7b 00 00       	call   182f9 <kernel_memset>
   107ec:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107ef:	83 ec 0c             	sub    $0xc,%esp
   107f2:	68 00 00 00 80       	push   $0x80000000
   107f7:	e8 57 fb ff ff       	call   10353 <pde_index>
   107fc:	83 c4 10             	add    $0x10,%esp
   107ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10802:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10809:	eb 1f                	jmp    1082a <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1080b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10815:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10818:	01 c2                	add    %eax,%edx
   1081a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081d:	8b 04 85 00 c0 01 00 	mov    0x1c000(,%eax,4),%eax
   10824:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10826:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1082a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10830:	77 d9                	ja     1080b <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10832:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10835:	c9                   	leave  
   10836:	c3                   	ret    

00010837 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm (uint32_t page_dir) {
   10837:	55                   	push   %ebp
   10838:	89 e5                	mov    %esp,%ebp
   1083a:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083d:	68 00 00 00 80       	push   $0x80000000
   10842:	e8 0c fb ff ff       	call   10353 <pde_index>
   10847:	83 c4 04             	add    $0x4,%esp
   1084a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   1084d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10850:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10857:	8b 45 08             	mov    0x8(%ebp),%eax
   1085a:	01 d0                	add    %edx,%eax
   1085c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1085f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10863:	75 1c                	jne    10881 <memory_destroy_uvm+0x4a>
   10865:	68 eb 89 01 00       	push   $0x189eb
   1086a:	68 d0 8a 01 00       	push   $0x18ad0
   1086f:	68 d5 00 00 00       	push   $0xd5
   10874:	68 b4 89 01 00       	push   $0x189b4
   10879:	e8 c8 7d 00 00       	call   18646 <panic>
   1087e:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10881:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10884:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10887:	e9 95 00 00 00       	jmp    10921 <memory_destroy_uvm+0xea>
        if (!pde->present) {
   1088c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088f:	0f b6 00             	movzbl (%eax),%eax
   10892:	83 e0 01             	and    $0x1,%eax
   10895:	84 c0                	test   %al,%al
   10897:	74 7f                	je     10918 <memory_destroy_uvm+0xe1>
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   10899:	83 ec 0c             	sub    $0xc,%esp
   1089c:	ff 75 f4             	pushl  -0xc(%ebp)
   1089f:	e8 c3 fa ff ff       	call   10367 <pde_paddr>
   108a4:	83 c4 10             	add    $0x10,%esp
   108a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108aa:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   108b1:	eb 39                	jmp    108ec <memory_destroy_uvm+0xb5>
            if (!pte->present) {
   108b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108b6:	0f b6 00             	movzbl (%eax),%eax
   108b9:	83 e0 01             	and    $0x1,%eax
   108bc:	84 c0                	test   %al,%al
   108be:	74 23                	je     108e3 <memory_destroy_uvm+0xac>
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108c0:	83 ec 0c             	sub    $0xc,%esp
   108c3:	ff 75 ec             	pushl  -0x14(%ebp)
   108c6:	e8 d3 fa ff ff       	call   1039e <pte_paddr>
   108cb:	83 c4 10             	add    $0x10,%esp
   108ce:	83 ec 04             	sub    $0x4,%esp
   108d1:	6a 01                	push   $0x1
   108d3:	50                   	push   %eax
   108d4:	68 00 b0 01 00       	push   $0x1b000
   108d9:	e8 d9 fb ff ff       	call   104b7 <addr_free_page>
   108de:	83 c4 10             	add    $0x10,%esp
   108e1:	eb 01                	jmp    108e4 <memory_destroy_uvm+0xad>
                continue;
   108e3:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108e4:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108e8:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108ec:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108f3:	7e be                	jle    108b3 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108f5:	83 ec 0c             	sub    $0xc,%esp
   108f8:	ff 75 f4             	pushl  -0xc(%ebp)
   108fb:	e8 67 fa ff ff       	call   10367 <pde_paddr>
   10900:	83 c4 10             	add    $0x10,%esp
   10903:	83 ec 04             	sub    $0x4,%esp
   10906:	6a 01                	push   $0x1
   10908:	50                   	push   %eax
   10909:	68 00 b0 01 00       	push   $0x1b000
   1090e:	e8 a4 fb ff ff       	call   104b7 <addr_free_page>
   10913:	83 c4 10             	add    $0x10,%esp
   10916:	eb 01                	jmp    10919 <memory_destroy_uvm+0xe2>
            continue;
   10918:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10919:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1091d:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10921:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10928:	0f 8e 5e ff ff ff    	jle    1088c <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1092e:	83 ec 04             	sub    $0x4,%esp
   10931:	6a 01                	push   $0x1
   10933:	ff 75 08             	pushl  0x8(%ebp)
   10936:	68 00 b0 01 00       	push   $0x1b000
   1093b:	e8 77 fb ff ff       	call   104b7 <addr_free_page>
   10940:	83 c4 10             	add    $0x10,%esp
}
   10943:	90                   	nop
   10944:	c9                   	leave  
   10945:	c3                   	ret    

00010946 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm (uint32_t page_dir) {
   10946:	55                   	push   %ebp
   10947:	89 e5                	mov    %esp,%ebp
   10949:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   1094c:	e8 61 fe ff ff       	call   107b2 <memory_create_uvm>
   10951:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10954:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10958:	0f 84 1b 01 00 00    	je     10a79 <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1095e:	83 ec 0c             	sub    $0xc,%esp
   10961:	68 00 00 00 80       	push   $0x80000000
   10966:	e8 e8 f9 ff ff       	call   10353 <pde_index>
   1096b:	83 c4 10             	add    $0x10,%esp
   1096e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   10971:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10974:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1097b:	8b 45 08             	mov    0x8(%ebp),%eax
   1097e:	01 d0                	add    %edx,%eax
   10980:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10983:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10986:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10989:	e9 d9 00 00 00       	jmp    10a67 <memory_copy_uvm+0x121>
        if (!pde->present) {
   1098e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10991:	0f b6 00             	movzbl (%eax),%eax
   10994:	83 e0 01             	and    $0x1,%eax
   10997:	84 c0                	test   %al,%al
   10999:	0f 84 bf 00 00 00    	je     10a5e <memory_copy_uvm+0x118>
            continue;
        }

        // 遍历页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   1099f:	83 ec 0c             	sub    $0xc,%esp
   109a2:	ff 75 f4             	pushl  -0xc(%ebp)
   109a5:	e8 bd f9 ff ff       	call   10367 <pde_paddr>
   109aa:	83 c4 10             	add    $0x10,%esp
   109ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   109b0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109b7:	e9 93 00 00 00       	jmp    10a4f <memory_copy_uvm+0x109>
            if (!pte->present) {
   109bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109bf:	0f b6 00             	movzbl (%eax),%eax
   109c2:	83 e0 01             	and    $0x1,%eax
   109c5:	84 c0                	test   %al,%al
   109c7:	74 7d                	je     10a46 <memory_copy_uvm+0x100>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109c9:	83 ec 08             	sub    $0x8,%esp
   109cc:	6a 01                	push   $0x1
   109ce:	68 00 b0 01 00       	push   $0x1b000
   109d3:	e8 78 fa ff ff       	call   10450 <addr_alloc_page>
   109d8:	83 c4 10             	add    $0x10,%esp
   109db:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   109de:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109e2:	0f 84 94 00 00 00    	je     10a7c <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109eb:	c1 e0 16             	shl    $0x16,%eax
   109ee:	89 c2                	mov    %eax,%edx
   109f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109f3:	c1 e0 0c             	shl    $0xc,%eax
   109f6:	09 d0                	or     %edx,%eax
   109f8:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109fb:	83 ec 0c             	sub    $0xc,%esp
   109fe:	ff 75 ec             	pushl  -0x14(%ebp)
   10a01:	e8 bf f9 ff ff       	call   103c5 <get_pte_perm>
   10a06:	83 c4 10             	add    $0x10,%esp
   10a09:	89 c2                	mov    %eax,%edx
   10a0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a0e:	83 ec 0c             	sub    $0xc,%esp
   10a11:	52                   	push   %edx
   10a12:	6a 01                	push   $0x1
   10a14:	ff 75 dc             	pushl  -0x24(%ebp)
   10a17:	ff 75 d8             	pushl  -0x28(%ebp)
   10a1a:	50                   	push   %eax
   10a1b:	e8 4b fc ff ff       	call   1066b <memory_create_map>
   10a20:	83 c4 20             	add    $0x20,%esp
   10a23:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10a26:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a2a:	78 53                	js     10a7f <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a2c:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a32:	83 ec 04             	sub    $0x4,%esp
   10a35:	68 00 10 00 00       	push   $0x1000
   10a3a:	52                   	push   %edx
   10a3b:	50                   	push   %eax
   10a3c:	e8 69 78 00 00       	call   182aa <kernel_memcpy>
   10a41:	83 c4 10             	add    $0x10,%esp
   10a44:	eb 01                	jmp    10a47 <memory_copy_uvm+0x101>
                continue;
   10a46:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a47:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a4b:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a4f:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a56:	0f 8e 60 ff ff ff    	jle    109bc <memory_copy_uvm+0x76>
   10a5c:	eb 01                	jmp    10a5f <memory_copy_uvm+0x119>
            continue;
   10a5e:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10a5f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a63:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a67:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a6e:	0f 8e 1a ff ff ff    	jle    1098e <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a77:	eb 20                	jmp    10a99 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a79:	90                   	nop
   10a7a:	eb 04                	jmp    10a80 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7c:	90                   	nop
   10a7d:	eb 01                	jmp    10a80 <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7f:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10a80:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a84:	74 0e                	je     10a94 <memory_copy_uvm+0x14e>
        memory_destroy_uvm(to_page_dir);
   10a86:	83 ec 0c             	sub    $0xc,%esp
   10a89:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a8c:	e8 a6 fd ff ff       	call   10837 <memory_destroy_uvm>
   10a91:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a99:	c9                   	leave  
   10a9a:	c3                   	ret    

00010a9b <memory_get_paddr>:

/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr (uint32_t page_dir, uint32_t vaddr) {
   10a9b:	55                   	push   %ebp
   10a9c:	89 e5                	mov    %esp,%ebp
   10a9e:	83 ec 18             	sub    $0x18,%esp
    pte_t * pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10aa1:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa4:	83 ec 04             	sub    $0x4,%esp
   10aa7:	6a 00                	push   $0x0
   10aa9:	ff 75 0c             	pushl  0xc(%ebp)
   10aac:	50                   	push   %eax
   10aad:	e8 09 fb ff ff       	call   105bb <find_pte>
   10ab2:	83 c4 10             	add    $0x10,%esp
   10ab5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0) {
   10ab8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10abc:	75 07                	jne    10ac5 <memory_get_paddr+0x2a>
        return 0;
   10abe:	b8 00 00 00 00       	mov    $0x0,%eax
   10ac3:	eb 1a                	jmp    10adf <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ac5:	83 ec 0c             	sub    $0xc,%esp
   10ac8:	ff 75 f4             	pushl  -0xc(%ebp)
   10acb:	e8 ce f8 ff ff       	call   1039e <pte_paddr>
   10ad0:	83 c4 10             	add    $0x10,%esp
   10ad3:	89 c2                	mov    %eax,%edx
   10ad5:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad8:	25 ff 0f 00 00       	and    $0xfff,%eax
   10add:	01 d0                	add    %edx,%eax
}
   10adf:	c9                   	leave  
   10ae0:	c3                   	ret    

00010ae1 <memory_copy_uvm_data>:

/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   10ae1:	55                   	push   %ebp
   10ae2:	89 e5                	mov    %esp,%ebp
   10ae4:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while(size > 0){
   10ae7:	eb 6e                	jmp    10b57 <memory_copy_uvm_data+0x76>
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ae9:	83 ec 08             	sub    $0x8,%esp
   10aec:	ff 75 08             	pushl  0x8(%ebp)
   10aef:	ff 75 0c             	pushl  0xc(%ebp)
   10af2:	e8 a4 ff ff ff       	call   10a9b <memory_get_paddr>
   10af7:	83 c4 10             	add    $0x10,%esp
   10afa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   10afd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b01:	75 07                	jne    10b0a <memory_copy_uvm_data+0x29>
            return -1;
   10b03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b08:	eb 58                	jmp    10b62 <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10b0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b0d:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b12:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b15:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b1a:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   10b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b23:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b26:	76 06                	jbe    10b2e <memory_copy_uvm_data+0x4d>
            curr_size = size;       // 如果比较大，超过页边界，则只拷贝此页内的
   10b28:	8b 45 14             	mov    0x14(%ebp),%eax
   10b2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b2e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b31:	8b 55 10             	mov    0x10(%ebp),%edx
   10b34:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b37:	83 ec 04             	sub    $0x4,%esp
   10b3a:	51                   	push   %ecx
   10b3b:	52                   	push   %edx
   10b3c:	50                   	push   %eax
   10b3d:	e8 68 77 00 00       	call   182aa <kernel_memcpy>
   10b42:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b45:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b48:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b4e:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b54:	01 45 10             	add    %eax,0x10(%ebp)
    while(size > 0){
   10b57:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b5b:	75 8c                	jne    10ae9 <memory_copy_uvm_data+0x8>
  }

  return 0;
   10b5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b62:	c9                   	leave  
   10b63:	c3                   	ret    

00010b64 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10b64:	55                   	push   %ebp
   10b65:	89 e5                	mov    %esp,%ebp
   10b67:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b70:	68 00 10 00 00       	push   $0x1000
   10b75:	ff 75 10             	pushl  0x10(%ebp)
   10b78:	e8 a6 f7 ff ff       	call   10323 <up2>
   10b7d:	83 c4 08             	add    $0x8,%esp
   10b80:	c1 e8 0c             	shr    $0xc,%eax
   10b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b86:	68 00 10 00 00       	push   $0x1000
   10b8b:	ff 75 0c             	pushl  0xc(%ebp)
   10b8e:	e8 a7 f7 ff ff       	call   1033a <down2>
   10b93:	83 c4 08             	add    $0x8,%esp
   10b96:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++) {
   10b99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10ba0:	e9 95 00 00 00       	jmp    10c3a <memory_alloc_for_page_dir+0xd6>
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10ba5:	83 ec 08             	sub    $0x8,%esp
   10ba8:	6a 01                	push   $0x1
   10baa:	68 00 b0 01 00       	push   $0x1b000
   10baf:	e8 9c f8 ff ff       	call   10450 <addr_alloc_page>
   10bb4:	83 c4 10             	add    $0x10,%esp
   10bb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10bba:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bbe:	75 17                	jne    10bd7 <memory_alloc_for_page_dir+0x73>
            log_printf("mem alloc failed. no memory");
   10bc0:	83 ec 0c             	sub    $0xc,%esp
   10bc3:	68 f9 89 01 00       	push   $0x189f9
   10bc8:	e8 d6 7c 00 00       	call   188a3 <log_printf>
   10bcd:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bd0:	b8 00 00 00 00       	mov    $0x0,%eax
   10bd5:	eb 74                	jmp    10c4b <memory_alloc_for_page_dir+0xe7>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bd7:	8b 55 14             	mov    0x14(%ebp),%edx
   10bda:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdd:	83 ec 0c             	sub    $0xc,%esp
   10be0:	52                   	push   %edx
   10be1:	6a 01                	push   $0x1
   10be3:	ff 75 e8             	pushl  -0x18(%ebp)
   10be6:	ff 75 f4             	pushl  -0xc(%ebp)
   10be9:	50                   	push   %eax
   10bea:	e8 7c fa ff ff       	call   1066b <memory_create_map>
   10bef:	83 c4 20             	add    $0x20,%esp
   10bf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10bf5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10bf9:	79 34                	jns    10c2f <memory_alloc_for_page_dir+0xcb>
            log_printf("create memory map failed. err = %d", err);
   10bfb:	83 ec 08             	sub    $0x8,%esp
   10bfe:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c01:	68 18 8a 01 00       	push   $0x18a18
   10c06:	e8 98 7c 00 00       	call   188a3 <log_printf>
   10c0b:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   10c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c11:	83 c0 01             	add    $0x1,%eax
   10c14:	83 ec 04             	sub    $0x4,%esp
   10c17:	50                   	push   %eax
   10c18:	ff 75 0c             	pushl  0xc(%ebp)
   10c1b:	68 00 b0 01 00       	push   $0x1b000
   10c20:	e8 92 f8 ff ff       	call   104b7 <addr_free_page>
   10c25:	83 c4 10             	add    $0x10,%esp
            return -1;
   10c28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2d:	eb 1c                	jmp    10c4b <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c2f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10c36:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c3d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c40:	0f 8c 5f ff ff ff    	jl     10ba5 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   10c46:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c4b:	c9                   	leave  
   10c4c:	c3                   	ret    

00010c4d <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10c4d:	55                   	push   %ebp
   10c4e:	89 e5                	mov    %esp,%ebp
   10c50:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10c53:	e8 78 0a 00 00       	call   116d0 <task_current>
   10c58:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   10c5e:	ff 75 10             	pushl  0x10(%ebp)
   10c61:	ff 75 0c             	pushl  0xc(%ebp)
   10c64:	ff 75 08             	pushl  0x8(%ebp)
   10c67:	50                   	push   %eax
   10c68:	e8 f7 fe ff ff       	call   10b64 <memory_alloc_for_page_dir>
   10c6d:	83 c4 10             	add    $0x10,%esp
}
   10c70:	c9                   	leave  
   10c71:	c3                   	ret    

00010c72 <memory_alloc_page>:

/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page (void) {
   10c72:	55                   	push   %ebp
   10c73:	89 e5                	mov    %esp,%ebp
   10c75:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c78:	83 ec 08             	sub    $0x8,%esp
   10c7b:	6a 01                	push   $0x1
   10c7d:	68 00 b0 01 00       	push   $0x1b000
   10c82:	e8 c9 f7 ff ff       	call   10450 <addr_alloc_page>
   10c87:	83 c4 10             	add    $0x10,%esp
}
   10c8a:	c9                   	leave  
   10c8b:	c3                   	ret    

00010c8c <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page (uint32_t addr) {
   10c8c:	55                   	push   %ebp
   10c8d:	89 e5                	mov    %esp,%ebp
   10c8f:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   10c92:	8b 45 08             	mov    0x8(%ebp),%eax
   10c95:	85 c0                	test   %eax,%eax
   10c97:	78 17                	js     10cb0 <memory_free_page+0x24>
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c99:	83 ec 04             	sub    $0x4,%esp
   10c9c:	6a 01                	push   $0x1
   10c9e:	ff 75 08             	pushl  0x8(%ebp)
   10ca1:	68 00 b0 01 00       	push   $0x1b000
   10ca6:	e8 0c f8 ff ff       	call   104b7 <addr_free_page>
   10cab:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10cae:	eb 72                	jmp    10d22 <memory_free_page+0x96>
        pte_t * pte = find_pte(current_page_dir(), addr, 0);
   10cb0:	e8 30 f7 ff ff       	call   103e5 <current_page_dir>
   10cb5:	83 ec 04             	sub    $0x4,%esp
   10cb8:	6a 00                	push   $0x0
   10cba:	ff 75 08             	pushl  0x8(%ebp)
   10cbd:	50                   	push   %eax
   10cbe:	e8 f8 f8 ff ff       	call   105bb <find_pte>
   10cc3:	83 c4 10             	add    $0x10,%esp
   10cc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10cc9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ccd:	75 0d                	jne    10cdc <memory_free_page+0x50>
   10ccf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cd2:	0f b6 00             	movzbl (%eax),%eax
   10cd5:	83 e0 01             	and    $0x1,%eax
   10cd8:	84 c0                	test   %al,%al
   10cda:	75 1c                	jne    10cf8 <memory_free_page+0x6c>
   10cdc:	68 3c 8a 01 00       	push   $0x18a3c
   10ce1:	68 e4 8a 01 00       	push   $0x18ae4
   10ce6:	68 86 01 00 00       	push   $0x186
   10ceb:	68 b4 89 01 00       	push   $0x189b4
   10cf0:	e8 51 79 00 00       	call   18646 <panic>
   10cf5:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10cf8:	83 ec 0c             	sub    $0xc,%esp
   10cfb:	ff 75 f4             	pushl  -0xc(%ebp)
   10cfe:	e8 9b f6 ff ff       	call   1039e <pte_paddr>
   10d03:	83 c4 10             	add    $0x10,%esp
   10d06:	83 ec 04             	sub    $0x4,%esp
   10d09:	6a 01                	push   $0x1
   10d0b:	50                   	push   %eax
   10d0c:	68 00 b0 01 00       	push   $0x1b000
   10d11:	e8 a1 f7 ff ff       	call   104b7 <addr_free_page>
   10d16:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d1c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d22:	90                   	nop
   10d23:	c9                   	leave  
   10d24:	c3                   	ret    

00010d25 <memory_init>:
 * @brief 初始化内存管理系统
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init (boot_info_t * boot_info) {
   10d25:	55                   	push   %ebp
   10d26:	89 e5                	mov    %esp,%ebp
   10d28:	83 ec 18             	sub    $0x18,%esp

    // log_printf("mem init.");
    // show_mem_info(boot_info);

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;   // 2022年-10-1 经同学反馈，发现这里有点bug，改了下
   10d2b:	c7 45 f4 47 04 06 00 	movl   $0x60447,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d32:	ff 75 08             	pushl  0x8(%ebp)
   10d35:	e8 45 f8 ff ff       	call   1057f <total_mem_size>
   10d3a:	83 c4 04             	add    $0x4,%esp
   10d3d:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d42:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   10d45:	68 00 10 00 00       	push   $0x1000
   10d4a:	ff 75 f0             	pushl  -0x10(%ebp)
   10d4d:	e8 e8 f5 ff ff       	call   1033a <down2>
   10d52:	83 c4 08             	add    $0x8,%esp
   10d55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // log_printf("Free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d58:	83 ec 0c             	sub    $0xc,%esp
   10d5b:	68 00 10 00 00       	push   $0x1000
   10d60:	ff 75 f0             	pushl  -0x10(%ebp)
   10d63:	68 00 00 10 00       	push   $0x100000
   10d68:	ff 75 f4             	pushl  -0xc(%ebp)
   10d6b:	68 00 b0 01 00       	push   $0x1b000
   10d70:	e8 83 f6 ff ff       	call   103f8 <addr_alloc_init>
   10d75:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10d78:	a1 24 b0 01 00       	mov    0x1b024,%eax
   10d7d:	c1 e8 0c             	shr    $0xc,%eax
   10d80:	83 ec 0c             	sub    $0xc,%esp
   10d83:	50                   	push   %eax
   10d84:	e8 f2 70 00 00       	call   17e7b <bitmap_byte_count>
   10d89:	83 c4 10             	add    $0x10,%esp
   10d8c:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10d8f:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10d96:	76 1c                	jbe    10db4 <memory_init+0x8f>
   10d98:	68 60 8a 01 00       	push   $0x18a60
   10d9d:	68 f8 8a 01 00       	push   $0x18af8
   10da2:	68 ab 01 00 00       	push   $0x1ab
   10da7:	68 b4 89 01 00       	push   $0x189b4
   10dac:	e8 95 78 00 00       	call   18646 <panic>
   10db1:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10db4:	e8 3e f9 ff ff       	call   106f7 <create_kernel_table>

    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10db9:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   10dbe:	83 ec 0c             	sub    $0xc,%esp
   10dc1:	50                   	push   %eax
   10dc2:	e8 0d f6 ff ff       	call   103d4 <mmu_set_page_dir>
   10dc7:	83 c4 10             	add    $0x10,%esp
}
   10dca:	90                   	nop
   10dcb:	c9                   	leave  
   10dcc:	c3                   	ret    

00010dcd <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char * sys_sbrk(int incr) {
   10dcd:	55                   	push   %ebp
   10dce:	89 e5                	mov    %esp,%ebp
   10dd0:	83 ec 38             	sub    $0x38,%esp
    task_t * task = task_current();
   10dd3:	e8 f8 08 00 00       	call   116d0 <task_current>
   10dd8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char * pre_heap_end = (char * )task->heap_end;
   10ddb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10dde:	8b 40 30             	mov    0x30(%eax),%eax
   10de1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10de4:	8b 45 08             	mov    0x8(%ebp),%eax
   10de7:	89 45 e8             	mov    %eax,-0x18(%ebp)

    ASSERT(incr >= 0);
   10dea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dee:	79 1c                	jns    10e0c <sys_sbrk+0x3f>
   10df0:	68 85 8a 01 00       	push   $0x18a85
   10df5:	68 04 8b 01 00       	push   $0x18b04
   10dfa:	68 bc 01 00 00       	push   $0x1bc
   10dff:	68 b4 89 01 00       	push   $0x189b4
   10e04:	e8 3d 78 00 00       	call   18646 <panic>
   10e09:	83 c4 10             	add    $0x10,%esp

    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0) {
   10e0c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e10:	75 1b                	jne    10e2d <sys_sbrk+0x60>
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e12:	83 ec 08             	sub    $0x8,%esp
   10e15:	ff 75 ec             	pushl  -0x14(%ebp)
   10e18:	68 8f 8a 01 00       	push   $0x18a8f
   10e1d:	e8 81 7a 00 00       	call   188a3 <log_printf>
   10e22:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e25:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e28:	e9 aa 00 00 00       	jmp    10ed7 <sys_sbrk+0x10a>
    } 
    
    uint32_t start = task->heap_end;
   10e2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e30:	8b 40 30             	mov    0x30(%eax),%eax
   10e33:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e36:	8b 55 08             	mov    0x8(%ebp),%edx
   10e39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e3c:	01 d0                	add    %edx,%eax
   10e3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e41:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e44:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e49:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset) {
   10e4c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e50:	74 37                	je     10e89 <sys_sbrk+0xbc>
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE) {
   10e52:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e55:	8b 45 08             	mov    0x8(%ebp),%eax
   10e58:	01 d0                	add    %edx,%eax
   10e5a:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e5f:	7f 0e                	jg     10e6f <sys_sbrk+0xa2>
            task->heap_end = end;
   10e61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e64:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10e67:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10e6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e6d:	eb 68                	jmp    10ed7 <sys_sbrk+0x10a>
        } else {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10e6f:	b8 00 10 00 00       	mov    $0x1000,%eax
   10e74:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10e77:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10e7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10e7d:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10e80:	8b 45 08             	mov    0x8(%ebp),%eax
   10e83:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10e86:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }

    // 处理其余的，起始对齐的页边界的
    if (incr) {
   10e89:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e8d:	74 3c                	je     10ecb <sys_sbrk+0xfe>
        uint32_t curr_size = end - start;
   10e8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e92:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10e95:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10e98:	83 ec 04             	sub    $0x4,%esp
   10e9b:	6a 07                	push   $0x7
   10e9d:	ff 75 d8             	pushl  -0x28(%ebp)
   10ea0:	ff 75 f4             	pushl  -0xc(%ebp)
   10ea3:	e8 a5 fd ff ff       	call   10c4d <memory_alloc_page_for>
   10ea8:	83 c4 10             	add    $0x10,%esp
   10eab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   10eae:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10eb2:	79 17                	jns    10ecb <sys_sbrk+0xfe>
            log_printf("sbrk: alloc mem failed.");
   10eb4:	83 ec 0c             	sub    $0xc,%esp
   10eb7:	68 a3 8a 01 00       	push   $0x18aa3
   10ebc:	e8 e2 79 00 00       	call   188a3 <log_printf>
   10ec1:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10ec4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ec9:	eb 0c                	jmp    10ed7 <sys_sbrk+0x10a>
        }
    }

    //log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10ecb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ece:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ed1:	89 50 30             	mov    %edx,0x30(%eax)
    return (char * )pre_heap_end;        
   10ed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   10ed7:	c9                   	leave  
   10ed8:	c3                   	ret    

00010ed9 <sys_print_msg>:
#include "fs/fs.h"

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

int sys_print_msg (char * fmt, int arg) {
   10ed9:	55                   	push   %ebp
   10eda:	89 e5                	mov    %esp,%ebp
   10edc:	83 ec 08             	sub    $0x8,%esp
	log_printf(fmt, arg);
   10edf:	83 ec 08             	sub    $0x8,%esp
   10ee2:	ff 75 0c             	pushl  0xc(%ebp)
   10ee5:	ff 75 08             	pushl  0x8(%ebp)
   10ee8:	e8 b6 79 00 00       	call   188a3 <log_printf>
   10eed:	83 c4 10             	add    $0x10,%esp
}
   10ef0:	90                   	nop
   10ef1:	c9                   	leave  
   10ef2:	c3                   	ret    

00010ef3 <do_handler_syscall>:
};

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall (syscall_frame_t * frame) {
   10ef3:	55                   	push   %ebp
   10ef4:	89 e5                	mov    %esp,%ebp
   10ef6:	53                   	push   %ebx
   10ef7:	83 ec 14             	sub    $0x14,%esp
	// 超出边界，返回错误
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10efa:	8b 45 08             	mov    0x8(%ebp),%eax
   10efd:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f00:	83 f8 64             	cmp    $0x64,%eax
   10f03:	77 4e                	ja     10f53 <do_handler_syscall+0x60>
		// 查表取得处理函数，然后调用处理
		syscall_handler_t handler = sys_table[frame->func_id];
   10f05:	8b 45 08             	mov    0x8(%ebp),%eax
   10f08:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f0b:	8b 04 85 20 8b 01 00 	mov    0x18b20(,%eax,4),%eax
   10f12:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (handler) {
   10f15:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f19:	74 38                	je     10f53 <do_handler_syscall+0x60>
			int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f1b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f1e:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f21:	89 c3                	mov    %eax,%ebx
   10f23:	8b 45 08             	mov    0x8(%ebp),%eax
   10f26:	8b 40 48             	mov    0x48(%eax),%eax
   10f29:	89 c1                	mov    %eax,%ecx
   10f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2e:	8b 40 44             	mov    0x44(%eax),%eax
   10f31:	89 c2                	mov    %eax,%edx
   10f33:	8b 45 08             	mov    0x8(%ebp),%eax
   10f36:	8b 40 40             	mov    0x40(%eax),%eax
   10f39:	53                   	push   %ebx
   10f3a:	51                   	push   %ecx
   10f3b:	52                   	push   %edx
   10f3c:	50                   	push   %eax
   10f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f40:	ff d0                	call   *%eax
   10f42:	83 c4 10             	add    $0x10,%esp
   10f45:	89 45 f0             	mov    %eax,-0x10(%ebp)
			frame->eax = ret;  // 设置系统调用的返回值，由eax传递
   10f48:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f4e:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f51:	eb 30                	jmp    10f83 <do_handler_syscall+0x90>
		}
	}

	// 不支持的系统调用，打印出错信息
	task_t * task = task_current();
   10f53:	e8 78 07 00 00       	call   116d0 <task_current>
   10f58:	89 45 ec             	mov    %eax,-0x14(%ebp)
	log_printf("task: %s, Unknown syscall: %d", task->name,  frame->func_id);
   10f5b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5e:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f61:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f64:	83 c2 04             	add    $0x4,%edx
   10f67:	83 ec 04             	sub    $0x4,%esp
   10f6a:	50                   	push   %eax
   10f6b:	52                   	push   %edx
   10f6c:	68 b4 8c 01 00       	push   $0x18cb4
   10f71:	e8 2d 79 00 00       	call   188a3 <log_printf>
   10f76:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;  // 设置系统调用的返回值，由eax传递
   10f79:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7c:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10f83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f86:	c9                   	leave  
   10f87:	c3                   	ret    

00010f88 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10f88:	55                   	push   %ebp
   10f89:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10f8b:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8e:	0f 22 d8             	mov    %eax,%cr3
}
   10f91:	90                   	nop
   10f92:	5d                   	pop    %ebp
   10f93:	c3                   	ret    

00010f94 <hlt>:
	idt.limit = size - 1;

	__asm__ __volatile__("lidt %0"::"m"(idt));
}

static inline void hlt(void) {
   10f94:	55                   	push   %ebp
   10f95:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10f97:	f4                   	hlt    
}
   10f98:	90                   	nop
   10f99:	5d                   	pop    %ebp
   10f9a:	c3                   	ret    

00010f9b <write_tr>:

static inline void write_tr (uint32_t tss_selector) {
   10f9b:	55                   	push   %ebp
   10f9c:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   10f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa1:	0f 00 d8             	ltr    %ax
}
   10fa4:	90                   	nop
   10fa5:	5d                   	pop    %ebp
   10fa6:	c3                   	ret    

00010fa7 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   10fa7:	55                   	push   %ebp
   10fa8:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10faa:	8b 45 08             	mov    0x8(%ebp),%eax
   10fad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb7:	8b 50 04             	mov    0x4(%eax),%edx
   10fba:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbd:	89 10                	mov    %edx,(%eax)
}
   10fbf:	90                   	nop
   10fc0:	5d                   	pop    %ebp
   10fc1:	c3                   	ret    

00010fc2 <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   10fc2:	55                   	push   %ebp
   10fc3:	89 e5                	mov    %esp,%ebp
    return node->next;
   10fc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc8:	8b 40 04             	mov    0x4(%eax),%eax
}
   10fcb:	5d                   	pop    %ebp
   10fcc:	c3                   	ret    

00010fcd <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   10fcd:	55                   	push   %ebp
   10fce:	89 e5                	mov    %esp,%ebp
    return list->count;
   10fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd3:	8b 40 08             	mov    0x8(%eax),%eax
}
   10fd6:	5d                   	pop    %ebp
   10fd7:	c3                   	ret    

00010fd8 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   10fd8:	55                   	push   %ebp
   10fd9:	89 e5                	mov    %esp,%ebp
    return list->first;
   10fdb:	8b 45 08             	mov    0x8(%ebp),%eax
   10fde:	8b 00                	mov    (%eax),%eax
}
   10fe0:	5d                   	pop    %ebp
   10fe1:	c3                   	ret    

00010fe2 <mmu_set_page_dir>:
static inline void mmu_set_page_dir (uint32_t paddr) {
   10fe2:	55                   	push   %ebp
   10fe3:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10fe5:	ff 75 08             	pushl  0x8(%ebp)
   10fe8:	e8 9b ff ff ff       	call   10f88 <write_cr3>
   10fed:	83 c4 04             	add    $0x4,%esp
}
   10ff0:	90                   	nop
   10ff1:	c9                   	leave  
   10ff2:	c3                   	ret    

00010ff3 <tss_init>:
static uint32_t idle_task_stack[IDLE_STACK_SIZE]; // 空闲任务堆栈
static task_t task_table[TASK_NR];                // 用户进程表
static mutex_t task_table_mutex;                  // 进程表互斥访问锁

static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   10ff3:	55                   	push   %ebp
   10ff4:	89 e5                	mov    %esp,%ebp
   10ff6:	83 ec 28             	sub    $0x28,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   10ff9:	e8 fb 15 00 00       	call   125f9 <gdt_alloc_desc>
   10ffe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   11001:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11005:	79 1a                	jns    11021 <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   11007:	83 ec 0c             	sub    $0xc,%esp
   1100a:	68 d4 8c 01 00       	push   $0x18cd4
   1100f:	e8 8f 78 00 00       	call   188a3 <log_printf>
   11014:	83 c4 10             	add    $0x10,%esp
        return -1;
   11017:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1101c:	e9 9d 01 00 00       	jmp    111be <tss_init+0x1cb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   11021:	8b 45 08             	mov    0x8(%ebp),%eax
   11024:	05 44 02 00 00       	add    $0x244,%eax
   11029:	68 89 00 00 00       	push   $0x89
   1102e:	6a 68                	push   $0x68
   11030:	50                   	push   %eax
   11031:	ff 75 ec             	pushl  -0x14(%ebp)
   11034:	e8 ba 14 00 00       	call   124f3 <segment_desc_set>
   11039:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1103c:	8b 45 08             	mov    0x8(%ebp),%eax
   1103f:	05 44 02 00 00       	add    $0x244,%eax
   11044:	83 ec 04             	sub    $0x4,%esp
   11047:	6a 68                	push   $0x68
   11049:	6a 00                	push   $0x0
   1104b:	50                   	push   %eax
   1104c:	e8 a8 72 00 00       	call   182f9 <kernel_memset>
   11051:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11054:	e8 19 fc ff ff       	call   10c72 <memory_alloc_page>
   11059:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   1105c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11060:	0f 84 2d 01 00 00    	je     11193 <tss_init+0x1a0>
        goto tss_init_failed;
    }

    // 根据不同的权限选择不同的访问选择子
    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM)
   11066:	8b 45 0c             	mov    0xc(%ebp),%eax
   11069:	83 e0 01             	and    $0x1,%eax
   1106c:	85 c0                	test   %eax,%eax
   1106e:	74 10                	je     11080 <tss_init+0x8d>
    {
        code_sel = KERNEL_SELECTOR_CS;
   11070:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   11077:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   1107e:	eb 16                	jmp    11096 <tss_init+0xa3>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   11080:	a1 b8 d5 01 00       	mov    0x1d5b8,%eax
   11085:	83 c8 03             	or     $0x3,%eax
   11088:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   1108b:	a1 bc d5 01 00       	mov    0x1d5bc,%eax
   11090:	83 c8 03             	or     $0x3,%eax
   11093:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   11096:	8b 45 08             	mov    0x8(%ebp),%eax
   11099:	8b 55 10             	mov    0x10(%ebp),%edx
   1109c:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   110a2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110a6:	75 0a                	jne    110b2 <tss_init+0xbf>
   110a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110ab:	05 00 10 00 00       	add    $0x1000,%eax
   110b0:	eb 03                	jmp    110b5 <tss_init+0xc2>
   110b2:	8b 45 14             	mov    0x14(%ebp),%eax
   110b5:	8b 55 08             	mov    0x8(%ebp),%edx
   110b8:	89 82 7c 02 00 00    	mov    %eax,0x27c(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110be:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110c1:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   110c7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ca:	89 90 48 02 00 00    	mov    %edx,0x248(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   110d0:	8b 45 08             	mov    0x8(%ebp),%eax
   110d3:	c7 80 4c 02 00 00 10 	movl   $0x10,0x24c(%eax)
   110da:	00 00 00 
    task->tss.eip = entry;
   110dd:	8b 45 08             	mov    0x8(%ebp),%eax
   110e0:	8b 55 10             	mov    0x10(%ebp),%edx
   110e3:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   110e9:	8b 45 08             	mov    0x8(%ebp),%eax
   110ec:	c7 80 68 02 00 00 02 	movl   $0x202,0x268(%eax)
   110f3:	02 00 00 
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs = task->tss.gs = data_sel; // 全部采用同一数据段
   110f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110f9:	8b 45 08             	mov    0x8(%ebp),%eax
   110fc:	89 90 a0 02 00 00    	mov    %edx,0x2a0(%eax)
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	8b 90 a0 02 00 00    	mov    0x2a0(%eax),%edx
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	89 90 9c 02 00 00    	mov    %edx,0x29c(%eax)
   11114:	8b 45 08             	mov    0x8(%ebp),%eax
   11117:	8b 90 9c 02 00 00    	mov    0x29c(%eax),%edx
   1111d:	8b 45 08             	mov    0x8(%ebp),%eax
   11120:	89 90 98 02 00 00    	mov    %edx,0x298(%eax)
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	8b 90 98 02 00 00    	mov    0x298(%eax),%edx
   1112f:	8b 45 08             	mov    0x8(%ebp),%eax
   11132:	89 90 94 02 00 00    	mov    %edx,0x294(%eax)
   11138:	8b 45 08             	mov    0x8(%ebp),%eax
   1113b:	8b 90 94 02 00 00    	mov    0x294(%eax),%edx
   11141:	8b 45 08             	mov    0x8(%ebp),%eax
   11144:	89 90 8c 02 00 00    	mov    %edx,0x28c(%eax)
    task->tss.cs = code_sel;
   1114a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1114d:	8b 45 08             	mov    0x8(%ebp),%eax
   11150:	89 90 90 02 00 00    	mov    %edx,0x290(%eax)
    task->tss.iomap = 0;
   11156:	8b 45 08             	mov    0x8(%ebp),%eax
   11159:	c7 80 a8 02 00 00 00 	movl   $0x0,0x2a8(%eax)
   11160:	00 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   11163:	e8 4a f6 ff ff       	call   107b2 <memory_create_uvm>
   11168:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   1116b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1116f:	74 25                	je     11196 <tss_init+0x1a3>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   11171:	8b 45 08             	mov    0x8(%ebp),%eax
   11174:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11177:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)

    task->tss_sel = tss_sel;
   1117d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11180:	89 c2                	mov    %eax,%edx
   11182:	8b 45 08             	mov    0x8(%ebp),%eax
   11185:	66 89 90 ac 02 00 00 	mov    %dx,0x2ac(%eax)
    return 0;
   1118c:	b8 00 00 00 00       	mov    $0x0,%eax
   11191:	eb 2b                	jmp    111be <tss_init+0x1cb>
        goto tss_init_failed;
   11193:	90                   	nop
   11194:	eb 01                	jmp    11197 <tss_init+0x1a4>
        goto tss_init_failed;
   11196:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   11197:	83 ec 0c             	sub    $0xc,%esp
   1119a:	ff 75 ec             	pushl  -0x14(%ebp)
   1119d:	e8 1e 14 00 00       	call   125c0 <gdt_free_sel>
   111a2:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   111a5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111a9:	74 0e                	je     111b9 <tss_init+0x1c6>
    {
        memory_free_page(kernel_stack);
   111ab:	83 ec 0c             	sub    $0xc,%esp
   111ae:	ff 75 e8             	pushl  -0x18(%ebp)
   111b1:	e8 d6 fa ff ff       	call   10c8c <memory_free_page>
   111b6:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111be:	c9                   	leave  
   111bf:	c3                   	ret    

000111c0 <task_init>:

/**
 * @brief 初始化任务
 */
int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   111c0:	55                   	push   %ebp
   111c1:	89 e5                	mov    %esp,%ebp
   111c3:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   111c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111ca:	75 19                	jne    111e5 <task_init+0x25>
   111cc:	68 e7 8c 01 00       	push   $0x18ce7
   111d1:	68 68 8e 01 00       	push   $0x18e68
   111d6:	6a 61                	push   $0x61
   111d8:	68 fc 8c 01 00       	push   $0x18cfc
   111dd:	e8 64 74 00 00       	call   18646 <panic>
   111e2:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   111e5:	ff 75 18             	pushl  0x18(%ebp)
   111e8:	ff 75 14             	pushl  0x14(%ebp)
   111eb:	ff 75 10             	pushl  0x10(%ebp)
   111ee:	ff 75 08             	pushl  0x8(%ebp)
   111f1:	e8 fd fd ff ff       	call   10ff3 <tss_init>
   111f6:	83 c4 10             	add    $0x10,%esp
   111f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   111fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11200:	79 18                	jns    1121a <task_init+0x5a>
    {
        log_printf("init task failed.\n");
   11202:	83 ec 0c             	sub    $0xc,%esp
   11205:	68 31 8d 01 00       	push   $0x18d31
   1120a:	e8 94 76 00 00       	call   188a3 <log_printf>
   1120f:	83 c4 10             	add    $0x10,%esp
        return err;
   11212:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11215:	e9 f0 00 00 00       	jmp    1130a <task_init+0x14a>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   1121a:	8b 45 08             	mov    0x8(%ebp),%eax
   1121d:	83 c0 04             	add    $0x4,%eax
   11220:	83 ec 04             	sub    $0x4,%esp
   11223:	6a 20                	push   $0x20
   11225:	ff 75 0c             	pushl  0xc(%ebp)
   11228:	50                   	push   %eax
   11229:	e8 53 6f 00 00       	call   18181 <kernel_strncpy>
   1122e:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11231:	8b 45 08             	mov    0x8(%ebp),%eax
   11234:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   1123a:	8b 45 08             	mov    0x8(%ebp),%eax
   1123d:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    task->time_slice = TASK_TIME_SLICE_DEFAULT;
   11244:	8b 45 08             	mov    0x8(%ebp),%eax
   11247:	c7 40 3c 0a 00 00 00 	movl   $0xa,0x3c(%eax)
    task->slice_ticks = task->time_slice;
   1124e:	8b 45 08             	mov    0x8(%ebp),%eax
   11251:	8b 50 3c             	mov    0x3c(%eax),%edx
   11254:	8b 45 08             	mov    0x8(%ebp),%eax
   11257:	89 50 40             	mov    %edx,0x40(%eax)
    task->parent = (task_t *)0;
   1125a:	8b 45 08             	mov    0x8(%ebp),%eax
   1125d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   11264:	8b 45 08             	mov    0x8(%ebp),%eax
   11267:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   1126e:	8b 45 08             	mov    0x8(%ebp),%eax
   11271:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node);
   11278:	8b 45 08             	mov    0x8(%ebp),%eax
   1127b:	05 c0 02 00 00       	add    $0x2c0,%eax
   11280:	83 ec 0c             	sub    $0xc,%esp
   11283:	50                   	push   %eax
   11284:	e8 1e fd ff ff       	call   10fa7 <list_node_init>
   11289:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   1128c:	8b 45 08             	mov    0x8(%ebp),%eax
   1128f:	05 b0 02 00 00       	add    $0x2b0,%eax
   11294:	83 ec 0c             	sub    $0xc,%esp
   11297:	50                   	push   %eax
   11298:	e8 0a fd ff ff       	call   10fa7 <list_node_init>
   1129d:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112a0:	8b 45 08             	mov    0x8(%ebp),%eax
   112a3:	05 b8 02 00 00       	add    $0x2b8,%eax
   112a8:	83 ec 0c             	sub    $0xc,%esp
   112ab:	50                   	push   %eax
   112ac:	e8 f6 fc ff ff       	call   10fa7 <list_node_init>
   112b1:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   112b4:	8b 45 08             	mov    0x8(%ebp),%eax
   112b7:	83 c0 44             	add    $0x44,%eax
   112ba:	83 ec 04             	sub    $0x4,%esp
   112bd:	68 00 02 00 00       	push   $0x200
   112c2:	6a 00                	push   $0x0
   112c4:	50                   	push   %eax
   112c5:	e8 2f 70 00 00       	call   182f9 <kernel_memset>
   112ca:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   112cd:	e8 03 1e 00 00       	call   130d5 <irq_enter_protection>
   112d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task; // 使用地址，能唯一
   112d5:	8b 55 08             	mov    0x8(%ebp),%edx
   112d8:	8b 45 08             	mov    0x8(%ebp),%eax
   112db:	89 50 24             	mov    %edx,0x24(%eax)
    list_insert_last(&task_manager.task_list, &task->all_node);
   112de:	8b 45 08             	mov    0x8(%ebp),%eax
   112e1:	05 c0 02 00 00       	add    $0x2c0,%eax
   112e6:	83 ec 08             	sub    $0x8,%esp
   112e9:	50                   	push   %eax
   112ea:	68 10 d0 01 00       	push   $0x1d010
   112ef:	e8 1f 74 00 00       	call   18713 <list_insert_last>
   112f4:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   112f7:	83 ec 0c             	sub    $0xc,%esp
   112fa:	ff 75 f0             	pushl  -0x10(%ebp)
   112fd:	e8 eb 1d 00 00       	call   130ed <irq_leave_protection>
   11302:	83 c4 10             	add    $0x10,%esp
    return 0;
   11305:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1130a:	c9                   	leave  
   1130b:	c3                   	ret    

0001130c <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t *task)
{
   1130c:	55                   	push   %ebp
   1130d:	89 e5                	mov    %esp,%ebp
   1130f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11312:	e8 be 1d 00 00       	call   130d5 <irq_enter_protection>
   11317:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   1131a:	83 ec 0c             	sub    $0xc,%esp
   1131d:	ff 75 08             	pushl  0x8(%ebp)
   11320:	e8 a9 02 00 00       	call   115ce <task_set_ready>
   11325:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11328:	83 ec 0c             	sub    $0xc,%esp
   1132b:	ff 75 f4             	pushl  -0xc(%ebp)
   1132e:	e8 ba 1d 00 00       	call   130ed <irq_leave_protection>
   11333:	83 c4 10             	add    $0x10,%esp
}
   11336:	90                   	nop
   11337:	c9                   	leave  
   11338:	c3                   	ret    

00011339 <task_uninit>:

/**
 * @brief 任务任务初始时分配的各项资源
 */
void task_uninit(task_t *task)
{
   11339:	55                   	push   %ebp
   1133a:	89 e5                	mov    %esp,%ebp
   1133c:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel)
   1133f:	8b 45 08             	mov    0x8(%ebp),%eax
   11342:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11349:	66 85 c0             	test   %ax,%ax
   1134c:	74 19                	je     11367 <task_uninit+0x2e>
    {
        gdt_free_sel(task->tss_sel);
   1134e:	8b 45 08             	mov    0x8(%ebp),%eax
   11351:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11358:	0f b7 c0             	movzwl %ax,%eax
   1135b:	83 ec 0c             	sub    $0xc,%esp
   1135e:	50                   	push   %eax
   1135f:	e8 5c 12 00 00       	call   125c0 <gdt_free_sel>
   11364:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0)
   11367:	8b 45 08             	mov    0x8(%ebp),%eax
   1136a:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   11370:	85 c0                	test   %eax,%eax
   11372:	74 1a                	je     1138e <task_uninit+0x55>
    {
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   11374:	8b 45 08             	mov    0x8(%ebp),%eax
   11377:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   1137d:	2d 00 10 00 00       	sub    $0x1000,%eax
   11382:	83 ec 0c             	sub    $0xc,%esp
   11385:	50                   	push   %eax
   11386:	e8 01 f9 ff ff       	call   10c8c <memory_free_page>
   1138b:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3)
   1138e:	8b 45 08             	mov    0x8(%ebp),%eax
   11391:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11397:	85 c0                	test   %eax,%eax
   11399:	74 15                	je     113b0 <task_uninit+0x77>
    {
        memory_destroy_uvm(task->tss.cr3);
   1139b:	8b 45 08             	mov    0x8(%ebp),%eax
   1139e:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113a4:	83 ec 0c             	sub    $0xc,%esp
   113a7:	50                   	push   %eax
   113a8:	e8 8a f4 ff ff       	call   10837 <memory_destroy_uvm>
   113ad:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   113b0:	83 ec 04             	sub    $0x4,%esp
   113b3:	68 c8 02 00 00       	push   $0x2c8
   113b8:	6a 00                	push   $0x0
   113ba:	ff 75 08             	pushl  0x8(%ebp)
   113bd:	e8 37 6f 00 00       	call   182f9 <kernel_memset>
   113c2:	83 c4 10             	add    $0x10,%esp
}
   113c5:	90                   	nop
   113c6:	c9                   	leave  
   113c7:	c3                   	ret    

000113c8 <task_switch_from_to>:

/**
 * @brief 切换至指定任务
 */
void task_switch_from_to(task_t *from, task_t *to)
{
   113c8:	55                   	push   %ebp
   113c9:	89 e5                	mov    %esp,%ebp
   113cb:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   113ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d1:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   113d8:	0f b7 c0             	movzwl %ax,%eax
   113db:	83 ec 0c             	sub    $0xc,%esp
   113de:	50                   	push   %eax
   113df:	e8 16 13 00 00       	call   126fa <switch_to_tss>
   113e4:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   113e7:	90                   	nop
   113e8:	c9                   	leave  
   113e9:	c3                   	ret    

000113ea <task_first_init>:
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init(void)
{
   113ea:	55                   	push   %ebp
   113eb:	89 e5                	mov    %esp,%ebp
   113ed:	83 ec 18             	sub    $0x18,%esp

    // 以下获得的是bin文件在内存中的物理地址
    extern uint8_t s_first_task[], e_first_task[];

    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   113f0:	ba 47 04 06 00       	mov    $0x60447,%edx
   113f5:	b8 c0 00 06 00       	mov    $0x600c0,%eax
   113fa:	29 c2                	sub    %eax,%edx
   113fc:	89 d0                	mov    %edx,%eax
   113fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11401:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11408:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1140b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1140e:	72 1c                	jb     1142c <task_first_init+0x42>
   11410:	68 44 8d 01 00       	push   $0x18d44
   11415:	68 74 8e 01 00       	push   $0x18e74
   1141a:	68 c1 00 00 00       	push   $0xc1
   1141f:	68 fc 8c 01 00       	push   $0x18cfc
   11424:	e8 1d 72 00 00       	call   18646 <panic>
   11429:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1142c:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // 第一个任务代码量小一些，好和栈放在1个页面呢
    // 这样就不要立即考虑还要给栈分配空间的问题
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   11433:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11436:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11439:	01 d0                	add    %edx,%eax
   1143b:	83 ec 0c             	sub    $0xc,%esp
   1143e:	50                   	push   %eax
   1143f:	ff 75 ec             	pushl  -0x14(%ebp)
   11442:	6a 00                	push   $0x0
   11444:	68 5b 8d 01 00       	push   $0x18d5b
   11449:	68 28 d0 01 00       	push   $0x1d028
   1144e:	e8 6d fd ff ff       	call   111c0 <task_init>
   11453:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task; // 这里不对
   11456:	b8 47 04 06 00       	mov    $0x60447,%eax
   1145b:	a3 54 d0 01 00       	mov    %eax,0x1d054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   11460:	a1 54 d0 01 00       	mov    0x1d054,%eax
   11465:	a3 58 d0 01 00       	mov    %eax,0x1d058
    task_manager.curr_task = &task_manager.first_task;
   1146a:	c7 05 00 d0 01 00 28 	movl   $0x1d028,0x1d000
   11471:	d0 01 00 

    // 更新页表地址为自己的
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   11474:	a1 88 d2 01 00       	mov    0x1d288,%eax
   11479:	83 ec 0c             	sub    $0xc,%esp
   1147c:	50                   	push   %eax
   1147d:	e8 60 fb ff ff       	call   10fe2 <mmu_set_page_dir>
   11482:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   11485:	83 ec 04             	sub    $0x4,%esp
   11488:	6a 07                	push   $0x7
   1148a:	ff 75 f0             	pushl  -0x10(%ebp)
   1148d:	ff 75 ec             	pushl  -0x14(%ebp)
   11490:	e8 b8 f7 ff ff       	call   10c4d <memory_alloc_page_for>
   11495:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   11498:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1149b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1149e:	83 ec 04             	sub    $0x4,%esp
   114a1:	52                   	push   %edx
   114a2:	68 c0 00 06 00       	push   $0x600c0
   114a7:	50                   	push   %eax
   114a8:	e8 fd 6d 00 00       	call   182aa <kernel_memcpy>
   114ad:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   114b0:	83 ec 0c             	sub    $0xc,%esp
   114b3:	68 28 d0 01 00       	push   $0x1d028
   114b8:	e8 4f fe ff ff       	call   1130c <task_start>
   114bd:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   114c0:	0f b7 05 d4 d2 01 00 	movzwl 0x1d2d4,%eax
   114c7:	0f b7 c0             	movzwl %ax,%eax
   114ca:	83 ec 0c             	sub    $0xc,%esp
   114cd:	50                   	push   %eax
   114ce:	e8 c8 fa ff ff       	call   10f9b <write_tr>
   114d3:	83 c4 10             	add    $0x10,%esp
}
   114d6:	90                   	nop
   114d7:	c9                   	leave  
   114d8:	c3                   	ret    

000114d9 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t *task_first_task(void)
{
   114d9:	55                   	push   %ebp
   114da:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   114dc:	b8 28 d0 01 00       	mov    $0x1d028,%eax
}
   114e1:	5d                   	pop    %ebp
   114e2:	c3                   	ret    

000114e3 <idle_task_entry>:

/**
 * @brief 空闲任务
 */
static void idle_task_entry(void)
{
   114e3:	55                   	push   %ebp
   114e4:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        hlt();
   114e6:	e8 a9 fa ff ff       	call   10f94 <hlt>
   114eb:	eb f9                	jmp    114e6 <idle_task_entry+0x3>

000114ed <task_manager_init>:

/**
 * @brief 任务管理器初始化
 */
void task_manager_init(void)
{
   114ed:	55                   	push   %ebp
   114ee:	89 e5                	mov    %esp,%ebp
   114f0:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   114f3:	83 ec 04             	sub    $0x4,%esp
   114f6:	68 00 64 01 00       	push   $0x16400
   114fb:	6a 00                	push   $0x0
   114fd:	68 c0 e5 01 00       	push   $0x1e5c0
   11502:	e8 f2 6d 00 00       	call   182f9 <kernel_memset>
   11507:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   1150a:	83 ec 0c             	sub    $0xc,%esp
   1150d:	68 c0 49 03 00       	push   $0x349c0
   11512:	e8 97 66 00 00       	call   17bae <mutex_init>
   11517:	83 c4 10             	add    $0x10,%esp

    // 数据段和代码段，使用DPL3，所有应用共用同一个
    // 为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   1151a:	e8 da 10 00 00       	call   125f9 <gdt_alloc_desc>
   1151f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11522:	68 f2 40 00 00       	push   $0x40f2
   11527:	6a ff                	push   $0xffffffff
   11529:	6a 00                	push   $0x0
   1152b:	ff 75 f4             	pushl  -0xc(%ebp)
   1152e:	e8 c0 0f 00 00       	call   124f3 <segment_desc_set>
   11533:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   11536:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11539:	a3 bc d5 01 00       	mov    %eax,0x1d5bc

    sel = gdt_alloc_desc();
   1153e:	e8 b6 10 00 00       	call   125f9 <gdt_alloc_desc>
   11543:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11546:	68 fa 40 00 00       	push   $0x40fa
   1154b:	6a ff                	push   $0xffffffff
   1154d:	6a 00                	push   $0x0
   1154f:	ff 75 f4             	pushl  -0xc(%ebp)
   11552:	e8 9c 0f 00 00       	call   124f3 <segment_desc_set>
   11557:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   1155a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1155d:	a3 b8 d5 01 00       	mov    %eax,0x1d5b8

    // 各队列初始化
    list_init(&task_manager.ready_list);
   11562:	83 ec 0c             	sub    $0xc,%esp
   11565:	68 04 d0 01 00       	push   $0x1d004
   1156a:	e8 20 71 00 00       	call   1868f <list_init>
   1156f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   11572:	83 ec 0c             	sub    $0xc,%esp
   11575:	68 10 d0 01 00       	push   $0x1d010
   1157a:	e8 10 71 00 00       	call   1868f <list_init>
   1157f:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   11582:	83 ec 0c             	sub    $0xc,%esp
   11585:	68 1c d0 01 00       	push   $0x1d01c
   1158a:	e8 00 71 00 00       	call   1868f <list_init>
   1158f:	83 c4 10             	add    $0x10,%esp

    // 空闲任务初始化
    task_init(&task_manager.idle_task,
   11592:	b8 e3 14 01 00       	mov    $0x114e3,%eax
   11597:	83 ec 0c             	sub    $0xc,%esp
   1159a:	6a 00                	push   $0x0
   1159c:	50                   	push   %eax
   1159d:	6a 01                	push   $0x1
   1159f:	68 66 8d 01 00       	push   $0x18d66
   115a4:	68 f0 d2 01 00       	push   $0x1d2f0
   115a9:	e8 12 fc ff ff       	call   111c0 <task_init>
   115ae:	83 c4 20             	add    $0x20,%esp
              "idle task",
              TASK_FLAG_SYSTEM,
              (uint32_t)idle_task_entry,
              0); // 运行于内核模式，无需指定特权级3的栈
    task_manager.curr_task = (task_t *)0;
   115b1:	c7 05 00 d0 01 00 00 	movl   $0x0,0x1d000
   115b8:	00 00 00 
    task_start(&task_manager.idle_task);
   115bb:	83 ec 0c             	sub    $0xc,%esp
   115be:	68 f0 d2 01 00       	push   $0x1d2f0
   115c3:	e8 44 fd ff ff       	call   1130c <task_start>
   115c8:	83 c4 10             	add    $0x10,%esp
}
   115cb:	90                   	nop
   115cc:	c9                   	leave  
   115cd:	c3                   	ret    

000115ce <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task)
{
   115ce:	55                   	push   %ebp
   115cf:	89 e5                	mov    %esp,%ebp
   115d1:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task)
   115d4:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   115db:	74 22                	je     115ff <task_set_ready+0x31>
    {
        list_insert_last(&task_manager.ready_list, &task->run_node);
   115dd:	8b 45 08             	mov    0x8(%ebp),%eax
   115e0:	05 b0 02 00 00       	add    $0x2b0,%eax
   115e5:	83 ec 08             	sub    $0x8,%esp
   115e8:	50                   	push   %eax
   115e9:	68 04 d0 01 00       	push   $0x1d004
   115ee:	e8 20 71 00 00       	call   18713 <list_insert_last>
   115f3:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   115f6:	8b 45 08             	mov    0x8(%ebp),%eax
   115f9:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    }
}
   115ff:	90                   	nop
   11600:	c9                   	leave  
   11601:	c3                   	ret    

00011602 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block(task_t *task)
{
   11602:	55                   	push   %ebp
   11603:	89 e5                	mov    %esp,%ebp
   11605:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task)
   11608:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   1160f:	74 19                	je     1162a <task_set_block+0x28>
    {
        list_remove(&task_manager.ready_list, &task->run_node);
   11611:	8b 45 08             	mov    0x8(%ebp),%eax
   11614:	05 b0 02 00 00       	add    $0x2b0,%eax
   11619:	83 ec 08             	sub    $0x8,%esp
   1161c:	50                   	push   %eax
   1161d:	68 04 d0 01 00       	push   $0x1d004
   11622:	e8 c8 71 00 00       	call   187ef <list_remove>
   11627:	83 c4 10             	add    $0x10,%esp
    }
}
   1162a:	90                   	nop
   1162b:	c9                   	leave  
   1162c:	c3                   	ret    

0001162d <task_next_run>:
/**
 * @brief 获取下一将要运行的任务
 */
static task_t *task_next_run(void)
{
   1162d:	55                   	push   %ebp
   1162e:	89 e5                	mov    %esp,%ebp
   11630:	83 ec 10             	sub    $0x10,%esp
    // 如果没有任务，则运行空闲任务
    if (list_count(&task_manager.ready_list) == 0)
   11633:	68 04 d0 01 00       	push   $0x1d004
   11638:	e8 90 f9 ff ff       	call   10fcd <list_count>
   1163d:	83 c4 04             	add    $0x4,%esp
   11640:	85 c0                	test   %eax,%eax
   11642:	75 07                	jne    1164b <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   11644:	b8 f0 d2 01 00       	mov    $0x1d2f0,%eax
   11649:	eb 25                	jmp    11670 <task_next_run+0x43>
    }

    // 普通任务
    list_node_t *task_node = list_first(&task_manager.ready_list);
   1164b:	68 04 d0 01 00       	push   $0x1d004
   11650:	e8 83 f9 ff ff       	call   10fd8 <list_first>
   11655:	83 c4 04             	add    $0x4,%esp
   11658:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   1165b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1165f:	74 0a                	je     1166b <task_next_run+0x3e>
   11661:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11664:	2d b0 02 00 00       	sub    $0x2b0,%eax
   11669:	eb 05                	jmp    11670 <task_next_run+0x43>
   1166b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11670:	c9                   	leave  
   11671:	c3                   	ret    

00011672 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   11672:	55                   	push   %ebp
   11673:	89 e5                	mov    %esp,%ebp
   11675:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   11678:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1167c:	74 2d                	je     116ab <task_set_sleep+0x39>
    {
        return;
    }

    task->sleep_ticks = ticks;
   1167e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11681:	8b 45 08             	mov    0x8(%ebp),%eax
   11684:	89 50 38             	mov    %edx,0x38(%eax)
    task->state = TASK_SLEEP;
   11687:	8b 45 08             	mov    0x8(%ebp),%eax
   1168a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   11690:	8b 45 08             	mov    0x8(%ebp),%eax
   11693:	05 b0 02 00 00       	add    $0x2b0,%eax
   11698:	83 ec 08             	sub    $0x8,%esp
   1169b:	50                   	push   %eax
   1169c:	68 1c d0 01 00       	push   $0x1d01c
   116a1:	e8 6d 70 00 00       	call   18713 <list_insert_last>
   116a6:	83 c4 10             	add    $0x10,%esp
   116a9:	eb 01                	jmp    116ac <task_set_sleep+0x3a>
        return;
   116ab:	90                   	nop
}
   116ac:	c9                   	leave  
   116ad:	c3                   	ret    

000116ae <task_set_wakeup>:
 * @brief 将任务从延时队列移除
 *
 * @param task
 */
void task_set_wakeup(task_t *task)
{
   116ae:	55                   	push   %ebp
   116af:	89 e5                	mov    %esp,%ebp
   116b1:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   116b4:	8b 45 08             	mov    0x8(%ebp),%eax
   116b7:	05 b0 02 00 00       	add    $0x2b0,%eax
   116bc:	83 ec 08             	sub    $0x8,%esp
   116bf:	50                   	push   %eax
   116c0:	68 1c d0 01 00       	push   $0x1d01c
   116c5:	e8 25 71 00 00       	call   187ef <list_remove>
   116ca:	83 c4 10             	add    $0x10,%esp
}
   116cd:	90                   	nop
   116ce:	c9                   	leave  
   116cf:	c3                   	ret    

000116d0 <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t *task_current(void)
{
   116d0:	55                   	push   %ebp
   116d1:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   116d3:	a1 00 d0 01 00       	mov    0x1d000,%eax
}
   116d8:	5d                   	pop    %ebp
   116d9:	c3                   	ret    

000116da <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t *task_file(int fd)
{
   116da:	55                   	push   %ebp
   116db:	89 e5                	mov    %esp,%ebp
   116dd:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   116e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   116e4:	78 1f                	js     11705 <task_file+0x2b>
   116e6:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   116ea:	7f 19                	jg     11705 <task_file+0x2b>
    {
        file_t *file = task_current()->file_table[fd];
   116ec:	e8 df ff ff ff       	call   116d0 <task_current>
   116f1:	89 c2                	mov    %eax,%edx
   116f3:	8b 45 08             	mov    0x8(%ebp),%eax
   116f6:	83 c0 10             	add    $0x10,%eax
   116f9:	8b 44 82 04          	mov    0x4(%edx,%eax,4),%eax
   116fd:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   11700:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11703:	eb 05                	jmp    1170a <task_file+0x30>
    }

    return (file_t *)0;
   11705:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1170a:	c9                   	leave  
   1170b:	c3                   	ret    

0001170c <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd(file_t *file)
{
   1170c:	55                   	push   %ebp
   1170d:	89 e5                	mov    %esp,%ebp
   1170f:	83 ec 10             	sub    $0x10,%esp
    task_t *task = task_current();
   11712:	e8 b9 ff ff ff       	call   116d0 <task_current>
   11717:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   1171a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11721:	eb 2f                	jmp    11752 <task_alloc_fd+0x46>
    {
        file_t *p = task->file_table[i];
   11723:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11726:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11729:	83 c2 10             	add    $0x10,%edx
   1172c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11730:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0)
   11733:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11737:	75 15                	jne    1174e <task_alloc_fd+0x42>
        {
            task->file_table[i] = file;
   11739:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1173c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1173f:	8d 4a 10             	lea    0x10(%edx),%ecx
   11742:	8b 55 08             	mov    0x8(%ebp),%edx
   11745:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
            return i;
   11749:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1174c:	eb 0f                	jmp    1175d <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++)
   1174e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11752:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   11756:	7e cb                	jle    11723 <task_alloc_fd+0x17>
        }
    }

    return -1;
   11758:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1175d:	c9                   	leave  
   1175e:	c3                   	ret    

0001175f <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd(int fd)
{
   1175f:	55                   	push   %ebp
   11760:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   11762:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11766:	78 1b                	js     11783 <task_remove_fd+0x24>
   11768:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1176c:	7f 15                	jg     11783 <task_remove_fd+0x24>
    {
        task_current()->file_table[fd] = (file_t *)0;
   1176e:	e8 5d ff ff ff       	call   116d0 <task_current>
   11773:	89 c2                	mov    %eax,%edx
   11775:	8b 45 08             	mov    0x8(%ebp),%eax
   11778:	83 c0 10             	add    $0x10,%eax
   1177b:	c7 44 82 04 00 00 00 	movl   $0x0,0x4(%edx,%eax,4)
   11782:	00 
    }
}
   11783:	90                   	nop
   11784:	5d                   	pop    %ebp
   11785:	c3                   	ret    

00011786 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield(void)
{
   11786:	55                   	push   %ebp
   11787:	89 e5                	mov    %esp,%ebp
   11789:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1178c:	e8 44 19 00 00       	call   130d5 <irq_enter_protection>
   11791:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1)
   11794:	83 ec 0c             	sub    $0xc,%esp
   11797:	68 04 d0 01 00       	push   $0x1d004
   1179c:	e8 2c f8 ff ff       	call   10fcd <list_count>
   117a1:	83 c4 10             	add    $0x10,%esp
   117a4:	83 f8 01             	cmp    $0x1,%eax
   117a7:	7e 29                	jle    117d2 <sys_yield+0x4c>
    {
        task_t *curr_task = task_current();
   117a9:	e8 22 ff ff ff       	call   116d0 <task_current>
   117ae:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   117b1:	83 ec 0c             	sub    $0xc,%esp
   117b4:	ff 75 f0             	pushl  -0x10(%ebp)
   117b7:	e8 46 fe ff ff       	call   11602 <task_set_block>
   117bc:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117bf:	83 ec 0c             	sub    $0xc,%esp
   117c2:	ff 75 f0             	pushl  -0x10(%ebp)
   117c5:	e8 04 fe ff ff       	call   115ce <task_set_ready>
   117ca:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   117cd:	e8 15 00 00 00       	call   117e7 <task_dispatch>
    }
    irq_leave_protection(state);
   117d2:	83 ec 0c             	sub    $0xc,%esp
   117d5:	ff 75 f4             	pushl  -0xc(%ebp)
   117d8:	e8 10 19 00 00       	call   130ed <irq_leave_protection>
   117dd:	83 c4 10             	add    $0x10,%esp

    return 0;
   117e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   117e5:	c9                   	leave  
   117e6:	c3                   	ret    

000117e7 <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch(void)
{
   117e7:	55                   	push   %ebp
   117e8:	89 e5                	mov    %esp,%ebp
   117ea:	83 ec 18             	sub    $0x18,%esp
    task_t *to = task_next_run();
   117ed:	e8 3b fe ff ff       	call   1162d <task_next_run>
   117f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.curr_task)
   117f5:	a1 00 d0 01 00       	mov    0x1d000,%eax
   117fa:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   117fd:	74 21                	je     11820 <task_dispatch+0x39>
    {
        task_t *from = task_manager.curr_task;
   117ff:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11804:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_manager.curr_task = to;
   11807:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1180a:	a3 00 d0 01 00       	mov    %eax,0x1d000
        task_switch_from_to(from, to);
   1180f:	83 ec 08             	sub    $0x8,%esp
   11812:	ff 75 f4             	pushl  -0xc(%ebp)
   11815:	ff 75 f0             	pushl  -0x10(%ebp)
   11818:	e8 ab fb ff ff       	call   113c8 <task_switch_from_to>
   1181d:	83 c4 10             	add    $0x10,%esp
    }
}
   11820:	90                   	nop
   11821:	c9                   	leave  
   11822:	c3                   	ret    

00011823 <task_time_tick>:
/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick(void)
{
   11823:	55                   	push   %ebp
   11824:	89 e5                	mov    %esp,%ebp
   11826:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   11829:	e8 a2 fe ff ff       	call   116d0 <task_current>
   1182e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 时间片的处理
    irq_state_t state = irq_enter_protection();
   11831:	e8 9f 18 00 00       	call   130d5 <irq_enter_protection>
   11836:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0)
   11839:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1183c:	8b 40 40             	mov    0x40(%eax),%eax
   1183f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11842:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11845:	89 50 40             	mov    %edx,0x40(%eax)
   11848:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1184b:	8b 40 40             	mov    0x40(%eax),%eax
   1184e:	85 c0                	test   %eax,%eax
   11850:	75 28                	jne    1187a <task_time_tick+0x57>
    {
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_slice;
   11852:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11855:	8b 50 3c             	mov    0x3c(%eax),%edx
   11858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1185b:	89 50 40             	mov    %edx,0x40(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   1185e:	83 ec 0c             	sub    $0xc,%esp
   11861:	ff 75 f0             	pushl  -0x10(%ebp)
   11864:	e8 99 fd ff ff       	call   11602 <task_set_block>
   11869:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1186c:	83 ec 0c             	sub    $0xc,%esp
   1186f:	ff 75 f0             	pushl  -0x10(%ebp)
   11872:	e8 57 fd ff ff       	call   115ce <task_set_ready>
   11877:	83 c4 10             	add    $0x10,%esp
    }

    // 睡眠处理
    list_node_t *curr = list_first(&task_manager.sleep_list);
   1187a:	83 ec 0c             	sub    $0xc,%esp
   1187d:	68 1c d0 01 00       	push   $0x1d01c
   11882:	e8 51 f7 ff ff       	call   10fd8 <list_first>
   11887:	83 c4 10             	add    $0x10,%esp
   1188a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   1188d:	eb 64                	jmp    118f3 <task_time_tick+0xd0>
    {
        list_node_t *next = list_node_next(curr);
   1188f:	83 ec 0c             	sub    $0xc,%esp
   11892:	ff 75 f4             	pushl  -0xc(%ebp)
   11895:	e8 28 f7 ff ff       	call   10fc2 <list_node_next>
   1189a:	83 c4 10             	add    $0x10,%esp
   1189d:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t *task = list_node_parent(curr, task_t, run_node);
   118a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118a4:	74 0a                	je     118b0 <task_time_tick+0x8d>
   118a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118a9:	2d b0 02 00 00       	sub    $0x2b0,%eax
   118ae:	eb 05                	jmp    118b5 <task_time_tick+0x92>
   118b0:	b8 00 00 00 00       	mov    $0x0,%eax
   118b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   118b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118bb:	8b 40 38             	mov    0x38(%eax),%eax
   118be:	8d 50 ff             	lea    -0x1(%eax),%edx
   118c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118c4:	89 50 38             	mov    %edx,0x38(%eax)
   118c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118ca:	8b 40 38             	mov    0x38(%eax),%eax
   118cd:	85 c0                	test   %eax,%eax
   118cf:	75 1c                	jne    118ed <task_time_tick+0xca>
        {
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   118d1:	83 ec 0c             	sub    $0xc,%esp
   118d4:	ff 75 e4             	pushl  -0x1c(%ebp)
   118d7:	e8 d2 fd ff ff       	call   116ae <task_set_wakeup>
   118dc:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   118df:	83 ec 0c             	sub    $0xc,%esp
   118e2:	ff 75 e4             	pushl  -0x1c(%ebp)
   118e5:	e8 e4 fc ff ff       	call   115ce <task_set_ready>
   118ea:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   118ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   118f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   118f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118f7:	75 96                	jne    1188f <task_time_tick+0x6c>
    }

    task_dispatch();
   118f9:	e8 e9 fe ff ff       	call   117e7 <task_dispatch>
    irq_leave_protection(state);
   118fe:	83 ec 0c             	sub    $0xc,%esp
   11901:	ff 75 ec             	pushl  -0x14(%ebp)
   11904:	e8 e4 17 00 00       	call   130ed <irq_leave_protection>
   11909:	83 c4 10             	add    $0x10,%esp
}
   1190c:	90                   	nop
   1190d:	c9                   	leave  
   1190e:	c3                   	ret    

0001190f <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t *alloc_task(void)
{
   1190f:	55                   	push   %ebp
   11910:	89 e5                	mov    %esp,%ebp
   11912:	83 ec 18             	sub    $0x18,%esp
    task_t *task = (task_t *)0;
   11915:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   1191c:	83 ec 0c             	sub    $0xc,%esp
   1191f:	68 c0 49 03 00       	push   $0x349c0
   11924:	e8 b3 62 00 00       	call   17bdc <mutex_lock>
   11929:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++)
   1192c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11933:	eb 28                	jmp    1195d <alloc_task+0x4e>
    {
        task_t *curr = task_table + i;
   11935:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11938:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1193e:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   11943:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == 0)
   11946:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11949:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1194d:	84 c0                	test   %al,%al
   1194f:	75 08                	jne    11959 <alloc_task+0x4a>
        {
            task = curr;
   11951:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11954:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11957:	eb 0a                	jmp    11963 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++)
   11959:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1195d:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11961:	7e d2                	jle    11935 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   11963:	83 ec 0c             	sub    $0xc,%esp
   11966:	68 c0 49 03 00       	push   $0x349c0
   1196b:	e8 03 63 00 00       	call   17c73 <mutex_unlock>
   11970:	83 c4 10             	add    $0x10,%esp

    return task;
   11973:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11976:	c9                   	leave  
   11977:	c3                   	ret    

00011978 <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task(task_t *task)
{
   11978:	55                   	push   %ebp
   11979:	89 e5                	mov    %esp,%ebp
   1197b:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   1197e:	83 ec 0c             	sub    $0xc,%esp
   11981:	68 c0 49 03 00       	push   $0x349c0
   11986:	e8 51 62 00 00       	call   17bdc <mutex_lock>
   1198b:	83 c4 10             	add    $0x10,%esp
    task->name[0] = 0;
   1198e:	8b 45 08             	mov    0x8(%ebp),%eax
   11991:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   11995:	83 ec 0c             	sub    $0xc,%esp
   11998:	68 c0 49 03 00       	push   $0x349c0
   1199d:	e8 d1 62 00 00       	call   17c73 <mutex_unlock>
   119a2:	83 c4 10             	add    $0x10,%esp
}
   119a5:	90                   	nop
   119a6:	c9                   	leave  
   119a7:	c3                   	ret    

000119a8 <sys_msleep>:
 * @brief 任务进入睡眠状态
 *
 * @param ms
 */
void sys_msleep(uint32_t ms)
{
   119a8:	55                   	push   %ebp
   119a9:	89 e5                	mov    %esp,%ebp
   119ab:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   119ae:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   119b2:	77 07                	ja     119bb <sys_msleep+0x13>
    {
        ms = OS_TICK_MS;
   119b4:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   119bb:	e8 15 17 00 00       	call   130d5 <irq_enter_protection>
   119c0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   119c3:	a1 00 d0 01 00       	mov    0x1d000,%eax
   119c8:	83 ec 0c             	sub    $0xc,%esp
   119cb:	50                   	push   %eax
   119cc:	e8 31 fc ff ff       	call   11602 <task_set_block>
   119d1:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   119d4:	8b 45 08             	mov    0x8(%ebp),%eax
   119d7:	83 c0 09             	add    $0x9,%eax
   119da:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   119df:	f7 e2                	mul    %edx
   119e1:	c1 ea 03             	shr    $0x3,%edx
   119e4:	a1 00 d0 01 00       	mov    0x1d000,%eax
   119e9:	83 ec 08             	sub    $0x8,%esp
   119ec:	52                   	push   %edx
   119ed:	50                   	push   %eax
   119ee:	e8 7f fc ff ff       	call   11672 <task_set_sleep>
   119f3:	83 c4 10             	add    $0x10,%esp

    // 进行一次调度
    task_dispatch();
   119f6:	e8 ec fd ff ff       	call   117e7 <task_dispatch>

    irq_leave_protection(state);
   119fb:	83 ec 0c             	sub    $0xc,%esp
   119fe:	ff 75 f4             	pushl  -0xc(%ebp)
   11a01:	e8 e7 16 00 00       	call   130ed <irq_leave_protection>
   11a06:	83 c4 10             	add    $0x10,%esp
}
   11a09:	90                   	nop
   11a0a:	c9                   	leave  
   11a0b:	c3                   	ret    

00011a0c <copy_opened_files>:

/**
 * @brief 从当前进程中拷贝已经打开的文件列表
 */
static void copy_opened_files(task_t *child_task)
{
   11a0c:	55                   	push   %ebp
   11a0d:	89 e5                	mov    %esp,%ebp
   11a0f:	83 ec 18             	sub    $0x18,%esp
    task_t *parent = task_current();
   11a12:	e8 b9 fc ff ff       	call   116d0 <task_current>
   11a17:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   11a1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a21:	eb 42                	jmp    11a65 <copy_opened_files+0x59>
    {
        file_t *file = parent->file_table[i];
   11a23:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a26:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a29:	83 c2 10             	add    $0x10,%edx
   11a2c:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11a30:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file)
   11a33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11a37:	74 28                	je     11a61 <copy_opened_files+0x55>
        {
            file_inc_ref(file);
   11a39:	83 ec 0c             	sub    $0xc,%esp
   11a3c:	ff 75 ec             	pushl  -0x14(%ebp)
   11a3f:	e8 b4 53 00 00       	call   16df8 <file_inc_ref>
   11a44:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   11a47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a4d:	83 c2 10             	add    $0x10,%edx
   11a50:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
   11a54:	8b 45 08             	mov    0x8(%ebp),%eax
   11a57:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11a5a:	83 c1 10             	add    $0x10,%ecx
   11a5d:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++)
   11a61:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a65:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11a69:	7e b8                	jle    11a23 <copy_opened_files+0x17>
        }
    }
}
   11a6b:	90                   	nop
   11a6c:	c9                   	leave  
   11a6d:	c3                   	ret    

00011a6e <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork(void)
{
   11a6e:	55                   	push   %ebp
   11a6f:	89 e5                	mov    %esp,%ebp
   11a71:	83 ec 28             	sub    $0x28,%esp
    task_t *parent_task = task_current();
   11a74:	e8 57 fc ff ff       	call   116d0 <task_current>
   11a79:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 分配任务结构
    task_t *child_task = alloc_task();
   11a7c:	e8 8e fe ff ff       	call   1190f <alloc_task>
   11a81:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0)
   11a84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a88:	0f 84 4f 01 00 00    	je     11bdd <sys_fork+0x16f>
    {
        goto fork_failed;
    }

    syscall_frame_t *frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11a8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a91:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   11a97:	83 e8 58             	sub    $0x58,%eax
   11a9a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   11a9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa0:	8b 40 50             	mov    0x50(%eax),%eax
   11aa3:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
   11aa6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa9:	8b 40 34             	mov    0x34(%eax),%eax
   11aac:	89 c1                	mov    %eax,%ecx
   11aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ab1:	83 c0 04             	add    $0x4,%eax
   11ab4:	83 ec 0c             	sub    $0xc,%esp
   11ab7:	52                   	push   %edx
   11ab8:	51                   	push   %ecx
   11ab9:	6a 00                	push   $0x0
   11abb:	50                   	push   %eax
   11abc:	ff 75 f0             	pushl  -0x10(%ebp)
   11abf:	e8 fc f6 ff ff       	call   111c0 <task_init>
   11ac4:	83 c4 20             	add    $0x20,%esp
   11ac7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11aca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11ace:	0f 88 0c 01 00 00    	js     11be0 <sys_fork+0x172>
    {
        goto fork_failed;
    }

    // 拷贝打开的文件
    copy_opened_files(child_task);
   11ad4:	83 ec 0c             	sub    $0xc,%esp
   11ad7:	ff 75 f0             	pushl  -0x10(%ebp)
   11ada:	e8 2d ff ff ff       	call   11a0c <copy_opened_files>
   11adf:	83 c4 10             	add    $0x10,%esp

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t *tss = &child_task->tss;
   11ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ae5:	05 44 02 00 00       	add    $0x244,%eax
   11aea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0; // 子进程返回0
   11aed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11af0:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11af7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11afa:	8b 40 24             	mov    0x24(%eax),%eax
   11afd:	89 c2                	mov    %eax,%edx
   11aff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b02:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11b05:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b08:	8b 40 2c             	mov    0x2c(%eax),%eax
   11b0b:	89 c2                	mov    %eax,%edx
   11b0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b10:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b13:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b16:	8b 40 28             	mov    0x28(%eax),%eax
   11b19:	89 c2                	mov    %eax,%edx
   11b1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b1e:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11b21:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b24:	8b 40 18             	mov    0x18(%eax),%eax
   11b27:	89 c2                	mov    %eax,%edx
   11b29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b2c:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11b2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b32:	8b 40 14             	mov    0x14(%eax),%eax
   11b35:	89 c2                	mov    %eax,%edx
   11b37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b3a:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11b3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b40:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b43:	89 c2                	mov    %eax,%edx
   11b45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b48:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b4e:	8b 40 38             	mov    0x38(%eax),%eax
   11b51:	89 c2                	mov    %eax,%edx
   11b53:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b56:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b59:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b5c:	8b 40 10             	mov    0x10(%eax),%eax
   11b5f:	89 c2                	mov    %eax,%edx
   11b61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b64:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11b67:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b6a:	8b 40 0c             	mov    0xc(%eax),%eax
   11b6d:	89 c2                	mov    %eax,%edx
   11b6f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b72:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b78:	8b 40 08             	mov    0x8(%eax),%eax
   11b7b:	89 c2                	mov    %eax,%edx
   11b7d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b80:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11b83:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b86:	8b 40 04             	mov    0x4(%eax),%eax
   11b89:	89 c2                	mov    %eax,%edx
   11b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b8e:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11b91:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b94:	8b 00                	mov    (%eax),%eax
   11b96:	89 c2                	mov    %eax,%edx
   11b98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b9b:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11b9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ba1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11ba4:	89 50 28             	mov    %edx,0x28(%eax)

    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0)
   11ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11baa:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11bb0:	83 ec 0c             	sub    $0xc,%esp
   11bb3:	50                   	push   %eax
   11bb4:	e8 8d ed ff ff       	call   10946 <memory_copy_uvm>
   11bb9:	83 c4 10             	add    $0x10,%esp
   11bbc:	89 c2                	mov    %eax,%edx
   11bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bc1:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    {
        goto fork_failed;
    }

    // 创建成功，返回子进程的pid
    task_start(child_task);
   11bc7:	83 ec 0c             	sub    $0xc,%esp
   11bca:	ff 75 f0             	pushl  -0x10(%ebp)
   11bcd:	e8 3a f7 ff ff       	call   1130c <task_start>
   11bd2:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11bd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bd8:	8b 40 24             	mov    0x24(%eax),%eax
   11bdb:	eb 2b                	jmp    11c08 <sys_fork+0x19a>
        goto fork_failed;
   11bdd:	90                   	nop
   11bde:	eb 01                	jmp    11be1 <sys_fork+0x173>
        goto fork_failed;
   11be0:	90                   	nop
fork_failed:
    if (child_task)
   11be1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11be5:	74 1c                	je     11c03 <sys_fork+0x195>
    {
        task_uninit(child_task);
   11be7:	83 ec 0c             	sub    $0xc,%esp
   11bea:	ff 75 f0             	pushl  -0x10(%ebp)
   11bed:	e8 47 f7 ff ff       	call   11339 <task_uninit>
   11bf2:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11bf5:	83 ec 0c             	sub    $0xc,%esp
   11bf8:	ff 75 f0             	pushl  -0x10(%ebp)
   11bfb:	e8 78 fd ff ff       	call   11978 <free_task>
   11c00:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11c03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c08:	c9                   	leave  
   11c09:	c3                   	ret    

00011c0a <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr *phdr, uint32_t page_dir)
{
   11c0a:	55                   	push   %ebp
   11c0b:	89 e5                	mov    %esp,%ebp
   11c0d:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11c10:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c13:	8b 40 08             	mov    0x8(%eax),%eax
   11c16:	25 ff 0f 00 00       	and    $0xfff,%eax
   11c1b:	85 c0                	test   %eax,%eax
   11c1d:	74 1c                	je     11c3b <load_phdr+0x31>
   11c1f:	68 70 8d 01 00       	push   $0x18d70
   11c24:	68 84 8e 01 00       	push   $0x18e84
   11c29:	68 69 02 00 00       	push   $0x269
   11c2e:	68 fc 8c 01 00       	push   $0x18cfc
   11c33:	e8 0e 6a 00 00       	call   18646 <panic>
   11c38:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11c3b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c3e:	8b 50 14             	mov    0x14(%eax),%edx
   11c41:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c44:	8b 40 08             	mov    0x8(%eax),%eax
   11c47:	6a 07                	push   $0x7
   11c49:	52                   	push   %edx
   11c4a:	50                   	push   %eax
   11c4b:	ff 75 10             	pushl  0x10(%ebp)
   11c4e:	e8 11 ef ff ff       	call   10b64 <memory_alloc_for_page_dir>
   11c53:	83 c4 10             	add    $0x10,%esp
   11c56:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   11c59:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c5d:	79 1a                	jns    11c79 <load_phdr+0x6f>
    {
        log_printf("no memory");
   11c5f:	83 ec 0c             	sub    $0xc,%esp
   11c62:	68 9b 8d 01 00       	push   $0x18d9b
   11c67:	e8 37 6c 00 00       	call   188a3 <log_printf>
   11c6c:	83 c4 10             	add    $0x10,%esp
        return -1;
   11c6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c74:	e9 b8 00 00 00       	jmp    11d31 <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0)
   11c79:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7c:	8b 40 04             	mov    0x4(%eax),%eax
   11c7f:	83 ec 04             	sub    $0x4,%esp
   11c82:	6a 00                	push   $0x0
   11c84:	50                   	push   %eax
   11c85:	ff 75 08             	pushl  0x8(%ebp)
   11c88:	e8 e4 59 00 00       	call   17671 <sys_lseek>
   11c8d:	83 c4 10             	add    $0x10,%esp
   11c90:	85 c0                	test   %eax,%eax
   11c92:	79 1a                	jns    11cae <load_phdr+0xa4>
    {
        log_printf("read file failed");
   11c94:	83 ec 0c             	sub    $0xc,%esp
   11c97:	68 a5 8d 01 00       	push   $0x18da5
   11c9c:	e8 02 6c 00 00       	call   188a3 <log_printf>
   11ca1:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ca4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ca9:	e9 83 00 00 00       	jmp    11d31 <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr;
   11cae:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb1:	8b 40 08             	mov    0x8(%eax),%eax
   11cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11cb7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cba:	8b 40 10             	mov    0x10(%eax),%eax
   11cbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0)
   11cc0:	eb 64                	jmp    11d26 <load_phdr+0x11c>
    {
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11cc2:	b8 00 10 00 00       	mov    $0x1000,%eax
   11cc7:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11cce:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11cd2:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11cd5:	83 ec 08             	sub    $0x8,%esp
   11cd8:	ff 75 f4             	pushl  -0xc(%ebp)
   11cdb:	ff 75 10             	pushl  0x10(%ebp)
   11cde:	e8 b8 ed ff ff       	call   10a9b <memory_get_paddr>
   11ce3:	83 c4 10             	add    $0x10,%esp
   11ce6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) < curr_size)
   11ce9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11cec:	83 ec 04             	sub    $0x4,%esp
   11cef:	ff 75 e8             	pushl  -0x18(%ebp)
   11cf2:	50                   	push   %eax
   11cf3:	ff 75 08             	pushl  0x8(%ebp)
   11cf6:	e8 ed 57 00 00       	call   174e8 <sys_read>
   11cfb:	83 c4 10             	add    $0x10,%esp
   11cfe:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11d01:	7e 17                	jle    11d1a <load_phdr+0x110>
        {
            log_printf("read file failed");
   11d03:	83 ec 0c             	sub    $0xc,%esp
   11d06:	68 a5 8d 01 00       	push   $0x18da5
   11d0b:	e8 93 6b 00 00       	call   188a3 <log_printf>
   11d10:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d18:	eb 17                	jmp    11d31 <load_phdr+0x127>
        }

        size -= curr_size;
   11d1a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d1d:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11d20:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d23:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0)
   11d26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d2a:	75 96                	jne    11cc2 <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11d2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d31:	c9                   	leave  
   11d32:	c3                   	ret    

00011d33 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file(task_t *task, const char *name, uint32_t page_dir)
{
   11d33:	55                   	push   %ebp
   11d34:	89 e5                	mov    %esp,%ebp
   11d36:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    // 以只读方式打开
    int file = sys_open(name, 0); // todo: flags暂时用0替代
   11d39:	83 ec 08             	sub    $0x8,%esp
   11d3c:	6a 00                	push   $0x0
   11d3e:	ff 75 0c             	pushl  0xc(%ebp)
   11d41:	e8 82 55 00 00       	call   172c8 <sys_open>
   11d46:	83 c4 10             	add    $0x10,%esp
   11d49:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0)
   11d4c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d50:	79 18                	jns    11d6a <load_elf_file+0x37>
    {
        log_printf("open file failed.%s", name);
   11d52:	83 ec 08             	sub    $0x8,%esp
   11d55:	ff 75 0c             	pushl  0xc(%ebp)
   11d58:	68 b6 8d 01 00       	push   $0x18db6
   11d5d:	e8 41 6b 00 00       	call   188a3 <log_printf>
   11d62:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d65:	e9 c1 01 00 00       	jmp    11f2b <load_elf_file+0x1f8>
    }

    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11d6a:	83 ec 04             	sub    $0x4,%esp
   11d6d:	6a 34                	push   $0x34
   11d6f:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11d72:	50                   	push   %eax
   11d73:	ff 75 ec             	pushl  -0x14(%ebp)
   11d76:	e8 6d 57 00 00       	call   174e8 <sys_read>
   11d7b:	83 c4 10             	add    $0x10,%esp
   11d7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr))
   11d81:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d84:	83 f8 33             	cmp    $0x33,%eax
   11d87:	77 18                	ja     11da1 <load_elf_file+0x6e>
    {
        log_printf("elf hdr too small. size=%d", cnt);
   11d89:	83 ec 08             	sub    $0x8,%esp
   11d8c:	ff 75 e8             	pushl  -0x18(%ebp)
   11d8f:	68 ca 8d 01 00       	push   $0x18dca
   11d94:	e8 0a 6b 00 00       	call   188a3 <log_printf>
   11d99:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d9c:	e9 8a 01 00 00       	jmp    11f2b <load_elf_file+0x1f8>
    }

    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E') || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F'))
   11da1:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11da5:	3c 7f                	cmp    $0x7f,%al
   11da7:	75 18                	jne    11dc1 <load_elf_file+0x8e>
   11da9:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11dad:	3c 45                	cmp    $0x45,%al
   11daf:	75 10                	jne    11dc1 <load_elf_file+0x8e>
   11db1:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11db5:	3c 4c                	cmp    $0x4c,%al
   11db7:	75 08                	jne    11dc1 <load_elf_file+0x8e>
   11db9:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11dbd:	3c 46                	cmp    $0x46,%al
   11dbf:	74 15                	je     11dd6 <load_elf_file+0xa3>
    {
        log_printf("check elf indent failed.");
   11dc1:	83 ec 0c             	sub    $0xc,%esp
   11dc4:	68 e5 8d 01 00       	push   $0x18de5
   11dc9:	e8 d5 6a 00 00       	call   188a3 <log_printf>
   11dce:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dd1:	e9 55 01 00 00       	jmp    11f2b <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0))
   11dd6:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11dda:	66 83 f8 02          	cmp    $0x2,%ax
   11dde:	75 11                	jne    11df1 <load_elf_file+0xbe>
   11de0:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11de4:	66 83 f8 03          	cmp    $0x3,%ax
   11de8:	75 07                	jne    11df1 <load_elf_file+0xbe>
   11dea:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11ded:	85 c0                	test   %eax,%eax
   11def:	75 15                	jne    11e06 <load_elf_file+0xd3>
    {
        log_printf("check elf type or entry failed.");
   11df1:	83 ec 0c             	sub    $0xc,%esp
   11df4:	68 00 8e 01 00       	push   $0x18e00
   11df9:	e8 a5 6a 00 00       	call   188a3 <log_printf>
   11dfe:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e01:	e9 25 01 00 00       	jmp    11f2b <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0))
   11e06:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e0a:	66 85 c0             	test   %ax,%ax
   11e0d:	74 07                	je     11e16 <load_elf_file+0xe3>
   11e0f:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e12:	85 c0                	test   %eax,%eax
   11e14:	75 15                	jne    11e2b <load_elf_file+0xf8>
    {
        log_printf("none programe header");
   11e16:	83 ec 0c             	sub    $0xc,%esp
   11e19:	68 20 8e 01 00       	push   $0x18e20
   11e1e:	e8 80 6a 00 00       	call   188a3 <log_printf>
   11e23:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e26:	e9 00 01 00 00       	jmp    11f2b <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11e2b:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11e31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e38:	e9 cb 00 00 00       	jmp    11f08 <load_elf_file+0x1d5>
    {
        if (sys_lseek(file, e_phoff, 0) < 0)
   11e3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e40:	83 ec 04             	sub    $0x4,%esp
   11e43:	6a 00                	push   $0x0
   11e45:	50                   	push   %eax
   11e46:	ff 75 ec             	pushl  -0x14(%ebp)
   11e49:	e8 23 58 00 00       	call   17671 <sys_lseek>
   11e4e:	83 c4 10             	add    $0x10,%esp
   11e51:	85 c0                	test   %eax,%eax
   11e53:	79 15                	jns    11e6a <load_elf_file+0x137>
        {
            log_printf("read file failed");
   11e55:	83 ec 0c             	sub    $0xc,%esp
   11e58:	68 a5 8d 01 00       	push   $0x18da5
   11e5d:	e8 41 6a 00 00       	call   188a3 <log_printf>
   11e62:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e65:	e9 c1 00 00 00       	jmp    11f2b <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11e6a:	83 ec 04             	sub    $0x4,%esp
   11e6d:	6a 20                	push   $0x20
   11e6f:	8d 45 90             	lea    -0x70(%ebp),%eax
   11e72:	50                   	push   %eax
   11e73:	ff 75 ec             	pushl  -0x14(%ebp)
   11e76:	e8 6d 56 00 00       	call   174e8 <sys_read>
   11e7b:	83 c4 10             	add    $0x10,%esp
   11e7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr))
   11e81:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11e84:	83 f8 1f             	cmp    $0x1f,%eax
   11e87:	77 15                	ja     11e9e <load_elf_file+0x16b>
        {
            log_printf("read file failed");
   11e89:	83 ec 0c             	sub    $0xc,%esp
   11e8c:	68 a5 8d 01 00       	push   $0x18da5
   11e91:	e8 0d 6a 00 00       	call   188a3 <log_printf>
   11e96:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e99:	e9 8d 00 00 00       	jmp    11f2b <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE))
   11e9e:	8b 45 90             	mov    -0x70(%ebp),%eax
   11ea1:	83 f8 01             	cmp    $0x1,%eax
   11ea4:	75 53                	jne    11ef9 <load_elf_file+0x1c6>
   11ea6:	8b 45 98             	mov    -0x68(%ebp),%eax
   11ea9:	85 c0                	test   %eax,%eax
   11eab:	79 4c                	jns    11ef9 <load_elf_file+0x1c6>
        {
            continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11ead:	83 ec 04             	sub    $0x4,%esp
   11eb0:	ff 75 10             	pushl  0x10(%ebp)
   11eb3:	8d 45 90             	lea    -0x70(%ebp),%eax
   11eb6:	50                   	push   %eax
   11eb7:	ff 75 ec             	pushl  -0x14(%ebp)
   11eba:	e8 4b fd ff ff       	call   11c0a <load_phdr>
   11ebf:	83 c4 10             	add    $0x10,%esp
   11ec2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   11ec5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11ec9:	79 12                	jns    11edd <load_elf_file+0x1aa>
        {
            log_printf("load program hdr failed");
   11ecb:	83 ec 0c             	sub    $0xc,%esp
   11ece:	68 35 8e 01 00       	push   $0x18e35
   11ed3:	e8 cb 69 00 00       	call   188a3 <log_printf>
   11ed8:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11edb:	eb 4e                	jmp    11f2b <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11edd:	8b 55 98             	mov    -0x68(%ebp),%edx
   11ee0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11ee3:	01 c2                	add    %eax,%edx
   11ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee8:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11eeb:	8b 45 08             	mov    0x8(%ebp),%eax
   11eee:	8b 50 2c             	mov    0x2c(%eax),%edx
   11ef1:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef4:	89 50 30             	mov    %edx,0x30(%eax)
   11ef7:	eb 01                	jmp    11efa <load_elf_file+0x1c7>
            continue;
   11ef9:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11efa:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11efe:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f02:	0f b7 c0             	movzwl %ax,%eax
   11f05:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f08:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f0c:	0f b7 c0             	movzwl %ax,%eax
   11f0f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f12:	0f 8c 25 ff ff ff    	jl     11e3d <load_elf_file+0x10a>
    }

    sys_close(file);
   11f18:	83 ec 0c             	sub    $0xc,%esp
   11f1b:	ff 75 ec             	pushl  -0x14(%ebp)
   11f1e:	e8 e3 57 00 00       	call   17706 <sys_close>
   11f23:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f26:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f29:	eb 19                	jmp    11f44 <load_elf_file+0x211>

load_failed:
    if (file >= 0)
   11f2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f2f:	78 0e                	js     11f3f <load_elf_file+0x20c>
    {
        sys_close(file);
   11f31:	83 ec 0c             	sub    $0xc,%esp
   11f34:	ff 75 ec             	pushl  -0x14(%ebp)
   11f37:	e8 ca 57 00 00       	call   17706 <sys_close>
   11f3c:	83 c4 10             	add    $0x10,%esp
    }

    return 0;
   11f3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f44:	c9                   	leave  
   11f45:	c3                   	ret    

00011f46 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args(char *to, uint32_t page_dir, int argc, char **argv)
{
   11f46:	55                   	push   %ebp
   11f47:	89 e5                	mov    %esp,%ebp
   11f49:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11f4c:	8b 45 10             	mov    0x10(%ebp),%eax
   11f4f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11f52:	8b 45 08             	mov    0x8(%ebp),%eax
   11f55:	83 c0 0c             	add    $0xc,%eax
   11f58:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char *dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1); // 留出结束符
   11f5b:	8b 45 10             	mov    0x10(%ebp),%eax
   11f5e:	83 c0 04             	add    $0x4,%eax
   11f61:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f68:	8b 45 08             	mov    0x8(%ebp),%eax
   11f6b:	01 d0                	add    %edx,%eax
   11f6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // argv表
    char **dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11f70:	8b 45 08             	mov    0x8(%ebp),%eax
   11f73:	83 c0 0c             	add    $0xc,%eax
   11f76:	83 ec 08             	sub    $0x8,%esp
   11f79:	50                   	push   %eax
   11f7a:	ff 75 0c             	pushl  0xc(%ebp)
   11f7d:	e8 19 eb ff ff       	call   10a9b <memory_get_paddr>
   11f82:	83 c4 10             	add    $0x10,%esp
   11f85:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11f88:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f8c:	75 1c                	jne    11faa <copy_args+0x64>
   11f8e:	68 4d 8e 01 00       	push   $0x18e4d
   11f93:	68 90 8e 01 00       	push   $0x18e90
   11f98:	68 06 03 00 00       	push   $0x306
   11f9d:	68 fc 8c 01 00       	push   $0x18cfc
   11fa2:	e8 9f 66 00 00       	call   18646 <panic>
   11fa7:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++)
   11faa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fb1:	e9 82 00 00 00       	jmp    12038 <copy_args+0xf2>
    {
        char *from = argv[i];
   11fb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fb9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fc0:	8b 45 14             	mov    0x14(%ebp),%eax
   11fc3:	01 d0                	add    %edx,%eax
   11fc5:	8b 00                	mov    (%eax),%eax
   11fc7:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1; // 包含结束符
   11fca:	83 ec 0c             	sub    $0xc,%esp
   11fcd:	ff 75 e8             	pushl  -0x18(%ebp)
   11fd0:	e8 1c 62 00 00       	call   181f1 <kernel_strlen>
   11fd5:	83 c4 10             	add    $0x10,%esp
   11fd8:	83 c0 01             	add    $0x1,%eax
   11fdb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11fde:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11fe1:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fe7:	51                   	push   %ecx
   11fe8:	52                   	push   %edx
   11fe9:	ff 75 0c             	pushl  0xc(%ebp)
   11fec:	50                   	push   %eax
   11fed:	e8 ef ea ff ff       	call   10ae1 <memory_copy_uvm_data>
   11ff2:	83 c4 10             	add    $0x10,%esp
   11ff5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11ff8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11ffc:	79 1c                	jns    1201a <copy_args+0xd4>
   11ffe:	68 5f 8e 01 00       	push   $0x18e5f
   12003:	68 90 8e 01 00       	push   $0x18e90
   12008:	68 0f 03 00 00       	push   $0x30f
   1200d:	68 fc 8c 01 00       	push   $0x18cfc
   12012:	e8 2f 66 00 00       	call   18646 <panic>
   12017:	83 c4 10             	add    $0x10,%esp

        // 关联ar
        dest_argv_tb[i] = dest_arg;
   1201a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1201d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12024:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12027:	01 c2                	add    %eax,%edx
   12029:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1202c:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   1202e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12031:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++)
   12034:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12038:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1203b:	3b 45 10             	cmp    0x10(%ebp),%eax
   1203e:	0f 8c 72 ff ff ff    	jl     11fb6 <copy_args+0x70>
    }
    if (argc > 0)
   12044:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12048:	7e 15                	jle    1205f <copy_args+0x119>
    {
        dest_argv_tb[argc] = (char *)0; // 最后一个参数为空
   1204a:	8b 45 10             	mov    0x10(%ebp),%eax
   1204d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12054:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12057:	01 d0                	add    %edx,%eax
   12059:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    } 
    // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   1205f:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   12062:	8b 45 08             	mov    0x8(%ebp),%eax
   12065:	6a 0c                	push   $0xc
   12067:	52                   	push   %edx
   12068:	ff 75 0c             	pushl  0xc(%ebp)
   1206b:	50                   	push   %eax
   1206c:	e8 70 ea ff ff       	call   10ae1 <memory_copy_uvm_data>
   12071:	83 c4 10             	add    $0x10,%esp
}
   12074:	c9                   	leave  
   12075:	c3                   	ret    

00012076 <sys_execve>:
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env)
{
   12076:	55                   	push   %ebp
   12077:	89 e5                	mov    %esp,%ebp
   12079:	83 ec 28             	sub    $0x28,%esp
    task_t *task = task_current();
   1207c:	e8 4f f6 ff ff       	call   116d0 <task_current>
   12081:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   12084:	83 ec 0c             	sub    $0xc,%esp
   12087:	ff 75 08             	pushl  0x8(%ebp)
   1208a:	e8 65 60 00 00       	call   180f4 <get_file_name>
   1208f:	83 c4 10             	add    $0x10,%esp
   12092:	89 c2                	mov    %eax,%edx
   12094:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12097:	83 c0 04             	add    $0x4,%eax
   1209a:	83 ec 04             	sub    $0x4,%esp
   1209d:	6a 20                	push   $0x20
   1209f:	52                   	push   %edx
   120a0:	50                   	push   %eax
   120a1:	e8 db 60 00 00       	call   18181 <kernel_strncpy>
   120a6:	83 c4 10             	add    $0x10,%esp

    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   120a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120ac:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   120b5:	e8 f8 e6 ff ff       	call   107b2 <memory_create_uvm>
   120ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir)
   120bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120c1:	0f 84 2d 01 00 00    	je     121f4 <sys_execve+0x17e>
    {
        goto exec_failed;
    }

    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir); // 暂时置用task->name表示
   120c7:	83 ec 04             	sub    $0x4,%esp
   120ca:	ff 75 ec             	pushl  -0x14(%ebp)
   120cd:	ff 75 08             	pushl  0x8(%ebp)
   120d0:	ff 75 f4             	pushl  -0xc(%ebp)
   120d3:	e8 5b fc ff ff       	call   11d33 <load_elf_file>
   120d8:	83 c4 10             	add    $0x10,%esp
   120db:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0)
   120de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   120e2:	0f 84 0f 01 00 00    	je     121f7 <sys_execve+0x181>
    {
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE; // 预留一部分参数空间
   120e8:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   120ef:	6a 07                	push   $0x7
   120f1:	68 00 40 1f 00       	push   $0x1f4000
   120f6:	68 00 c0 e0 df       	push   $0xdfe0c000
   120fb:	ff 75 ec             	pushl  -0x14(%ebp)
   120fe:	e8 61 ea ff ff       	call   10b64 <memory_alloc_for_page_dir>
   12103:	83 c4 10             	add    $0x10,%esp
   12106:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                        MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                                        MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0)
   12109:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1210d:	0f 88 e7 00 00 00    	js     121fa <sys_execve+0x184>
    {
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   12113:	83 ec 0c             	sub    $0xc,%esp
   12116:	ff 75 0c             	pushl  0xc(%ebp)
   12119:	e8 a9 5f 00 00       	call   180c7 <strings_count>
   1211e:	83 c4 10             	add    $0x10,%esp
   12121:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12124:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12127:	ff 75 0c             	pushl  0xc(%ebp)
   1212a:	ff 75 dc             	pushl  -0x24(%ebp)
   1212d:	ff 75 ec             	pushl  -0x14(%ebp)
   12130:	50                   	push   %eax
   12131:	e8 10 fe ff ff       	call   11f46 <copy_args>
   12136:	83 c4 10             	add    $0x10,%esp
   12139:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   1213c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12140:	0f 88 b7 00 00 00    	js     121fd <sys_execve+0x187>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t *frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   12146:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12149:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   1214f:	83 e8 58             	sub    $0x58,%eax
   12152:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   12155:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12158:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1215b:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1215e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12161:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12168:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1216b:	8b 50 28             	mov    0x28(%eax),%edx
   1216e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12171:	89 50 2c             	mov    %edx,0x2c(%eax)
   12174:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12177:	8b 50 2c             	mov    0x2c(%eax),%edx
   1217a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1217d:	89 50 24             	mov    %edx,0x24(%eax)
   12180:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12183:	8b 50 24             	mov    0x24(%eax),%edx
   12186:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12189:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   1218c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1218f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12196:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12199:	8b 50 1c             	mov    0x1c(%eax),%edx
   1219c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1219f:	89 50 14             	mov    %edx,0x14(%eax)
   121a2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121a5:	8b 50 14             	mov    0x14(%eax),%edx
   121a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ab:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF; // 段寄存器无需修改
   121ae:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b1:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT;
   121b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   121ba:	83 e8 14             	sub    $0x14,%eax
   121bd:	89 c2                	mov    %eax,%edx
   121bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c2:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   121c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121c8:	8b 55 ec             	mov    -0x14(%ebp),%edx
   121cb:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    mmu_set_page_dir(new_page_dir); // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   121d1:	83 ec 0c             	sub    $0xc,%esp
   121d4:	ff 75 ec             	pushl  -0x14(%ebp)
   121d7:	e8 06 ee ff ff       	call   10fe2 <mmu_set_page_dir>
   121dc:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir); // 再释放掉了原进程的内容空间
   121df:	83 ec 0c             	sub    $0xc,%esp
   121e2:	ff 75 f0             	pushl  -0x10(%ebp)
   121e5:	e8 4d e6 ff ff       	call   10837 <memory_destroy_uvm>
   121ea:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return 0;
   121ed:	b8 00 00 00 00       	mov    $0x0,%eax
   121f2:	eb 3d                	jmp    12231 <sys_execve+0x1bb>
        goto exec_failed;
   121f4:	90                   	nop
   121f5:	eb 07                	jmp    121fe <sys_execve+0x188>
        goto exec_failed;
   121f7:	90                   	nop
   121f8:	eb 04                	jmp    121fe <sys_execve+0x188>
        goto exec_failed;
   121fa:	90                   	nop
   121fb:	eb 01                	jmp    121fe <sys_execve+0x188>
        goto exec_failed;
   121fd:	90                   	nop

exec_failed: // 必要的资源释放
    if (new_page_dir)
   121fe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12202:	74 28                	je     1222c <sys_execve+0x1b6>
    {
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12204:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12207:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1220a:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        mmu_set_page_dir(old_page_dir);
   12210:	83 ec 0c             	sub    $0xc,%esp
   12213:	ff 75 f0             	pushl  -0x10(%ebp)
   12216:	e8 c7 ed ff ff       	call   10fe2 <mmu_set_page_dir>
   1221b:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1221e:	83 ec 0c             	sub    $0xc,%esp
   12221:	ff 75 ec             	pushl  -0x14(%ebp)
   12224:	e8 0e e6 ff ff       	call   10837 <memory_destroy_uvm>
   12229:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   1222c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12231:	c9                   	leave  
   12232:	c3                   	ret    

00012233 <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid(void)
{
   12233:	55                   	push   %ebp
   12234:	89 e5                	mov    %esp,%ebp
   12236:	83 ec 10             	sub    $0x10,%esp
    task_t *curr_task = task_current();
   12239:	e8 92 f4 ff ff       	call   116d0 <task_current>
   1223e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   12241:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12244:	8b 40 24             	mov    0x24(%eax),%eax
}
   12247:	c9                   	leave  
   12248:	c3                   	ret    

00012249 <sys_wait>:

/**
 * @brief 等待子进程退出
 */
int sys_wait(int *status)
{
   12249:	55                   	push   %ebp
   1224a:	89 e5                	mov    %esp,%ebp
   1224c:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   1224f:	e8 7c f4 ff ff       	call   116d0 <task_current>
   12254:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (;;)
    {
        // 遍历，找僵尸状态的进程，然后回收。如果收不到，则进入睡眠态
        mutex_lock(&task_table_mutex);
   12257:	83 ec 0c             	sub    $0xc,%esp
   1225a:	68 c0 49 03 00       	push   $0x349c0
   1225f:	e8 78 59 00 00       	call   17bdc <mutex_lock>
   12264:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++)
   12267:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1226e:	e9 98 00 00 00       	jmp    1230b <sys_wait+0xc2>
        {
            task_t *task = task_table + i;
   12273:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12276:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1227c:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   12281:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task)
   12284:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12287:	8b 40 28             	mov    0x28(%eax),%eax
   1228a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1228d:	75 77                	jne    12306 <sys_wait+0xbd>
            {
                continue;
            }

            if (task->state == TASK_ZOMBIE)
   1228f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12292:	8b 00                	mov    (%eax),%eax
   12294:	83 f8 05             	cmp    $0x5,%eax
   12297:	75 6e                	jne    12307 <sys_wait+0xbe>
            {
                int pid = task->pid;
   12299:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1229c:	8b 40 24             	mov    0x24(%eax),%eax
   1229f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   122a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122a5:	8b 50 34             	mov    0x34(%eax),%edx
   122a8:	8b 45 08             	mov    0x8(%ebp),%eax
   122ab:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   122ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122b0:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   122b6:	83 ec 0c             	sub    $0xc,%esp
   122b9:	50                   	push   %eax
   122ba:	e8 78 e5 ff ff       	call   10837 <memory_destroy_uvm>
   122bf:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   122c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122c5:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   122cb:	2d 00 10 00 00       	sub    $0x1000,%eax
   122d0:	83 ec 0c             	sub    $0xc,%esp
   122d3:	50                   	push   %eax
   122d4:	e8 b3 e9 ff ff       	call   10c8c <memory_free_page>
   122d9:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   122dc:	83 ec 04             	sub    $0x4,%esp
   122df:	68 c8 02 00 00       	push   $0x2c8
   122e4:	6a 00                	push   $0x0
   122e6:	ff 75 e8             	pushl  -0x18(%ebp)
   122e9:	e8 0b 60 00 00       	call   182f9 <kernel_memset>
   122ee:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   122f1:	83 ec 0c             	sub    $0xc,%esp
   122f4:	68 c0 49 03 00       	push   $0x349c0
   122f9:	e8 75 59 00 00       	call   17c73 <mutex_unlock>
   122fe:	83 c4 10             	add    $0x10,%esp
                return pid;
   12301:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12304:	eb 56                	jmp    1235c <sys_wait+0x113>
                continue;
   12306:	90                   	nop
        for (int i = 0; i < TASK_NR; i++)
   12307:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1230b:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1230f:	0f 8e 5e ff ff ff    	jle    12273 <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   12315:	83 ec 0c             	sub    $0xc,%esp
   12318:	68 c0 49 03 00       	push   $0x349c0
   1231d:	e8 51 59 00 00       	call   17c73 <mutex_unlock>
   12322:	83 c4 10             	add    $0x10,%esp

        // 找不到，则等待
        irq_state_t state = irq_enter_protection();
   12325:	e8 ab 0d 00 00       	call   130d5 <irq_enter_protection>
   1232a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   1232d:	83 ec 0c             	sub    $0xc,%esp
   12330:	ff 75 f0             	pushl  -0x10(%ebp)
   12333:	e8 ca f2 ff ff       	call   11602 <task_set_block>
   12338:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   1233b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1233e:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   12344:	e8 9e f4 ff ff       	call   117e7 <task_dispatch>
        irq_leave_protection(state);
   12349:	83 ec 0c             	sub    $0xc,%esp
   1234c:	ff 75 ec             	pushl  -0x14(%ebp)
   1234f:	e8 99 0d 00 00       	call   130ed <irq_leave_protection>
   12354:	83 c4 10             	add    $0x10,%esp
    {
   12357:	e9 fb fe ff ff       	jmp    12257 <sys_wait+0xe>
    }
}
   1235c:	c9                   	leave  
   1235d:	c3                   	ret    

0001235e <sys_exit>:

/**
 * @brief 退出进程
 */
void sys_exit(int status)
{
   1235e:	55                   	push   %ebp
   1235f:	89 e5                	mov    %esp,%ebp
   12361:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   12364:	e8 67 f3 ff ff       	call   116d0 <task_current>
   12369:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 关闭所有已经打开的文件, 标准输入输出库会由newlib自行关闭，但这里仍然再处理下
    for (int fd = 0; fd < TASK_OFILE_NR; fd++)
   1236c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12373:	eb 39                	jmp    123ae <sys_exit+0x50>
    {
        file_t *file = curr_task->file_table[fd];
   12375:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12378:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1237b:	83 c2 10             	add    $0x10,%edx
   1237e:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   12382:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file)
   12385:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   12389:	74 1f                	je     123aa <sys_exit+0x4c>
        {
            sys_close(fd);
   1238b:	83 ec 0c             	sub    $0xc,%esp
   1238e:	ff 75 f4             	pushl  -0xc(%ebp)
   12391:	e8 70 53 00 00       	call   17706 <sys_close>
   12396:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   12399:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1239c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1239f:	83 c2 10             	add    $0x10,%edx
   123a2:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   123a9:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++)
   123aa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123ae:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   123b2:	7e c1                	jle    12375 <sys_exit+0x17>
        }
    }

    int move_child = 0;
   123b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 找所有的子进程，将其转交给init进程
    mutex_lock(&task_table_mutex);
   123bb:	83 ec 0c             	sub    $0xc,%esp
   123be:	68 c0 49 03 00       	push   $0x349c0
   123c3:	e8 14 58 00 00       	call   17bdc <mutex_lock>
   123c8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++)
   123cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   123d2:	eb 3b                	jmp    1240f <sys_exit+0xb1>
    {
        task_t *task = task_table + i;
   123d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   123d7:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   123dd:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   123e2:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task)
   123e5:	8b 45 dc             	mov    -0x24(%ebp),%eax
   123e8:	8b 40 28             	mov    0x28(%eax),%eax
   123eb:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   123ee:	75 1b                	jne    1240b <sys_exit+0xad>
        {
            // 有子进程，则转给init_task
            task->parent = &task_manager.first_task;
   123f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
   123f3:	c7 40 28 28 d0 01 00 	movl   $0x1d028,0x28(%eax)

            // 如果子进程中有僵尸进程，唤醒回收资源
            // 并不由自己回收，因为自己将要退出
            if (task->state == TASK_ZOMBIE)
   123fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
   123fd:	8b 00                	mov    (%eax),%eax
   123ff:	83 f8 05             	cmp    $0x5,%eax
   12402:	75 07                	jne    1240b <sys_exit+0xad>
            {
                move_child = 1;
   12404:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++)
   1240b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1240f:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   12413:	7e bf                	jle    123d4 <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   12415:	83 ec 0c             	sub    $0xc,%esp
   12418:	68 c0 49 03 00       	push   $0x349c0
   1241d:	e8 51 58 00 00       	call   17c73 <mutex_unlock>
   12422:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   12425:	e8 ab 0c 00 00       	call   130d5 <irq_enter_protection>
   1242a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 如果有移动子进程，则唤醒init进程
    task_t *parent = curr_task->parent;
   1242d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12430:	8b 40 28             	mov    0x28(%eax),%eax
   12433:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task))
   12436:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1243a:	74 23                	je     1245f <sys_exit+0x101>
   1243c:	81 7d e0 28 d0 01 00 	cmpl   $0x1d028,-0x20(%ebp)
   12443:	74 1a                	je     1245f <sys_exit+0x101>
    { // 如果父进程为init进程，在下方唤醒
        if (task_manager.first_task.state == TASK_WAITING)
   12445:	a1 28 d0 01 00       	mov    0x1d028,%eax
   1244a:	83 f8 04             	cmp    $0x4,%eax
   1244d:	75 10                	jne    1245f <sys_exit+0x101>
        {
            task_set_ready(&task_manager.first_task);
   1244f:	83 ec 0c             	sub    $0xc,%esp
   12452:	68 28 d0 01 00       	push   $0x1d028
   12457:	e8 72 f1 ff ff       	call   115ce <task_set_ready>
   1245c:	83 c4 10             	add    $0x10,%esp
        }
    }

    // 如果有父任务在wait，则唤醒父任务进行回收
    // 如果父进程没有等待，则一直处理僵死状态？
    if (parent->state == TASK_WAITING)
   1245f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   12462:	8b 00                	mov    (%eax),%eax
   12464:	83 f8 04             	cmp    $0x4,%eax
   12467:	75 12                	jne    1247b <sys_exit+0x11d>
    {
        task_set_ready(curr_task->parent);
   12469:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1246c:	8b 40 28             	mov    0x28(%eax),%eax
   1246f:	83 ec 0c             	sub    $0xc,%esp
   12472:	50                   	push   %eax
   12473:	e8 56 f1 ff ff       	call   115ce <task_set_ready>
   12478:	83 c4 10             	add    $0x10,%esp
    }

    // 保存返回值，进入僵尸状态
    curr_task->status = status;
   1247b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1247e:	8b 55 08             	mov    0x8(%ebp),%edx
   12481:	89 50 34             	mov    %edx,0x34(%eax)
    curr_task->state = TASK_ZOMBIE;
   12484:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12487:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   1248d:	83 ec 0c             	sub    $0xc,%esp
   12490:	ff 75 e8             	pushl  -0x18(%ebp)
   12493:	e8 6a f1 ff ff       	call   11602 <task_set_block>
   12498:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   1249b:	e8 47 f3 ff ff       	call   117e7 <task_dispatch>

    irq_leave_protection(state);
   124a0:	83 ec 0c             	sub    $0xc,%esp
   124a3:	ff 75 e4             	pushl  -0x1c(%ebp)
   124a6:	e8 42 0c 00 00       	call   130ed <irq_leave_protection>
   124ab:	83 c4 10             	add    $0x10,%esp
}
   124ae:	90                   	nop
   124af:	c9                   	leave  
   124b0:	c3                   	ret    

000124b1 <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   124b1:	55                   	push   %ebp
   124b2:	89 e5                	mov    %esp,%ebp
   124b4:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   124b7:	8b 45 08             	mov    0x8(%ebp),%eax
   124ba:	c1 e8 10             	shr    $0x10,%eax
   124bd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   124c1:	8b 45 08             	mov    0x8(%ebp),%eax
   124c4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   124c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   124cb:	83 e8 01             	sub    $0x1,%eax
   124ce:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   124d2:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   124d6:	90                   	nop
   124d7:	c9                   	leave  
   124d8:	c3                   	ret    

000124d9 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   124d9:	55                   	push   %ebp
   124da:	89 e5                	mov    %esp,%ebp
   124dc:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
   124df:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
   124e5:	8b 45 08             	mov    0x8(%ebp),%eax
   124e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   124eb:	8d 45 f8             	lea    -0x8(%ebp),%eax
   124ee:	ff 28                	ljmp   *(%eax)
}
   124f0:	90                   	nop
   124f1:	c9                   	leave  
   124f2:	c3                   	ret    

000124f3 <segment_desc_set>:
static mutex_t mutex;

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   124f3:	55                   	push   %ebp
   124f4:	89 e5                	mov    %esp,%ebp
   124f6:	83 ec 14             	sub    $0x14,%esp
   124f9:	8b 45 14             	mov    0x14(%ebp),%eax
   124fc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   12500:	8b 45 08             	mov    0x8(%ebp),%eax
   12503:	c1 f8 03             	sar    $0x3,%eax
   12506:	c1 e0 03             	shl    $0x3,%eax
   12509:	05 e0 49 03 00       	add    $0x349e0,%eax
   1250e:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
	if (limit > 0xfffff) {
   12511:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12518:	76 0f                	jbe    12529 <segment_desc_set+0x36>
		attr |= 0x8000;
   1251a:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   12520:	8b 45 10             	mov    0x10(%ebp),%eax
   12523:	c1 e8 0c             	shr    $0xc,%eax
   12526:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   12529:	8b 45 10             	mov    0x10(%ebp),%eax
   1252c:	89 c2                	mov    %eax,%edx
   1252e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12531:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   12534:	8b 45 0c             	mov    0xc(%ebp),%eax
   12537:	89 c2                	mov    %eax,%edx
   12539:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1253c:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   12540:	8b 45 0c             	mov    0xc(%ebp),%eax
   12543:	c1 e8 10             	shr    $0x10,%eax
   12546:	89 c2                	mov    %eax,%edx
   12548:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1254b:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1254e:	8b 45 10             	mov    0x10(%ebp),%eax
   12551:	c1 e8 10             	shr    $0x10,%eax
   12554:	c1 e0 08             	shl    $0x8,%eax
   12557:	66 25 00 0f          	and    $0xf00,%ax
   1255b:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1255f:	89 c2                	mov    %eax,%edx
   12561:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12564:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   12568:	8b 45 0c             	mov    0xc(%ebp),%eax
   1256b:	c1 e8 18             	shr    $0x18,%eax
   1256e:	89 c2                	mov    %eax,%edx
   12570:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12573:	88 50 07             	mov    %dl,0x7(%eax)
}
   12576:	90                   	nop
   12577:	c9                   	leave  
   12578:	c3                   	ret    

00012579 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   12579:	55                   	push   %ebp
   1257a:	89 e5                	mov    %esp,%ebp
   1257c:	83 ec 08             	sub    $0x8,%esp
   1257f:	8b 55 0c             	mov    0xc(%ebp),%edx
   12582:	8b 45 14             	mov    0x14(%ebp),%eax
   12585:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12589:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   1258d:	8b 45 10             	mov    0x10(%ebp),%eax
   12590:	89 c2                	mov    %eax,%edx
   12592:	8b 45 08             	mov    0x8(%ebp),%eax
   12595:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   12598:	8b 45 08             	mov    0x8(%ebp),%eax
   1259b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1259f:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   125a3:	8b 45 08             	mov    0x8(%ebp),%eax
   125a6:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   125aa:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   125ae:	8b 45 10             	mov    0x10(%ebp),%eax
   125b1:	c1 e8 10             	shr    $0x10,%eax
   125b4:	89 c2                	mov    %eax,%edx
   125b6:	8b 45 08             	mov    0x8(%ebp),%eax
   125b9:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   125bd:	90                   	nop
   125be:	c9                   	leave  
   125bf:	c3                   	ret    

000125c0 <gdt_free_sel>:

void gdt_free_sel (int sel) {
   125c0:	55                   	push   %ebp
   125c1:	89 e5                	mov    %esp,%ebp
   125c3:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   125c6:	83 ec 0c             	sub    $0xc,%esp
   125c9:	68 e0 51 03 00       	push   $0x351e0
   125ce:	e8 09 56 00 00       	call   17bdc <mutex_lock>
   125d3:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   125d6:	8b 45 08             	mov    0x8(%ebp),%eax
   125d9:	c1 e8 03             	shr    $0x3,%eax
   125dc:	66 c7 04 c5 e5 49 03 	movw   $0x0,0x349e5(,%eax,8)
   125e3:	00 00 00 
    mutex_unlock(&mutex);
   125e6:	83 ec 0c             	sub    $0xc,%esp
   125e9:	68 e0 51 03 00       	push   $0x351e0
   125ee:	e8 80 56 00 00       	call   17c73 <mutex_unlock>
   125f3:	83 c4 10             	add    $0x10,%esp
}
   125f6:	90                   	nop
   125f7:	c9                   	leave  
   125f8:	c3                   	ret    

000125f9 <gdt_alloc_desc>:

/**
 * 分配一个GDT推荐表符
 */
int gdt_alloc_desc (void) {
   125f9:	55                   	push   %ebp
   125fa:	89 e5                	mov    %esp,%ebp
   125fc:	83 ec 18             	sub    $0x18,%esp
    int i;

    // 跳过第0项
    mutex_lock(&mutex);
   125ff:	83 ec 0c             	sub    $0xc,%esp
   12602:	68 e0 51 03 00       	push   $0x351e0
   12607:	e8 d0 55 00 00       	call   17bdc <mutex_lock>
   1260c:	83 c4 10             	add    $0x10,%esp
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1260f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12616:	eb 29                	jmp    12641 <gdt_alloc_desc+0x48>
        segment_desc_t * desc = gdt_table + i;
   12618:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1261b:	c1 e0 03             	shl    $0x3,%eax
   1261e:	05 e0 49 03 00       	add    $0x349e0,%eax
   12623:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   12626:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12629:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1262d:	66 85 c0             	test   %ax,%ax
   12630:	75 0b                	jne    1263d <gdt_alloc_desc+0x44>
            desc->attr = SEG_P_PRESENT;     // 标记为占用状态
   12632:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12635:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            break;
   1263b:	eb 0d                	jmp    1264a <gdt_alloc_desc+0x51>
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1263d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12641:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12648:	7e ce                	jle    12618 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   1264a:	83 ec 0c             	sub    $0xc,%esp
   1264d:	68 e0 51 03 00       	push   $0x351e0
   12652:	e8 1c 56 00 00       	call   17c73 <mutex_unlock>
   12657:	83 c4 10             	add    $0x10,%esp

    return i >= GDT_TABLE_SIZE ? -1 : i * sizeof(segment_desc_t);;
   1265a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12661:	7f 08                	jg     1266b <gdt_alloc_desc+0x72>
   12663:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12666:	c1 e0 03             	shl    $0x3,%eax
   12669:	eb 05                	jmp    12670 <gdt_alloc_desc+0x77>
   1266b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12670:	c9                   	leave  
   12671:	c3                   	ret    

00012672 <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void) {
   12672:	55                   	push   %ebp
   12673:	89 e5                	mov    %esp,%ebp
   12675:	83 ec 10             	sub    $0x10,%esp
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   12678:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1267f:	eb 19                	jmp    1269a <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   12681:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12684:	c1 e0 03             	shl    $0x3,%eax
   12687:	6a 00                	push   $0x0
   12689:	6a 00                	push   $0x0
   1268b:	6a 00                	push   $0x0
   1268d:	50                   	push   %eax
   1268e:	e8 60 fe ff ff       	call   124f3 <segment_desc_set>
   12693:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   12696:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1269a:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   126a1:	7e de                	jle    12681 <init_gdt+0xf>
    }

    //数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   126a3:	68 92 c0 00 00       	push   $0xc092
   126a8:	6a ff                	push   $0xffffffff
   126aa:	6a 00                	push   $0x0
   126ac:	6a 10                	push   $0x10
   126ae:	e8 40 fe ff ff       	call   124f3 <segment_desc_set>
   126b3:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   126b6:	68 9a c0 00 00       	push   $0xc09a
   126bb:	6a ff                	push   $0xffffffff
   126bd:	6a 00                	push   $0x0
   126bf:	6a 08                	push   $0x8
   126c1:	e8 2d fe ff ff       	call   124f3 <segment_desc_set>
   126c6:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   126c9:	ba f8 02 01 00       	mov    $0x102f8,%edx
   126ce:	b8 f8 49 03 00       	mov    $0x349f8,%eax
   126d3:	68 05 ec 00 00       	push   $0xec05
   126d8:	52                   	push   %edx
   126d9:	6a 08                	push   $0x8
   126db:	50                   	push   %eax
   126dc:	e8 98 fe ff ff       	call   12579 <gate_desc_set>
   126e1:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handler_syscall,
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   126e4:	b8 e0 49 03 00       	mov    $0x349e0,%eax
   126e9:	68 00 08 00 00       	push   $0x800
   126ee:	50                   	push   %eax
   126ef:	e8 bd fd ff ff       	call   124b1 <lgdt>
   126f4:	83 c4 08             	add    $0x8,%esp
}
   126f7:	90                   	nop
   126f8:	c9                   	leave  
   126f9:	c3                   	ret    

000126fa <switch_to_tss>:

/**
 * 切换至TSS，即跳转实现任务切换
 */
void switch_to_tss (uint32_t tss_selector) {
   126fa:	55                   	push   %ebp
   126fb:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   126fd:	6a 00                	push   $0x0
   126ff:	ff 75 08             	pushl  0x8(%ebp)
   12702:	e8 d2 fd ff ff       	call   124d9 <far_jump>
   12707:	83 c4 08             	add    $0x8,%esp
}
   1270a:	90                   	nop
   1270b:	c9                   	leave  
   1270c:	c3                   	ret    

0001270d <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init (void) {
   1270d:	55                   	push   %ebp
   1270e:	89 e5                	mov    %esp,%ebp
   12710:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12713:	83 ec 0c             	sub    $0xc,%esp
   12716:	68 e0 51 03 00       	push   $0x351e0
   1271b:	e8 8e 54 00 00       	call   17bae <mutex_init>
   12720:	83 c4 10             	add    $0x10,%esp

    init_gdt();
   12723:	e8 4a ff ff ff       	call   12672 <init_gdt>
}
   12728:	90                   	nop
   12729:	c9                   	leave  
   1272a:	c3                   	ret    

0001272b <inb>:
static inline uint8_t inb(uint16_t  port) {
   1272b:	55                   	push   %ebp
   1272c:	89 e5                	mov    %esp,%ebp
   1272e:	83 ec 14             	sub    $0x14,%esp
   12731:	8b 45 08             	mov    0x8(%ebp),%eax
   12734:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   12738:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1273c:	89 c2                	mov    %eax,%edx
   1273e:	ec                   	in     (%dx),%al
   1273f:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   12742:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12746:	c9                   	leave  
   12747:	c3                   	ret    

00012748 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12748:	55                   	push   %ebp
   12749:	89 e5                	mov    %esp,%ebp
   1274b:	83 ec 08             	sub    $0x8,%esp
   1274e:	8b 55 08             	mov    0x8(%ebp),%edx
   12751:	8b 45 0c             	mov    0xc(%ebp),%eax
   12754:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12758:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1275b:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1275f:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12763:	ee                   	out    %al,(%dx)
}
   12764:	90                   	nop
   12765:	c9                   	leave  
   12766:	c3                   	ret    

00012767 <cli>:
static inline void cli() {
   12767:	55                   	push   %ebp
   12768:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   1276a:	fa                   	cli    
}
   1276b:	90                   	nop
   1276c:	5d                   	pop    %ebp
   1276d:	c3                   	ret    

0001276e <sti>:
static inline void sti() {
   1276e:	55                   	push   %ebp
   1276f:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   12771:	fb                   	sti    
}
   12772:	90                   	nop
   12773:	5d                   	pop    %ebp
   12774:	c3                   	ret    

00012775 <read_cr2>:
static inline uint32_t read_cr2() {
   12775:	55                   	push   %ebp
   12776:	89 e5                	mov    %esp,%ebp
   12778:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   1277b:	0f 20 d0             	mov    %cr2,%eax
   1277e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   12781:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12784:	c9                   	leave  
   12785:	c3                   	ret    

00012786 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   12786:	55                   	push   %ebp
   12787:	89 e5                	mov    %esp,%ebp
   12789:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   1278c:	8b 45 08             	mov    0x8(%ebp),%eax
   1278f:	c1 e8 10             	shr    $0x10,%eax
   12792:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   12796:	8b 45 08             	mov    0x8(%ebp),%eax
   12799:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   1279d:	8b 45 0c             	mov    0xc(%ebp),%eax
   127a0:	83 e8 01             	sub    $0x1,%eax
   127a3:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   127a7:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   127ab:	90                   	nop
   127ac:	c9                   	leave  
   127ad:	c3                   	ret    

000127ae <hlt>:
static inline void hlt(void) {
   127ae:	55                   	push   %ebp
   127af:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   127b1:	f4                   	hlt    
}
   127b2:	90                   	nop
   127b3:	5d                   	pop    %ebp
   127b4:	c3                   	ret    

000127b5 <read_eflags>:

static inline uint32_t read_eflags (void) {
   127b5:	55                   	push   %ebp
   127b6:	89 e5                	mov    %esp,%ebp
   127b8:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   127bb:	9c                   	pushf  
   127bc:	58                   	pop    %eax
   127bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   127c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127c3:	c9                   	leave  
   127c4:	c3                   	ret    

000127c5 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   127c5:	55                   	push   %ebp
   127c6:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   127c8:	8b 45 08             	mov    0x8(%ebp),%eax
   127cb:	50                   	push   %eax
   127cc:	9d                   	popf   
}
   127cd:	90                   	nop
   127ce:	5d                   	pop    %ebp
   127cf:	c3                   	ret    

000127d0 <dump_core_regs>:

#define IDT_TABLE_NR			128				// IDT表项数量

static gate_desc_t idt_table[IDT_TABLE_NR];	// 中断描述表

static void dump_core_regs (exception_frame_t * frame) {
   127d0:	55                   	push   %ebp
   127d1:	89 e5                	mov    %esp,%ebp
   127d3:	57                   	push   %edi
   127d4:	56                   	push   %esi
   127d5:	53                   	push   %ebx
   127d6:	83 ec 2c             	sub    $0x2c,%esp
    // 打印CPU寄存器相关内容
    uint32_t esp, ss;
    if (frame->cs & 0x7) {
   127d9:	8b 45 08             	mov    0x8(%ebp),%eax
   127dc:	8b 40 3c             	mov    0x3c(%eax),%eax
   127df:	83 e0 07             	and    $0x7,%eax
   127e2:	85 c0                	test   %eax,%eax
   127e4:	74 14                	je     127fa <dump_core_regs+0x2a>
        ss = frame->ds;
   127e6:	8b 45 08             	mov    0x8(%ebp),%eax
   127e9:	8b 40 0c             	mov    0xc(%eax),%eax
   127ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   127ef:	8b 45 08             	mov    0x8(%ebp),%eax
   127f2:	8b 40 1c             	mov    0x1c(%eax),%eax
   127f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   127f8:	eb 12                	jmp    1280c <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   127fa:	8b 45 08             	mov    0x8(%ebp),%eax
   127fd:	8b 40 48             	mov    0x48(%eax),%eax
   12800:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   12803:	8b 45 08             	mov    0x8(%ebp),%eax
   12806:	8b 40 44             	mov    0x44(%eax),%eax
   12809:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   1280c:	8b 45 08             	mov    0x8(%ebp),%eax
   1280f:	8b 50 34             	mov    0x34(%eax),%edx
   12812:	8b 45 08             	mov    0x8(%ebp),%eax
   12815:	8b 40 30             	mov    0x30(%eax),%eax
   12818:	83 ec 04             	sub    $0x4,%esp
   1281b:	52                   	push   %edx
   1281c:	50                   	push   %eax
   1281d:	68 9c 8e 01 00       	push   $0x18e9c
   12822:	e8 7c 60 00 00       	call   188a3 <log_printf>
   12827:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   1282a:	8b 45 08             	mov    0x8(%ebp),%eax
   1282d:	8b 30                	mov    (%eax),%esi
   1282f:	8b 45 08             	mov    0x8(%ebp),%eax
   12832:	8b 58 04             	mov    0x4(%eax),%ebx
   12835:	8b 45 08             	mov    0x8(%ebp),%eax
   12838:	8b 48 08             	mov    0x8(%eax),%ecx
   1283b:	8b 45 08             	mov    0x8(%ebp),%eax
   1283e:	8b 50 0c             	mov    0xc(%eax),%edx
   12841:	8b 45 08             	mov    0x8(%ebp),%eax
   12844:	8b 40 3c             	mov    0x3c(%eax),%eax
   12847:	83 ec 04             	sub    $0x4,%esp
   1284a:	56                   	push   %esi
   1284b:	53                   	push   %ebx
   1284c:	ff 75 e0             	pushl  -0x20(%ebp)
   1284f:	51                   	push   %ecx
   12850:	52                   	push   %edx
   12851:	50                   	push   %eax
   12852:	68 b8 8e 01 00       	push   $0x18eb8
   12857:	e8 47 60 00 00       	call   188a3 <log_printf>
   1285c:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs
    );
     log_printf("EAX:0x%x\n"
   1285f:	8b 45 08             	mov    0x8(%ebp),%eax
   12862:	8b 40 18             	mov    0x18(%eax),%eax
   12865:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12868:	8b 45 08             	mov    0x8(%ebp),%eax
   1286b:	8b 78 14             	mov    0x14(%eax),%edi
   1286e:	8b 45 08             	mov    0x8(%ebp),%eax
   12871:	8b 70 10             	mov    0x10(%eax),%esi
   12874:	8b 45 08             	mov    0x8(%ebp),%eax
   12877:	8b 58 24             	mov    0x24(%eax),%ebx
   1287a:	8b 45 08             	mov    0x8(%ebp),%eax
   1287d:	8b 48 28             	mov    0x28(%eax),%ecx
   12880:	8b 45 08             	mov    0x8(%ebp),%eax
   12883:	8b 50 20             	mov    0x20(%eax),%edx
   12886:	8b 45 08             	mov    0x8(%ebp),%eax
   12889:	8b 40 2c             	mov    0x2c(%eax),%eax
   1288c:	83 ec 0c             	sub    $0xc,%esp
   1288f:	ff 75 e4             	pushl  -0x1c(%ebp)
   12892:	ff 75 d4             	pushl  -0x2c(%ebp)
   12895:	57                   	push   %edi
   12896:	56                   	push   %esi
   12897:	53                   	push   %ebx
   12898:	51                   	push   %ecx
   12899:	52                   	push   %edx
   1289a:	50                   	push   %eax
   1289b:	68 e0 8e 01 00       	push   $0x18ee0
   128a0:	e8 fe 5f 00 00       	call   188a3 <log_printf>
   128a5:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   128a8:	8b 45 08             	mov    0x8(%ebp),%eax
   128ab:	8b 50 40             	mov    0x40(%eax),%edx
   128ae:	8b 45 08             	mov    0x8(%ebp),%eax
   128b1:	8b 40 38             	mov    0x38(%eax),%eax
   128b4:	83 ec 04             	sub    $0x4,%esp
   128b7:	52                   	push   %edx
   128b8:	50                   	push   %eax
   128b9:	68 29 8f 01 00       	push   $0x18f29
   128be:	e8 e0 5f 00 00       	call   188a3 <log_printf>
   128c3:	83 c4 10             	add    $0x10,%esp
}
   128c6:	90                   	nop
   128c7:	8d 65 f4             	lea    -0xc(%ebp),%esp
   128ca:	5b                   	pop    %ebx
   128cb:	5e                   	pop    %esi
   128cc:	5f                   	pop    %edi
   128cd:	5d                   	pop    %ebp
   128ce:	c3                   	ret    

000128cf <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, const char * message) {
   128cf:	55                   	push   %ebp
   128d0:	89 e5                	mov    %esp,%ebp
   128d2:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   128d5:	83 ec 0c             	sub    $0xc,%esp
   128d8:	68 40 8f 01 00       	push   $0x18f40
   128dd:	e8 c1 5f 00 00       	call   188a3 <log_printf>
   128e2:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", message);
   128e5:	83 ec 08             	sub    $0x8,%esp
   128e8:	ff 75 0c             	pushl  0xc(%ebp)
   128eb:	68 61 8f 01 00       	push   $0x18f61
   128f0:	e8 ae 5f 00 00       	call   188a3 <log_printf>
   128f5:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   128f8:	83 ec 0c             	sub    $0xc,%esp
   128fb:	ff 75 08             	pushl  0x8(%ebp)
   128fe:	e8 cd fe ff ff       	call   127d0 <dump_core_regs>
   12903:	83 c4 10             	add    $0x10,%esp
    
    // todo: 留等以后补充打印任务栈的内容

    log_printf("--------------------------------");
   12906:	83 ec 0c             	sub    $0xc,%esp
   12909:	68 40 8f 01 00       	push   $0x18f40
   1290e:	e8 90 5f 00 00       	call   188a3 <log_printf>
   12913:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3)
   12916:	8b 45 08             	mov    0x8(%ebp),%eax
   12919:	8b 40 3c             	mov    0x3c(%eax),%eax
   1291c:	83 e0 03             	and    $0x3,%eax
   1291f:	85 c0                	test   %eax,%eax
   12921:	74 14                	je     12937 <do_default_handler+0x68>
    {
        sys_exit(frame->error_code);
   12923:	8b 45 08             	mov    0x8(%ebp),%eax
   12926:	8b 40 34             	mov    0x34(%eax),%eax
   12929:	83 ec 0c             	sub    $0xc,%esp
   1292c:	50                   	push   %eax
   1292d:	e8 2c fa ff ff       	call   1235e <sys_exit>
   12932:	83 c4 10             	add    $0x10,%esp
        while (1)
        {
            hlt();
        }
    }
}
   12935:	eb 07                	jmp    1293e <do_default_handler+0x6f>
            hlt();
   12937:	e8 72 fe ff ff       	call   127ae <hlt>
   1293c:	eb f9                	jmp    12937 <do_default_handler+0x68>
}
   1293e:	c9                   	leave  
   1293f:	c3                   	ret    

00012940 <do_handler_unknown>:

void do_handler_unknown (exception_frame_t * frame) {
   12940:	55                   	push   %ebp
   12941:	89 e5                	mov    %esp,%ebp
   12943:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   12946:	83 ec 08             	sub    $0x8,%esp
   12949:	68 7c 8f 01 00       	push   $0x18f7c
   1294e:	ff 75 08             	pushl  0x8(%ebp)
   12951:	e8 79 ff ff ff       	call   128cf <do_default_handler>
   12956:	83 c4 10             	add    $0x10,%esp
}
   12959:	90                   	nop
   1295a:	c9                   	leave  
   1295b:	c3                   	ret    

0001295c <do_handler_divider>:

void do_handler_divider(exception_frame_t * frame) {
   1295c:	55                   	push   %ebp
   1295d:	89 e5                	mov    %esp,%ebp
   1295f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   12962:	83 ec 08             	sub    $0x8,%esp
   12965:	68 8f 8f 01 00       	push   $0x18f8f
   1296a:	ff 75 08             	pushl  0x8(%ebp)
   1296d:	e8 5d ff ff ff       	call   128cf <do_default_handler>
   12972:	83 c4 10             	add    $0x10,%esp
}
   12975:	90                   	nop
   12976:	c9                   	leave  
   12977:	c3                   	ret    

00012978 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   12978:	55                   	push   %ebp
   12979:	89 e5                	mov    %esp,%ebp
   1297b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   1297e:	83 ec 08             	sub    $0x8,%esp
   12981:	68 9e 8f 01 00       	push   $0x18f9e
   12986:	ff 75 08             	pushl  0x8(%ebp)
   12989:	e8 41 ff ff ff       	call   128cf <do_default_handler>
   1298e:	83 c4 10             	add    $0x10,%esp
}
   12991:	90                   	nop
   12992:	c9                   	leave  
   12993:	c3                   	ret    

00012994 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   12994:	55                   	push   %ebp
   12995:	89 e5                	mov    %esp,%ebp
   12997:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   1299a:	83 ec 08             	sub    $0x8,%esp
   1299d:	68 ae 8f 01 00       	push   $0x18fae
   129a2:	ff 75 08             	pushl  0x8(%ebp)
   129a5:	e8 25 ff ff ff       	call   128cf <do_default_handler>
   129aa:	83 c4 10             	add    $0x10,%esp
}
   129ad:	90                   	nop
   129ae:	c9                   	leave  
   129af:	c3                   	ret    

000129b0 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   129b0:	55                   	push   %ebp
   129b1:	89 e5                	mov    %esp,%ebp
   129b3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   129b6:	83 ec 08             	sub    $0x8,%esp
   129b9:	68 bd 8f 01 00       	push   $0x18fbd
   129be:	ff 75 08             	pushl  0x8(%ebp)
   129c1:	e8 09 ff ff ff       	call   128cf <do_default_handler>
   129c6:	83 c4 10             	add    $0x10,%esp
}
   129c9:	90                   	nop
   129ca:	c9                   	leave  
   129cb:	c3                   	ret    

000129cc <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   129cc:	55                   	push   %ebp
   129cd:	89 e5                	mov    %esp,%ebp
   129cf:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   129d2:	83 ec 08             	sub    $0x8,%esp
   129d5:	68 c9 8f 01 00       	push   $0x18fc9
   129da:	ff 75 08             	pushl  0x8(%ebp)
   129dd:	e8 ed fe ff ff       	call   128cf <do_default_handler>
   129e2:	83 c4 10             	add    $0x10,%esp
}
   129e5:	90                   	nop
   129e6:	c9                   	leave  
   129e7:	c3                   	ret    

000129e8 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   129e8:	55                   	push   %ebp
   129e9:	89 e5                	mov    %esp,%ebp
   129eb:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   129ee:	83 ec 08             	sub    $0x8,%esp
   129f1:	68 d3 8f 01 00       	push   $0x18fd3
   129f6:	ff 75 08             	pushl  0x8(%ebp)
   129f9:	e8 d1 fe ff ff       	call   128cf <do_default_handler>
   129fe:	83 c4 10             	add    $0x10,%esp
}
   12a01:	90                   	nop
   12a02:	c9                   	leave  
   12a03:	c3                   	ret    

00012a04 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   12a04:	55                   	push   %ebp
   12a05:	89 e5                	mov    %esp,%ebp
   12a07:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   12a0a:	83 ec 08             	sub    $0x8,%esp
   12a0d:	68 e9 8f 01 00       	push   $0x18fe9
   12a12:	ff 75 08             	pushl  0x8(%ebp)
   12a15:	e8 b5 fe ff ff       	call   128cf <do_default_handler>
   12a1a:	83 c4 10             	add    $0x10,%esp
}
   12a1d:	90                   	nop
   12a1e:	c9                   	leave  
   12a1f:	c3                   	ret    

00012a20 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   12a20:	55                   	push   %ebp
   12a21:	89 e5                	mov    %esp,%ebp
   12a23:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   12a26:	83 ec 08             	sub    $0x8,%esp
   12a29:	68 f9 8f 01 00       	push   $0x18ff9
   12a2e:	ff 75 08             	pushl  0x8(%ebp)
   12a31:	e8 99 fe ff ff       	call   128cf <do_default_handler>
   12a36:	83 c4 10             	add    $0x10,%esp
}
   12a39:	90                   	nop
   12a3a:	c9                   	leave  
   12a3b:	c3                   	ret    

00012a3c <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   12a3c:	55                   	push   %ebp
   12a3d:	89 e5                	mov    %esp,%ebp
   12a3f:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   12a42:	83 ec 08             	sub    $0x8,%esp
   12a45:	68 0f 90 01 00       	push   $0x1900f
   12a4a:	ff 75 08             	pushl  0x8(%ebp)
   12a4d:	e8 7d fe ff ff       	call   128cf <do_default_handler>
   12a52:	83 c4 10             	add    $0x10,%esp
}
   12a55:	90                   	nop
   12a56:	c9                   	leave  
   12a57:	c3                   	ret    

00012a58 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   12a58:	55                   	push   %ebp
   12a59:	89 e5                	mov    %esp,%ebp
   12a5b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   12a5e:	83 ec 08             	sub    $0x8,%esp
   12a61:	68 1d 90 01 00       	push   $0x1901d
   12a66:	ff 75 08             	pushl  0x8(%ebp)
   12a69:	e8 61 fe ff ff       	call   128cf <do_default_handler>
   12a6e:	83 c4 10             	add    $0x10,%esp
}
   12a71:	90                   	nop
   12a72:	c9                   	leave  
   12a73:	c3                   	ret    

00012a74 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   12a74:	55                   	push   %ebp
   12a75:	89 e5                	mov    %esp,%ebp
   12a77:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   12a7a:	83 ec 08             	sub    $0x8,%esp
   12a7d:	68 29 90 01 00       	push   $0x19029
   12a82:	ff 75 08             	pushl  0x8(%ebp)
   12a85:	e8 45 fe ff ff       	call   128cf <do_default_handler>
   12a8a:	83 c4 10             	add    $0x10,%esp
}
   12a8d:	90                   	nop
   12a8e:	c9                   	leave  
   12a8f:	c3                   	ret    

00012a90 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   12a90:	55                   	push   %ebp
   12a91:	89 e5                	mov    %esp,%ebp
   12a93:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   12a96:	83 ec 08             	sub    $0x8,%esp
   12a99:	68 3e 90 01 00       	push   $0x1903e
   12a9e:	ff 75 08             	pushl  0x8(%ebp)
   12aa1:	e8 29 fe ff ff       	call   128cf <do_default_handler>
   12aa6:	83 c4 10             	add    $0x10,%esp
}
   12aa9:	90                   	nop
   12aaa:	c9                   	leave  
   12aab:	c3                   	ret    

00012aac <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   12aac:	55                   	push   %ebp
   12aad:	89 e5                	mov    %esp,%ebp
   12aaf:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12ab2:	83 ec 0c             	sub    $0xc,%esp
   12ab5:	68 40 8f 01 00       	push   $0x18f40
   12aba:	e8 e4 5d 00 00       	call   188a3 <log_printf>
   12abf:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12ac2:	83 ec 0c             	sub    $0xc,%esp
   12ac5:	68 54 90 01 00       	push   $0x19054
   12aca:	e8 d4 5d 00 00       	call   188a3 <log_printf>
   12acf:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ad5:	8b 40 34             	mov    0x34(%eax),%eax
   12ad8:	83 e0 01             	and    $0x1,%eax
   12adb:	85 c0                	test   %eax,%eax
   12add:	74 12                	je     12af1 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12adf:	83 ec 0c             	sub    $0xc,%esp
   12ae2:	68 80 90 01 00       	push   $0x19080
   12ae7:	e8 b7 5d 00 00       	call   188a3 <log_printf>
   12aec:	83 c4 10             	add    $0x10,%esp
   12aef:	eb 10                	jmp    12b01 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   12af1:	83 ec 0c             	sub    $0xc,%esp
   12af4:	68 fc 90 01 00       	push   $0x190fc
   12af9:	e8 a5 5d 00 00       	call   188a3 <log_printf>
   12afe:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   12b01:	8b 45 08             	mov    0x8(%ebp),%eax
   12b04:	8b 40 34             	mov    0x34(%eax),%eax
   12b07:	83 e0 02             	and    $0x2,%eax
   12b0a:	85 c0                	test   %eax,%eax
   12b0c:	74 12                	je     12b20 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12b0e:	83 ec 0c             	sub    $0xc,%esp
   12b11:	68 54 91 01 00       	push   $0x19154
   12b16:	e8 88 5d 00 00       	call   188a3 <log_printf>
   12b1b:	83 c4 10             	add    $0x10,%esp
   12b1e:	eb 10                	jmp    12b30 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   12b20:	83 ec 0c             	sub    $0xc,%esp
   12b23:	68 a0 91 01 00       	push   $0x191a0
   12b28:	e8 76 5d 00 00       	call   188a3 <log_printf>
   12b2d:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   12b30:	8b 45 08             	mov    0x8(%ebp),%eax
   12b33:	8b 40 34             	mov    0x34(%eax),%eax
   12b36:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12b3b:	83 ec 08             	sub    $0x8,%esp
   12b3e:	50                   	push   %eax
   12b3f:	68 cc 91 01 00       	push   $0x191cc
   12b44:	e8 5a 5d 00 00       	call   188a3 <log_printf>
   12b49:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12b4c:	83 ec 0c             	sub    $0xc,%esp
   12b4f:	ff 75 08             	pushl  0x8(%ebp)
   12b52:	e8 79 fc ff ff       	call   127d0 <dump_core_regs>
   12b57:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3)
   12b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b5d:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b60:	83 e0 03             	and    $0x3,%eax
   12b63:	85 c0                	test   %eax,%eax
   12b65:	74 14                	je     12b7b <do_handler_general_protection+0xcf>
    {
        sys_exit(frame->error_code);
   12b67:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6a:	8b 40 34             	mov    0x34(%eax),%eax
   12b6d:	83 ec 0c             	sub    $0xc,%esp
   12b70:	50                   	push   %eax
   12b71:	e8 e8 f7 ff ff       	call   1235e <sys_exit>
   12b76:	83 c4 10             	add    $0x10,%esp
        while (1)
        {
            hlt();
        }
    }
}
   12b79:	eb 07                	jmp    12b82 <do_handler_general_protection+0xd6>
            hlt();
   12b7b:	e8 2e fc ff ff       	call   127ae <hlt>
   12b80:	eb f9                	jmp    12b7b <do_handler_general_protection+0xcf>
}
   12b82:	c9                   	leave  
   12b83:	c3                   	ret    

00012b84 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   12b84:	55                   	push   %ebp
   12b85:	89 e5                	mov    %esp,%ebp
   12b87:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12b8a:	83 ec 0c             	sub    $0xc,%esp
   12b8d:	68 40 8f 01 00       	push   $0x18f40
   12b92:	e8 0c 5d 00 00       	call   188a3 <log_printf>
   12b97:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12b9a:	83 ec 0c             	sub    $0xc,%esp
   12b9d:	68 e0 91 01 00       	push   $0x191e0
   12ba2:	e8 fc 5c 00 00       	call   188a3 <log_printf>
   12ba7:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12baa:	8b 45 08             	mov    0x8(%ebp),%eax
   12bad:	8b 40 34             	mov    0x34(%eax),%eax
   12bb0:	83 e0 01             	and    $0x1,%eax
   12bb3:	85 c0                	test   %eax,%eax
   12bb5:	74 18                	je     12bcf <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12bb7:	e8 b9 fb ff ff       	call   12775 <read_cr2>
   12bbc:	83 ec 08             	sub    $0x8,%esp
   12bbf:	50                   	push   %eax
   12bc0:	68 04 92 01 00       	push   $0x19204
   12bc5:	e8 d9 5c 00 00       	call   188a3 <log_printf>
   12bca:	83 c4 10             	add    $0x10,%esp
   12bcd:	eb 16                	jmp    12be5 <do_handler_page_fault+0x61>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   12bcf:	e8 a1 fb ff ff       	call   12775 <read_cr2>
   12bd4:	83 ec 08             	sub    $0x8,%esp
   12bd7:	50                   	push   %eax
   12bd8:	68 2c 92 01 00       	push   $0x1922c
   12bdd:	e8 c1 5c 00 00       	call   188a3 <log_printf>
   12be2:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12be5:	8b 45 08             	mov    0x8(%ebp),%eax
   12be8:	8b 40 34             	mov    0x34(%eax),%eax
   12beb:	83 e0 02             	and    $0x2,%eax
   12bee:	85 c0                	test   %eax,%eax
   12bf0:	74 12                	je     12c04 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   12bf2:	83 ec 0c             	sub    $0xc,%esp
   12bf5:	68 48 92 01 00       	push   $0x19248
   12bfa:	e8 a4 5c 00 00       	call   188a3 <log_printf>
   12bff:	83 c4 10             	add    $0x10,%esp
   12c02:	eb 10                	jmp    12c14 <do_handler_page_fault+0x90>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   12c04:	83 ec 0c             	sub    $0xc,%esp
   12c07:	68 74 92 01 00       	push   $0x19274
   12c0c:	e8 92 5c 00 00       	call   188a3 <log_printf>
   12c11:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12c14:	8b 45 08             	mov    0x8(%ebp),%eax
   12c17:	8b 40 34             	mov    0x34(%eax),%eax
   12c1a:	83 e0 02             	and    $0x2,%eax
   12c1d:	85 c0                	test   %eax,%eax
   12c1f:	74 12                	je     12c33 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12c21:	83 ec 0c             	sub    $0xc,%esp
   12c24:	68 a0 92 01 00       	push   $0x192a0
   12c29:	e8 75 5c 00 00       	call   188a3 <log_printf>
   12c2e:	83 c4 10             	add    $0x10,%esp
   12c31:	eb 10                	jmp    12c43 <do_handler_page_fault+0xbf>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   12c33:	83 ec 0c             	sub    $0xc,%esp
   12c36:	68 cc 92 01 00       	push   $0x192cc
   12c3b:	e8 63 5c 00 00       	call   188a3 <log_printf>
   12c40:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12c43:	83 ec 0c             	sub    $0xc,%esp
   12c46:	ff 75 08             	pushl  0x8(%ebp)
   12c49:	e8 82 fb ff ff       	call   127d0 <dump_core_regs>
   12c4e:	83 c4 10             	add    $0x10,%esp
    if(frame->cs & 0x3) {
   12c51:	8b 45 08             	mov    0x8(%ebp),%eax
   12c54:	8b 40 3c             	mov    0x3c(%eax),%eax
   12c57:	83 e0 03             	and    $0x3,%eax
   12c5a:	85 c0                	test   %eax,%eax
   12c5c:	74 14                	je     12c72 <do_handler_page_fault+0xee>
        sys_exit(frame->error_code);
   12c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c61:	8b 40 34             	mov    0x34(%eax),%eax
   12c64:	83 ec 0c             	sub    $0xc,%esp
   12c67:	50                   	push   %eax
   12c68:	e8 f1 f6 ff ff       	call   1235e <sys_exit>
   12c6d:	83 c4 10             	add    $0x10,%esp
    {
        while (1) {
            hlt();
        }
    }
}
   12c70:	eb 07                	jmp    12c79 <do_handler_page_fault+0xf5>
            hlt();
   12c72:	e8 37 fb ff ff       	call   127ae <hlt>
   12c77:	eb f9                	jmp    12c72 <do_handler_page_fault+0xee>
}
   12c79:	c9                   	leave  
   12c7a:	c3                   	ret    

00012c7b <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   12c7b:	55                   	push   %ebp
   12c7c:	89 e5                	mov    %esp,%ebp
   12c7e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   12c81:	83 ec 08             	sub    $0x8,%esp
   12c84:	68 f2 92 01 00       	push   $0x192f2
   12c89:	ff 75 08             	pushl  0x8(%ebp)
   12c8c:	e8 3e fc ff ff       	call   128cf <do_default_handler>
   12c91:	83 c4 10             	add    $0x10,%esp
}
   12c94:	90                   	nop
   12c95:	c9                   	leave  
   12c96:	c3                   	ret    

00012c97 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   12c97:	55                   	push   %ebp
   12c98:	89 e5                	mov    %esp,%ebp
   12c9a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   12c9d:	83 ec 08             	sub    $0x8,%esp
   12ca0:	68 10 93 01 00       	push   $0x19310
   12ca5:	ff 75 08             	pushl  0x8(%ebp)
   12ca8:	e8 22 fc ff ff       	call   128cf <do_default_handler>
   12cad:	83 c4 10             	add    $0x10,%esp
}
   12cb0:	90                   	nop
   12cb1:	c9                   	leave  
   12cb2:	c3                   	ret    

00012cb3 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   12cb3:	55                   	push   %ebp
   12cb4:	89 e5                	mov    %esp,%ebp
   12cb6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   12cb9:	83 ec 08             	sub    $0x8,%esp
   12cbc:	68 21 93 01 00       	push   $0x19321
   12cc1:	ff 75 08             	pushl  0x8(%ebp)
   12cc4:	e8 06 fc ff ff       	call   128cf <do_default_handler>
   12cc9:	83 c4 10             	add    $0x10,%esp
}
   12ccc:	90                   	nop
   12ccd:	c9                   	leave  
   12cce:	c3                   	ret    

00012ccf <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   12ccf:	55                   	push   %ebp
   12cd0:	89 e5                	mov    %esp,%ebp
   12cd2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   12cd5:	83 ec 08             	sub    $0x8,%esp
   12cd8:	68 30 93 01 00       	push   $0x19330
   12cdd:	ff 75 08             	pushl  0x8(%ebp)
   12ce0:	e8 ea fb ff ff       	call   128cf <do_default_handler>
   12ce5:	83 c4 10             	add    $0x10,%esp
}
   12ce8:	90                   	nop
   12ce9:	c9                   	leave  
   12cea:	c3                   	ret    

00012ceb <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   12ceb:	55                   	push   %ebp
   12cec:	89 e5                	mov    %esp,%ebp
   12cee:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   12cf1:	83 ec 08             	sub    $0x8,%esp
   12cf4:	68 4f 93 01 00       	push   $0x1934f
   12cf9:	ff 75 08             	pushl  0x8(%ebp)
   12cfc:	e8 ce fb ff ff       	call   128cf <do_default_handler>
   12d01:	83 c4 10             	add    $0x10,%esp
}
   12d04:	90                   	nop
   12d05:	c9                   	leave  
   12d06:	c3                   	ret    

00012d07 <init_pic>:

static void init_pic(void) {
   12d07:	55                   	push   %ebp
   12d08:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12d0a:	6a 11                	push   $0x11
   12d0c:	6a 20                	push   $0x20
   12d0e:	e8 35 fa ff ff       	call   12748 <outb>
   12d13:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12d16:	6a 20                	push   $0x20
   12d18:	6a 21                	push   $0x21
   12d1a:	e8 29 fa ff ff       	call   12748 <outb>
   12d1f:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12d22:	6a 04                	push   $0x4
   12d24:	6a 21                	push   $0x21
   12d26:	e8 1d fa ff ff       	call   12748 <outb>
   12d2b:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d2e:	6a 01                	push   $0x1
   12d30:	6a 21                	push   $0x21
   12d32:	e8 11 fa ff ff       	call   12748 <outb>
   12d37:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12d3a:	6a 11                	push   $0x11
   12d3c:	68 a0 00 00 00       	push   $0xa0
   12d41:	e8 02 fa ff ff       	call   12748 <outb>
   12d46:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12d49:	6a 28                	push   $0x28
   12d4b:	68 a1 00 00 00       	push   $0xa1
   12d50:	e8 f3 f9 ff ff       	call   12748 <outb>
   12d55:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12d58:	6a 02                	push   $0x2
   12d5a:	68 a1 00 00 00       	push   $0xa1
   12d5f:	e8 e4 f9 ff ff       	call   12748 <outb>
   12d64:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12d67:	6a 01                	push   $0x1
   12d69:	68 a1 00 00 00       	push   $0xa1
   12d6e:	e8 d5 f9 ff ff       	call   12748 <outb>
   12d73:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12d76:	68 fb 00 00 00       	push   $0xfb
   12d7b:	6a 21                	push   $0x21
   12d7d:	e8 c6 f9 ff ff       	call   12748 <outb>
   12d82:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12d85:	68 ff 00 00 00       	push   $0xff
   12d8a:	68 a1 00 00 00       	push   $0xa1
   12d8f:	e8 b4 f9 ff ff       	call   12748 <outb>
   12d94:	83 c4 08             	add    $0x8,%esp
}
   12d97:	90                   	nop
   12d98:	c9                   	leave  
   12d99:	c3                   	ret    

00012d9a <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   12d9a:	55                   	push   %ebp
   12d9b:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12d9d:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8) {
   12da1:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12da5:	7e 0f                	jle    12db6 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12da7:	6a 20                	push   $0x20
   12da9:	68 a0 00 00 00       	push   $0xa0
   12dae:	e8 95 f9 ff ff       	call   12748 <outb>
   12db3:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12db6:	6a 20                	push   $0x20
   12db8:	6a 20                	push   $0x20
   12dba:	e8 89 f9 ff ff       	call   12748 <outb>
   12dbf:	83 c4 08             	add    $0x8,%esp
}
   12dc2:	90                   	nop
   12dc3:	c9                   	leave  
   12dc4:	c3                   	ret    

00012dc5 <irq_init>:

/**
 * @brief 中断和异常初始化
 */
void irq_init(void) {
   12dc5:	55                   	push   %ebp
   12dc6:	89 e5                	mov    %esp,%ebp
   12dc8:	83 ec 18             	sub    $0x18,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12dcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12dd2:	eb 25                	jmp    12df9 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   12dd4:	ba 28 00 01 00       	mov    $0x10028,%edx
   12dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12ddc:	c1 e0 03             	shl    $0x3,%eax
   12ddf:	05 00 52 03 00       	add    $0x35200,%eax
   12de4:	68 00 8e 00 00       	push   $0x8e00
   12de9:	52                   	push   %edx
   12dea:	6a 08                	push   $0x8
   12dec:	50                   	push   %eax
   12ded:	e8 87 f7 ff ff       	call   12579 <gate_desc_set>
   12df2:	83 c4 10             	add    $0x10,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12df5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12df9:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12dfd:	76 d5                	jbe    12dd4 <irq_init+0xf>
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

	// 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   12dff:	83 ec 08             	sub    $0x8,%esp
   12e02:	68 47 00 01 00       	push   $0x10047
   12e07:	6a 00                	push   $0x0
   12e09:	e8 65 01 00 00       	call   12f73 <irq_install>
   12e0e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   12e11:	83 ec 08             	sub    $0x8,%esp
   12e14:	68 66 00 01 00       	push   $0x10066
   12e19:	6a 01                	push   $0x1
   12e1b:	e8 53 01 00 00       	call   12f73 <irq_install>
   12e20:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   12e23:	83 ec 08             	sub    $0x8,%esp
   12e26:	68 85 00 01 00       	push   $0x10085
   12e2b:	6a 02                	push   $0x2
   12e2d:	e8 41 01 00 00       	call   12f73 <irq_install>
   12e32:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   12e35:	83 ec 08             	sub    $0x8,%esp
   12e38:	68 a4 00 01 00       	push   $0x100a4
   12e3d:	6a 03                	push   $0x3
   12e3f:	e8 2f 01 00 00       	call   12f73 <irq_install>
   12e44:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   12e47:	83 ec 08             	sub    $0x8,%esp
   12e4a:	68 c3 00 01 00       	push   $0x100c3
   12e4f:	6a 04                	push   $0x4
   12e51:	e8 1d 01 00 00       	call   12f73 <irq_install>
   12e56:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   12e59:	83 ec 08             	sub    $0x8,%esp
   12e5c:	68 e2 00 01 00       	push   $0x100e2
   12e61:	6a 05                	push   $0x5
   12e63:	e8 0b 01 00 00       	call   12f73 <irq_install>
   12e68:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   12e6b:	83 ec 08             	sub    $0x8,%esp
   12e6e:	68 01 01 01 00       	push   $0x10101
   12e73:	6a 06                	push   $0x6
   12e75:	e8 f9 00 00 00       	call   12f73 <irq_install>
   12e7a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   12e7d:	83 ec 08             	sub    $0x8,%esp
   12e80:	68 20 01 01 00       	push   $0x10120
   12e85:	6a 07                	push   $0x7
   12e87:	e8 e7 00 00 00       	call   12f73 <irq_install>
   12e8c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   12e8f:	83 ec 08             	sub    $0x8,%esp
   12e92:	68 3f 01 01 00       	push   $0x1013f
   12e97:	6a 08                	push   $0x8
   12e99:	e8 d5 00 00 00       	call   12f73 <irq_install>
   12e9e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   12ea1:	83 ec 08             	sub    $0x8,%esp
   12ea4:	68 5c 01 01 00       	push   $0x1015c
   12ea9:	6a 0a                	push   $0xa
   12eab:	e8 c3 00 00 00       	call   12f73 <irq_install>
   12eb0:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   12eb3:	83 ec 08             	sub    $0x8,%esp
   12eb6:	68 79 01 01 00       	push   $0x10179
   12ebb:	6a 0b                	push   $0xb
   12ebd:	e8 b1 00 00 00       	call   12f73 <irq_install>
   12ec2:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   12ec5:	83 ec 08             	sub    $0x8,%esp
   12ec8:	68 96 01 01 00       	push   $0x10196
   12ecd:	6a 0c                	push   $0xc
   12ecf:	e8 9f 00 00 00       	call   12f73 <irq_install>
   12ed4:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   12ed7:	83 ec 08             	sub    $0x8,%esp
   12eda:	68 b3 01 01 00       	push   $0x101b3
   12edf:	6a 0d                	push   $0xd
   12ee1:	e8 8d 00 00 00       	call   12f73 <irq_install>
   12ee6:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   12ee9:	83 ec 08             	sub    $0x8,%esp
   12eec:	68 d0 01 01 00       	push   $0x101d0
   12ef1:	6a 0e                	push   $0xe
   12ef3:	e8 7b 00 00 00       	call   12f73 <irq_install>
   12ef8:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   12efb:	83 ec 08             	sub    $0x8,%esp
   12efe:	68 ed 01 01 00       	push   $0x101ed
   12f03:	6a 10                	push   $0x10
   12f05:	e8 69 00 00 00       	call   12f73 <irq_install>
   12f0a:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   12f0d:	83 ec 08             	sub    $0x8,%esp
   12f10:	68 0c 02 01 00       	push   $0x1020c
   12f15:	6a 11                	push   $0x11
   12f17:	e8 57 00 00 00       	call   12f73 <irq_install>
   12f1c:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   12f1f:	83 ec 08             	sub    $0x8,%esp
   12f22:	68 29 02 01 00       	push   $0x10229
   12f27:	6a 12                	push   $0x12
   12f29:	e8 45 00 00 00       	call   12f73 <irq_install>
   12f2e:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   12f31:	83 ec 08             	sub    $0x8,%esp
   12f34:	68 48 02 01 00       	push   $0x10248
   12f39:	6a 13                	push   $0x13
   12f3b:	e8 33 00 00 00       	call   12f73 <irq_install>
   12f40:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   12f43:	83 ec 08             	sub    $0x8,%esp
   12f46:	68 67 02 01 00       	push   $0x10267
   12f4b:	6a 14                	push   $0x14
   12f4d:	e8 21 00 00 00       	call   12f73 <irq_install>
   12f52:	83 c4 10             	add    $0x10,%esp


	lidt((uint32_t)idt_table, sizeof(idt_table));
   12f55:	b8 00 52 03 00       	mov    $0x35200,%eax
   12f5a:	83 ec 08             	sub    $0x8,%esp
   12f5d:	68 00 04 00 00       	push   $0x400
   12f62:	50                   	push   %eax
   12f63:	e8 1e f8 ff ff       	call   12786 <lidt>
   12f68:	83 c4 10             	add    $0x10,%esp

	// 初始化pic 控制器
	init_pic();
   12f6b:	e8 97 fd ff ff       	call   12d07 <init_pic>
}
   12f70:	90                   	nop
   12f71:	c9                   	leave  
   12f72:	c3                   	ret    

00012f73 <irq_install>:

/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler) {
   12f73:	55                   	push   %ebp
   12f74:	89 e5                	mov    %esp,%ebp
   12f76:	83 ec 08             	sub    $0x8,%esp
	if (irq_num >= IDT_TABLE_NR) {
   12f79:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12f7d:	7e 07                	jle    12f86 <irq_install+0x13>
		return -1;
   12f7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12f84:	eb 25                	jmp    12fab <irq_install+0x38>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   12f86:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f89:	8b 55 08             	mov    0x8(%ebp),%edx
   12f8c:	c1 e2 03             	shl    $0x3,%edx
   12f8f:	81 c2 00 52 03 00    	add    $0x35200,%edx
   12f95:	68 00 8e 00 00       	push   $0x8e00
   12f9a:	50                   	push   %eax
   12f9b:	6a 08                	push   $0x8
   12f9d:	52                   	push   %edx
   12f9e:	e8 d6 f5 ff ff       	call   12579 <gate_desc_set>
   12fa3:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   12fa6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fab:	c9                   	leave  
   12fac:	c3                   	ret    

00012fad <irq_enable>:

void irq_enable(int irq_num) {
   12fad:	55                   	push   %ebp
   12fae:	89 e5                	mov    %esp,%ebp
   12fb0:	53                   	push   %ebx
   12fb1:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12fb4:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12fb8:	7e 78                	jle    13032 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   12fba:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12fbe:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12fc2:	7f 32                	jg     12ff6 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12fc4:	6a 21                	push   $0x21
   12fc6:	e8 60 f7 ff ff       	call   1272b <inb>
   12fcb:	83 c4 04             	add    $0x4,%esp
   12fce:	89 c2                	mov    %eax,%edx
   12fd0:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd3:	bb 01 00 00 00       	mov    $0x1,%ebx
   12fd8:	89 c1                	mov    %eax,%ecx
   12fda:	d3 e3                	shl    %cl,%ebx
   12fdc:	89 d8                	mov    %ebx,%eax
   12fde:	f7 d0                	not    %eax
   12fe0:	21 d0                	and    %edx,%eax
   12fe2:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12fe5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12fe9:	50                   	push   %eax
   12fea:	6a 21                	push   $0x21
   12fec:	e8 57 f7 ff ff       	call   12748 <outb>
   12ff1:	83 c4 08             	add    $0x8,%esp
   12ff4:	eb 3d                	jmp    13033 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   12ff6:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   12ffa:	68 a1 00 00 00       	push   $0xa1
   12fff:	e8 27 f7 ff ff       	call   1272b <inb>
   13004:	83 c4 04             	add    $0x4,%esp
   13007:	89 c2                	mov    %eax,%edx
   13009:	8b 45 08             	mov    0x8(%ebp),%eax
   1300c:	bb 01 00 00 00       	mov    $0x1,%ebx
   13011:	89 c1                	mov    %eax,%ecx
   13013:	d3 e3                	shl    %cl,%ebx
   13015:	89 d8                	mov    %ebx,%eax
   13017:	f7 d0                	not    %eax
   13019:	21 d0                	and    %edx,%eax
   1301b:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1301e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   13022:	50                   	push   %eax
   13023:	68 a1 00 00 00       	push   $0xa1
   13028:	e8 1b f7 ff ff       	call   12748 <outb>
   1302d:	83 c4 08             	add    $0x8,%esp
   13030:	eb 01                	jmp    13033 <irq_enable+0x86>
        return;
   13032:	90                   	nop
    }
}
   13033:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13036:	c9                   	leave  
   13037:	c3                   	ret    

00013038 <irq_disable>:

void irq_disable(int irq_num) {
   13038:	55                   	push   %ebp
   13039:	89 e5                	mov    %esp,%ebp
   1303b:	53                   	push   %ebx
   1303c:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   1303f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   13043:	7e 74                	jle    130b9 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   13045:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   13049:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1304d:	7f 30                	jg     1307f <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1304f:	6a 21                	push   $0x21
   13051:	e8 d5 f6 ff ff       	call   1272b <inb>
   13056:	83 c4 04             	add    $0x4,%esp
   13059:	89 c3                	mov    %eax,%ebx
   1305b:	8b 45 08             	mov    0x8(%ebp),%eax
   1305e:	ba 01 00 00 00       	mov    $0x1,%edx
   13063:	89 c1                	mov    %eax,%ecx
   13065:	d3 e2                	shl    %cl,%edx
   13067:	89 d0                	mov    %edx,%eax
   13069:	09 d8                	or     %ebx,%eax
   1306b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   1306e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13072:	50                   	push   %eax
   13073:	6a 21                	push   $0x21
   13075:	e8 ce f6 ff ff       	call   12748 <outb>
   1307a:	83 c4 08             	add    $0x8,%esp
   1307d:	eb 3b                	jmp    130ba <irq_disable+0x82>
    } else {
        irq_num -= 8;
   1307f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   13083:	68 a1 00 00 00       	push   $0xa1
   13088:	e8 9e f6 ff ff       	call   1272b <inb>
   1308d:	83 c4 04             	add    $0x4,%esp
   13090:	89 c3                	mov    %eax,%ebx
   13092:	8b 45 08             	mov    0x8(%ebp),%eax
   13095:	ba 01 00 00 00       	mov    $0x1,%edx
   1309a:	89 c1                	mov    %eax,%ecx
   1309c:	d3 e2                	shl    %cl,%edx
   1309e:	89 d0                	mov    %edx,%eax
   130a0:	09 d8                	or     %ebx,%eax
   130a2:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   130a5:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   130a9:	50                   	push   %eax
   130aa:	68 a1 00 00 00       	push   $0xa1
   130af:	e8 94 f6 ff ff       	call   12748 <outb>
   130b4:	83 c4 08             	add    $0x8,%esp
   130b7:	eb 01                	jmp    130ba <irq_disable+0x82>
        return;
   130b9:	90                   	nop
    }
}
   130ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   130bd:	c9                   	leave  
   130be:	c3                   	ret    

000130bf <irq_disable_global>:

void irq_disable_global(void) {
   130bf:	55                   	push   %ebp
   130c0:	89 e5                	mov    %esp,%ebp
    cli();
   130c2:	e8 a0 f6 ff ff       	call   12767 <cli>
}
   130c7:	90                   	nop
   130c8:	5d                   	pop    %ebp
   130c9:	c3                   	ret    

000130ca <irq_enable_global>:

void irq_enable_global(void) {
   130ca:	55                   	push   %ebp
   130cb:	89 e5                	mov    %esp,%ebp
    sti();
   130cd:	e8 9c f6 ff ff       	call   1276e <sti>
}
   130d2:	90                   	nop
   130d3:	5d                   	pop    %ebp
   130d4:	c3                   	ret    

000130d5 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection (void) {
   130d5:	55                   	push   %ebp
   130d6:	89 e5                	mov    %esp,%ebp
   130d8:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   130db:	e8 d5 f6 ff ff       	call   127b5 <read_eflags>
   130e0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   130e3:	e8 d7 ff ff ff       	call   130bf <irq_disable_global>
    return state;
   130e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   130eb:	c9                   	leave  
   130ec:	c3                   	ret    

000130ed <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection (irq_state_t state) {
   130ed:	55                   	push   %ebp
   130ee:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   130f0:	ff 75 08             	pushl  0x8(%ebp)
   130f3:	e8 cd f6 ff ff       	call   127c5 <write_eflags>
   130f8:	83 c4 04             	add    $0x4,%esp
}
   130fb:	90                   	nop
   130fc:	c9                   	leave  
   130fd:	c3                   	ret    

000130fe <inb>:
static inline uint8_t inb(uint16_t  port) {
   130fe:	55                   	push   %ebp
   130ff:	89 e5                	mov    %esp,%ebp
   13101:	83 ec 14             	sub    $0x14,%esp
   13104:	8b 45 08             	mov    0x8(%ebp),%eax
   13107:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   1310b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1310f:	89 c2                	mov    %eax,%edx
   13111:	ec                   	in     (%dx),%al
   13112:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   13115:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13119:	c9                   	leave  
   1311a:	c3                   	ret    

0001311b <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1311b:	55                   	push   %ebp
   1311c:	89 e5                	mov    %esp,%ebp
   1311e:	83 ec 08             	sub    $0x8,%esp
   13121:	8b 55 08             	mov    0x8(%ebp),%edx
   13124:	8b 45 0c             	mov    0xc(%ebp),%eax
   13127:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1312b:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1312e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13132:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13136:	ee                   	out    %al,(%dx)
}
   13137:	90                   	nop
   13138:	c9                   	leave  
   13139:	c3                   	ret    

0001313a <read_cursor_pos>:
static console_t console_buf[CONSOLE_NR];

/**
 * @brief 读取当前光标的位置
 */
static int read_cursor_pos (void) {
   1313a:	55                   	push   %ebp
   1313b:	89 e5                	mov    %esp,%ebp
   1313d:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   13140:	e8 90 ff ff ff       	call   130d5 <irq_enter_protection>
   13145:	89 45 f4             	mov    %eax,-0xc(%ebp)
 	outb(0x3D4, 0x0F);		// 写低地址
   13148:	83 ec 08             	sub    $0x8,%esp
   1314b:	6a 0f                	push   $0xf
   1314d:	68 d4 03 00 00       	push   $0x3d4
   13152:	e8 c4 ff ff ff       	call   1311b <outb>
   13157:	83 c4 10             	add    $0x10,%esp
	pos = inb(0x3D5);
   1315a:	83 ec 0c             	sub    $0xc,%esp
   1315d:	68 d5 03 00 00       	push   $0x3d5
   13162:	e8 97 ff ff ff       	call   130fe <inb>
   13167:	83 c4 10             	add    $0x10,%esp
   1316a:	0f b6 c0             	movzbl %al,%eax
   1316d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0E);		// 写高地址
   13170:	83 ec 08             	sub    $0x8,%esp
   13173:	6a 0e                	push   $0xe
   13175:	68 d4 03 00 00       	push   $0x3d4
   1317a:	e8 9c ff ff ff       	call   1311b <outb>
   1317f:	83 c4 10             	add    $0x10,%esp
	pos |= inb(0x3D5) << 8;   
   13182:	83 ec 0c             	sub    $0xc,%esp
   13185:	68 d5 03 00 00       	push   $0x3d5
   1318a:	e8 6f ff ff ff       	call   130fe <inb>
   1318f:	83 c4 10             	add    $0x10,%esp
   13192:	0f b6 c0             	movzbl %al,%eax
   13195:	c1 e0 08             	shl    $0x8,%eax
   13198:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   1319b:	83 ec 0c             	sub    $0xc,%esp
   1319e:	ff 75 f4             	pushl  -0xc(%ebp)
   131a1:	e8 47 ff ff ff       	call   130ed <irq_leave_protection>
   131a6:	83 c4 10             	add    $0x10,%esp
    return pos;
   131a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   131ac:	c9                   	leave  
   131ad:	c3                   	ret    

000131ae <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos (console_t * console) {
   131ae:	55                   	push   %ebp
   131af:	89 e5                	mov    %esp,%ebp
   131b1:	83 ec 18             	sub    $0x18,%esp
	uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   131b4:	8b 45 08             	mov    0x8(%ebp),%eax
   131b7:	ba 00 56 03 00       	mov    $0x35600,%edx
   131bc:	29 d0                	sub    %edx,%eax
   131be:	c1 f8 03             	sar    $0x3,%eax
   131c1:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   131c7:	89 c2                	mov    %eax,%edx
   131c9:	8b 45 08             	mov    0x8(%ebp),%eax
   131cc:	8b 40 14             	mov    0x14(%eax),%eax
   131cf:	89 c1                	mov    %eax,%ecx
   131d1:	8b 45 08             	mov    0x8(%ebp),%eax
   131d4:	8b 40 10             	mov    0x10(%eax),%eax
   131d7:	0f af c1             	imul   %ecx,%eax
   131da:	0f af c2             	imul   %edx,%eax
   131dd:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row *  console->display_cols + console->cursor_col;
   131e1:	8b 45 08             	mov    0x8(%ebp),%eax
   131e4:	8b 40 08             	mov    0x8(%eax),%eax
   131e7:	89 c2                	mov    %eax,%edx
   131e9:	8b 45 08             	mov    0x8(%ebp),%eax
   131ec:	8b 40 14             	mov    0x14(%eax),%eax
   131ef:	0f af d0             	imul   %eax,%edx
   131f2:	8b 45 08             	mov    0x8(%ebp),%eax
   131f5:	8b 40 0c             	mov    0xc(%eax),%eax
   131f8:	01 d0                	add    %edx,%eax
   131fa:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   131fe:	e8 d2 fe ff ff       	call   130d5 <irq_enter_protection>
   13203:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0F);		// 写低地址
   13206:	83 ec 08             	sub    $0x8,%esp
   13209:	6a 0f                	push   $0xf
   1320b:	68 d4 03 00 00       	push   $0x3d4
   13210:	e8 06 ff ff ff       	call   1311b <outb>
   13215:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13218:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1321c:	0f b6 c0             	movzbl %al,%eax
   1321f:	83 ec 08             	sub    $0x8,%esp
   13222:	50                   	push   %eax
   13223:	68 d5 03 00 00       	push   $0x3d5
   13228:	e8 ee fe ff ff       	call   1311b <outb>
   1322d:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0x0E);		// 写高地址
   13230:	83 ec 08             	sub    $0x8,%esp
   13233:	6a 0e                	push   $0xe
   13235:	68 d4 03 00 00       	push   $0x3d4
   1323a:	e8 dc fe ff ff       	call   1311b <outb>
   1323f:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   13242:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13246:	66 c1 e8 08          	shr    $0x8,%ax
   1324a:	0f b6 c0             	movzbl %al,%eax
   1324d:	83 ec 08             	sub    $0x8,%esp
   13250:	50                   	push   %eax
   13251:	68 d5 03 00 00       	push   $0x3d5
   13256:	e8 c0 fe ff ff       	call   1311b <outb>
   1325b:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   1325e:	83 ec 0c             	sub    $0xc,%esp
   13261:	ff 75 f0             	pushl  -0x10(%ebp)
   13264:	e8 84 fe ff ff       	call   130ed <irq_leave_protection>
   13269:	83 c4 10             	add    $0x10,%esp
}
   1326c:	90                   	nop
   1326d:	c9                   	leave  
   1326e:	c3                   	ret    

0001326f <console_select>:

void console_select(int idx) {
   1326f:	55                   	push   %ebp
   13270:	89 e5                	mov    %esp,%ebp
   13272:	83 ec 18             	sub    $0x18,%esp
    console_t * console = console_buf + idx;
   13275:	8b 45 08             	mov    0x8(%ebp),%eax
   13278:	6b c0 68             	imul   $0x68,%eax,%eax
   1327b:	05 00 56 03 00       	add    $0x35600,%eax
   13280:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {
   13283:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13286:	8b 00                	mov    (%eax),%eax
   13288:	85 c0                	test   %eax,%eax
   1328a:	75 0e                	jne    1329a <console_select+0x2b>
        // 可能没有初始化，先初始化一下
        console_init(idx);
   1328c:	83 ec 0c             	sub    $0xc,%esp
   1328f:	ff 75 08             	pushl  0x8(%ebp)
   13292:	e8 9e 04 00 00       	call   13735 <console_init>
   13297:	83 c4 10             	add    $0x10,%esp
    }

	uint16_t pos = idx * console->display_cols * console->display_rows;
   1329a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1329d:	8b 40 14             	mov    0x14(%eax),%eax
   132a0:	89 c2                	mov    %eax,%edx
   132a2:	8b 45 08             	mov    0x8(%ebp),%eax
   132a5:	0f af d0             	imul   %eax,%edx
   132a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132ab:	8b 40 10             	mov    0x10(%eax),%eax
   132ae:	0f af c2             	imul   %edx,%eax
   132b1:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

	outb(0x3D4, 0xC);		// 写高地址
   132b5:	83 ec 08             	sub    $0x8,%esp
   132b8:	6a 0c                	push   $0xc
   132ba:	68 d4 03 00 00       	push   $0x3d4
   132bf:	e8 57 fe ff ff       	call   1311b <outb>
   132c4:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   132c7:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   132cb:	66 c1 e8 08          	shr    $0x8,%ax
   132cf:	0f b6 c0             	movzbl %al,%eax
   132d2:	83 ec 08             	sub    $0x8,%esp
   132d5:	50                   	push   %eax
   132d6:	68 d5 03 00 00       	push   $0x3d5
   132db:	e8 3b fe ff ff       	call   1311b <outb>
   132e0:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0xD);		// 写低地址
   132e3:	83 ec 08             	sub    $0x8,%esp
   132e6:	6a 0d                	push   $0xd
   132e8:	68 d4 03 00 00       	push   $0x3d4
   132ed:	e8 29 fe ff ff       	call   1311b <outb>
   132f2:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   132f5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   132f9:	0f b6 c0             	movzbl %al,%eax
   132fc:	83 ec 08             	sub    $0x8,%esp
   132ff:	50                   	push   %eax
   13300:	68 d5 03 00 00       	push   $0x3d5
   13305:	e8 11 fe ff ff       	call   1311b <outb>
   1330a:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    update_cursor_pos(console);
   1330d:	83 ec 0c             	sub    $0xc,%esp
   13310:	ff 75 f4             	pushl  -0xc(%ebp)
   13313:	e8 96 fe ff ff       	call   131ae <update_cursor_pos>
   13318:	83 c4 10             	add    $0x10,%esp
}
   1331b:	90                   	nop
   1331c:	c9                   	leave  
   1331d:	c3                   	ret    

0001331e <erase_rows>:
/**
 * @brief 擦除从start到end的行
 */
static void erase_rows (console_t * console, int start, int end) {
   1331e:	55                   	push   %ebp
   1331f:	89 e5                	mov    %esp,%ebp
   13321:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t * disp_start = console->disp_base + console->display_cols * start;
   13324:	8b 45 08             	mov    0x8(%ebp),%eax
   13327:	8b 10                	mov    (%eax),%edx
   13329:	8b 45 08             	mov    0x8(%ebp),%eax
   1332c:	8b 40 14             	mov    0x14(%eax),%eax
   1332f:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13333:	01 c0                	add    %eax,%eax
   13335:	01 d0                	add    %edx,%eax
   13337:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t * disp_end = console->disp_base + console->display_cols * (end + 1);
   1333a:	8b 45 08             	mov    0x8(%ebp),%eax
   1333d:	8b 10                	mov    (%eax),%edx
   1333f:	8b 45 08             	mov    0x8(%ebp),%eax
   13342:	8b 40 14             	mov    0x14(%eax),%eax
   13345:	8b 4d 10             	mov    0x10(%ebp),%ecx
   13348:	83 c1 01             	add    $0x1,%ecx
   1334b:	0f af c1             	imul   %ecx,%eax
   1334e:	01 c0                	add    %eax,%eax
   13350:	01 d0                	add    %edx,%eax
   13352:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end) {
   13355:	eb 4d                	jmp    133a4 <erase_rows+0x86>
        disp_start->c = ' ';
   13357:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1335a:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   1335d:	8b 45 08             	mov    0x8(%ebp),%eax
   13360:	8b 40 20             	mov    0x20(%eax),%eax
   13363:	c1 e0 04             	shl    $0x4,%eax
   13366:	c0 f8 04             	sar    $0x4,%al
   13369:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1336c:	83 e0 0f             	and    $0xf,%eax
   1336f:	89 c1                	mov    %eax,%ecx
   13371:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13375:	83 e0 f0             	and    $0xfffffff0,%eax
   13378:	09 c8                	or     %ecx,%eax
   1337a:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   1337d:	8b 45 08             	mov    0x8(%ebp),%eax
   13380:	8b 40 24             	mov    0x24(%eax),%eax
   13383:	c1 e0 05             	shl    $0x5,%eax
   13386:	c0 f8 05             	sar    $0x5,%al
   13389:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1338c:	83 e0 07             	and    $0x7,%eax
   1338f:	c1 e0 04             	shl    $0x4,%eax
   13392:	89 c1                	mov    %eax,%ecx
   13394:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13398:	83 e0 8f             	and    $0xffffff8f,%eax
   1339b:	09 c8                	or     %ecx,%eax
   1339d:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   133a0:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end) {
   133a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   133a7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   133aa:	72 ab                	jb     13357 <erase_rows+0x39>
    }
}
   133ac:	90                   	nop
   133ad:	c9                   	leave  
   133ae:	c3                   	ret    

000133af <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t * console, int lines) {
   133af:	55                   	push   %ebp
   133b0:	89 e5                	mov    %esp,%ebp
   133b2:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t * dest = console->disp_base;
   133b5:	8b 45 08             	mov    0x8(%ebp),%eax
   133b8:	8b 00                	mov    (%eax),%eax
   133ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t * src = console->disp_base + console->display_cols * lines;
   133bd:	8b 45 08             	mov    0x8(%ebp),%eax
   133c0:	8b 10                	mov    (%eax),%edx
   133c2:	8b 45 08             	mov    0x8(%ebp),%eax
   133c5:	8b 40 14             	mov    0x14(%eax),%eax
   133c8:	0f af 45 0c          	imul   0xc(%ebp),%eax
   133cc:	01 c0                	add    %eax,%eax
   133ce:	01 d0                	add    %edx,%eax
   133d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   133d3:	8b 45 08             	mov    0x8(%ebp),%eax
   133d6:	8b 40 10             	mov    0x10(%eax),%eax
   133d9:	2b 45 0c             	sub    0xc(%ebp),%eax
   133dc:	89 c2                	mov    %eax,%edx
   133de:	8b 45 08             	mov    0x8(%ebp),%eax
   133e1:	8b 40 14             	mov    0x14(%eax),%eax
   133e4:	0f af c2             	imul   %edx,%eax
   133e7:	01 c0                	add    %eax,%eax
   133e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   133ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   133ef:	83 ec 04             	sub    $0x4,%esp
   133f2:	50                   	push   %eax
   133f3:	ff 75 f0             	pushl  -0x10(%ebp)
   133f6:	ff 75 f4             	pushl  -0xc(%ebp)
   133f9:	e8 ac 4e 00 00       	call   182aa <kernel_memcpy>
   133fe:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13401:	8b 45 08             	mov    0x8(%ebp),%eax
   13404:	8b 40 10             	mov    0x10(%eax),%eax
   13407:	8d 50 ff             	lea    -0x1(%eax),%edx
   1340a:	8b 45 08             	mov    0x8(%ebp),%eax
   1340d:	8b 40 10             	mov    0x10(%eax),%eax
   13410:	2b 45 0c             	sub    0xc(%ebp),%eax
   13413:	83 ec 04             	sub    $0x4,%esp
   13416:	52                   	push   %edx
   13417:	50                   	push   %eax
   13418:	ff 75 08             	pushl  0x8(%ebp)
   1341b:	e8 fe fe ff ff       	call   1331e <erase_rows>
   13420:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   13423:	8b 45 08             	mov    0x8(%ebp),%eax
   13426:	8b 40 08             	mov    0x8(%eax),%eax
   13429:	2b 45 0c             	sub    0xc(%ebp),%eax
   1342c:	89 c2                	mov    %eax,%edx
   1342e:	8b 45 08             	mov    0x8(%ebp),%eax
   13431:	89 50 08             	mov    %edx,0x8(%eax)
}
   13434:	90                   	nop
   13435:	c9                   	leave  
   13436:	c3                   	ret    

00013437 <move_to_col0>:

static void move_to_col0 (console_t * console) {
   13437:	55                   	push   %ebp
   13438:	89 e5                	mov    %esp,%ebp
	console->cursor_col = 0;
   1343a:	8b 45 08             	mov    0x8(%ebp),%eax
   1343d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13444:	90                   	nop
   13445:	5d                   	pop    %ebp
   13446:	c3                   	ret    

00013447 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line (console_t * console) {
   13447:	55                   	push   %ebp
   13448:	89 e5                	mov    %esp,%ebp
   1344a:	83 ec 08             	sub    $0x8,%esp
	console->cursor_row++;
   1344d:	8b 45 08             	mov    0x8(%ebp),%eax
   13450:	8b 40 08             	mov    0x8(%eax),%eax
   13453:	8d 50 01             	lea    0x1(%eax),%edx
   13456:	8b 45 08             	mov    0x8(%ebp),%eax
   13459:	89 50 08             	mov    %edx,0x8(%eax)

	// 超出当前屏幕显示的所有行，上移一行
	if (console->cursor_row >= console->display_rows) {
   1345c:	8b 45 08             	mov    0x8(%ebp),%eax
   1345f:	8b 50 08             	mov    0x8(%eax),%edx
   13462:	8b 45 08             	mov    0x8(%ebp),%eax
   13465:	8b 40 10             	mov    0x10(%eax),%eax
   13468:	39 c2                	cmp    %eax,%edx
   1346a:	7c 10                	jl     1347c <move_next_line+0x35>
		scroll_up(console, 1);
   1346c:	83 ec 08             	sub    $0x8,%esp
   1346f:	6a 01                	push   $0x1
   13471:	ff 75 08             	pushl  0x8(%ebp)
   13474:	e8 36 ff ff ff       	call   133af <scroll_up>
   13479:	83 c4 10             	add    $0x10,%esp
	}
}
   1347c:	90                   	nop
   1347d:	c9                   	leave  
   1347e:	c3                   	ret    

0001347f <move_forward>:

/**
 * 将光标往前移一个字符
 */
static void move_forward (console_t * console, int n) {
   1347f:	55                   	push   %ebp
   13480:	89 e5                	mov    %esp,%ebp
   13482:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < n; i++) {
   13485:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1348c:	eb 5c                	jmp    134ea <move_forward+0x6b>
		if (++console->cursor_col >= console->display_cols) {
   1348e:	8b 45 08             	mov    0x8(%ebp),%eax
   13491:	8b 40 0c             	mov    0xc(%eax),%eax
   13494:	8d 50 01             	lea    0x1(%eax),%edx
   13497:	8b 45 08             	mov    0x8(%ebp),%eax
   1349a:	89 50 0c             	mov    %edx,0xc(%eax)
   1349d:	8b 45 08             	mov    0x8(%ebp),%eax
   134a0:	8b 50 0c             	mov    0xc(%eax),%edx
   134a3:	8b 45 08             	mov    0x8(%ebp),%eax
   134a6:	8b 40 14             	mov    0x14(%eax),%eax
   134a9:	39 c2                	cmp    %eax,%edx
   134ab:	7c 39                	jl     134e6 <move_forward+0x67>
			console->cursor_col = 0;
   134ad:	8b 45 08             	mov    0x8(%ebp),%eax
   134b0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   134b7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ba:	8b 40 08             	mov    0x8(%eax),%eax
   134bd:	8d 50 01             	lea    0x1(%eax),%edx
   134c0:	8b 45 08             	mov    0x8(%ebp),%eax
   134c3:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows) {
   134c6:	8b 45 08             	mov    0x8(%ebp),%eax
   134c9:	8b 50 08             	mov    0x8(%eax),%edx
   134cc:	8b 45 08             	mov    0x8(%ebp),%eax
   134cf:	8b 40 10             	mov    0x10(%eax),%eax
   134d2:	39 c2                	cmp    %eax,%edx
   134d4:	7c 10                	jl     134e6 <move_forward+0x67>
                // 超出末端，上移
                scroll_up(console, 1);
   134d6:	83 ec 08             	sub    $0x8,%esp
   134d9:	6a 01                	push   $0x1
   134db:	ff 75 08             	pushl  0x8(%ebp)
   134de:	e8 cc fe ff ff       	call   133af <scroll_up>
   134e3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < n; i++) {
   134e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   134ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   134ed:	3b 45 0c             	cmp    0xc(%ebp),%eax
   134f0:	7c 9c                	jl     1348e <move_forward+0xf>
            }
        }
	}
}
   134f2:	90                   	nop
   134f3:	c9                   	leave  
   134f4:	c3                   	ret    

000134f5 <show_char>:

/**
 * 在当前位置显示一个字符
 */
static void show_char(console_t * console, char c) {
   134f5:	55                   	push   %ebp
   134f6:	89 e5                	mov    %esp,%ebp
   134f8:	83 ec 28             	sub    $0x28,%esp
   134fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   134fe:	88 45 e4             	mov    %al,-0x1c(%ebp)
    // 每显示一个字符，都进行计算，效率有点低。不过这样直观简单
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   13501:	8b 45 08             	mov    0x8(%ebp),%eax
   13504:	8b 50 0c             	mov    0xc(%eax),%edx
   13507:	8b 45 08             	mov    0x8(%ebp),%eax
   1350a:	8b 48 08             	mov    0x8(%eax),%ecx
   1350d:	8b 45 08             	mov    0x8(%ebp),%eax
   13510:	8b 40 14             	mov    0x14(%eax),%eax
   13513:	0f af c1             	imul   %ecx,%eax
   13516:	01 d0                	add    %edx,%eax
   13518:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * p = console->disp_base + offset;
   1351b:	8b 45 08             	mov    0x8(%ebp),%eax
   1351e:	8b 00                	mov    (%eax),%eax
   13520:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13523:	01 d2                	add    %edx,%edx
   13525:	01 d0                	add    %edx,%eax
   13527:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   1352a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1352d:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   13531:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   13533:	8b 45 08             	mov    0x8(%ebp),%eax
   13536:	8b 40 20             	mov    0x20(%eax),%eax
   13539:	c1 e0 04             	shl    $0x4,%eax
   1353c:	c0 f8 04             	sar    $0x4,%al
   1353f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13542:	83 e0 0f             	and    $0xf,%eax
   13545:	89 c1                	mov    %eax,%ecx
   13547:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1354b:	83 e0 f0             	and    $0xfffffff0,%eax
   1354e:	09 c8                	or     %ecx,%eax
   13550:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   13553:	8b 45 08             	mov    0x8(%ebp),%eax
   13556:	8b 40 24             	mov    0x24(%eax),%eax
   13559:	c1 e0 05             	shl    $0x5,%eax
   1355c:	c0 f8 05             	sar    $0x5,%al
   1355f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13562:	83 e0 07             	and    $0x7,%eax
   13565:	c1 e0 04             	shl    $0x4,%eax
   13568:	89 c1                	mov    %eax,%ecx
   1356a:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1356e:	83 e0 8f             	and    $0xffffff8f,%eax
   13571:	09 c8                	or     %ecx,%eax
   13573:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   13576:	83 ec 08             	sub    $0x8,%esp
   13579:	6a 01                	push   $0x1
   1357b:	ff 75 08             	pushl  0x8(%ebp)
   1357e:	e8 fc fe ff ff       	call   1347f <move_forward>
   13583:	83 c4 10             	add    $0x10,%esp
}
   13586:	90                   	nop
   13587:	c9                   	leave  
   13588:	c3                   	ret    

00013589 <move_backword>:

/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword (console_t * console, int n) {
   13589:	55                   	push   %ebp
   1358a:	89 e5                	mov    %esp,%ebp
   1358c:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   1358f:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++) {
   13596:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1359d:	eb 55                	jmp    135f4 <move_backword+0x6b>
        if (console->cursor_col > 0) {
   1359f:	8b 45 08             	mov    0x8(%ebp),%eax
   135a2:	8b 40 0c             	mov    0xc(%eax),%eax
   135a5:	85 c0                	test   %eax,%eax
   135a7:	7e 18                	jle    135c1 <move_backword+0x38>
            // 非列超始处,可回退
            console->cursor_col--;
   135a9:	8b 45 08             	mov    0x8(%ebp),%eax
   135ac:	8b 40 0c             	mov    0xc(%eax),%eax
   135af:	8d 50 ff             	lea    -0x1(%eax),%edx
   135b2:	8b 45 08             	mov    0x8(%ebp),%eax
   135b5:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   135b8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   135bf:	eb 2f                	jmp    135f0 <move_backword+0x67>
        } else if (console->cursor_row > 0) {
   135c1:	8b 45 08             	mov    0x8(%ebp),%eax
   135c4:	8b 40 08             	mov    0x8(%eax),%eax
   135c7:	85 c0                	test   %eax,%eax
   135c9:	7e 25                	jle    135f0 <move_backword+0x67>
            // 列起始处，但非首行，可回腿
            console->cursor_row--;
   135cb:	8b 45 08             	mov    0x8(%ebp),%eax
   135ce:	8b 40 08             	mov    0x8(%eax),%eax
   135d1:	8d 50 ff             	lea    -0x1(%eax),%edx
   135d4:	8b 45 08             	mov    0x8(%ebp),%eax
   135d7:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   135da:	8b 45 08             	mov    0x8(%ebp),%eax
   135dd:	8b 40 14             	mov    0x14(%eax),%eax
   135e0:	8d 50 ff             	lea    -0x1(%eax),%edx
   135e3:	8b 45 08             	mov    0x8(%ebp),%eax
   135e6:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   135e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++) {
   135f0:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   135f4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   135f7:	3b 45 0c             	cmp    0xc(%ebp),%eax
   135fa:	7c a3                	jl     1359f <move_backword+0x16>
        }
    }

    return status;
   135fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   135ff:	c9                   	leave  
   13600:	c3                   	ret    

00013601 <clear_display>:

static void clear_display (console_t * console) {
   13601:	55                   	push   %ebp
   13602:	89 e5                	mov    %esp,%ebp
   13604:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   13607:	8b 45 08             	mov    0x8(%ebp),%eax
   1360a:	8b 50 14             	mov    0x14(%eax),%edx
   1360d:	8b 45 08             	mov    0x8(%ebp),%eax
   13610:	8b 40 10             	mov    0x10(%eax),%eax
   13613:	0f af c2             	imul   %edx,%eax
   13616:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * start = console->disp_base;
   13619:	8b 45 08             	mov    0x8(%ebp),%eax
   1361c:	8b 00                	mov    (%eax),%eax
   1361e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++) {
   13621:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13628:	eb 51                	jmp    1367b <clear_display+0x7a>
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   1362a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1362d:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   13630:	8b 45 08             	mov    0x8(%ebp),%eax
   13633:	8b 40 24             	mov    0x24(%eax),%eax
   13636:	c1 e0 05             	shl    $0x5,%eax
   13639:	c0 f8 05             	sar    $0x5,%al
   1363c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1363f:	83 e0 07             	and    $0x7,%eax
   13642:	c1 e0 04             	shl    $0x4,%eax
   13645:	89 c1                	mov    %eax,%ecx
   13647:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1364b:	83 e0 8f             	and    $0xffffff8f,%eax
   1364e:	09 c8                	or     %ecx,%eax
   13650:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   13653:	8b 45 08             	mov    0x8(%ebp),%eax
   13656:	8b 40 20             	mov    0x20(%eax),%eax
   13659:	c1 e0 04             	shl    $0x4,%eax
   1365c:	c0 f8 04             	sar    $0x4,%al
   1365f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13662:	83 e0 0f             	and    $0xf,%eax
   13665:	89 c1                	mov    %eax,%ecx
   13667:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1366b:	83 e0 f0             	and    $0xfffffff0,%eax
   1366e:	09 c8                	or     %ecx,%eax
   13670:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++) {
   13673:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13677:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   1367b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1367e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13681:	7c a7                	jl     1362a <clear_display+0x29>
    }
}
   13683:	90                   	nop
   13684:	c9                   	leave  
   13685:	c3                   	ret    

00013686 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t * console) {
   13686:	55                   	push   %ebp
   13687:	89 e5                	mov    %esp,%ebp
   13689:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   1368c:	8b 45 08             	mov    0x8(%ebp),%eax
   1368f:	8b 40 0c             	mov    0xc(%eax),%eax
   13692:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8;		// 下一显示位置
   13695:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13698:	83 c0 07             	add    $0x7,%eax
   1369b:	8d 50 07             	lea    0x7(%eax),%edx
   1369e:	85 c0                	test   %eax,%eax
   136a0:	0f 48 c2             	cmovs  %edx,%eax
   136a3:	c1 f8 03             	sar    $0x3,%eax
   136a6:	c1 e0 03             	shl    $0x3,%eax
   136a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols) {
   136ac:	8b 45 08             	mov    0x8(%ebp),%eax
   136af:	8b 40 14             	mov    0x14(%eax),%eax
   136b2:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   136b5:	7c 36                	jl     136ed <move_next_tab+0x67>
        col = 0;
   136b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   136be:	8b 45 08             	mov    0x8(%ebp),%eax
   136c1:	8b 40 08             	mov    0x8(%eax),%eax
   136c4:	8d 50 01             	lea    0x1(%eax),%edx
   136c7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ca:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows) {
   136cd:	8b 45 08             	mov    0x8(%ebp),%eax
   136d0:	8b 50 08             	mov    0x8(%eax),%edx
   136d3:	8b 45 08             	mov    0x8(%ebp),%eax
   136d6:	8b 40 10             	mov    0x10(%eax),%eax
   136d9:	39 c2                	cmp    %eax,%edx
   136db:	7c 10                	jl     136ed <move_next_tab+0x67>
            // 超出末端，上移
            scroll_up(console, 1);
   136dd:	83 ec 08             	sub    $0x8,%esp
   136e0:	6a 01                	push   $0x1
   136e2:	ff 75 08             	pushl  0x8(%ebp)
   136e5:	e8 c5 fc ff ff       	call   133af <scroll_up>
   136ea:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   136ed:	8b 45 08             	mov    0x8(%ebp),%eax
   136f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   136f3:	89 50 0c             	mov    %edx,0xc(%eax)
}
   136f6:	90                   	nop
   136f7:	c9                   	leave  
   136f8:	c3                   	ret    

000136f9 <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t * console) {
   136f9:	55                   	push   %ebp
   136fa:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   136fc:	8b 45 08             	mov    0x8(%ebp),%eax
   136ff:	8b 50 0c             	mov    0xc(%eax),%edx
   13702:	8b 45 08             	mov    0x8(%ebp),%eax
   13705:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   13708:	8b 45 08             	mov    0x8(%ebp),%eax
   1370b:	8b 50 08             	mov    0x8(%eax),%edx
   1370e:	8b 45 08             	mov    0x8(%ebp),%eax
   13711:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   13714:	90                   	nop
   13715:	5d                   	pop    %ebp
   13716:	c3                   	ret    

00013717 <restore_cursor>:

void restore_cursor(console_t * console) {
   13717:	55                   	push   %ebp
   13718:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   1371a:	8b 45 08             	mov    0x8(%ebp),%eax
   1371d:	8b 50 18             	mov    0x18(%eax),%edx
   13720:	8b 45 08             	mov    0x8(%ebp),%eax
   13723:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13726:	8b 45 08             	mov    0x8(%ebp),%eax
   13729:	8b 50 1c             	mov    0x1c(%eax),%edx
   1372c:	8b 45 08             	mov    0x8(%ebp),%eax
   1372f:	89 50 08             	mov    %edx,0x8(%eax)
}
   13732:	90                   	nop
   13733:	5d                   	pop    %ebp
   13734:	c3                   	ret    

00013735 <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init (int idx) {
   13735:	55                   	push   %ebp
   13736:	89 e5                	mov    %esp,%ebp
   13738:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   1373b:	8b 45 08             	mov    0x8(%ebp),%eax
   1373e:	6b c0 68             	imul   $0x68,%eax,%eax
   13741:	05 00 56 03 00       	add    $0x35600,%eax
   13746:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   13749:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1374c:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   13753:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13756:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *) CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   1375d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13760:	8b 40 14             	mov    0x14(%eax),%eax
   13763:	0f af 45 08          	imul   0x8(%ebp),%eax
   13767:	89 c2                	mov    %eax,%edx
   13769:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1376c:	8b 40 10             	mov    0x10(%eax),%eax
   1376f:	0f af c2             	imul   %edx,%eax
   13772:	01 c0                	add    %eax,%eax
   13774:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   1377a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1377d:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   1377f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13782:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   13789:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1378c:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0) {
   13793:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13797:	75 30                	jne    137c9 <console_init+0x94>
        int cursor_pos = read_cursor_pos();
   13799:	e8 9c f9 ff ff       	call   1313a <read_cursor_pos>
   1379e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   137a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137a4:	8b 48 14             	mov    0x14(%eax),%ecx
   137a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137aa:	99                   	cltd   
   137ab:	f7 f9                	idiv   %ecx
   137ad:	89 c2                	mov    %eax,%edx
   137af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137b2:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   137b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137b8:	8b 48 14             	mov    0x14(%eax),%ecx
   137bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137be:	99                   	cltd   
   137bf:	f7 f9                	idiv   %ecx
   137c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137c4:	89 50 0c             	mov    %edx,0xc(%eax)
   137c7:	eb 22                	jmp    137eb <console_init+0xb6>
    } else {
        console->cursor_row = 0;
   137c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137cc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   137d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137d6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   137dd:	83 ec 0c             	sub    $0xc,%esp
   137e0:	ff 75 f4             	pushl  -0xc(%ebp)
   137e3:	e8 19 fe ff ff       	call   13601 <clear_display>
   137e8:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   137eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137ee:	8b 50 08             	mov    0x8(%eax),%edx
   137f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137f4:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   137f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137fa:	8b 50 0c             	mov    0xc(%eax),%edx
   137fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13800:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   13803:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13806:	83 c0 54             	add    $0x54,%eax
   13809:	83 ec 0c             	sub    $0xc,%esp
   1380c:	50                   	push   %eax
   1380d:	e8 9c 43 00 00       	call   17bae <mutex_init>
   13812:	83 c4 10             	add    $0x10,%esp
	return 0;
   13815:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1381a:	c9                   	leave  
   1381b:	c3                   	ret    

0001381c <erase_backword>:

/**
 * 擦除前一字符
 * @param console
 */
static void erase_backword (console_t * console) {
   1381c:	55                   	push   %ebp
   1381d:	89 e5                	mov    %esp,%ebp
   1381f:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0) {
   13822:	6a 01                	push   $0x1
   13824:	ff 75 08             	pushl  0x8(%ebp)
   13827:	e8 5d fd ff ff       	call   13589 <move_backword>
   1382c:	83 c4 08             	add    $0x8,%esp
   1382f:	85 c0                	test   %eax,%eax
   13831:	75 20                	jne    13853 <erase_backword+0x37>
        show_char(console, ' ');
   13833:	83 ec 08             	sub    $0x8,%esp
   13836:	6a 20                	push   $0x20
   13838:	ff 75 08             	pushl  0x8(%ebp)
   1383b:	e8 b5 fc ff ff       	call   134f5 <show_char>
   13840:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   13843:	83 ec 08             	sub    $0x8,%esp
   13846:	6a 01                	push   $0x1
   13848:	ff 75 08             	pushl  0x8(%ebp)
   1384b:	e8 39 fd ff ff       	call   13589 <move_backword>
   13850:	83 c4 10             	add    $0x10,%esp
    }
}
   13853:	90                   	nop
   13854:	c9                   	leave  
   13855:	c3                   	ret    

00013856 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal (console_t * console, char c) {
   13856:	55                   	push   %ebp
   13857:	89 e5                	mov    %esp,%ebp
   13859:	83 ec 18             	sub    $0x18,%esp
   1385c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1385f:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c) {
   13862:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13866:	83 f8 0a             	cmp    $0xa,%eax
   13869:	74 70                	je     138db <write_normal+0x85>
   1386b:	83 f8 0a             	cmp    $0xa,%eax
   1386e:	7f 0c                	jg     1387c <write_normal+0x26>
   13870:	83 f8 08             	cmp    $0x8,%eax
   13873:	74 34                	je     138a9 <write_normal+0x53>
   13875:	83 f8 09             	cmp    $0x9,%eax
   13878:	74 41                	je     138bb <write_normal+0x65>
   1387a:	eb 6f                	jmp    138eb <write_normal+0x95>
   1387c:	83 f8 1b             	cmp    $0x1b,%eax
   1387f:	74 0c                	je     1388d <write_normal+0x37>
   13881:	83 f8 7f             	cmp    $0x7f,%eax
   13884:	74 13                	je     13899 <write_normal+0x43>
   13886:	83 f8 0d             	cmp    $0xd,%eax
   13889:	74 40                	je     138cb <write_normal+0x75>
   1388b:	eb 5e                	jmp    138eb <write_normal+0x95>
        case ASCII_ESC:
            console->write_state = CONSOLE_WRITE_ESC;
   1388d:	8b 45 08             	mov    0x8(%ebp),%eax
   13890:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
            break;
   13897:	eb 72                	jmp    1390b <write_normal+0xb5>
        case 0x7F:
            erase_backword(console);
   13899:	83 ec 0c             	sub    $0xc,%esp
   1389c:	ff 75 08             	pushl  0x8(%ebp)
   1389f:	e8 78 ff ff ff       	call   1381c <erase_backword>
   138a4:	83 c4 10             	add    $0x10,%esp
            break;
   138a7:	eb 62                	jmp    1390b <write_normal+0xb5>
        case '\b':		// 左移一个字符
            move_backword(console, 1);
   138a9:	83 ec 08             	sub    $0x8,%esp
   138ac:	6a 01                	push   $0x1
   138ae:	ff 75 08             	pushl  0x8(%ebp)
   138b1:	e8 d3 fc ff ff       	call   13589 <move_backword>
   138b6:	83 c4 10             	add    $0x10,%esp
            break;
   138b9:	eb 50                	jmp    1390b <write_normal+0xb5>
            // 换行处理
        case '\t':		// 对齐的下一制表符
            move_next_tab(console);
   138bb:	83 ec 0c             	sub    $0xc,%esp
   138be:	ff 75 08             	pushl  0x8(%ebp)
   138c1:	e8 c0 fd ff ff       	call   13686 <move_next_tab>
   138c6:	83 c4 10             	add    $0x10,%esp
            break;
   138c9:	eb 40                	jmp    1390b <write_normal+0xb5>
        case '\r':
            move_to_col0(console);
   138cb:	83 ec 0c             	sub    $0xc,%esp
   138ce:	ff 75 08             	pushl  0x8(%ebp)
   138d1:	e8 61 fb ff ff       	call   13437 <move_to_col0>
   138d6:	83 c4 10             	add    $0x10,%esp
            break;
   138d9:	eb 30                	jmp    1390b <write_normal+0xb5>
        case '\n':  // 暂时这样处理
            //move_to_col0(console);
            move_next_line(console);
   138db:	83 ec 0c             	sub    $0xc,%esp
   138de:	ff 75 08             	pushl  0x8(%ebp)
   138e1:	e8 61 fb ff ff       	call   13447 <move_next_line>
   138e6:	83 c4 10             	add    $0x10,%esp
            break;
   138e9:	eb 20                	jmp    1390b <write_normal+0xb5>
            // 普通字符显示
        default: {
            if ((c >= ' ') && (c <= '~')) {
   138eb:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   138ef:	7e 19                	jle    1390a <write_normal+0xb4>
   138f1:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   138f5:	74 13                	je     1390a <write_normal+0xb4>
                show_char(console, c);
   138f7:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   138fb:	83 ec 08             	sub    $0x8,%esp
   138fe:	50                   	push   %eax
   138ff:	ff 75 08             	pushl  0x8(%ebp)
   13902:	e8 ee fb ff ff       	call   134f5 <show_char>
   13907:	83 c4 10             	add    $0x10,%esp
            }
            break;
   1390a:	90                   	nop
        }
    }
}
   1390b:	90                   	nop
   1390c:	c9                   	leave  
   1390d:	c3                   	ret    

0001390e <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param (console_t * console) {
   1390e:	55                   	push   %ebp
   1390f:	89 e5                	mov    %esp,%ebp
   13911:	83 ec 08             	sub    $0x8,%esp
	kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13914:	8b 45 08             	mov    0x8(%ebp),%eax
   13917:	83 c0 28             	add    $0x28,%eax
   1391a:	83 ec 04             	sub    $0x4,%esp
   1391d:	6a 28                	push   $0x28
   1391f:	6a 00                	push   $0x0
   13921:	50                   	push   %eax
   13922:	e8 d2 49 00 00       	call   182f9 <kernel_memset>
   13927:	83 c4 10             	add    $0x10,%esp
	console->curr_param_index = 0;
   1392a:	8b 45 08             	mov    0x8(%ebp),%eax
   1392d:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13934:	90                   	nop
   13935:	c9                   	leave  
   13936:	c3                   	ret    

00013937 <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc (console_t * console, char c) {
   13937:	55                   	push   %ebp
   13938:	89 e5                	mov    %esp,%ebp
   1393a:	83 ec 18             	sub    $0x18,%esp
   1393d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13940:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c) {
   13943:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13947:	83 f8 38             	cmp    $0x38,%eax
   1394a:	74 21                	je     1396d <write_esc+0x36>
   1394c:	83 f8 5b             	cmp    $0x5b,%eax
   1394f:	74 33                	je     13984 <write_esc+0x4d>
   13951:	83 f8 37             	cmp    $0x37,%eax
   13954:	75 48                	jne    1399e <write_esc+0x67>
        case '7':		// ESC 7 保存光标
            save_cursor(console);
   13956:	ff 75 08             	pushl  0x8(%ebp)
   13959:	e8 9b fd ff ff       	call   136f9 <save_cursor>
   1395e:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13961:	8b 45 08             	mov    0x8(%ebp),%eax
   13964:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   1396b:	eb 3c                	jmp    139a9 <write_esc+0x72>
        case '8':		// ESC 8 恢复光标
            restore_cursor(console);
   1396d:	ff 75 08             	pushl  0x8(%ebp)
   13970:	e8 a2 fd ff ff       	call   13717 <restore_cursor>
   13975:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13978:	8b 45 08             	mov    0x8(%ebp),%eax
   1397b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13982:	eb 25                	jmp    139a9 <write_esc+0x72>
        case '[':
            clear_esc_param(console);
   13984:	83 ec 0c             	sub    $0xc,%esp
   13987:	ff 75 08             	pushl  0x8(%ebp)
   1398a:	e8 7f ff ff ff       	call   1390e <clear_esc_param>
   1398f:	83 c4 10             	add    $0x10,%esp
            console->write_state = CONSOLE_WRITE_SQUARE;
   13992:	8b 45 08             	mov    0x8(%ebp),%eax
   13995:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
            break;
   1399c:	eb 0b                	jmp    139a9 <write_esc+0x72>
        default:
            console->write_state = CONSOLE_WRITE_NORMAL;
   1399e:	8b 45 08             	mov    0x8(%ebp),%eax
   139a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   139a8:	90                   	nop
    }
}
   139a9:	90                   	nop
   139aa:	c9                   	leave  
   139ab:	c3                   	ret    

000139ac <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style (console_t * console) {
   139ac:	55                   	push   %ebp
   139ad:	89 e5                	mov    %esp,%ebp
   139af:	83 ec 10             	sub    $0x10,%esp
	static const cclor_t color_table[] = {
			COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow, // 0-3
			COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
	};

	for (int i = 0; i < console->curr_param_index; i++) {
   139b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   139b9:	eb 78                	jmp    13a33 <set_font_style+0x87>
		int param = console->esc_param[i];
   139bb:	8b 45 08             	mov    0x8(%ebp),%eax
   139be:	8b 55 fc             	mov    -0x4(%ebp),%edx
   139c1:	83 c2 08             	add    $0x8,%edx
   139c4:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   139c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if ((param >= 30) && (param <= 37)) {  // 前景色：30-37
   139cb:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   139cf:	7e 1b                	jle    139ec <set_font_style+0x40>
   139d1:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   139d5:	7f 15                	jg     139ec <set_font_style+0x40>
			console->foreground = color_table[param - 30];
   139d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   139da:	83 e8 1e             	sub    $0x1e,%eax
   139dd:	8b 14 85 40 94 01 00 	mov    0x19440(,%eax,4),%edx
   139e4:	8b 45 08             	mov    0x8(%ebp),%eax
   139e7:	89 50 20             	mov    %edx,0x20(%eax)
   139ea:	eb 43                	jmp    13a2f <set_font_style+0x83>
		} else if ((param >= 40) && (param <= 47)) {
   139ec:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   139f0:	7e 1b                	jle    13a0d <set_font_style+0x61>
   139f2:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   139f6:	7f 15                	jg     13a0d <set_font_style+0x61>
			console->background = color_table[param - 40];
   139f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   139fb:	83 e8 28             	sub    $0x28,%eax
   139fe:	8b 14 85 40 94 01 00 	mov    0x19440(,%eax,4),%edx
   13a05:	8b 45 08             	mov    0x8(%ebp),%eax
   13a08:	89 50 24             	mov    %edx,0x24(%eax)
   13a0b:	eb 22                	jmp    13a2f <set_font_style+0x83>
		} else if (param == 39) { // 39=默认前景色
   13a0d:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13a11:	75 0c                	jne    13a1f <set_font_style+0x73>
			console->foreground = COLOR_White;
   13a13:	8b 45 08             	mov    0x8(%ebp),%eax
   13a16:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13a1d:	eb 10                	jmp    13a2f <set_font_style+0x83>
		} else if (param == 49) { // 49=默认背景色
   13a1f:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13a23:	75 0a                	jne    13a2f <set_font_style+0x83>
			console->background = COLOR_Black;
   13a25:	8b 45 08             	mov    0x8(%ebp),%eax
   13a28:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
	for (int i = 0; i < console->curr_param_index; i++) {
   13a2f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13a33:	8b 45 08             	mov    0x8(%ebp),%eax
   13a36:	8b 40 50             	mov    0x50(%eax),%eax
   13a39:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13a3c:	0f 8c 79 ff ff ff    	jl     139bb <set_font_style+0xf>
		}
	}
}
   13a42:	90                   	nop
   13a43:	c9                   	leave  
   13a44:	c3                   	ret    

00013a45 <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left (console_t * console, int n) {
   13a45:	55                   	push   %ebp
   13a46:	89 e5                	mov    %esp,%ebp
   13a48:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13a4b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13a4f:	75 07                	jne    13a58 <move_left+0x13>
        n = 1;
   13a51:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13a58:	8b 45 08             	mov    0x8(%ebp),%eax
   13a5b:	8b 40 0c             	mov    0xc(%eax),%eax
   13a5e:	2b 45 0c             	sub    0xc(%ebp),%eax
   13a61:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   13a64:	b8 00 00 00 00       	mov    $0x0,%eax
   13a69:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13a6d:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   13a71:	89 c2                	mov    %eax,%edx
   13a73:	8b 45 08             	mov    0x8(%ebp),%eax
   13a76:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13a79:	90                   	nop
   13a7a:	c9                   	leave  
   13a7b:	c3                   	ret    

00013a7c <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right (console_t * console, int n) {
   13a7c:	55                   	push   %ebp
   13a7d:	89 e5                	mov    %esp,%ebp
   13a7f:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13a82:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13a86:	75 07                	jne    13a8f <move_right+0x13>
        n = 1;
   13a88:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   13a8f:	8b 45 08             	mov    0x8(%ebp),%eax
   13a92:	8b 50 0c             	mov    0xc(%eax),%edx
   13a95:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a98:	01 d0                	add    %edx,%eax
   13a9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols) {
   13a9d:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa0:	8b 40 14             	mov    0x14(%eax),%eax
   13aa3:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13aa6:	7c 11                	jl     13ab9 <move_right+0x3d>
        console->cursor_col = console->display_cols - 1;
   13aa8:	8b 45 08             	mov    0x8(%ebp),%eax
   13aab:	8b 40 14             	mov    0x14(%eax),%eax
   13aae:	8d 50 ff             	lea    -0x1(%eax),%edx
   13ab1:	8b 45 08             	mov    0x8(%ebp),%eax
   13ab4:	89 50 0c             	mov    %edx,0xc(%eax)
    } else {
        console->cursor_col = col;
    }
}
   13ab7:	eb 09                	jmp    13ac2 <move_right+0x46>
        console->cursor_col = col;
   13ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   13abc:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13abf:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13ac2:	90                   	nop
   13ac3:	c9                   	leave  
   13ac4:	c3                   	ret    

00013ac5 <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t * console) {
   13ac5:	55                   	push   %ebp
   13ac6:	89 e5                	mov    %esp,%ebp
	if (console->curr_param_index >= 1) {
   13ac8:	8b 45 08             	mov    0x8(%ebp),%eax
   13acb:	8b 40 50             	mov    0x50(%eax),%eax
   13ace:	85 c0                	test   %eax,%eax
   13ad0:	7e 0c                	jle    13ade <move_cursor+0x19>
		console->cursor_row = console->esc_param[0];
   13ad2:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad5:	8b 50 28             	mov    0x28(%eax),%edx
   13ad8:	8b 45 08             	mov    0x8(%ebp),%eax
   13adb:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if (console->curr_param_index >= 2) {
   13ade:	8b 45 08             	mov    0x8(%ebp),%eax
   13ae1:	8b 40 50             	mov    0x50(%eax),%eax
   13ae4:	83 f8 01             	cmp    $0x1,%eax
   13ae7:	7e 0c                	jle    13af5 <move_cursor+0x30>
		console->cursor_col = console->esc_param[1];
   13ae9:	8b 45 08             	mov    0x8(%ebp),%eax
   13aec:	8b 50 2c             	mov    0x2c(%eax),%edx
   13aef:	8b 45 08             	mov    0x8(%ebp),%eax
   13af2:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
   13af5:	90                   	nop
   13af6:	5d                   	pop    %ebp
   13af7:	c3                   	ret    

00013af8 <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t * console) {
   13af8:	55                   	push   %ebp
   13af9:	89 e5                	mov    %esp,%ebp
   13afb:	83 ec 10             	sub    $0x10,%esp
	if (console->curr_param_index <= 0) {
   13afe:	8b 45 08             	mov    0x8(%ebp),%eax
   13b01:	8b 40 50             	mov    0x50(%eax),%eax
   13b04:	85 c0                	test   %eax,%eax
   13b06:	7e 3e                	jle    13b46 <erase_in_display+0x4e>
		return;
	}

	int param = console->esc_param[0];
   13b08:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0b:	8b 40 28             	mov    0x28(%eax),%eax
   13b0e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (param == 2) {
   13b11:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13b15:	75 30                	jne    13b47 <erase_in_display+0x4f>
		// 擦除整个屏幕
		erase_rows(console, 0, console->display_rows - 1);
   13b17:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1a:	8b 40 10             	mov    0x10(%eax),%eax
   13b1d:	83 e8 01             	sub    $0x1,%eax
   13b20:	50                   	push   %eax
   13b21:	6a 00                	push   $0x0
   13b23:	ff 75 08             	pushl  0x8(%ebp)
   13b26:	e8 f3 f7 ff ff       	call   1331e <erase_rows>
   13b2b:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   13b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b31:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   13b38:	8b 45 08             	mov    0x8(%ebp),%eax
   13b3b:	8b 50 08             	mov    0x8(%eax),%edx
   13b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b41:	89 50 0c             	mov    %edx,0xc(%eax)
   13b44:	eb 01                	jmp    13b47 <erase_in_display+0x4f>
		return;
   13b46:	90                   	nop
	}
}
   13b47:	c9                   	leave  
   13b48:	c3                   	ret    

00013b49 <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square (console_t * console, char c) {
   13b49:	55                   	push   %ebp
   13b4a:	89 e5                	mov    %esp,%ebp
   13b4c:	83 ec 14             	sub    $0x14,%esp
   13b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b52:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9')) {
   13b55:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13b59:	7e 44                	jle    13b9f <write_esc_square+0x56>
   13b5b:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13b5f:	7f 3e                	jg     13b9f <write_esc_square+0x56>
        // 解析当前参数
        int * param = &console->esc_param[console->curr_param_index];
   13b61:	8b 45 08             	mov    0x8(%ebp),%eax
   13b64:	8b 40 50             	mov    0x50(%eax),%eax
   13b67:	83 c0 08             	add    $0x8,%eax
   13b6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13b71:	8b 45 08             	mov    0x8(%ebp),%eax
   13b74:	01 d0                	add    %edx,%eax
   13b76:	83 c0 08             	add    $0x8,%eax
   13b79:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13b7c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13b7f:	8b 10                	mov    (%eax),%edx
   13b81:	89 d0                	mov    %edx,%eax
   13b83:	c1 e0 02             	shl    $0x2,%eax
   13b86:	01 d0                	add    %edx,%eax
   13b88:	01 c0                	add    %eax,%eax
   13b8a:	89 c2                	mov    %eax,%edx
   13b8c:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13b90:	01 d0                	add    %edx,%eax
   13b92:	8d 50 d0             	lea    -0x30(%eax),%edx
   13b95:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13b98:	89 10                	mov    %edx,(%eax)
    if ((c >= '0') && (c <= '9')) {
   13b9a:	e9 9e 00 00 00       	jmp    13c3d <write_esc_square+0xf4>
    } else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX) {
   13b9f:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13ba3:	75 1c                	jne    13bc1 <write_esc_square+0x78>
   13ba5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba8:	8b 40 50             	mov    0x50(%eax),%eax
   13bab:	83 f8 09             	cmp    $0x9,%eax
   13bae:	7f 11                	jg     13bc1 <write_esc_square+0x78>
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb3:	8b 40 50             	mov    0x50(%eax),%eax
   13bb6:	8d 50 01             	lea    0x1(%eax),%edx
   13bb9:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbc:	89 50 50             	mov    %edx,0x50(%eax)
   13bbf:	eb 7c                	jmp    13c3d <write_esc_square+0xf4>
    } else {
        // 结束上一字符的处理
        console->curr_param_index++;
   13bc1:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc4:	8b 40 50             	mov    0x50(%eax),%eax
   13bc7:	8d 50 01             	lea    0x1(%eax),%edx
   13bca:	8b 45 08             	mov    0x8(%ebp),%eax
   13bcd:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c) {
   13bd0:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13bd4:	83 e8 43             	sub    $0x43,%eax
   13bd7:	83 f8 2a             	cmp    $0x2a,%eax
   13bda:	77 57                	ja     13c33 <write_esc_square+0xea>
   13bdc:	8b 04 85 80 93 01 00 	mov    0x19380(,%eax,4),%eax
   13be3:	ff e0                	jmp    *%eax
        case 'm': // 设置字符属性
            set_font_style(console);
   13be5:	ff 75 08             	pushl  0x8(%ebp)
   13be8:	e8 bf fd ff ff       	call   139ac <set_font_style>
   13bed:	83 c4 04             	add    $0x4,%esp
            break;
   13bf0:	eb 41                	jmp    13c33 <write_esc_square+0xea>
        case 'D':	// 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13bf2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf5:	8b 40 28             	mov    0x28(%eax),%eax
   13bf8:	50                   	push   %eax
   13bf9:	ff 75 08             	pushl  0x8(%ebp)
   13bfc:	e8 44 fe ff ff       	call   13a45 <move_left>
   13c01:	83 c4 08             	add    $0x8,%esp
            break;
   13c04:	eb 2d                	jmp    13c33 <write_esc_square+0xea>
        case 'C':
            move_right(console, console->esc_param[0]);
   13c06:	8b 45 08             	mov    0x8(%ebp),%eax
   13c09:	8b 40 28             	mov    0x28(%eax),%eax
   13c0c:	50                   	push   %eax
   13c0d:	ff 75 08             	pushl  0x8(%ebp)
   13c10:	e8 67 fe ff ff       	call   13a7c <move_right>
   13c15:	83 c4 08             	add    $0x8,%esp
            break;
   13c18:	eb 19                	jmp    13c33 <write_esc_square+0xea>
        case 'H':
        case 'f':
            move_cursor(console);
   13c1a:	ff 75 08             	pushl  0x8(%ebp)
   13c1d:	e8 a3 fe ff ff       	call   13ac5 <move_cursor>
   13c22:	83 c4 04             	add    $0x4,%esp
            break;
   13c25:	eb 0c                	jmp    13c33 <write_esc_square+0xea>
        case 'J':
            erase_in_display(console);
   13c27:	ff 75 08             	pushl  0x8(%ebp)
   13c2a:	e8 c9 fe ff ff       	call   13af8 <erase_in_display>
   13c2f:	83 c4 04             	add    $0x4,%esp
            break;
   13c32:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13c33:	8b 45 08             	mov    0x8(%ebp),%eax
   13c36:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13c3d:	90                   	nop
   13c3e:	c9                   	leave  
   13c3f:	c3                   	ret    

00013c40 <console_write>:

/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write (tty_t * tty) {
   13c40:	55                   	push   %ebp
   13c41:	89 e5                	mov    %esp,%ebp
   13c43:	83 ec 18             	sub    $0x18,%esp
	console_t * console = console_buf + tty->console_idx;
   13c46:	8b 45 08             	mov    0x8(%ebp),%eax
   13c49:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13c4f:	6b c0 68             	imul   $0x68,%eax,%eax
   13c52:	05 00 56 03 00       	add    $0x35600,%eax
   13c57:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c5d:	83 c0 54             	add    $0x54,%eax
   13c60:	83 ec 0c             	sub    $0xc,%esp
   13c63:	50                   	push   %eax
   13c64:	e8 73 3f 00 00       	call   17bdc <mutex_lock>
   13c69:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13c6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13c73:	8b 45 08             	mov    0x8(%ebp),%eax
   13c76:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13c7c:	83 ec 08             	sub    $0x8,%esp
   13c7f:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13c82:	50                   	push   %eax
   13c83:	52                   	push   %edx
   13c84:	e8 17 14 00 00       	call   150a0 <tty_fifo_get>
   13c89:	83 c4 10             	add    $0x10,%esp
   13c8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0) {
   13c8f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13c93:	79 25                	jns    13cba <console_write+0x7a>
                break;
        }
        len++;
    }while (1);

    mutex_unlock(&console->mutex);
   13c95:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c98:	83 c0 54             	add    $0x54,%eax
   13c9b:	83 ec 0c             	sub    $0xc,%esp
   13c9e:	50                   	push   %eax
   13c9f:	e8 cf 3f 00 00       	call   17c73 <mutex_unlock>
   13ca4:	83 c4 10             	add    $0x10,%esp

    update_cursor_pos(console);
   13ca7:	83 ec 0c             	sub    $0xc,%esp
   13caa:	ff 75 f0             	pushl  -0x10(%ebp)
   13cad:	e8 fc f4 ff ff       	call   131ae <update_cursor_pos>
   13cb2:	83 c4 10             	add    $0x10,%esp
    return len;
   13cb5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13cb8:	eb 7b                	jmp    13d35 <console_write+0xf5>
        sem_notify(&tty->osem);
   13cba:	8b 45 08             	mov    0x8(%ebp),%eax
   13cbd:	05 14 02 00 00       	add    $0x214,%eax
   13cc2:	83 ec 0c             	sub    $0xc,%esp
   13cc5:	50                   	push   %eax
   13cc6:	e8 03 41 00 00       	call   17dce <sem_notify>
   13ccb:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state) {
   13cce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13cd1:	8b 40 04             	mov    0x4(%eax),%eax
   13cd4:	83 f8 01             	cmp    $0x1,%eax
   13cd7:	74 24                	je     13cfd <console_write+0xbd>
   13cd9:	83 f8 01             	cmp    $0x1,%eax
   13cdc:	72 07                	jb     13ce5 <console_write+0xa5>
   13cde:	83 f8 02             	cmp    $0x2,%eax
   13ce1:	74 32                	je     13d15 <console_write+0xd5>
   13ce3:	eb 47                	jmp    13d2c <console_write+0xec>
                write_normal(console, c);
   13ce5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13ce9:	0f be c0             	movsbl %al,%eax
   13cec:	83 ec 08             	sub    $0x8,%esp
   13cef:	50                   	push   %eax
   13cf0:	ff 75 f0             	pushl  -0x10(%ebp)
   13cf3:	e8 5e fb ff ff       	call   13856 <write_normal>
   13cf8:	83 c4 10             	add    $0x10,%esp
                break;
   13cfb:	eb 2f                	jmp    13d2c <console_write+0xec>
                write_esc(console, c);
   13cfd:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13d01:	0f be c0             	movsbl %al,%eax
   13d04:	83 ec 08             	sub    $0x8,%esp
   13d07:	50                   	push   %eax
   13d08:	ff 75 f0             	pushl  -0x10(%ebp)
   13d0b:	e8 27 fc ff ff       	call   13937 <write_esc>
   13d10:	83 c4 10             	add    $0x10,%esp
                break;
   13d13:	eb 17                	jmp    13d2c <console_write+0xec>
                write_esc_square(console, c);
   13d15:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13d19:	0f be c0             	movsbl %al,%eax
   13d1c:	83 ec 08             	sub    $0x8,%esp
   13d1f:	50                   	push   %eax
   13d20:	ff 75 f0             	pushl  -0x10(%ebp)
   13d23:	e8 21 fe ff ff       	call   13b49 <write_esc_square>
   13d28:	83 c4 10             	add    $0x10,%esp
                break;
   13d2b:	90                   	nop
        len++;
   13d2c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    do {
   13d30:	e9 3e ff ff ff       	jmp    13c73 <console_write+0x33>
}
   13d35:	c9                   	leave  
   13d36:	c3                   	ret    

00013d37 <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close (int dev) {
   13d37:	55                   	push   %ebp
   13d38:	89 e5                	mov    %esp,%ebp
	// 似乎不太需要做点什么
}
   13d3a:	90                   	nop
   13d3b:	5d                   	pop    %ebp
   13d3c:	c3                   	ret    

00013d3d <is_devid_bad>:
};

// 设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad (int dev_id) {
   13d3d:	55                   	push   %ebp
   13d3e:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >=  sizeof(dev_tbl) / sizeof(dev_tbl[0]))) {
   13d40:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13d44:	78 08                	js     13d4e <is_devid_bad+0x11>
   13d46:	8b 45 08             	mov    0x8(%ebp),%eax
   13d49:	83 f8 7f             	cmp    $0x7f,%eax
   13d4c:	76 07                	jbe    13d55 <is_devid_bad+0x18>
        return 1;
   13d4e:	b8 01 00 00 00       	mov    $0x1,%eax
   13d53:	eb 24                	jmp    13d79 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0) {
   13d55:	8b 55 08             	mov    0x8(%ebp),%edx
   13d58:	89 d0                	mov    %edx,%eax
   13d5a:	c1 e0 02             	shl    $0x2,%eax
   13d5d:	01 d0                	add    %edx,%eax
   13d5f:	c1 e0 02             	shl    $0x2,%eax
   13d62:	05 40 59 03 00       	add    $0x35940,%eax
   13d67:	8b 00                	mov    (%eax),%eax
   13d69:	85 c0                	test   %eax,%eax
   13d6b:	75 07                	jne    13d74 <is_devid_bad+0x37>
        return 1;
   13d6d:	b8 01 00 00 00       	mov    $0x1,%eax
   13d72:	eb 05                	jmp    13d79 <is_devid_bad+0x3c>
    }

    return 0;
   13d74:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13d79:	5d                   	pop    %ebp
   13d7a:	c3                   	ret    

00013d7b <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open (int major, int minor, void * data) {
   13d7b:	55                   	push   %ebp
   13d7c:	89 e5                	mov    %esp,%ebp
   13d7e:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13d81:	e8 4f f3 ff ff       	call   130d5 <irq_enter_protection>
   13d86:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t * free_dev = (device_t *)0;
   13d89:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13d90:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13d97:	eb 68                	jmp    13e01 <dev_open+0x86>
        device_t * dev = dev_tbl + i;
   13d99:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13d9c:	89 d0                	mov    %edx,%eax
   13d9e:	c1 e0 02             	shl    $0x2,%eax
   13da1:	01 d0                	add    %edx,%eax
   13da3:	c1 e0 02             	shl    $0x2,%eax
   13da6:	05 40 59 03 00       	add    $0x35940,%eax
   13dab:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0) {
   13dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13db1:	8b 40 10             	mov    0x10(%eax),%eax
   13db4:	85 c0                	test   %eax,%eax
   13db6:	75 08                	jne    13dc0 <dev_open+0x45>
            // 纪录空闲值
            free_dev = dev;
   13db8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13dbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13dbe:	eb 3d                	jmp    13dfd <dev_open+0x82>
        } else if ((dev->desc->major == major) && (dev->minor == minor)) {
   13dc0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13dc3:	8b 00                	mov    (%eax),%eax
   13dc5:	8b 40 20             	mov    0x20(%eax),%eax
   13dc8:	39 45 08             	cmp    %eax,0x8(%ebp)
   13dcb:	75 30                	jne    13dfd <dev_open+0x82>
   13dcd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13dd0:	8b 40 08             	mov    0x8(%eax),%eax
   13dd3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13dd6:	75 25                	jne    13dfd <dev_open+0x82>
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13dd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ddb:	8b 40 10             	mov    0x10(%eax),%eax
   13dde:	8d 50 01             	lea    0x1(%eax),%edx
   13de1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13de4:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13de7:	83 ec 0c             	sub    $0xc,%esp
   13dea:	ff 75 e4             	pushl  -0x1c(%ebp)
   13ded:	e8 fb f2 ff ff       	call   130ed <irq_leave_protection>
   13df2:	83 c4 10             	add    $0x10,%esp
            return i;
   13df5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13df8:	e9 c8 00 00 00       	jmp    13ec5 <dev_open+0x14a>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13dfd:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13e01:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e04:	83 f8 7f             	cmp    $0x7f,%eax
   13e07:	76 90                	jbe    13d99 <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t * desc = (dev_desc_t *)0;
   13e09:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13e10:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13e17:	eb 24                	jmp    13e3d <dev_open+0xc2>
        dev_desc_t * d = dev_desc_tbl[i];
   13e19:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13e1c:	8b 04 85 50 a0 01 00 	mov    0x1a050(,%eax,4),%eax
   13e23:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major) {
   13e26:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13e29:	8b 40 20             	mov    0x20(%eax),%eax
   13e2c:	39 45 08             	cmp    %eax,0x8(%ebp)
   13e2f:	75 08                	jne    13e39 <dev_open+0xbe>
            desc = d;
   13e31:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13e34:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13e37:	eb 0c                	jmp    13e45 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13e39:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13e3d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13e40:	83 f8 01             	cmp    $0x1,%eax
   13e43:	76 d4                	jbe    13e19 <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev) {
   13e45:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13e49:	74 67                	je     13eb2 <dev_open+0x137>
   13e4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13e4f:	74 61                	je     13eb2 <dev_open+0x137>
        free_dev->minor = minor;
   13e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e54:	8b 55 0c             	mov    0xc(%ebp),%edx
   13e57:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e5d:	8b 55 10             	mov    0x10(%ebp),%edx
   13e60:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13e63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e66:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13e69:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13e6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13e6e:	8b 40 24             	mov    0x24(%eax),%eax
   13e71:	83 ec 0c             	sub    $0xc,%esp
   13e74:	ff 75 f4             	pushl  -0xc(%ebp)
   13e77:	ff d0                	call   *%eax
   13e79:	83 c4 10             	add    $0x10,%esp
   13e7c:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0) {
   13e7f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13e83:	75 2d                	jne    13eb2 <dev_open+0x137>
            free_dev->open_count = 1;
   13e85:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e88:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13e8f:	83 ec 0c             	sub    $0xc,%esp
   13e92:	ff 75 e4             	pushl  -0x1c(%ebp)
   13e95:	e8 53 f2 ff ff       	call   130ed <irq_leave_protection>
   13e9a:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ea0:	ba 40 59 03 00       	mov    $0x35940,%edx
   13ea5:	29 d0                	sub    %edx,%eax
   13ea7:	c1 f8 02             	sar    $0x2,%eax
   13eaa:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13eb0:	eb 13                	jmp    13ec5 <dev_open+0x14a>
        }
    }

    irq_leave_protection(state);
   13eb2:	83 ec 0c             	sub    $0xc,%esp
   13eb5:	ff 75 e4             	pushl  -0x1c(%ebp)
   13eb8:	e8 30 f2 ff ff       	call   130ed <irq_leave_protection>
   13ebd:	83 c4 10             	add    $0x10,%esp
    return -1;
   13ec0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13ec5:	c9                   	leave  
   13ec6:	c3                   	ret    

00013ec7 <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read (int dev_id, int addr, char * buf, int size) {
   13ec7:	55                   	push   %ebp
   13ec8:	89 e5                	mov    %esp,%ebp
   13eca:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13ecd:	ff 75 08             	pushl  0x8(%ebp)
   13ed0:	e8 68 fe ff ff       	call   13d3d <is_devid_bad>
   13ed5:	83 c4 04             	add    $0x4,%esp
   13ed8:	85 c0                	test   %eax,%eax
   13eda:	74 07                	je     13ee3 <dev_read+0x1c>
        return -1;
   13edc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13ee1:	eb 2e                	jmp    13f11 <dev_read+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13ee3:	8b 55 08             	mov    0x8(%ebp),%edx
   13ee6:	89 d0                	mov    %edx,%eax
   13ee8:	c1 e0 02             	shl    $0x2,%eax
   13eeb:	01 d0                	add    %edx,%eax
   13eed:	c1 e0 02             	shl    $0x2,%eax
   13ef0:	05 40 59 03 00       	add    $0x35940,%eax
   13ef5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13ef8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13efb:	8b 00                	mov    (%eax),%eax
   13efd:	8b 40 28             	mov    0x28(%eax),%eax
   13f00:	ff 75 14             	pushl  0x14(%ebp)
   13f03:	ff 75 10             	pushl  0x10(%ebp)
   13f06:	ff 75 0c             	pushl  0xc(%ebp)
   13f09:	ff 75 f4             	pushl  -0xc(%ebp)
   13f0c:	ff d0                	call   *%eax
   13f0e:	83 c4 10             	add    $0x10,%esp
}
   13f11:	c9                   	leave  
   13f12:	c3                   	ret    

00013f13 <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write (int dev_id, int addr, char * buf, int size) {
   13f13:	55                   	push   %ebp
   13f14:	89 e5                	mov    %esp,%ebp
   13f16:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13f19:	ff 75 08             	pushl  0x8(%ebp)
   13f1c:	e8 1c fe ff ff       	call   13d3d <is_devid_bad>
   13f21:	83 c4 04             	add    $0x4,%esp
   13f24:	85 c0                	test   %eax,%eax
   13f26:	74 07                	je     13f2f <dev_write+0x1c>
        return -1;
   13f28:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f2d:	eb 2e                	jmp    13f5d <dev_write+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13f2f:	8b 55 08             	mov    0x8(%ebp),%edx
   13f32:	89 d0                	mov    %edx,%eax
   13f34:	c1 e0 02             	shl    $0x2,%eax
   13f37:	01 d0                	add    %edx,%eax
   13f39:	c1 e0 02             	shl    $0x2,%eax
   13f3c:	05 40 59 03 00       	add    $0x35940,%eax
   13f41:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   13f44:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f47:	8b 00                	mov    (%eax),%eax
   13f49:	8b 40 2c             	mov    0x2c(%eax),%eax
   13f4c:	ff 75 14             	pushl  0x14(%ebp)
   13f4f:	ff 75 10             	pushl  0x10(%ebp)
   13f52:	ff 75 0c             	pushl  0xc(%ebp)
   13f55:	ff 75 f4             	pushl  -0xc(%ebp)
   13f58:	ff d0                	call   *%eax
   13f5a:	83 c4 10             	add    $0x10,%esp
}
   13f5d:	c9                   	leave  
   13f5e:	c3                   	ret    

00013f5f <dev_control>:

/**
 * @brief 发送控制命令
 */

int dev_control (int dev_id, int cmd, int arg0, int arg1) {
   13f5f:	55                   	push   %ebp
   13f60:	89 e5                	mov    %esp,%ebp
   13f62:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13f65:	ff 75 08             	pushl  0x8(%ebp)
   13f68:	e8 d0 fd ff ff       	call   13d3d <is_devid_bad>
   13f6d:	83 c4 04             	add    $0x4,%esp
   13f70:	85 c0                	test   %eax,%eax
   13f72:	74 07                	je     13f7b <dev_control+0x1c>
        return -1;
   13f74:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13f79:	eb 2e                	jmp    13fa9 <dev_control+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13f7b:	8b 55 08             	mov    0x8(%ebp),%edx
   13f7e:	89 d0                	mov    %edx,%eax
   13f80:	c1 e0 02             	shl    $0x2,%eax
   13f83:	01 d0                	add    %edx,%eax
   13f85:	c1 e0 02             	shl    $0x2,%eax
   13f88:	05 40 59 03 00       	add    $0x35940,%eax
   13f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   13f90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f93:	8b 00                	mov    (%eax),%eax
   13f95:	8b 40 30             	mov    0x30(%eax),%eax
   13f98:	ff 75 14             	pushl  0x14(%ebp)
   13f9b:	ff 75 10             	pushl  0x10(%ebp)
   13f9e:	ff 75 0c             	pushl  0xc(%ebp)
   13fa1:	ff 75 f4             	pushl  -0xc(%ebp)
   13fa4:	ff d0                	call   *%eax
   13fa6:	83 c4 10             	add    $0x10,%esp
}
   13fa9:	c9                   	leave  
   13faa:	c3                   	ret    

00013fab <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close (int dev_id) {
   13fab:	55                   	push   %ebp
   13fac:	89 e5                	mov    %esp,%ebp
   13fae:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13fb1:	ff 75 08             	pushl  0x8(%ebp)
   13fb4:	e8 84 fd ff ff       	call   13d3d <is_devid_bad>
   13fb9:	83 c4 04             	add    $0x4,%esp
   13fbc:	85 c0                	test   %eax,%eax
   13fbe:	75 6b                	jne    1402b <dev_close+0x80>
        return;
    }

    device_t * dev = dev_tbl + dev_id;
   13fc0:	8b 55 08             	mov    0x8(%ebp),%edx
   13fc3:	89 d0                	mov    %edx,%eax
   13fc5:	c1 e0 02             	shl    $0x2,%eax
   13fc8:	01 d0                	add    %edx,%eax
   13fca:	c1 e0 02             	shl    $0x2,%eax
   13fcd:	05 40 59 03 00       	add    $0x35940,%eax
   13fd2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   13fd5:	e8 fb f0 ff ff       	call   130d5 <irq_enter_protection>
   13fda:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {
   13fdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fe0:	8b 40 10             	mov    0x10(%eax),%eax
   13fe3:	8d 50 ff             	lea    -0x1(%eax),%edx
   13fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fe9:	89 50 10             	mov    %edx,0x10(%eax)
   13fec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fef:	8b 40 10             	mov    0x10(%eax),%eax
   13ff2:	85 c0                	test   %eax,%eax
   13ff4:	75 25                	jne    1401b <dev_close+0x70>
        dev->desc->close(dev);
   13ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ff9:	8b 00                	mov    (%eax),%eax
   13ffb:	8b 40 34             	mov    0x34(%eax),%eax
   13ffe:	83 ec 0c             	sub    $0xc,%esp
   14001:	ff 75 f4             	pushl  -0xc(%ebp)
   14004:	ff d0                	call   *%eax
   14006:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   14009:	83 ec 04             	sub    $0x4,%esp
   1400c:	6a 14                	push   $0x14
   1400e:	6a 00                	push   $0x0
   14010:	ff 75 f4             	pushl  -0xc(%ebp)
   14013:	e8 e1 42 00 00       	call   182f9 <kernel_memset>
   14018:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   1401b:	83 ec 0c             	sub    $0xc,%esp
   1401e:	ff 75 f0             	pushl  -0x10(%ebp)
   14021:	e8 c7 f0 ff ff       	call   130ed <irq_leave_protection>
   14026:	83 c4 10             	add    $0x10,%esp
   14029:	eb 01                	jmp    1402c <dev_close+0x81>
        return;
   1402b:	90                   	nop
   1402c:	c9                   	leave  
   1402d:	c3                   	ret    

0001402e <inb>:
static inline uint8_t inb(uint16_t  port) {
   1402e:	55                   	push   %ebp
   1402f:	89 e5                	mov    %esp,%ebp
   14031:	83 ec 14             	sub    $0x14,%esp
   14034:	8b 45 08             	mov    0x8(%ebp),%eax
   14037:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   1403b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1403f:	89 c2                	mov    %eax,%edx
   14041:	ec                   	in     (%dx),%al
   14042:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14045:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14049:	c9                   	leave  
   1404a:	c3                   	ret    

0001404b <inw>:
static inline uint16_t inw(uint16_t  port) {
   1404b:	55                   	push   %ebp
   1404c:	89 e5                	mov    %esp,%ebp
   1404e:	83 ec 14             	sub    $0x14,%esp
   14051:	8b 45 08             	mov    0x8(%ebp),%eax
   14054:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
   14058:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1405c:	89 c2                	mov    %eax,%edx
   1405e:	66 ed                	in     (%dx),%ax
   14060:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	return rv;
   14064:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14068:	c9                   	leave  
   14069:	c3                   	ret    

0001406a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1406a:	55                   	push   %ebp
   1406b:	89 e5                	mov    %esp,%ebp
   1406d:	83 ec 08             	sub    $0x8,%esp
   14070:	8b 55 08             	mov    0x8(%ebp),%edx
   14073:	8b 45 0c             	mov    0xc(%ebp),%eax
   14076:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1407a:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1407d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14081:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14085:	ee                   	out    %al,(%dx)
}
   14086:	90                   	nop
   14087:	c9                   	leave  
   14088:	c3                   	ret    

00014089 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   14089:	55                   	push   %ebp
   1408a:	89 e5                	mov    %esp,%ebp
   1408c:	83 ec 08             	sub    $0x8,%esp
   1408f:	8b 55 08             	mov    0x8(%ebp),%edx
   14092:	8b 45 0c             	mov    0xc(%ebp),%eax
   14095:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14099:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("out %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1409d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   140a1:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   140a5:	66 ef                	out    %ax,(%dx)
}
   140a7:	90                   	nop
   140a8:	c9                   	leave  
   140a9:	c3                   	ret    

000140aa <data_send_cmd>:
static int task_on_op;

/**
 * 发送ata命令，支持多达16位的扇区，对我们目前的程序来书够用了。
 */
static void data_send_cmd (disk_t * disk, uint32_t start_sector, uint32_t sector_count, int cmd) {
   140aa:	55                   	push   %ebp
   140ab:	89 e5                	mov    %esp,%ebp
    outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);		// 使用LBA寻址，并设置驱动器
   140ad:	8b 45 08             	mov    0x8(%ebp),%eax
   140b0:	8b 40 20             	mov    0x20(%eax),%eax
   140b3:	83 c8 e0             	or     $0xffffffe0,%eax
   140b6:	0f b6 d0             	movzbl %al,%edx
   140b9:	8b 45 08             	mov    0x8(%ebp),%eax
   140bc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   140c0:	83 c0 06             	add    $0x6,%eax
   140c3:	0f b7 c0             	movzwl %ax,%eax
   140c6:	52                   	push   %edx
   140c7:	50                   	push   %eax
   140c8:	e8 9d ff ff ff       	call   1406a <outb>
   140cd:	83 c4 08             	add    $0x8,%esp

	// 必须先写高字节
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count >> 8));	// 扇区数高8位
   140d0:	8b 45 10             	mov    0x10(%ebp),%eax
   140d3:	c1 e8 08             	shr    $0x8,%eax
   140d6:	0f b6 d0             	movzbl %al,%edx
   140d9:	8b 45 08             	mov    0x8(%ebp),%eax
   140dc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   140e0:	83 c0 02             	add    $0x2,%eax
   140e3:	0f b7 c0             	movzwl %ax,%eax
   140e6:	52                   	push   %edx
   140e7:	50                   	push   %eax
   140e8:	e8 7d ff ff ff       	call   1406a <outb>
   140ed:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 24));		// LBA参数的24~31位
   140f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   140f3:	c1 e8 18             	shr    $0x18,%eax
   140f6:	0f b6 d0             	movzbl %al,%edx
   140f9:	8b 45 08             	mov    0x8(%ebp),%eax
   140fc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14100:	83 c0 03             	add    $0x3,%eax
   14103:	0f b7 c0             	movzwl %ax,%eax
   14106:	52                   	push   %edx
   14107:	50                   	push   %eax
   14108:	e8 5d ff ff ff       	call   1406a <outb>
   1410d:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), 0);									// 高于32位不支持
   14110:	8b 45 08             	mov    0x8(%ebp),%eax
   14113:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14117:	83 c0 04             	add    $0x4,%eax
   1411a:	0f b7 c0             	movzwl %ax,%eax
   1411d:	6a 00                	push   $0x0
   1411f:	50                   	push   %eax
   14120:	e8 45 ff ff ff       	call   1406a <outb>
   14125:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), 0);										// 高于32位不支持
   14128:	8b 45 08             	mov    0x8(%ebp),%eax
   1412b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1412f:	83 c0 05             	add    $0x5,%eax
   14132:	0f b7 c0             	movzwl %ax,%eax
   14135:	6a 00                	push   $0x0
   14137:	50                   	push   %eax
   14138:	e8 2d ff ff ff       	call   1406a <outb>
   1413d:	83 c4 08             	add    $0x8,%esp
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count));		// 扇区数量低8位
   14140:	8b 45 10             	mov    0x10(%ebp),%eax
   14143:	0f b6 d0             	movzbl %al,%edx
   14146:	8b 45 08             	mov    0x8(%ebp),%eax
   14149:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1414d:	83 c0 02             	add    $0x2,%eax
   14150:	0f b7 c0             	movzwl %ax,%eax
   14153:	52                   	push   %edx
   14154:	50                   	push   %eax
   14155:	e8 10 ff ff ff       	call   1406a <outb>
   1415a:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 0));			// LBA参数的0-7
   1415d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14160:	0f b6 d0             	movzbl %al,%edx
   14163:	8b 45 08             	mov    0x8(%ebp),%eax
   14166:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1416a:	83 c0 03             	add    $0x3,%eax
   1416d:	0f b7 c0             	movzwl %ax,%eax
   14170:	52                   	push   %edx
   14171:	50                   	push   %eax
   14172:	e8 f3 fe ff ff       	call   1406a <outb>
   14177:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), (uint8_t) (start_sector >> 8));		// LBA参数的8-15位
   1417a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1417d:	c1 e8 08             	shr    $0x8,%eax
   14180:	0f b6 d0             	movzbl %al,%edx
   14183:	8b 45 08             	mov    0x8(%ebp),%eax
   14186:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1418a:	83 c0 04             	add    $0x4,%eax
   1418d:	0f b7 c0             	movzwl %ax,%eax
   14190:	52                   	push   %edx
   14191:	50                   	push   %eax
   14192:	e8 d3 fe ff ff       	call   1406a <outb>
   14197:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), (uint8_t) (start_sector >> 16));		// LBA参数的16-23位
   1419a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1419d:	c1 e8 10             	shr    $0x10,%eax
   141a0:	0f b6 d0             	movzbl %al,%edx
   141a3:	8b 45 08             	mov    0x8(%ebp),%eax
   141a6:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141aa:	83 c0 05             	add    $0x5,%eax
   141ad:	0f b7 c0             	movzwl %ax,%eax
   141b0:	52                   	push   %edx
   141b1:	50                   	push   %eax
   141b2:	e8 b3 fe ff ff       	call   1406a <outb>
   141b7:	83 c4 08             	add    $0x8,%esp

	// 选择对应的主-从磁盘
	outb(DISK_CMD(disk), (uint8_t)cmd);
   141ba:	8b 45 14             	mov    0x14(%ebp),%eax
   141bd:	0f b6 d0             	movzbl %al,%edx
   141c0:	8b 45 08             	mov    0x8(%ebp),%eax
   141c3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141c7:	83 c0 07             	add    $0x7,%eax
   141ca:	0f b7 c0             	movzwl %ax,%eax
   141cd:	52                   	push   %edx
   141ce:	50                   	push   %eax
   141cf:	e8 96 fe ff ff       	call   1406a <outb>
   141d4:	83 c4 08             	add    $0x8,%esp
}
   141d7:	90                   	nop
   141d8:	c9                   	leave  
   141d9:	c3                   	ret    

000141da <data_read_data>:

/**
 * 读取ATA数据端口
 */
static inline void data_read_data (disk_t * disk, void * buf, int size) {
   141da:	55                   	push   %ebp
   141db:	89 e5                	mov    %esp,%ebp
   141dd:	53                   	push   %ebx
   141de:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   141e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   141e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int i = 0; i < size / 2; i++) {
   141e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   141ee:	eb 23                	jmp    14213 <data_read_data+0x39>
        *c++ = inw(DISK_DATA(disk));
   141f0:	8b 45 08             	mov    0x8(%ebp),%eax
   141f3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141f7:	0f b7 c0             	movzwl %ax,%eax
   141fa:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   141fd:	8d 53 02             	lea    0x2(%ebx),%edx
   14200:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14203:	50                   	push   %eax
   14204:	e8 42 fe ff ff       	call   1404b <inw>
   14209:	83 c4 04             	add    $0x4,%esp
   1420c:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < size / 2; i++) {
   1420f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14213:	8b 45 10             	mov    0x10(%ebp),%eax
   14216:	89 c2                	mov    %eax,%edx
   14218:	c1 ea 1f             	shr    $0x1f,%edx
   1421b:	01 d0                	add    %edx,%eax
   1421d:	d1 f8                	sar    %eax
   1421f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   14222:	7c cc                	jl     141f0 <data_read_data+0x16>
    }
}
   14224:	90                   	nop
   14225:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14228:	c9                   	leave  
   14229:	c3                   	ret    

0001422a <data_write_data>:

/**
 * 读取ATA数据端口
 */
static inline void data_write_data (disk_t * disk, void * buf, int size) {
   1422a:	55                   	push   %ebp
   1422b:	89 e5                	mov    %esp,%ebp
   1422d:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   14230:	8b 45 0c             	mov    0xc(%ebp),%eax
   14233:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size / 2; i++) {
   14236:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1423d:	eb 27                	jmp    14266 <data_write_data+0x3c>
        outw(DISK_DATA(disk), *c++);
   1423f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14242:	8d 50 02             	lea    0x2(%eax),%edx
   14245:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14248:	0f b7 00             	movzwl (%eax),%eax
   1424b:	0f b7 d0             	movzwl %ax,%edx
   1424e:	8b 45 08             	mov    0x8(%ebp),%eax
   14251:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14255:	0f b7 c0             	movzwl %ax,%eax
   14258:	52                   	push   %edx
   14259:	50                   	push   %eax
   1425a:	e8 2a fe ff ff       	call   14089 <outw>
   1425f:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < size / 2; i++) {
   14262:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   14266:	8b 45 10             	mov    0x10(%ebp),%eax
   14269:	89 c2                	mov    %eax,%edx
   1426b:	c1 ea 1f             	shr    $0x1f,%edx
   1426e:	01 d0                	add    %edx,%eax
   14270:	d1 f8                	sar    %eax
   14272:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   14275:	7c c8                	jl     1423f <data_write_data+0x15>
    }
}
   14277:	90                   	nop
   14278:	c9                   	leave  
   14279:	c3                   	ret    

0001427a <data_wait_data>:

/**
 * @brief 等待磁盘有数据到达
 */
static inline int data_wait_data (disk_t * disk) {
   1427a:	55                   	push   %ebp
   1427b:	89 e5                	mov    %esp,%ebp
   1427d:	83 ec 10             	sub    $0x10,%esp
    uint8_t status;
	do {
        // 等待数据或者有错误
        status = inb(DISK_STATUS(disk));
   14280:	8b 45 08             	mov    0x8(%ebp),%eax
   14283:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14287:	83 c0 07             	add    $0x7,%eax
   1428a:	0f b7 c0             	movzwl %ax,%eax
   1428d:	50                   	push   %eax
   1428e:	e8 9b fd ff ff       	call   1402e <inb>
   14293:	83 c4 04             	add    $0x4,%esp
   14296:	88 45 ff             	mov    %al,-0x1(%ebp)
        if ((status & (DISK_STATUS_BUSY | DISK_STATUS_DRQ | DISK_STATUS_ERR))
   14299:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   1429d:	25 89 00 00 00       	and    $0x89,%eax
   142a2:	3d 80 00 00 00       	cmp    $0x80,%eax
   142a7:	75 02                	jne    142ab <data_wait_data+0x31>
        status = inb(DISK_STATUS(disk));
   142a9:	eb d5                	jmp    14280 <data_wait_data+0x6>
                        != DISK_STATUS_BUSY) {
            break;
   142ab:	90                   	nop
        }
    }while (1);

    // 检查是否有错误
    return (status & DISK_STATUS_ERR) ? -1 : 0;
   142ac:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   142b0:	83 e0 01             	and    $0x1,%eax
   142b3:	85 c0                	test   %eax,%eax
   142b5:	74 07                	je     142be <data_wait_data+0x44>
   142b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   142bc:	eb 05                	jmp    142c3 <data_wait_data+0x49>
   142be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   142c3:	c9                   	leave  
   142c4:	c3                   	ret    

000142c5 <print_disk_info>:

/**
 * @brief 打印磁盘信息
 */
static void print_disk_info (disk_t * disk) {
   142c5:	55                   	push   %ebp
   142c6:	89 e5                	mov    %esp,%ebp
   142c8:	53                   	push   %ebx
   142c9:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s:", disk->name);
   142cc:	8b 45 08             	mov    0x8(%ebp),%eax
   142cf:	83 ec 08             	sub    $0x8,%esp
   142d2:	50                   	push   %eax
   142d3:	68 60 94 01 00       	push   $0x19460
   142d8:	e8 c6 45 00 00       	call   188a3 <log_printf>
   142dd:	83 c4 10             	add    $0x10,%esp
    log_printf("  port_base: %x", disk->port_base);
   142e0:	8b 45 08             	mov    0x8(%ebp),%eax
   142e3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142e7:	0f b7 c0             	movzwl %ax,%eax
   142ea:	83 ec 08             	sub    $0x8,%esp
   142ed:	50                   	push   %eax
   142ee:	68 64 94 01 00       	push   $0x19464
   142f3:	e8 ab 45 00 00       	call   188a3 <log_printf>
   142f8:	83 c4 10             	add    $0x10,%esp
    log_printf("  total_size: %d m", disk->sector_count * disk->sector_size / 1024 /1024);
   142fb:	8b 45 08             	mov    0x8(%ebp),%eax
   142fe:	8b 50 2c             	mov    0x2c(%eax),%edx
   14301:	8b 45 08             	mov    0x8(%ebp),%eax
   14304:	8b 40 28             	mov    0x28(%eax),%eax
   14307:	0f af c2             	imul   %edx,%eax
   1430a:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   14310:	85 c0                	test   %eax,%eax
   14312:	0f 48 c2             	cmovs  %edx,%eax
   14315:	c1 f8 14             	sar    $0x14,%eax
   14318:	83 ec 08             	sub    $0x8,%esp
   1431b:	50                   	push   %eax
   1431c:	68 74 94 01 00       	push   $0x19474
   14321:	e8 7d 45 00 00       	call   188a3 <log_printf>
   14326:	83 c4 10             	add    $0x10,%esp
    log_printf("  drive: %s", disk->drive == DISK_DISK_MASTER ? "Master" : "Slave");
   14329:	8b 45 08             	mov    0x8(%ebp),%eax
   1432c:	8b 40 20             	mov    0x20(%eax),%eax
   1432f:	85 c0                	test   %eax,%eax
   14331:	75 07                	jne    1433a <print_disk_info+0x75>
   14333:	b8 87 94 01 00       	mov    $0x19487,%eax
   14338:	eb 05                	jmp    1433f <print_disk_info+0x7a>
   1433a:	b8 8e 94 01 00       	mov    $0x1948e,%eax
   1433f:	83 ec 08             	sub    $0x8,%esp
   14342:	50                   	push   %eax
   14343:	68 94 94 01 00       	push   $0x19494
   14348:	e8 56 45 00 00       	call   188a3 <log_printf>
   1434d:	83 c4 10             	add    $0x10,%esp

    // 显示分区信息
    log_printf("  Part info:");
   14350:	83 ec 0c             	sub    $0xc,%esp
   14353:	68 a0 94 01 00       	push   $0x194a0
   14358:	e8 46 45 00 00       	call   188a3 <log_printf>
   1435d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   14360:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14367:	eb 4e                	jmp    143b7 <print_disk_info+0xf2>
        partinfo_t * part_info = disk->partinfo + i;
   14369:	8b 45 08             	mov    0x8(%ebp),%eax
   1436c:	8d 48 30             	lea    0x30(%eax),%ecx
   1436f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14372:	89 d0                	mov    %edx,%eax
   14374:	01 c0                	add    %eax,%eax
   14376:	01 d0                	add    %edx,%eax
   14378:	c1 e0 04             	shl    $0x4,%eax
   1437b:	01 c8                	add    %ecx,%eax
   1437d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (part_info->type != FS_INVALID) {
   14380:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14383:	8b 40 24             	mov    0x24(%eax),%eax
   14386:	85 c0                	test   %eax,%eax
   14388:	74 29                	je     143b3 <print_disk_info+0xee>
            log_printf("    %s: type: %x, start sector: %d, count %d",
   1438a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1438d:	8b 58 2c             	mov    0x2c(%eax),%ebx
   14390:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14393:	8b 48 28             	mov    0x28(%eax),%ecx
                    part_info->name, part_info->type,
   14396:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14399:	8b 50 24             	mov    0x24(%eax),%edx
   1439c:	8b 45 f0             	mov    -0x10(%ebp),%eax
            log_printf("    %s: type: %x, start sector: %d, count %d",
   1439f:	83 ec 0c             	sub    $0xc,%esp
   143a2:	53                   	push   %ebx
   143a3:	51                   	push   %ecx
   143a4:	52                   	push   %edx
   143a5:	50                   	push   %eax
   143a6:	68 b0 94 01 00       	push   $0x194b0
   143ab:	e8 f3 44 00 00       	call   188a3 <log_printf>
   143b0:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   143b3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   143b7:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   143bb:	7e ac                	jle    14369 <print_disk_info+0xa4>
                    part_info->start_sector, part_info->total_sector);
        }
    }
}
   143bd:	90                   	nop
   143be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   143c1:	c9                   	leave  
   143c2:	c3                   	ret    

000143c3 <detect_part_info>:

/**
 * 获取指定序号的分区信息
 * 注意，该操作依赖物理分区分配，如果设备的分区结构有变化，则序号也会改变，得到的结果不同
 */
static int detect_part_info(disk_t * disk) {
   143c3:	55                   	push   %ebp
   143c4:	89 e5                	mov    %esp,%ebp
   143c6:	81 ec 18 02 00 00    	sub    $0x218,%esp
    mbr_t mbr;

    // 读取mbr区
    data_send_cmd(disk, 0, 1, DISK_CMD_READ);
   143cc:	6a 24                	push   $0x24
   143ce:	6a 01                	push   $0x1
   143d0:	6a 00                	push   $0x0
   143d2:	ff 75 08             	pushl  0x8(%ebp)
   143d5:	e8 d0 fc ff ff       	call   140aa <data_send_cmd>
   143da:	83 c4 10             	add    $0x10,%esp
    int err = data_wait_data(disk);
   143dd:	ff 75 08             	pushl  0x8(%ebp)
   143e0:	e8 95 fe ff ff       	call   1427a <data_wait_data>
   143e5:	83 c4 04             	add    $0x4,%esp
   143e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   143eb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   143ef:	79 18                	jns    14409 <detect_part_info+0x46>
        log_printf("read mbr failed");
   143f1:	83 ec 0c             	sub    $0xc,%esp
   143f4:	68 dd 94 01 00       	push   $0x194dd
   143f9:	e8 a5 44 00 00       	call   188a3 <log_printf>
   143fe:	83 c4 10             	add    $0x10,%esp
        return err;
   14401:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14404:	e9 d1 00 00 00       	jmp    144da <detect_part_info+0x117>
    }
    data_read_data(disk, &mbr, sizeof(mbr));
   14409:	83 ec 04             	sub    $0x4,%esp
   1440c:	68 00 02 00 00       	push   $0x200
   14411:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14417:	50                   	push   %eax
   14418:	ff 75 08             	pushl  0x8(%ebp)
   1441b:	e8 ba fd ff ff       	call   141da <data_read_data>
   14420:	83 c4 10             	add    $0x10,%esp

	// 遍历4个主分区描述，不考虑支持扩展分区
	part_item_t * item = mbr.part_item;
   14423:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14429:	05 be 01 00 00       	add    $0x1be,%eax
   1442e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    partinfo_t * part_info = disk->partinfo + 1;
   14431:	8b 45 08             	mov    0x8(%ebp),%eax
   14434:	83 c0 30             	add    $0x30,%eax
   14437:	83 c0 30             	add    $0x30,%eax
   1443a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   1443d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   14444:	e9 87 00 00 00       	jmp    144d0 <detect_part_info+0x10d>
		part_info->type = item->system_id;
   14449:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1444c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   14450:	0f b6 d0             	movzbl %al,%edx
   14453:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14456:	89 50 24             	mov    %edx,0x24(%eax)

        // 没有分区，清空part_info
		if (part_info->type == FS_INVALID) {
   14459:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1445c:	8b 40 24             	mov    0x24(%eax),%eax
   1445f:	85 c0                	test   %eax,%eax
   14461:	75 20                	jne    14483 <detect_part_info+0xc0>
			part_info->total_sector = 0;
   14463:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14466:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            part_info->start_sector = 0;
   1446d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14470:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            part_info->disk = (disk_t *)0;
   14477:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1447a:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   14481:	eb 41                	jmp    144c4 <detect_part_info+0x101>
        } else {
            // 在主分区中找到，复制信息
            kernel_sprintf(part_info->name, "%s%d", disk->name, i + 1);
   14483:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14486:	8d 48 01             	lea    0x1(%eax),%ecx
   14489:	8b 55 08             	mov    0x8(%ebp),%edx
   1448c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1448f:	51                   	push   %ecx
   14490:	52                   	push   %edx
   14491:	68 ed 94 01 00       	push   $0x194ed
   14496:	50                   	push   %eax
   14497:	e8 3b 40 00 00       	call   184d7 <kernel_sprintf>
   1449c:	83 c4 10             	add    $0x10,%esp
            part_info->start_sector = item->relative_sectors;
   1449f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   144a2:	8b 40 08             	mov    0x8(%eax),%eax
   144a5:	89 c2                	mov    %eax,%edx
   144a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144aa:	89 50 28             	mov    %edx,0x28(%eax)
            part_info->total_sector = item->total_sectors;
   144ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
   144b0:	8b 40 0c             	mov    0xc(%eax),%eax
   144b3:	89 c2                	mov    %eax,%edx
   144b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144b8:	89 50 2c             	mov    %edx,0x2c(%eax)
            part_info->disk = disk;
   144bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144be:	8b 55 08             	mov    0x8(%ebp),%edx
   144c1:	89 50 20             	mov    %edx,0x20(%eax)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   144c4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   144c8:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   144cc:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   144d0:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   144d4:	0f 8e 6f ff ff ff    	jle    14449 <detect_part_info+0x86>
        }
	}
}
   144da:	c9                   	leave  
   144db:	c3                   	ret    

000144dc <identify_disk>:

/**
 * @brief 检测磁盘相关的信息
 */
static int identify_disk (disk_t * disk) {
   144dc:	55                   	push   %ebp
   144dd:	89 e5                	mov    %esp,%ebp
   144df:	81 ec 18 02 00 00    	sub    $0x218,%esp
    data_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   144e5:	68 ec 00 00 00       	push   $0xec
   144ea:	6a 00                	push   $0x0
   144ec:	6a 00                	push   $0x0
   144ee:	ff 75 08             	pushl  0x8(%ebp)
   144f1:	e8 b4 fb ff ff       	call   140aa <data_send_cmd>
   144f6:	83 c4 10             	add    $0x10,%esp

    // 检测状态，如果为0，则控制器不存在
    int err = inb(DISK_STATUS(disk));
   144f9:	8b 45 08             	mov    0x8(%ebp),%eax
   144fc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14500:	83 c0 07             	add    $0x7,%eax
   14503:	0f b7 c0             	movzwl %ax,%eax
   14506:	50                   	push   %eax
   14507:	e8 22 fb ff ff       	call   1402e <inb>
   1450c:	83 c4 04             	add    $0x4,%esp
   1450f:	0f b6 c0             	movzbl %al,%eax
   14512:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   14515:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14519:	75 1e                	jne    14539 <identify_disk+0x5d>
        log_printf("%s doesn't exist\n", disk->name);
   1451b:	8b 45 08             	mov    0x8(%ebp),%eax
   1451e:	83 ec 08             	sub    $0x8,%esp
   14521:	50                   	push   %eax
   14522:	68 f2 94 01 00       	push   $0x194f2
   14527:	e8 77 43 00 00       	call   188a3 <log_printf>
   1452c:	83 c4 10             	add    $0x10,%esp
        return -1;
   1452f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14534:	e9 c8 00 00 00       	jmp    14601 <identify_disk+0x125>
    }

    // 等待数据就绪, 此时中断还未开启，因此暂时可以使用查询模式
    err = data_wait_data(disk);
   14539:	83 ec 0c             	sub    $0xc,%esp
   1453c:	ff 75 08             	pushl  0x8(%ebp)
   1453f:	e8 36 fd ff ff       	call   1427a <data_wait_data>
   14544:	83 c4 10             	add    $0x10,%esp
   14547:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   1454a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1454e:	79 1c                	jns    1456c <identify_disk+0x90>
        log_printf("disk[%s]: read failed!\n", disk->name);
   14550:	8b 45 08             	mov    0x8(%ebp),%eax
   14553:	83 ec 08             	sub    $0x8,%esp
   14556:	50                   	push   %eax
   14557:	68 04 95 01 00       	push   $0x19504
   1455c:	e8 42 43 00 00       	call   188a3 <log_printf>
   14561:	83 c4 10             	add    $0x10,%esp
        return err;
   14564:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14567:	e9 95 00 00 00       	jmp    14601 <identify_disk+0x125>
    }

    // 读取返回的数据，特别是uint16_t 100 through 103
    // 测试用的盘： 总共102400 = 0x19000， 实测会多一个扇区，为vhd磁盘格式增加的一个扇区
    uint16_t buf[256];
    data_read_data(disk, buf, sizeof(buf));
   1456c:	83 ec 04             	sub    $0x4,%esp
   1456f:	68 00 02 00 00       	push   $0x200
   14574:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   1457a:	50                   	push   %eax
   1457b:	ff 75 08             	pushl  0x8(%ebp)
   1457e:	e8 57 fc ff ff       	call   141da <data_read_data>
   14583:	83 c4 10             	add    $0x10,%esp
    disk->sector_count = *(uint32_t *)(buf + 100);
   14586:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   1458c:	05 c8 00 00 00       	add    $0xc8,%eax
   14591:	8b 00                	mov    (%eax),%eax
   14593:	89 c2                	mov    %eax,%edx
   14595:	8b 45 08             	mov    0x8(%ebp),%eax
   14598:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;            // 固定为512字节大小
   1459b:	8b 45 08             	mov    0x8(%ebp),%eax
   1459e:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    // 分区0保存了整个磁盘的信息
    partinfo_t * part = disk->partinfo + 0;
   145a5:	8b 45 08             	mov    0x8(%ebp),%eax
   145a8:	83 c0 30             	add    $0x30,%eax
   145ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part->disk = disk;
   145ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145b1:	8b 55 08             	mov    0x8(%ebp),%edx
   145b4:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part->name, "%s%d", disk->name, 0);
   145b7:	8b 55 08             	mov    0x8(%ebp),%edx
   145ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145bd:	6a 00                	push   $0x0
   145bf:	52                   	push   %edx
   145c0:	68 ed 94 01 00       	push   $0x194ed
   145c5:	50                   	push   %eax
   145c6:	e8 0c 3f 00 00       	call   184d7 <kernel_sprintf>
   145cb:	83 c4 10             	add    $0x10,%esp
    part->start_sector = 0;
   145ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145d1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part->total_sector = disk->sector_count;
   145d8:	8b 45 08             	mov    0x8(%ebp),%eax
   145db:	8b 50 2c             	mov    0x2c(%eax),%edx
   145de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145e1:	89 50 2c             	mov    %edx,0x2c(%eax)
    part->type = FS_INVALID;
   145e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145e7:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    // 接下来识别硬盘上的分区信息
    detect_part_info(disk);
   145ee:	83 ec 0c             	sub    $0xc,%esp
   145f1:	ff 75 08             	pushl  0x8(%ebp)
   145f4:	e8 ca fd ff ff       	call   143c3 <detect_part_info>
   145f9:	83 c4 10             	add    $0x10,%esp
    return 0;
   145fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14601:	c9                   	leave  
   14602:	c3                   	ret    

00014603 <disk_init>:

/**
 * @brief 磁盘初始化及检测
 * 以下只是将相关磁盘相关的信息给读取到内存中
 */
void disk_init (void) {
   14603:	55                   	push   %ebp
   14604:	89 e5                	mov    %esp,%ebp
   14606:	83 ec 18             	sub    $0x18,%esp
    log_printf("Checking disk...");
   14609:	83 ec 0c             	sub    $0xc,%esp
   1460c:	68 1c 95 01 00       	push   $0x1951c
   14611:	e8 8d 42 00 00       	call   188a3 <log_printf>
   14616:	83 c4 10             	add    $0x10,%esp

    // 清空所有disk，以免数据错乱。不过引导程序应该有清0的，这里为安全再清一遍
    kernel_memset(disk_buf, 0, sizeof(disk_buf));
   14619:	83 ec 04             	sub    $0x4,%esp
   1461c:	68 50 02 00 00       	push   $0x250
   14621:	6a 00                	push   $0x0
   14623:	68 40 63 03 00       	push   $0x36340
   14628:	e8 cc 3c 00 00       	call   182f9 <kernel_memset>
   1462d:	83 c4 10             	add    $0x10,%esp

    // 信号量和锁
    mutex_init(&mutex);
   14630:	83 ec 0c             	sub    $0xc,%esp
   14633:	68 90 65 03 00       	push   $0x36590
   14638:	e8 71 35 00 00       	call   17bae <mutex_init>
   1463d:	83 c4 10             	add    $0x10,%esp
    sem_init(&op_sem, 0);       // 没有操作完成
   14640:	83 ec 08             	sub    $0x8,%esp
   14643:	6a 00                	push   $0x0
   14645:	68 a4 65 03 00       	push   $0x365a4
   1464a:	e8 ee 36 00 00       	call   17d3d <sem_init>
   1464f:	83 c4 10             	add    $0x10,%esp

    // 检测各个硬盘, 读取硬件是否存在，有其相关信息
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   14652:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14659:	e9 90 00 00 00       	jmp    146ee <disk_init+0xeb>
        disk_t * disk = disk_buf + i;
   1465e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14661:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14667:	05 40 63 03 00       	add    $0x36340,%eax
   1466c:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 先初始化各字段
        kernel_sprintf(disk->name, "sd%c", i + 'a');
   1466f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14672:	8d 50 61             	lea    0x61(%eax),%edx
   14675:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14678:	83 ec 04             	sub    $0x4,%esp
   1467b:	52                   	push   %edx
   1467c:	68 2d 95 01 00       	push   $0x1952d
   14681:	50                   	push   %eax
   14682:	e8 50 3e 00 00       	call   184d7 <kernel_sprintf>
   14687:	83 c4 10             	add    $0x10,%esp
        disk->drive = (i == 0) ? DISK_DISK_MASTER : DISK_DISK_SLAVE;
   1468a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1468e:	75 07                	jne    14697 <disk_init+0x94>
   14690:	ba 00 00 00 00       	mov    $0x0,%edx
   14695:	eb 05                	jmp    1469c <disk_init+0x99>
   14697:	ba 10 00 00 00       	mov    $0x10,%edx
   1469c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1469f:	89 50 20             	mov    %edx,0x20(%eax)
        disk->port_base = IOBASE_PRIMARY;
   146a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146a5:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
        disk->mutex = &mutex;
   146ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ae:	c7 80 20 01 00 00 90 	movl   $0x36590,0x120(%eax)
   146b5:	65 03 00 
        disk->op_sem = &op_sem;
   146b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146bb:	c7 80 24 01 00 00 a4 	movl   $0x365a4,0x124(%eax)
   146c2:	65 03 00 

        // 识别磁盘，有错不处理，直接跳过
        int err = identify_disk(disk);
   146c5:	83 ec 0c             	sub    $0xc,%esp
   146c8:	ff 75 f0             	pushl  -0x10(%ebp)
   146cb:	e8 0c fe ff ff       	call   144dc <identify_disk>
   146d0:	83 c4 10             	add    $0x10,%esp
   146d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err == 0) {
   146d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   146da:	75 0e                	jne    146ea <disk_init+0xe7>
            print_disk_info(disk);
   146dc:	83 ec 0c             	sub    $0xc,%esp
   146df:	ff 75 f0             	pushl  -0x10(%ebp)
   146e2:	e8 de fb ff ff       	call   142c5 <print_disk_info>
   146e7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   146ea:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   146ee:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   146f2:	0f 8e 66 ff ff ff    	jle    1465e <disk_init+0x5b>
        }
    }
}
   146f8:	90                   	nop
   146f9:	c9                   	leave  
   146fa:	c3                   	ret    

000146fb <disk_open>:


/**
 * @brief 打开磁盘设备
 */
int disk_open (device_t * dev) {
   146fb:	55                   	push   %ebp
   146fc:	89 e5                	mov    %esp,%ebp
   146fe:	83 ec 18             	sub    $0x18,%esp
    int disk_idx = (dev->minor >> 4) - 0xa;
   14701:	8b 45 08             	mov    0x8(%ebp),%eax
   14704:	8b 40 08             	mov    0x8(%eax),%eax
   14707:	c1 f8 04             	sar    $0x4,%eax
   1470a:	83 e8 0a             	sub    $0xa,%eax
   1470d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int part_idx = dev->minor & 0xF;
   14710:	8b 45 08             	mov    0x8(%ebp),%eax
   14713:	8b 40 08             	mov    0x8(%eax),%eax
   14716:	83 e0 0f             	and    $0xf,%eax
   14719:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if ((disk_idx >= DISK_CNT) || (part_idx >= DISK_PRIMARY_PART_CNT)) {
   1471c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14720:	7f 06                	jg     14728 <disk_open+0x2d>
   14722:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14726:	7e 21                	jle    14749 <disk_open+0x4e>
        log_printf("device minor error: %d", dev->minor);
   14728:	8b 45 08             	mov    0x8(%ebp),%eax
   1472b:	8b 40 08             	mov    0x8(%eax),%eax
   1472e:	83 ec 08             	sub    $0x8,%esp
   14731:	50                   	push   %eax
   14732:	68 32 95 01 00       	push   $0x19532
   14737:	e8 67 41 00 00       	call   188a3 <log_printf>
   1473c:	83 c4 10             	add    $0x10,%esp
        return -1;
   1473f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14744:	e9 a5 00 00 00       	jmp    147ee <disk_open+0xf3>
    }

    disk_t * disk = disk_buf + disk_idx;
   14749:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1474c:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14752:	05 40 63 03 00       	add    $0x36340,%eax
   14757:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk->sector_size == 0) {
   1475a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1475d:	8b 40 28             	mov    0x28(%eax),%eax
   14760:	85 c0                	test   %eax,%eax
   14762:	75 1e                	jne    14782 <disk_open+0x87>
        log_printf("disk not exist. device:sd%x", dev->minor);
   14764:	8b 45 08             	mov    0x8(%ebp),%eax
   14767:	8b 40 08             	mov    0x8(%eax),%eax
   1476a:	83 ec 08             	sub    $0x8,%esp
   1476d:	50                   	push   %eax
   1476e:	68 49 95 01 00       	push   $0x19549
   14773:	e8 2b 41 00 00       	call   188a3 <log_printf>
   14778:	83 c4 10             	add    $0x10,%esp
        return -1;
   1477b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14780:	eb 6c                	jmp    147ee <disk_open+0xf3>
    }

    partinfo_t * part_info = disk->partinfo + part_idx;
   14782:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14785:	8d 48 30             	lea    0x30(%eax),%ecx
   14788:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1478b:	89 d0                	mov    %edx,%eax
   1478d:	01 c0                	add    %eax,%eax
   1478f:	01 d0                	add    %edx,%eax
   14791:	c1 e0 04             	shl    $0x4,%eax
   14794:	01 c8                	add    %ecx,%eax
   14796:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (part_info->total_sector == 0) {
   14799:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1479c:	8b 40 2c             	mov    0x2c(%eax),%eax
   1479f:	85 c0                	test   %eax,%eax
   147a1:	75 1e                	jne    147c1 <disk_open+0xc6>
        log_printf("part not exist. device:sd%x", dev->minor);
   147a3:	8b 45 08             	mov    0x8(%ebp),%eax
   147a6:	8b 40 08             	mov    0x8(%eax),%eax
   147a9:	83 ec 08             	sub    $0x8,%esp
   147ac:	50                   	push   %eax
   147ad:	68 65 95 01 00       	push   $0x19565
   147b2:	e8 ec 40 00 00       	call   188a3 <log_printf>
   147b7:	83 c4 10             	add    $0x10,%esp
        return -1;
   147ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147bf:	eb 2d                	jmp    147ee <disk_open+0xf3>
    }

    // 磁盘存在，建立关联
    dev->data = part_info;
   147c1:	8b 45 08             	mov    0x8(%ebp),%eax
   147c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
   147c7:	89 50 0c             	mov    %edx,0xc(%eax)
    irq_install(IRQ14_HARDDISK_PRIMARY, exception_handler_ide_primary);
   147ca:	83 ec 08             	sub    $0x8,%esp
   147cd:	68 c4 02 01 00       	push   $0x102c4
   147d2:	6a 2e                	push   $0x2e
   147d4:	e8 9a e7 ff ff       	call   12f73 <irq_install>
   147d9:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ14_HARDDISK_PRIMARY);
   147dc:	83 ec 0c             	sub    $0xc,%esp
   147df:	6a 2e                	push   $0x2e
   147e1:	e8 c7 e7 ff ff       	call   12fad <irq_enable>
   147e6:	83 c4 10             	add    $0x10,%esp
    return 0;
   147e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   147ee:	c9                   	leave  
   147ef:	c3                   	ret    

000147f0 <disk_read>:

/**
 * @brief 读磁盘
 */
int disk_read (device_t * dev, int start_sector, char * buf, int count) {
   147f0:	55                   	push   %ebp
   147f1:	89 e5                	mov    %esp,%ebp
   147f3:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   147f6:	8b 45 08             	mov    0x8(%ebp),%eax
   147f9:	8b 40 0c             	mov    0xc(%eax),%eax
   147fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   147ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14803:	75 21                	jne    14826 <disk_read+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14805:	8b 45 08             	mov    0x8(%ebp),%eax
   14808:	8b 40 08             	mov    0x8(%eax),%eax
   1480b:	83 ec 08             	sub    $0x8,%esp
   1480e:	50                   	push   %eax
   1480f:	68 84 95 01 00       	push   $0x19584
   14814:	e8 8a 40 00 00       	call   188a3 <log_printf>
   14819:	83 c4 10             	add    $0x10,%esp
        return -1;
   1481c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14821:	e9 08 01 00 00       	jmp    1492e <disk_read+0x13e>
    }

    disk_t * disk = part_info->disk;
   14826:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14829:	8b 40 20             	mov    0x20(%eax),%eax
   1482c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   1482f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14833:	75 21                	jne    14856 <disk_read+0x66>
        log_printf("No disk for device %d", dev->minor);
   14835:	8b 45 08             	mov    0x8(%ebp),%eax
   14838:	8b 40 08             	mov    0x8(%eax),%eax
   1483b:	83 ec 08             	sub    $0x8,%esp
   1483e:	50                   	push   %eax
   1483f:	68 a6 95 01 00       	push   $0x195a6
   14844:	e8 5a 40 00 00       	call   188a3 <log_printf>
   14849:	83 c4 10             	add    $0x10,%esp
        return -1;
   1484c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14851:	e9 d8 00 00 00       	jmp    1492e <disk_read+0x13e>
    }

    mutex_lock(disk->mutex);
   14856:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14859:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1485f:	83 ec 0c             	sub    $0xc,%esp
   14862:	50                   	push   %eax
   14863:	e8 74 33 00 00       	call   17bdc <mutex_lock>
   14868:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   1486b:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   14872:	00 00 00 

    int cnt;
    data_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_READ);
   14875:	8b 45 14             	mov    0x14(%ebp),%eax
   14878:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1487b:	8b 4a 28             	mov    0x28(%edx),%ecx
   1487e:	8b 55 0c             	mov    0xc(%ebp),%edx
   14881:	01 ca                	add    %ecx,%edx
   14883:	6a 24                	push   $0x24
   14885:	50                   	push   %eax
   14886:	52                   	push   %edx
   14887:	ff 75 ec             	pushl  -0x14(%ebp)
   1488a:	e8 1b f8 ff ff       	call   140aa <data_send_cmd>
   1488f:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14892:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14899:	eb 73                	jmp    1490e <disk_read+0x11e>
        // 利用信号量等待中断通知，然后再读取数据
        if (task_current()) {
   1489b:	e8 30 ce ff ff       	call   116d0 <task_current>
   148a0:	85 c0                	test   %eax,%eax
   148a2:	74 15                	je     148b9 <disk_read+0xc9>
            sem_wait(disk->op_sem);
   148a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148a7:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   148ad:	83 ec 0c             	sub    $0xc,%esp
   148b0:	50                   	push   %eax
   148b1:	e8 aa 34 00 00       	call   17d60 <sem_wait>
   148b6:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = data_wait_data(disk);
   148b9:	83 ec 0c             	sub    $0xc,%esp
   148bc:	ff 75 ec             	pushl  -0x14(%ebp)
   148bf:	e8 b6 f9 ff ff       	call   1427a <data_wait_data>
   148c4:	83 c4 10             	add    $0x10,%esp
   148c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   148ca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   148ce:	79 19                	jns    148e9 <disk_read+0xf9>
            log_printf("disk(%s) read error: start sect %d, count %d", disk->name, start_sector, count);
   148d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148d3:	ff 75 14             	pushl  0x14(%ebp)
   148d6:	ff 75 0c             	pushl  0xc(%ebp)
   148d9:	50                   	push   %eax
   148da:	68 bc 95 01 00       	push   $0x195bc
   148df:	e8 bf 3f 00 00       	call   188a3 <log_printf>
   148e4:	83 c4 10             	add    $0x10,%esp
            break;
   148e7:	eb 2d                	jmp    14916 <disk_read+0x126>
        }

        // 此处再读取数据
        data_read_data(disk, buf, disk->sector_size);
   148e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148ec:	8b 40 28             	mov    0x28(%eax),%eax
   148ef:	83 ec 04             	sub    $0x4,%esp
   148f2:	50                   	push   %eax
   148f3:	ff 75 10             	pushl  0x10(%ebp)
   148f6:	ff 75 ec             	pushl  -0x14(%ebp)
   148f9:	e8 dc f8 ff ff       	call   141da <data_read_data>
   148fe:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14901:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14905:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14908:	8b 40 28             	mov    0x28(%eax),%eax
   1490b:	01 45 10             	add    %eax,0x10(%ebp)
   1490e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14911:	3b 45 14             	cmp    0x14(%ebp),%eax
   14914:	7c 85                	jl     1489b <disk_read+0xab>
    }

    mutex_unlock(disk->mutex);
   14916:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14919:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1491f:	83 ec 0c             	sub    $0xc,%esp
   14922:	50                   	push   %eax
   14923:	e8 4b 33 00 00       	call   17c73 <mutex_unlock>
   14928:	83 c4 10             	add    $0x10,%esp
    return cnt;
   1492b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1492e:	c9                   	leave  
   1492f:	c3                   	ret    

00014930 <disk_write>:

/**
 * @brief 写扇区
 */
int disk_write (device_t * dev, int start_sector, char * buf, int count) {
   14930:	55                   	push   %ebp
   14931:	89 e5                	mov    %esp,%ebp
   14933:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14936:	8b 45 08             	mov    0x8(%ebp),%eax
   14939:	8b 40 0c             	mov    0xc(%eax),%eax
   1493c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   1493f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14943:	75 21                	jne    14966 <disk_write+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14945:	8b 45 08             	mov    0x8(%ebp),%eax
   14948:	8b 40 08             	mov    0x8(%eax),%eax
   1494b:	83 ec 08             	sub    $0x8,%esp
   1494e:	50                   	push   %eax
   1494f:	68 84 95 01 00       	push   $0x19584
   14954:	e8 4a 3f 00 00       	call   188a3 <log_printf>
   14959:	83 c4 10             	add    $0x10,%esp
        return -1;
   1495c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14961:	e9 08 01 00 00       	jmp    14a6e <disk_write+0x13e>
    }

    disk_t * disk = part_info->disk;
   14966:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14969:	8b 40 20             	mov    0x20(%eax),%eax
   1496c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   1496f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14973:	75 21                	jne    14996 <disk_write+0x66>
        log_printf("No disk for device %d", dev->minor);
   14975:	8b 45 08             	mov    0x8(%ebp),%eax
   14978:	8b 40 08             	mov    0x8(%eax),%eax
   1497b:	83 ec 08             	sub    $0x8,%esp
   1497e:	50                   	push   %eax
   1497f:	68 a6 95 01 00       	push   $0x195a6
   14984:	e8 1a 3f 00 00       	call   188a3 <log_printf>
   14989:	83 c4 10             	add    $0x10,%esp
        return -1;
   1498c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14991:	e9 d8 00 00 00       	jmp    14a6e <disk_write+0x13e>
    }

    mutex_lock(disk->mutex);
   14996:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14999:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1499f:	83 ec 0c             	sub    $0xc,%esp
   149a2:	50                   	push   %eax
   149a3:	e8 34 32 00 00       	call   17bdc <mutex_lock>
   149a8:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   149ab:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   149b2:	00 00 00 

    int cnt;
    data_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_WRITE);
   149b5:	8b 45 14             	mov    0x14(%ebp),%eax
   149b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
   149bb:	8b 4a 28             	mov    0x28(%edx),%ecx
   149be:	8b 55 0c             	mov    0xc(%ebp),%edx
   149c1:	01 ca                	add    %ecx,%edx
   149c3:	6a 34                	push   $0x34
   149c5:	50                   	push   %eax
   149c6:	52                   	push   %edx
   149c7:	ff 75 ec             	pushl  -0x14(%ebp)
   149ca:	e8 db f6 ff ff       	call   140aa <data_send_cmd>
   149cf:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   149d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149d9:	eb 73                	jmp    14a4e <disk_write+0x11e>
        // 先写数据
        data_write_data(disk, buf, disk->sector_size);
   149db:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149de:	8b 40 28             	mov    0x28(%eax),%eax
   149e1:	83 ec 04             	sub    $0x4,%esp
   149e4:	50                   	push   %eax
   149e5:	ff 75 10             	pushl  0x10(%ebp)
   149e8:	ff 75 ec             	pushl  -0x14(%ebp)
   149eb:	e8 3a f8 ff ff       	call   1422a <data_write_data>
   149f0:	83 c4 10             	add    $0x10,%esp

        // 利用信号量等待中断通知，等待写完成
        if (task_current()) {
   149f3:	e8 d8 cc ff ff       	call   116d0 <task_current>
   149f8:	85 c0                	test   %eax,%eax
   149fa:	74 15                	je     14a11 <disk_write+0xe1>
            sem_wait(disk->op_sem);
   149fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149ff:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14a05:	83 ec 0c             	sub    $0xc,%esp
   14a08:	50                   	push   %eax
   14a09:	e8 52 33 00 00       	call   17d60 <sem_wait>
   14a0e:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = data_wait_data(disk);
   14a11:	83 ec 0c             	sub    $0xc,%esp
   14a14:	ff 75 ec             	pushl  -0x14(%ebp)
   14a17:	e8 5e f8 ff ff       	call   1427a <data_wait_data>
   14a1c:	83 c4 10             	add    $0x10,%esp
   14a1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14a22:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14a26:	79 19                	jns    14a41 <disk_write+0x111>
            log_printf("disk(%s) write error: start sect %d, count %d", disk->name, start_sector, count);
   14a28:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a2b:	ff 75 14             	pushl  0x14(%ebp)
   14a2e:	ff 75 0c             	pushl  0xc(%ebp)
   14a31:	50                   	push   %eax
   14a32:	68 ec 95 01 00       	push   $0x195ec
   14a37:	e8 67 3e 00 00       	call   188a3 <log_printf>
   14a3c:	83 c4 10             	add    $0x10,%esp
            break;
   14a3f:	eb 15                	jmp    14a56 <disk_write+0x126>
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14a41:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a45:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a48:	8b 40 28             	mov    0x28(%eax),%eax
   14a4b:	01 45 10             	add    %eax,0x10(%ebp)
   14a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a51:	3b 45 14             	cmp    0x14(%ebp),%eax
   14a54:	7c 85                	jl     149db <disk_write+0xab>
        }
    }

    mutex_unlock(disk->mutex);
   14a56:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a59:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14a5f:	83 ec 0c             	sub    $0xc,%esp
   14a62:	50                   	push   %eax
   14a63:	e8 0b 32 00 00       	call   17c73 <mutex_unlock>
   14a68:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14a6e:	c9                   	leave  
   14a6f:	c3                   	ret    

00014a70 <disk_control>:

/**
 * @brief 向磁盘发命令
 *
 */
int disk_control (device_t * dev, int cmd, int arg0, int arg1) {
   14a70:	55                   	push   %ebp
   14a71:	89 e5                	mov    %esp,%ebp
    return 0;
   14a73:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14a78:	5d                   	pop    %ebp
   14a79:	c3                   	ret    

00014a7a <disk_close>:

/**
 * @brief 关闭磁盘
 *
 */
void disk_close (device_t * dev) {
   14a7a:	55                   	push   %ebp
   14a7b:	89 e5                	mov    %esp,%ebp
}
   14a7d:	90                   	nop
   14a7e:	5d                   	pop    %ebp
   14a7f:	c3                   	ret    

00014a80 <do_handler_ide_primary>:

/**
 * @brief 磁盘主通道中断处理
 */
void do_handler_ide_primary (exception_frame_t *frame)  {
   14a80:	55                   	push   %ebp
   14a81:	89 e5                	mov    %esp,%ebp
   14a83:	83 ec 08             	sub    $0x8,%esp
    pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14a86:	83 ec 0c             	sub    $0xc,%esp
   14a89:	6a 2e                	push   $0x2e
   14a8b:	e8 0a e3 ff ff       	call   12d9a <pic_send_eoi>
   14a90:	83 c4 10             	add    $0x10,%esp
    if (task_on_op && task_current()) {
   14a93:	a1 b4 65 03 00       	mov    0x365b4,%eax
   14a98:	85 c0                	test   %eax,%eax
   14a9a:	74 19                	je     14ab5 <do_handler_ide_primary+0x35>
   14a9c:	e8 2f cc ff ff       	call   116d0 <task_current>
   14aa1:	85 c0                	test   %eax,%eax
   14aa3:	74 10                	je     14ab5 <do_handler_ide_primary+0x35>
        sem_notify(&op_sem);
   14aa5:	83 ec 0c             	sub    $0xc,%esp
   14aa8:	68 a4 65 03 00       	push   $0x365a4
   14aad:	e8 1c 33 00 00       	call   17dce <sem_notify>
   14ab2:	83 c4 10             	add    $0x10,%esp
    }
}
   14ab5:	90                   	nop
   14ab6:	c9                   	leave  
   14ab7:	c3                   	ret    

00014ab8 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14ab8:	55                   	push   %ebp
   14ab9:	89 e5                	mov    %esp,%ebp
   14abb:	83 ec 14             	sub    $0x14,%esp
   14abe:	8b 45 08             	mov    0x8(%ebp),%eax
   14ac1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14ac5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14ac9:	89 c2                	mov    %eax,%edx
   14acb:	ec                   	in     (%dx),%al
   14acc:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14acf:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14ad3:	c9                   	leave  
   14ad4:	c3                   	ret    

00014ad5 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14ad5:	55                   	push   %ebp
   14ad6:	89 e5                	mov    %esp,%ebp
   14ad8:	83 ec 08             	sub    $0x8,%esp
   14adb:	8b 55 08             	mov    0x8(%ebp),%edx
   14ade:	8b 45 0c             	mov    0xc(%ebp),%eax
   14ae1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14ae5:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14ae8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14aec:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14af0:	ee                   	out    %al,(%dx)
}
   14af1:	90                   	nop
   14af2:	c9                   	leave  
   14af3:	c3                   	ret    

00014af4 <get_key>:
        [0x34] = {'.', '>'},
        [0x35] = {'/', '?'},
        [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code) {
   14af4:	55                   	push   %ebp
   14af5:	89 e5                	mov    %esp,%ebp
   14af7:	83 ec 04             	sub    $0x4,%esp
   14afa:	8b 45 08             	mov    0x8(%ebp),%eax
   14afd:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14b00:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14b04:	83 e0 7f             	and    $0x7f,%eax
}
   14b07:	c9                   	leave  
   14b08:	c3                   	ret    

00014b09 <is_make_code>:

static inline int is_make_code(uint8_t key_code) {
   14b09:	55                   	push   %ebp
   14b0a:	89 e5                	mov    %esp,%ebp
   14b0c:	83 ec 04             	sub    $0x4,%esp
   14b0f:	8b 45 08             	mov    0x8(%ebp),%eax
   14b12:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   14b15:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14b19:	f7 d0                	not    %eax
   14b1b:	c0 e8 07             	shr    $0x7,%al
   14b1e:	0f b6 c0             	movzbl %al,%eax
}
   14b21:	c9                   	leave  
   14b22:	c3                   	ret    

00014b23 <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void) {
   14b23:	55                   	push   %ebp
   14b24:	89 e5                	mov    %esp,%ebp
   14b26:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000; 
   14b29:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14b30:	eb 14                	jmp    14b46 <kbd_wait_send_ready+0x23>
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0) {
   14b32:	6a 64                	push   $0x64
   14b34:	e8 7f ff ff ff       	call   14ab8 <inb>
   14b39:	83 c4 04             	add    $0x4,%esp
   14b3c:	0f b6 c0             	movzbl %al,%eax
   14b3f:	83 e0 02             	and    $0x2,%eax
   14b42:	85 c0                	test   %eax,%eax
   14b44:	74 0f                	je     14b55 <kbd_wait_send_ready+0x32>
    while (time_out--) {
   14b46:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14b49:	8d 50 ff             	lea    -0x1(%eax),%edx
   14b4c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14b4f:	85 c0                	test   %eax,%eax
   14b51:	75 df                	jne    14b32 <kbd_wait_send_ready+0xf>
   14b53:	eb 01                	jmp    14b56 <kbd_wait_send_ready+0x33>
            return;
   14b55:	90                   	nop
        }
    }
}
   14b56:	c9                   	leave  
   14b57:	c3                   	ret    

00014b58 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data) {
   14b58:	55                   	push   %ebp
   14b59:	89 e5                	mov    %esp,%ebp
   14b5b:	83 ec 08             	sub    $0x8,%esp
   14b5e:	8b 55 08             	mov    0x8(%ebp),%edx
   14b61:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b64:	88 55 fc             	mov    %dl,-0x4(%ebp)
   14b67:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   14b6a:	e8 b4 ff ff ff       	call   14b23 <kbd_wait_send_ready>
    outb(port, data);
   14b6f:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   14b73:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14b77:	52                   	push   %edx
   14b78:	50                   	push   %eax
   14b79:	e8 57 ff ff ff       	call   14ad5 <outb>
   14b7e:	83 c4 08             	add    $0x8,%esp
}
   14b81:	90                   	nop
   14b82:	c9                   	leave  
   14b83:	c3                   	ret    

00014b84 <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void) {
   14b84:	55                   	push   %ebp
   14b85:	89 e5                	mov    %esp,%ebp
   14b87:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14b8a:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14b91:	eb 14                	jmp    14ba7 <kbd_wait_recv_ready+0x23>
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY) {
   14b93:	6a 64                	push   $0x64
   14b95:	e8 1e ff ff ff       	call   14ab8 <inb>
   14b9a:	83 c4 04             	add    $0x4,%esp
   14b9d:	0f b6 c0             	movzbl %al,%eax
   14ba0:	83 e0 01             	and    $0x1,%eax
   14ba3:	85 c0                	test   %eax,%eax
   14ba5:	75 0f                	jne    14bb6 <kbd_wait_recv_ready+0x32>
    while (time_out--) {
   14ba7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14baa:	8d 50 ff             	lea    -0x1(%eax),%edx
   14bad:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14bb0:	85 c0                	test   %eax,%eax
   14bb2:	75 df                	jne    14b93 <kbd_wait_recv_ready+0xf>
   14bb4:	eb 01                	jmp    14bb7 <kbd_wait_recv_ready+0x33>
            return;
   14bb6:	90                   	nop
        }
    }
}
   14bb7:	c9                   	leave  
   14bb8:	c3                   	ret    

00014bb9 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void) {
   14bb9:	55                   	push   %ebp
   14bba:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14bbc:	e8 c3 ff ff ff       	call   14b84 <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   14bc1:	6a 60                	push   $0x60
   14bc3:	e8 f0 fe ff ff       	call   14ab8 <inb>
   14bc8:	83 c4 04             	add    $0x4,%esp
}
   14bcb:	c9                   	leave  
   14bcc:	c3                   	ret    

00014bcd <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status (void) {
   14bcd:	55                   	push   %ebp
   14bce:	89 e5                	mov    %esp,%ebp
   14bd0:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   14bd3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14bda:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14be1:	0f b6 c0             	movzbl %al,%eax
   14be4:	83 e0 01             	and    $0x1,%eax
   14be7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14bea:	68 ed 00 00 00       	push   $0xed
   14bef:	6a 60                	push   $0x60
   14bf1:	e8 62 ff ff ff       	call   14b58 <kbd_write>
   14bf6:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14bf9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14bfc:	0f b6 c0             	movzbl %al,%eax
   14bff:	50                   	push   %eax
   14c00:	6a 60                	push   $0x60
   14c02:	e8 51 ff ff ff       	call   14b58 <kbd_write>
   14c07:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14c0a:	e8 aa ff ff ff       	call   14bb9 <kbd_read>
}
   14c0f:	90                   	nop
   14c10:	c9                   	leave  
   14c11:	c3                   	ret    

00014c12 <do_fx_key>:

static void do_fx_key (int key) {
   14c12:	55                   	push   %ebp
   14c13:	89 e5                	mov    %esp,%ebp
   14c15:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14c18:	8b 45 08             	mov    0x8(%ebp),%eax
   14c1b:	83 e8 3b             	sub    $0x3b,%eax
   14c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14c21:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14c28:	83 e0 20             	and    $0x20,%eax
   14c2b:	84 c0                	test   %al,%al
   14c2d:	75 0e                	jne    14c3d <do_fx_key+0x2b>
   14c2f:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14c36:	83 e0 40             	and    $0x40,%eax
   14c39:	84 c0                	test   %al,%al
   14c3b:	74 0e                	je     14c4b <do_fx_key+0x39>
        tty_select(index);
   14c3d:	83 ec 0c             	sub    $0xc,%esp
   14c40:	ff 75 f4             	pushl  -0xc(%ebp)
   14c43:	e8 89 09 00 00       	call   155d1 <tty_select>
   14c48:	83 c4 10             	add    $0x10,%esp
    }
}
   14c4b:	90                   	nop
   14c4c:	c9                   	leave  
   14c4d:	c3                   	ret    

00014c4e <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key (uint8_t raw_code) {
   14c4e:	55                   	push   %ebp
   14c4f:	89 e5                	mov    %esp,%ebp
   14c51:	83 ec 28             	sub    $0x28,%esp
   14c54:	8b 45 08             	mov    0x8(%ebp),%eax
   14c57:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);		// 去掉最高位
   14c5a:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14c5e:	50                   	push   %eax
   14c5f:	e8 90 fe ff ff       	call   14af4 <get_key>
   14c64:	83 c4 04             	add    $0x4,%esp
   14c67:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code);
   14c6a:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14c6e:	50                   	push   %eax
   14c6f:	e8 95 fe ff ff       	call   14b09 <is_make_code>
   14c74:	83 c4 04             	add    $0x4,%esp
   14c77:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
	switch (key) {
   14c7a:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14c7e:	83 e8 1d             	sub    $0x1d,%eax
   14c81:	83 f8 25             	cmp    $0x25,%eax
   14c84:	0f 87 f9 00 00 00    	ja     14d83 <do_normal_key+0x135>
   14c8a:	8b 04 85 20 98 01 00 	mov    0x19820(,%eax,4),%eax
   14c91:	ff e0                	jmp    *%eax
	    // shift, alt, ctrl键，记录标志位
	case KEY_RSHIFT:
		kbd_state.rshift_press = is_make;  // 仅设置标志位
   14c93:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14c96:	c1 e0 07             	shl    $0x7,%eax
   14c99:	c0 f8 07             	sar    $0x7,%al
   14c9c:	83 e0 01             	and    $0x1,%eax
   14c9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14ca6:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14cad:	83 e0 fb             	and    $0xfffffffb,%eax
   14cb0:	09 d0                	or     %edx,%eax
   14cb2:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14cb7:	e9 5f 01 00 00       	jmp    14e1b <do_normal_key+0x1cd>
	case KEY_LSHIFT:
		kbd_state.lshift_press = is_make;  // 仅设置标志位
   14cbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14cbf:	c1 e0 07             	shl    $0x7,%eax
   14cc2:	c0 f8 07             	sar    $0x7,%al
   14cc5:	83 e0 01             	and    $0x1,%eax
   14cc8:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14ccb:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14cd2:	83 e0 fd             	and    $0xfffffffd,%eax
   14cd5:	09 d0                	or     %edx,%eax
   14cd7:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14cdc:	e9 3a 01 00 00       	jmp    14e1b <do_normal_key+0x1cd>
    case KEY_CAPS:  // 大小写键，设置大小写状态
		if (is_make) {
   14ce1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ce5:	0f 84 2c 01 00 00    	je     14e17 <do_normal_key+0x1c9>
			kbd_state.caps_lock = ~kbd_state.caps_lock;
   14ceb:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14cf2:	c1 e0 07             	shl    $0x7,%eax
   14cf5:	c0 f8 07             	sar    $0x7,%al
   14cf8:	f7 d0                	not    %eax
   14cfa:	c1 e0 07             	shl    $0x7,%eax
   14cfd:	c0 f8 07             	sar    $0x7,%al
   14d00:	83 e0 01             	and    $0x1,%eax
   14d03:	89 c2                	mov    %eax,%edx
   14d05:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d0c:	83 e0 fe             	and    $0xfffffffe,%eax
   14d0f:	09 d0                	or     %edx,%eax
   14d11:	a2 b8 65 03 00       	mov    %al,0x365b8
			update_led_status();
   14d16:	e8 b2 fe ff ff       	call   14bcd <update_led_status>
		}
		break;
   14d1b:	e9 f7 00 00 00       	jmp    14e17 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make;  // 仅设置标志位
   14d20:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d23:	c1 e0 07             	shl    $0x7,%eax
   14d26:	c0 f8 07             	sar    $0x7,%al
   14d29:	83 e0 01             	and    $0x1,%eax
   14d2c:	c1 e0 04             	shl    $0x4,%eax
   14d2f:	89 c2                	mov    %eax,%edx
   14d31:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d38:	83 e0 ef             	and    $0xffffffef,%eax
   14d3b:	09 d0                	or     %edx,%eax
   14d3d:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14d42:	e9 d4 00 00 00       	jmp    14e1b <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make;  // 仅设置标志位
   14d47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d4a:	c1 e0 07             	shl    $0x7,%eax
   14d4d:	c0 f8 07             	sar    $0x7,%al
   14d50:	83 e0 01             	and    $0x1,%eax
   14d53:	c1 e0 05             	shl    $0x5,%eax
   14d56:	89 c2                	mov    %eax,%edx
   14d58:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d5f:	83 e0 df             	and    $0xffffffdf,%eax
   14d62:	09 d0                	or     %edx,%eax
   14d64:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14d69:	e9 ad 00 00 00       	jmp    14e1b <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
         do_fx_key(key);
   14d6e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14d72:	83 ec 0c             	sub    $0xc,%esp
   14d75:	50                   	push   %eax
   14d76:	e8 97 fe ff ff       	call   14c12 <do_fx_key>
   14d7b:	83 c4 10             	add    $0x10,%esp
        break;
   14d7e:	e9 98 00 00 00       	jmp    14e1b <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make) {
   14d83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14d87:	0f 84 8d 00 00 00    	je     14e1a <do_normal_key+0x1cc>
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14d8d:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d94:	83 e0 04             	and    $0x4,%eax
   14d97:	84 c0                	test   %al,%al
   14d99:	75 0e                	jne    14da9 <do_normal_key+0x15b>
   14d9b:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14da2:	83 e0 02             	and    $0x2,%eax
   14da5:	84 c0                	test   %al,%al
   14da7:	74 11                	je     14dba <do_normal_key+0x16c>
                key = map_table[key].func;  // 第2功能
   14da9:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14dad:	0f b6 84 00 21 96 01 	movzbl 0x19621(%eax,%eax,1),%eax
   14db4:	00 
   14db5:	88 45 f7             	mov    %al,-0x9(%ebp)
   14db8:	eb 0f                	jmp    14dc9 <do_normal_key+0x17b>
            }else {
                key = map_table[key].normal;  // 第1功能
   14dba:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14dbe:	0f b6 84 00 20 96 01 	movzbl 0x19620(%eax,%eax,1),%eax
   14dc5:	00 
   14dc6:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock) {
   14dc9:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dd0:	83 e0 01             	and    $0x1,%eax
   14dd3:	84 c0                	test   %al,%al
   14dd5:	74 2e                	je     14e05 <do_normal_key+0x1b7>
                if ((key >= 'A') && (key <= 'Z')) {
   14dd7:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14ddb:	7e 12                	jle    14def <do_normal_key+0x1a1>
   14ddd:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14de1:	7f 0c                	jg     14def <do_normal_key+0x1a1>
                    // 大写转小写
                    key = key - 'A' + 'a';
   14de3:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14de7:	83 c0 20             	add    $0x20,%eax
   14dea:	88 45 f7             	mov    %al,-0x9(%ebp)
   14ded:	eb 16                	jmp    14e05 <do_normal_key+0x1b7>
                } else if ((key >= 'a') && (key <= 'z')) {
   14def:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14df3:	7e 10                	jle    14e05 <do_normal_key+0x1b7>
   14df5:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14df9:	7f 0a                	jg     14e05 <do_normal_key+0x1b7>
                    // 小写转大小
                    key = key - 'a' + 'A';
   14dfb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14dff:	83 e8 20             	sub    $0x20,%eax
   14e02:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            //log_printf("key=%c", key);
            tty_in(key);
   14e05:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14e09:	83 ec 0c             	sub    $0xc,%esp
   14e0c:	50                   	push   %eax
   14e0d:	e8 52 07 00 00       	call   15564 <tty_in>
   14e12:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14e15:	eb 03                	jmp    14e1a <do_normal_key+0x1cc>
		break;
   14e17:	90                   	nop
   14e18:	eb 01                	jmp    14e1b <do_normal_key+0x1cd>
        break;
   14e1a:	90                   	nop
    }
}
   14e1b:	90                   	nop
   14e1c:	c9                   	leave  
   14e1d:	c3                   	ret    

00014e1e <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key (uint8_t raw_code) {
   14e1e:	55                   	push   %ebp
   14e1f:	89 e5                	mov    %esp,%ebp
   14e21:	83 ec 14             	sub    $0x14,%esp
   14e24:	8b 45 08             	mov    0x8(%ebp),%eax
   14e27:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);			// 去掉最高位
   14e2a:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14e2e:	50                   	push   %eax
   14e2f:	e8 c0 fc ff ff       	call   14af4 <get_key>
   14e34:	83 c4 04             	add    $0x4,%esp
   14e37:	0f be c0             	movsbl %al,%eax
   14e3a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code);	// 按下或释放
   14e3d:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14e41:	50                   	push   %eax
   14e42:	e8 c2 fc ff ff       	call   14b09 <is_make_code>
   14e47:	83 c4 04             	add    $0x4,%esp
   14e4a:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key) {
   14e4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14e50:	83 f8 1d             	cmp    $0x1d,%eax
   14e53:	74 07                	je     14e5c <do_e0_key+0x3e>
   14e55:	83 f8 38             	cmp    $0x38,%eax
   14e58:	74 26                	je     14e80 <do_e0_key+0x62>
            break;
        case KEY_ALT:
            kbd_state.ralt_press = is_make;  // 仅设置标志位
            break;
    }
}
   14e5a:	eb 49                	jmp    14ea5 <do_e0_key+0x87>
            kbd_state.rctrl_press = is_make;  // 仅设置标志位
   14e5c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14e5f:	c1 e0 07             	shl    $0x7,%eax
   14e62:	c0 f8 07             	sar    $0x7,%al
   14e65:	83 e0 01             	and    $0x1,%eax
   14e68:	c1 e0 06             	shl    $0x6,%eax
   14e6b:	89 c2                	mov    %eax,%edx
   14e6d:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e74:	83 e0 bf             	and    $0xffffffbf,%eax
   14e77:	09 d0                	or     %edx,%eax
   14e79:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14e7e:	eb 25                	jmp    14ea5 <do_e0_key+0x87>
            kbd_state.ralt_press = is_make;  // 仅设置标志位
   14e80:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14e83:	c1 e0 07             	shl    $0x7,%eax
   14e86:	c0 f8 07             	sar    $0x7,%al
   14e89:	83 e0 01             	and    $0x1,%eax
   14e8c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14e93:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e9a:	83 e0 f7             	and    $0xfffffff7,%eax
   14e9d:	09 d0                	or     %edx,%eax
   14e9f:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14ea4:	90                   	nop
}
   14ea5:	90                   	nop
   14ea6:	c9                   	leave  
   14ea7:	c3                   	ret    

00014ea8 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame) {
   14ea8:	55                   	push   %ebp
   14ea9:	89 e5                	mov    %esp,%ebp
   14eab:	83 ec 18             	sub    $0x18,%esp
		BEGIN_E0,			// 收到e0字符
		BEGIN_E1,			// 收到e1字符
    }recv_state = NORMAL;

	// 检查是否有数据，无数据则退出
	uint8_t status = inb(KBD_PORT_STAT);
   14eae:	6a 64                	push   $0x64
   14eb0:	e8 03 fc ff ff       	call   14ab8 <inb>
   14eb5:	83 c4 04             	add    $0x4,%esp
   14eb8:	88 45 f7             	mov    %al,-0x9(%ebp)
	if (!(status & KBD_STAT_RECV_READY)) {
   14ebb:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14ebf:	83 e0 01             	and    $0x1,%eax
   14ec2:	85 c0                	test   %eax,%eax
   14ec4:	75 12                	jne    14ed8 <do_handler_kbd+0x30>
        pic_send_eoi(IRQ1_KEYBOARD);
   14ec6:	83 ec 0c             	sub    $0xc,%esp
   14ec9:	6a 21                	push   $0x21
   14ecb:	e8 ca de ff ff       	call   12d9a <pic_send_eoi>
   14ed0:	83 c4 10             	add    $0x10,%esp
		return;
   14ed3:	e9 90 00 00 00       	jmp    14f68 <do_handler_kbd+0xc0>
	}

	// 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   14ed8:	83 ec 0c             	sub    $0xc,%esp
   14edb:	6a 60                	push   $0x60
   14edd:	e8 d6 fb ff ff       	call   14ab8 <inb>
   14ee2:	83 c4 10             	add    $0x10,%esp
   14ee5:	88 45 f6             	mov    %al,-0xa(%ebp)

	// 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
	// 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   14ee8:	83 ec 0c             	sub    $0xc,%esp
   14eeb:	6a 21                	push   $0x21
   14eed:	e8 a8 de ff ff       	call   12d9a <pic_send_eoi>
   14ef2:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
	if (raw_code == KEY_E0) {
   14ef5:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   14ef9:	75 0c                	jne    14f07 <do_handler_kbd+0x5f>
		// E0字符
		recv_state = BEGIN_E0;
   14efb:	c7 05 bc 65 03 00 01 	movl   $0x1,0x365bc
   14f02:	00 00 00 
   14f05:	eb 61                	jmp    14f68 <do_handler_kbd+0xc0>
	} else if (raw_code == KEY_E1) {
   14f07:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   14f0b:	75 0c                	jne    14f19 <do_handler_kbd+0x71>
		// E1字符，不处理
		recv_state = BEGIN_E1;
   14f0d:	c7 05 bc 65 03 00 02 	movl   $0x2,0x365bc
   14f14:	00 00 00 
   14f17:	eb 4f                	jmp    14f68 <do_handler_kbd+0xc0>
	} else {
		switch (recv_state) {
   14f19:	a1 bc 65 03 00       	mov    0x365bc,%eax
   14f1e:	83 f8 01             	cmp    $0x1,%eax
   14f21:	74 1e                	je     14f41 <do_handler_kbd+0x99>
   14f23:	83 f8 01             	cmp    $0x1,%eax
   14f26:	72 07                	jb     14f2f <do_handler_kbd+0x87>
   14f28:	83 f8 02             	cmp    $0x2,%eax
   14f2b:	74 30                	je     14f5d <do_handler_kbd+0xb5>
   14f2d:	eb 39                	jmp    14f68 <do_handler_kbd+0xc0>
		case NORMAL:
			do_normal_key(raw_code);
   14f2f:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   14f33:	83 ec 0c             	sub    $0xc,%esp
   14f36:	50                   	push   %eax
   14f37:	e8 12 fd ff ff       	call   14c4e <do_normal_key>
   14f3c:	83 c4 10             	add    $0x10,%esp
			break;
   14f3f:	eb 27                	jmp    14f68 <do_handler_kbd+0xc0>
		case BEGIN_E0: // 不处理print scr
			do_e0_key(raw_code);
   14f41:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   14f45:	83 ec 0c             	sub    $0xc,%esp
   14f48:	50                   	push   %eax
   14f49:	e8 d0 fe ff ff       	call   14e1e <do_e0_key>
   14f4e:	83 c4 10             	add    $0x10,%esp
			recv_state = NORMAL;
   14f51:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   14f58:	00 00 00 
			break;
   14f5b:	eb 0b                	jmp    14f68 <do_handler_kbd+0xc0>
		case BEGIN_E1:  // 不处理pause
			recv_state = NORMAL;
   14f5d:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   14f64:	00 00 00 
			break;
   14f67:	90                   	nop
		}
	}
}
   14f68:	c9                   	leave  
   14f69:	c3                   	ret    

00014f6a <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void) {
   14f6a:	55                   	push   %ebp
   14f6b:	89 e5                	mov    %esp,%ebp
   14f6d:	83 ec 08             	sub    $0x8,%esp
    static int inited = 0;

    if (!inited) {
   14f70:	a1 c0 65 03 00       	mov    0x365c0,%eax
   14f75:	85 c0                	test   %eax,%eax
   14f77:	75 2e                	jne    14fa7 <kbd_init+0x3d>
        update_led_status();
   14f79:	e8 4f fc ff ff       	call   14bcd <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   14f7e:	83 ec 08             	sub    $0x8,%esp
   14f81:	68 a5 02 01 00       	push   $0x102a5
   14f86:	6a 21                	push   $0x21
   14f88:	e8 e6 df ff ff       	call   12f73 <irq_install>
   14f8d:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   14f90:	83 ec 0c             	sub    $0xc,%esp
   14f93:	6a 21                	push   $0x21
   14f95:	e8 13 e0 ff ff       	call   12fad <irq_enable>
   14f9a:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   14f9d:	c7 05 c0 65 03 00 01 	movl   $0x1,0x365c0
   14fa4:	00 00 00 
    }
}
   14fa7:	90                   	nop
   14fa8:	c9                   	leave  
   14fa9:	c3                   	ret    

00014faa <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14faa:	55                   	push   %ebp
   14fab:	89 e5                	mov    %esp,%ebp
   14fad:	83 ec 08             	sub    $0x8,%esp
   14fb0:	8b 55 08             	mov    0x8(%ebp),%edx
   14fb3:	8b 45 0c             	mov    0xc(%ebp),%eax
   14fb6:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14fba:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14fbd:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14fc1:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14fc5:	ee                   	out    %al,(%dx)
}
   14fc6:	90                   	nop
   14fc7:	c9                   	leave  
   14fc8:	c3                   	ret    

00014fc9 <do_handler_timer>:
static uint32_t sys_tick;						// 系统启动后的tick数量

/**
 * 定时器中断处理函数
 */
void do_handler_timer (exception_frame_t *frame) {
   14fc9:	55                   	push   %ebp
   14fca:	89 e5                	mov    %esp,%ebp
   14fcc:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   14fcf:	a1 c4 65 03 00       	mov    0x365c4,%eax
   14fd4:	83 c0 01             	add    $0x1,%eax
   14fd7:	a3 c4 65 03 00       	mov    %eax,0x365c4

    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续噢应
    pic_send_eoi(IRQ0_TIMER);
   14fdc:	83 ec 0c             	sub    $0xc,%esp
   14fdf:	6a 20                	push   $0x20
   14fe1:	e8 b4 dd ff ff       	call   12d9a <pic_send_eoi>
   14fe6:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   14fe9:	e8 35 c8 ff ff       	call   11823 <task_time_tick>
}
   14fee:	90                   	nop
   14fef:	c9                   	leave  
   14ff0:	c3                   	ret    

00014ff1 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   14ff1:	55                   	push   %ebp
   14ff2:	89 e5                	mov    %esp,%ebp
   14ff4:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   14ff7:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    //outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   14ffe:	6a 36                	push   $0x36
   15000:	6a 43                	push   $0x43
   15002:	e8 a3 ff ff ff       	call   14faa <outb>
   15007:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   1500a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1500d:	0f b6 c0             	movzbl %al,%eax
   15010:	50                   	push   %eax
   15011:	6a 40                	push   $0x40
   15013:	e8 92 ff ff ff       	call   14faa <outb>
   15018:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   1501b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1501e:	c1 e8 08             	shr    $0x8,%eax
   15021:	0f b6 c0             	movzbl %al,%eax
   15024:	50                   	push   %eax
   15025:	6a 40                	push   $0x40
   15027:	e8 7e ff ff ff       	call   14faa <outb>
   1502c:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   1502f:	83 ec 08             	sub    $0x8,%esp
   15032:	68 86 02 01 00       	push   $0x10286
   15037:	6a 20                	push   $0x20
   15039:	e8 35 df ff ff       	call   12f73 <irq_install>
   1503e:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   15041:	83 ec 0c             	sub    $0xc,%esp
   15044:	6a 20                	push   $0x20
   15046:	e8 62 df ff ff       	call   12fad <irq_enable>
   1504b:	83 c4 10             	add    $0x10,%esp
}
   1504e:	90                   	nop
   1504f:	c9                   	leave  
   15050:	c3                   	ret    

00015051 <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   15051:	55                   	push   %ebp
   15052:	89 e5                	mov    %esp,%ebp
   15054:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   15057:	c7 05 c4 65 03 00 00 	movl   $0x0,0x365c4
   1505e:	00 00 00 

    init_pit();
   15061:	e8 8b ff ff ff       	call   14ff1 <init_pit>
}
   15066:	90                   	nop
   15067:	c9                   	leave  
   15068:	c3                   	ret    

00015069 <tty_fifo_init>:

/**
 * @brief FIFO初始化
 */
void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size)
{
   15069:	55                   	push   %ebp
   1506a:	89 e5                	mov    %esp,%ebp
	fifo->buf = buf;
   1506c:	8b 45 08             	mov    0x8(%ebp),%eax
   1506f:	8b 55 0c             	mov    0xc(%ebp),%edx
   15072:	89 10                	mov    %edx,(%eax)
	fifo->count = 0;
   15074:	8b 45 08             	mov    0x8(%ebp),%eax
   15077:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	fifo->size = size;
   1507e:	8b 45 08             	mov    0x8(%ebp),%eax
   15081:	8b 55 10             	mov    0x10(%ebp),%edx
   15084:	89 50 04             	mov    %edx,0x4(%eax)
	fifo->read = fifo->write = 0;
   15087:	8b 45 08             	mov    0x8(%ebp),%eax
   1508a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   15091:	8b 45 08             	mov    0x8(%ebp),%eax
   15094:	8b 50 0c             	mov    0xc(%eax),%edx
   15097:	8b 45 08             	mov    0x8(%ebp),%eax
   1509a:	89 50 08             	mov    %edx,0x8(%eax)
}
   1509d:	90                   	nop
   1509e:	5d                   	pop    %ebp
   1509f:	c3                   	ret    

000150a0 <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c)
{
   150a0:	55                   	push   %ebp
   150a1:	89 e5                	mov    %esp,%ebp
   150a3:	53                   	push   %ebx
   150a4:	83 ec 14             	sub    $0x14,%esp
	if (fifo->count <= 0)
   150a7:	8b 45 08             	mov    0x8(%ebp),%eax
   150aa:	8b 40 10             	mov    0x10(%eax),%eax
   150ad:	85 c0                	test   %eax,%eax
   150af:	7f 07                	jg     150b8 <tty_fifo_get+0x18>
	{
		return -1;
   150b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   150b6:	eb 62                	jmp    1511a <tty_fifo_get+0x7a>
	}

	irq_state_t state = irq_enter_protection();
   150b8:	e8 18 e0 ff ff       	call   130d5 <irq_enter_protection>
   150bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*c = fifo->buf[fifo->read++];
   150c0:	8b 45 08             	mov    0x8(%ebp),%eax
   150c3:	8b 18                	mov    (%eax),%ebx
   150c5:	8b 45 08             	mov    0x8(%ebp),%eax
   150c8:	8b 40 08             	mov    0x8(%eax),%eax
   150cb:	8d 48 01             	lea    0x1(%eax),%ecx
   150ce:	8b 55 08             	mov    0x8(%ebp),%edx
   150d1:	89 4a 08             	mov    %ecx,0x8(%edx)
   150d4:	01 d8                	add    %ebx,%eax
   150d6:	0f b6 10             	movzbl (%eax),%edx
   150d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   150dc:	88 10                	mov    %dl,(%eax)
	if (fifo->read >= fifo->size)
   150de:	8b 45 08             	mov    0x8(%ebp),%eax
   150e1:	8b 50 08             	mov    0x8(%eax),%edx
   150e4:	8b 45 08             	mov    0x8(%ebp),%eax
   150e7:	8b 40 04             	mov    0x4(%eax),%eax
   150ea:	39 c2                	cmp    %eax,%edx
   150ec:	7c 0a                	jl     150f8 <tty_fifo_get+0x58>
	{
		fifo->read = 0;
   150ee:	8b 45 08             	mov    0x8(%ebp),%eax
   150f1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	}
	fifo->count--;
   150f8:	8b 45 08             	mov    0x8(%ebp),%eax
   150fb:	8b 40 10             	mov    0x10(%eax),%eax
   150fe:	8d 50 ff             	lea    -0x1(%eax),%edx
   15101:	8b 45 08             	mov    0x8(%ebp),%eax
   15104:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   15107:	83 ec 0c             	sub    $0xc,%esp
   1510a:	ff 75 f4             	pushl  -0xc(%ebp)
   1510d:	e8 db df ff ff       	call   130ed <irq_leave_protection>
   15112:	83 c4 10             	add    $0x10,%esp
	return 0;
   15115:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1511a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1511d:	c9                   	leave  
   1511e:	c3                   	ret    

0001511f <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put(tty_fifo_t *fifo, char c)
{
   1511f:	55                   	push   %ebp
   15120:	89 e5                	mov    %esp,%ebp
   15122:	53                   	push   %ebx
   15123:	83 ec 24             	sub    $0x24,%esp
   15126:	8b 45 0c             	mov    0xc(%ebp),%eax
   15129:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (fifo->count >= fifo->size)
   1512c:	8b 45 08             	mov    0x8(%ebp),%eax
   1512f:	8b 50 10             	mov    0x10(%eax),%edx
   15132:	8b 45 08             	mov    0x8(%ebp),%eax
   15135:	8b 40 04             	mov    0x4(%eax),%eax
   15138:	39 c2                	cmp    %eax,%edx
   1513a:	7c 07                	jl     15143 <tty_fifo_put+0x24>
	{
		return -1;
   1513c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15141:	eb 61                	jmp    151a4 <tty_fifo_put+0x85>
	}

	irq_state_t state = irq_enter_protection();
   15143:	e8 8d df ff ff       	call   130d5 <irq_enter_protection>
   15148:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fifo->buf[fifo->write++] = c;
   1514b:	8b 45 08             	mov    0x8(%ebp),%eax
   1514e:	8b 18                	mov    (%eax),%ebx
   15150:	8b 45 08             	mov    0x8(%ebp),%eax
   15153:	8b 40 0c             	mov    0xc(%eax),%eax
   15156:	8d 48 01             	lea    0x1(%eax),%ecx
   15159:	8b 55 08             	mov    0x8(%ebp),%edx
   1515c:	89 4a 0c             	mov    %ecx,0xc(%edx)
   1515f:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   15162:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   15166:	88 02                	mov    %al,(%edx)
	if (fifo->write >= fifo->size)
   15168:	8b 45 08             	mov    0x8(%ebp),%eax
   1516b:	8b 50 0c             	mov    0xc(%eax),%edx
   1516e:	8b 45 08             	mov    0x8(%ebp),%eax
   15171:	8b 40 04             	mov    0x4(%eax),%eax
   15174:	39 c2                	cmp    %eax,%edx
   15176:	7c 0a                	jl     15182 <tty_fifo_put+0x63>
	{
		fifo->write = 0;
   15178:	8b 45 08             	mov    0x8(%ebp),%eax
   1517b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	fifo->count++;
   15182:	8b 45 08             	mov    0x8(%ebp),%eax
   15185:	8b 40 10             	mov    0x10(%eax),%eax
   15188:	8d 50 01             	lea    0x1(%eax),%edx
   1518b:	8b 45 08             	mov    0x8(%ebp),%eax
   1518e:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   15191:	83 ec 0c             	sub    $0xc,%esp
   15194:	ff 75 f4             	pushl  -0xc(%ebp)
   15197:	e8 51 df ff ff       	call   130ed <irq_leave_protection>
   1519c:	83 c4 10             	add    $0x10,%esp

	return 0;
   1519f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   151a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   151a7:	c9                   	leave  
   151a8:	c3                   	ret    

000151a9 <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t *get_tty(device_t *dev)
{
   151a9:	55                   	push   %ebp
   151aa:	89 e5                	mov    %esp,%ebp
   151ac:	83 ec 18             	sub    $0x18,%esp
	int tty = dev->minor;
   151af:	8b 45 08             	mov    0x8(%ebp),%eax
   151b2:	8b 40 08             	mov    0x8(%eax),%eax
   151b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count))
   151b8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   151bc:	78 10                	js     151ce <get_tty+0x25>
   151be:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   151c2:	7f 0a                	jg     151ce <get_tty+0x25>
   151c4:	8b 45 08             	mov    0x8(%ebp),%eax
   151c7:	8b 40 10             	mov    0x10(%eax),%eax
   151ca:	85 c0                	test   %eax,%eax
   151cc:	75 1a                	jne    151e8 <get_tty+0x3f>
	{
		log_printf("tty is not opened. tty = %d", tty);
   151ce:	83 ec 08             	sub    $0x8,%esp
   151d1:	ff 75 f4             	pushl  -0xc(%ebp)
   151d4:	68 b8 98 01 00       	push   $0x198b8
   151d9:	e8 c5 36 00 00       	call   188a3 <log_printf>
   151de:	83 c4 10             	add    $0x10,%esp
		return (tty_t *)0;
   151e1:	b8 00 00 00 00       	mov    $0x0,%eax
   151e6:	eb 0e                	jmp    151f6 <get_tty+0x4d>
	}

	return tty_devs + tty;
   151e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   151eb:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   151f1:	05 e0 65 03 00       	add    $0x365e0,%eax
}
   151f6:	c9                   	leave  
   151f7:	c3                   	ret    

000151f8 <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open(device_t *dev)
{
   151f8:	55                   	push   %ebp
   151f9:	89 e5                	mov    %esp,%ebp
   151fb:	83 ec 18             	sub    $0x18,%esp
	int idx = dev->minor;
   151fe:	8b 45 08             	mov    0x8(%ebp),%eax
   15201:	8b 40 08             	mov    0x8(%eax),%eax
   15204:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((idx < 0) || (idx >= TTY_NR))
   15207:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1520b:	78 06                	js     15213 <tty_open+0x1b>
   1520d:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   15211:	7e 1d                	jle    15230 <tty_open+0x38>
	{
		log_printf("open tty failed. incorrect tty num = %d", idx);
   15213:	83 ec 08             	sub    $0x8,%esp
   15216:	ff 75 f4             	pushl  -0xc(%ebp)
   15219:	68 d4 98 01 00       	push   $0x198d4
   1521e:	e8 80 36 00 00       	call   188a3 <log_printf>
   15223:	83 c4 10             	add    $0x10,%esp
		return -1;
   15226:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1522b:	e9 bf 00 00 00       	jmp    152ef <tty_open+0xf7>
	}

	tty_t *tty = tty_devs + idx;
   15230:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15233:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15239:	05 e0 65 03 00       	add    $0x365e0,%eax
   1523e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   15241:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15244:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15247:	81 c2 00 02 00 00    	add    $0x200,%edx
   1524d:	83 ec 04             	sub    $0x4,%esp
   15250:	68 00 02 00 00       	push   $0x200
   15255:	50                   	push   %eax
   15256:	52                   	push   %edx
   15257:	e8 0d fe ff ff       	call   15069 <tty_fifo_init>
   1525c:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->osem, TTY_OBUF_SIZE);
   1525f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15262:	05 14 02 00 00       	add    $0x214,%eax
   15267:	83 ec 08             	sub    $0x8,%esp
   1526a:	68 00 02 00 00       	push   $0x200
   1526f:	50                   	push   %eax
   15270:	e8 c8 2a 00 00       	call   17d3d <sem_init>
   15275:	83 c4 10             	add    $0x10,%esp
	tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   15278:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1527b:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   15281:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15284:	05 24 04 00 00       	add    $0x424,%eax
   15289:	83 ec 04             	sub    $0x4,%esp
   1528c:	68 00 02 00 00       	push   $0x200
   15291:	52                   	push   %edx
   15292:	50                   	push   %eax
   15293:	e8 d1 fd ff ff       	call   15069 <tty_fifo_init>
   15298:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->isem, 0);
   1529b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1529e:	05 38 04 00 00       	add    $0x438,%eax
   152a3:	83 ec 08             	sub    $0x8,%esp
   152a6:	6a 00                	push   $0x0
   152a8:	50                   	push   %eax
   152a9:	e8 8f 2a 00 00       	call   17d3d <sem_init>
   152ae:	83 c4 10             	add    $0x10,%esp

	tty->iflags = TTY_INLCR | TTY_IECHO;
   152b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152b4:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   152bb:	00 00 00 
	tty->oflags = TTY_OCRLF;
   152be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152c1:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   152c8:	00 00 00 

	tty->console_idx = idx;
   152cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
   152d1:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

	kbd_init();
   152d7:	e8 8e fc ff ff       	call   14f6a <kbd_init>
	console_init(idx);
   152dc:	83 ec 0c             	sub    $0xc,%esp
   152df:	ff 75 f4             	pushl  -0xc(%ebp)
   152e2:	e8 4e e4 ff ff       	call   13735 <console_init>
   152e7:	83 c4 10             	add    $0x10,%esp
	return 0;
   152ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
   152ef:	c9                   	leave  
   152f0:	c3                   	ret    

000152f1 <tty_write>:

/**
 * @brief 向tty写入数据
 */
int tty_write(device_t *dev, int addr, char *buf, int size)
{
   152f1:	55                   	push   %ebp
   152f2:	89 e5                	mov    %esp,%ebp
   152f4:	83 ec 28             	sub    $0x28,%esp
	if (size < 0)
   152f7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   152fb:	79 0a                	jns    15307 <tty_write+0x16>
	{
		return -1;
   152fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15302:	e9 d5 00 00 00       	jmp    153dc <tty_write+0xeb>
	}

	tty_t *tty = get_tty(dev);
   15307:	83 ec 0c             	sub    $0xc,%esp
   1530a:	ff 75 08             	pushl  0x8(%ebp)
   1530d:	e8 97 fe ff ff       	call   151a9 <get_tty>
   15312:	83 c4 10             	add    $0x10,%esp
   15315:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int len = 0;
   15318:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// 先将所有数据写入缓存中
	while (size)
   1531f:	e9 a5 00 00 00       	jmp    153c9 <tty_write+0xd8>
	{
		char c = *buf++;
   15324:	8b 45 10             	mov    0x10(%ebp),%eax
   15327:	8d 50 01             	lea    0x1(%eax),%edx
   1532a:	89 55 10             	mov    %edx,0x10(%ebp)
   1532d:	0f b6 00             	movzbl (%eax),%eax
   15330:	88 45 ef             	mov    %al,-0x11(%ebp)

		// 如果遇到\n，根据配置决定是否转换成\r\n
		if (c == '\n' && (tty->oflags & TTY_OCRLF))
   15333:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   15337:	75 43                	jne    1537c <tty_write+0x8b>
   15339:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1533c:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   15342:	83 e0 01             	and    $0x1,%eax
   15345:	85 c0                	test   %eax,%eax
   15347:	74 33                	je     1537c <tty_write+0x8b>
		{
			sem_wait(&tty->osem);
   15349:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1534c:	05 14 02 00 00       	add    $0x214,%eax
   15351:	83 ec 0c             	sub    $0xc,%esp
   15354:	50                   	push   %eax
   15355:	e8 06 2a 00 00       	call   17d60 <sem_wait>
   1535a:	83 c4 10             	add    $0x10,%esp
			int err = tty_fifo_put(&tty->ofifo, '\r');
   1535d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15360:	05 00 02 00 00       	add    $0x200,%eax
   15365:	83 ec 08             	sub    $0x8,%esp
   15368:	6a 0d                	push   $0xd
   1536a:	50                   	push   %eax
   1536b:	e8 af fd ff ff       	call   1511f <tty_fifo_put>
   15370:	83 c4 10             	add    $0x10,%esp
   15373:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (err < 0)
   15376:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1537a:	78 59                	js     153d5 <tty_write+0xe4>
				break;
			}
		}

		// 写入当前字符
		sem_wait(&tty->osem);
   1537c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1537f:	05 14 02 00 00       	add    $0x214,%eax
   15384:	83 ec 0c             	sub    $0xc,%esp
   15387:	50                   	push   %eax
   15388:	e8 d3 29 00 00       	call   17d60 <sem_wait>
   1538d:	83 c4 10             	add    $0x10,%esp
		int err = tty_fifo_put(&tty->ofifo, c);
   15390:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   15394:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15397:	81 c2 00 02 00 00    	add    $0x200,%edx
   1539d:	83 ec 08             	sub    $0x8,%esp
   153a0:	50                   	push   %eax
   153a1:	52                   	push   %edx
   153a2:	e8 78 fd ff ff       	call   1511f <tty_fifo_put>
   153a7:	83 c4 10             	add    $0x10,%esp
   153aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (err < 0)
   153ad:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   153b1:	78 25                	js     153d8 <tty_write+0xe7>
		{
			break;
		}

		len++;
   153b3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		size--;
   153b7:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

		// 启动输出, 这里是直接由console直接输出，无需中断
		console_write(tty);
   153bb:	83 ec 0c             	sub    $0xc,%esp
   153be:	ff 75 f0             	pushl  -0x10(%ebp)
   153c1:	e8 7a e8 ff ff       	call   13c40 <console_write>
   153c6:	83 c4 10             	add    $0x10,%esp
	while (size)
   153c9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   153cd:	0f 85 51 ff ff ff    	jne    15324 <tty_write+0x33>
   153d3:	eb 04                	jmp    153d9 <tty_write+0xe8>
				break;
   153d5:	90                   	nop
   153d6:	eb 01                	jmp    153d9 <tty_write+0xe8>
			break;
   153d8:	90                   	nop
	}

	return len;
   153d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   153dc:	c9                   	leave  
   153dd:	c3                   	ret    

000153de <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read(device_t *dev, int addr, char *buf, int size)
{
   153de:	55                   	push   %ebp
   153df:	89 e5                	mov    %esp,%ebp
   153e1:	83 ec 18             	sub    $0x18,%esp
	if (size < 0)
   153e4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   153e8:	79 0a                	jns    153f4 <tty_read+0x16>
	{
		return -1;
   153ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   153ef:	e9 09 01 00 00       	jmp    154fd <tty_read+0x11f>
	}

	tty_t *tty = get_tty(dev);
   153f4:	83 ec 0c             	sub    $0xc,%esp
   153f7:	ff 75 08             	pushl  0x8(%ebp)
   153fa:	e8 aa fd ff ff       	call   151a9 <get_tty>
   153ff:	83 c4 10             	add    $0x10,%esp
   15402:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char *pbuf = buf;
   15405:	8b 45 10             	mov    0x10(%ebp),%eax
   15408:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len = 0;
   1540b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	// 不断读取，直到遇到文件结束符或者行结束符
	while (len < size)
   15412:	e9 d7 00 00 00       	jmp    154ee <tty_read+0x110>
	{
		// 等待可用的数据
		sem_wait(&tty->isem);
   15417:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1541a:	05 38 04 00 00       	add    $0x438,%eax
   1541f:	83 ec 0c             	sub    $0xc,%esp
   15422:	50                   	push   %eax
   15423:	e8 38 29 00 00       	call   17d60 <sem_wait>
   15428:	83 c4 10             	add    $0x10,%esp

		// 取出数据
		char ch;
		tty_fifo_get(&tty->ififo, &ch);
   1542b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1542e:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   15434:	83 ec 08             	sub    $0x8,%esp
   15437:	8d 45 eb             	lea    -0x15(%ebp),%eax
   1543a:	50                   	push   %eax
   1543b:	52                   	push   %edx
   1543c:	e8 5f fc ff ff       	call   150a0 <tty_fifo_get>
   15441:	83 c4 10             	add    $0x10,%esp
		switch (ch)
   15444:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15448:	0f be c0             	movsbl %al,%eax
   1544b:	83 f8 0a             	cmp    $0xa,%eax
   1544e:	74 1a                	je     1546a <tty_read+0x8c>
   15450:	83 f8 7f             	cmp    $0x7f,%eax
   15453:	75 52                	jne    154a7 <tty_read+0xc9>
		{
		case ASCII_DEL:
			if (len == 0)
   15455:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15459:	75 05                	jne    15460 <tty_read+0x82>
   1545b:	e9 8e 00 00 00       	jmp    154ee <tty_read+0x110>
			{
				continue;
			}
			len--;
   15460:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
			pbuf--;
   15464:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
			break;
   15468:	eb 51                	jmp    154bb <tty_read+0xdd>
		case '\n':
			if ((tty->iflags & TTY_INLCR) && (len < size - 1))
   1546a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1546d:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15473:	83 e0 01             	and    $0x1,%eax
   15476:	85 c0                	test   %eax,%eax
   15478:	74 1b                	je     15495 <tty_read+0xb7>
   1547a:	8b 45 14             	mov    0x14(%ebp),%eax
   1547d:	83 e8 01             	sub    $0x1,%eax
   15480:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15483:	7d 10                	jge    15495 <tty_read+0xb7>
			{ // \n变成\r\n
				*pbuf++ = '\r';
   15485:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15488:	8d 50 01             	lea    0x1(%eax),%edx
   1548b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1548e:	c6 00 0d             	movb   $0xd,(%eax)
				len++;
   15491:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
			}
			*pbuf++ = '\n';
   15495:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15498:	8d 50 01             	lea    0x1(%eax),%edx
   1549b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1549e:	c6 00 0a             	movb   $0xa,(%eax)
			len++;
   154a1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
			break;
   154a5:	eb 14                	jmp    154bb <tty_read+0xdd>
		default:
			*pbuf++ = ch;
   154a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   154aa:	8d 50 01             	lea    0x1(%eax),%edx
   154ad:	89 55 f4             	mov    %edx,-0xc(%ebp)
   154b0:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   154b4:	88 10                	mov    %dl,(%eax)
			len++;
   154b6:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
			break;
   154ba:	90                   	nop
		}

		if (tty->iflags & TTY_IECHO)
   154bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   154be:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   154c4:	83 e0 04             	and    $0x4,%eax
   154c7:	85 c0                	test   %eax,%eax
   154c9:	74 13                	je     154de <tty_read+0x100>
		{
			tty_write(dev, 0, &ch, 1);
   154cb:	6a 01                	push   $0x1
   154cd:	8d 45 eb             	lea    -0x15(%ebp),%eax
   154d0:	50                   	push   %eax
   154d1:	6a 00                	push   $0x0
   154d3:	ff 75 08             	pushl  0x8(%ebp)
   154d6:	e8 16 fe ff ff       	call   152f1 <tty_write>
   154db:	83 c4 10             	add    $0x10,%esp
		}

		// 遇到一行结束，也直接跳出
		if ((ch == '\r') || (ch == '\n'))
   154de:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   154e2:	3c 0d                	cmp    $0xd,%al
   154e4:	74 14                	je     154fa <tty_read+0x11c>
   154e6:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   154ea:	3c 0a                	cmp    $0xa,%al
   154ec:	74 0c                	je     154fa <tty_read+0x11c>
	while (len < size)
   154ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154f1:	3b 45 14             	cmp    0x14(%ebp),%eax
   154f4:	0f 8c 1d ff ff ff    	jl     15417 <tty_read+0x39>
		{
			break;
		}
	}

	return len;
   154fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   154fd:	c9                   	leave  
   154fe:	c3                   	ret    

000154ff <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1)
{
   154ff:	55                   	push   %ebp
   15500:	89 e5                	mov    %esp,%ebp
   15502:	83 ec 18             	sub    $0x18,%esp
	tty_t *tty = get_tty(dev);
   15505:	83 ec 0c             	sub    $0xc,%esp
   15508:	ff 75 08             	pushl  0x8(%ebp)
   1550b:	e8 99 fc ff ff       	call   151a9 <get_tty>
   15510:	83 c4 10             	add    $0x10,%esp
   15513:	89 45 f4             	mov    %eax,-0xc(%ebp)
	switch (cmd)
   15516:	8b 45 0c             	mov    0xc(%ebp),%eax
   15519:	83 f8 01             	cmp    $0x1,%eax
   1551c:	74 02                	je     15520 <tty_control+0x21>
		{
			tty->iflags &= ~TTY_IECHO;
		}
		break;
	default:
		break;
   1551e:	eb 37                	jmp    15557 <tty_control+0x58>
		if (arg0)
   15520:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15524:	74 19                	je     1553f <tty_control+0x40>
			tty->iflags |= TTY_IECHO;
   15526:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15529:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   1552f:	83 c8 04             	or     $0x4,%eax
   15532:	89 c2                	mov    %eax,%edx
   15534:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15537:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
		break;
   1553d:	eb 17                	jmp    15556 <tty_control+0x57>
			tty->iflags &= ~TTY_IECHO;
   1553f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15542:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15548:	83 e0 fb             	and    $0xfffffffb,%eax
   1554b:	89 c2                	mov    %eax,%edx
   1554d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15550:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
		break;
   15556:	90                   	nop
	}
	return 0;
   15557:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1555c:	c9                   	leave  
   1555d:	c3                   	ret    

0001555e <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close(device_t *dev)
{
   1555e:	55                   	push   %ebp
   1555f:	89 e5                	mov    %esp,%ebp
}
   15561:	90                   	nop
   15562:	5d                   	pop    %ebp
   15563:	c3                   	ret    

00015564 <tty_in>:

/**
 * @brief 输入tty字符
 */
void tty_in(char ch)
{
   15564:	55                   	push   %ebp
   15565:	89 e5                	mov    %esp,%ebp
   15567:	83 ec 28             	sub    $0x28,%esp
   1556a:	8b 45 08             	mov    0x8(%ebp),%eax
   1556d:	88 45 e4             	mov    %al,-0x1c(%ebp)
	tty_t *tty = tty_devs + curr_tty;
   15570:	a1 80 88 03 00       	mov    0x38880,%eax
   15575:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1557b:	05 e0 65 03 00       	add    $0x365e0,%eax
   15580:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 辅助队列要有空闲空间可代写入
	if (sem_count(&tty->isem) >= TTY_IBUF_SIZE)
   15583:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15586:	05 38 04 00 00       	add    $0x438,%eax
   1558b:	83 ec 0c             	sub    $0xc,%esp
   1558e:	50                   	push   %eax
   1558f:	e8 be 28 00 00       	call   17e52 <sem_count>
   15594:	83 c4 10             	add    $0x10,%esp
   15597:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1559c:	7f 30                	jg     155ce <tty_in+0x6a>
	{
		return;
	}

	// 写入辅助队列，通知数据到达
	tty_fifo_put(&tty->ififo, ch);
   1559e:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   155a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   155a5:	81 c2 24 04 00 00    	add    $0x424,%edx
   155ab:	83 ec 08             	sub    $0x8,%esp
   155ae:	50                   	push   %eax
   155af:	52                   	push   %edx
   155b0:	e8 6a fb ff ff       	call   1511f <tty_fifo_put>
   155b5:	83 c4 10             	add    $0x10,%esp
	sem_notify(&tty->isem);
   155b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155bb:	05 38 04 00 00       	add    $0x438,%eax
   155c0:	83 ec 0c             	sub    $0xc,%esp
   155c3:	50                   	push   %eax
   155c4:	e8 05 28 00 00       	call   17dce <sem_notify>
   155c9:	83 c4 10             	add    $0x10,%esp
   155cc:	eb 01                	jmp    155cf <tty_in+0x6b>
		return;
   155ce:	90                   	nop
}
   155cf:	c9                   	leave  
   155d0:	c3                   	ret    

000155d1 <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select(int tty)
{
   155d1:	55                   	push   %ebp
   155d2:	89 e5                	mov    %esp,%ebp
   155d4:	83 ec 08             	sub    $0x8,%esp
	if (tty != curr_tty)
   155d7:	a1 80 88 03 00       	mov    0x38880,%eax
   155dc:	39 45 08             	cmp    %eax,0x8(%ebp)
   155df:	74 16                	je     155f7 <tty_select+0x26>
	{
		console_select(tty);
   155e1:	83 ec 0c             	sub    $0xc,%esp
   155e4:	ff 75 08             	pushl  0x8(%ebp)
   155e7:	e8 83 dc ff ff       	call   1326f <console_select>
   155ec:	83 c4 10             	add    $0x10,%esp
		curr_tty = tty;
   155ef:	8b 45 08             	mov    0x8(%ebp),%eax
   155f2:	a3 80 88 03 00       	mov    %eax,0x38880
	}
}
   155f7:	90                   	nop
   155f8:	c9                   	leave  
   155f9:	c3                   	ret    

000155fa <devfs_mount>:
};
/**
 * @brief 挂载指定设备
 * 设备文件系统，不需要考虑major和minor
 */
int devfs_mount (struct _fs_t * fs, int major, int minor) {
   155fa:	55                   	push   %ebp
   155fb:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   155fd:	8b 45 08             	mov    0x8(%ebp),%eax
   15600:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   15607:	00 00 00 
    return 0;
   1560a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1560f:	5d                   	pop    %ebp
   15610:	c3                   	ret    

00015611 <devfs_unmount>:

/**
 * @brief 卸载指定的设备
 * @param fs 
 */
void devfs_unmount (struct _fs_t * fs) {
   15611:	55                   	push   %ebp
   15612:	89 e5                	mov    %esp,%ebp
}
   15614:	90                   	nop
   15615:	5d                   	pop    %ebp
   15616:	c3                   	ret    

00015617 <devfs_open>:

/**
 * @brief 打开指定的设备以进行读写
 */
int devfs_open (struct _fs_t * fs, const char * path, file_t * file) {   
   15617:	55                   	push   %ebp
   15618:	89 e5                	mov    %esp,%ebp
   1561a:	83 ec 28             	sub    $0x28,%esp
    // 遍历所有支持的设备类型列表，根据path中的路径，找到相应的设备类型
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   1561d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15624:	e9 04 01 00 00       	jmp    1572d <devfs_open+0x116>
        devfs_type_t * type = devfs_type_list + i;
   15629:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1562c:	89 d0                	mov    %edx,%eax
   1562e:	01 c0                	add    %eax,%eax
   15630:	01 d0                	add    %edx,%eax
   15632:	c1 e0 02             	shl    $0x2,%eax
   15635:	05 e0 a0 01 00       	add    $0x1a0e0,%eax
   1563a:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 查找相同的名称，然后从中提取后续部分，转换成字符串
        int type_name_len = kernel_strlen(type->name);
   1563d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15640:	8b 00                	mov    (%eax),%eax
   15642:	83 ec 0c             	sub    $0xc,%esp
   15645:	50                   	push   %eax
   15646:	e8 a6 2b 00 00       	call   181f1 <kernel_strlen>
   1564b:	83 c4 10             	add    $0x10,%esp
   1564e:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 如果存在挂载点路径，则跳过该路径，取下级子目录
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   15651:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15654:	8b 00                	mov    (%eax),%eax
   15656:	83 ec 04             	sub    $0x4,%esp
   15659:	ff 75 ec             	pushl  -0x14(%ebp)
   1565c:	50                   	push   %eax
   1565d:	ff 75 0c             	pushl  0xc(%ebp)
   15660:	e8 c7 2b 00 00       	call   1822c <kernel_strncmp>
   15665:	83 c4 10             	add    $0x10,%esp
   15668:	85 c0                	test   %eax,%eax
   1566a:	0f 85 b9 00 00 00    	jne    15729 <devfs_open+0x112>
            int minor;

            // 转换得到设备子序号
            if ((kernel_strlen(path) > type_name_len) && (path_to_num(path + type_name_len, &minor)) < 0) {
   15670:	83 ec 0c             	sub    $0xc,%esp
   15673:	ff 75 0c             	pushl  0xc(%ebp)
   15676:	e8 76 2b 00 00       	call   181f1 <kernel_strlen>
   1567b:	83 c4 10             	add    $0x10,%esp
   1567e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15681:	7d 34                	jge    156b7 <devfs_open+0xa0>
   15683:	8b 55 ec             	mov    -0x14(%ebp),%edx
   15686:	8b 45 0c             	mov    0xc(%ebp),%eax
   15689:	01 c2                	add    %eax,%edx
   1568b:	83 ec 08             	sub    $0x8,%esp
   1568e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   15691:	50                   	push   %eax
   15692:	52                   	push   %edx
   15693:	e8 d7 1a 00 00       	call   1716f <path_to_num>
   15698:	83 c4 10             	add    $0x10,%esp
   1569b:	85 c0                	test   %eax,%eax
   1569d:	79 18                	jns    156b7 <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   1569f:	83 ec 08             	sub    $0x8,%esp
   156a2:	ff 75 0c             	pushl  0xc(%ebp)
   156a5:	68 00 99 01 00       	push   $0x19900
   156aa:	e8 f4 31 00 00       	call   188a3 <log_printf>
   156af:	83 c4 10             	add    $0x10,%esp
                break;
   156b2:	e9 80 00 00 00       	jmp    15737 <devfs_open+0x120>
            }

            // 打开设备
            int dev_id = dev_open(type->dev_type, minor, (void *)0);
   156b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   156ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   156bd:	8b 40 04             	mov    0x4(%eax),%eax
   156c0:	83 ec 04             	sub    $0x4,%esp
   156c3:	6a 00                	push   $0x0
   156c5:	52                   	push   %edx
   156c6:	50                   	push   %eax
   156c7:	e8 af e6 ff ff       	call   13d7b <dev_open>
   156cc:	83 c4 10             	add    $0x10,%esp
   156cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   156d2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   156d6:	79 16                	jns    156ee <devfs_open+0xd7>
                log_printf("Open device failed:%s", path);
   156d8:	83 ec 08             	sub    $0x8,%esp
   156db:	ff 75 0c             	pushl  0xc(%ebp)
   156de:	68 1a 99 01 00       	push   $0x1991a
   156e3:	e8 bb 31 00 00       	call   188a3 <log_printf>
   156e8:	83 c4 10             	add    $0x10,%esp
                break;
   156eb:	90                   	nop
   156ec:	eb 49                	jmp    15737 <devfs_open+0x120>
            }

            // 纪录所在的设备号
            file->dev_id = dev_id;
   156ee:	8b 45 10             	mov    0x10(%ebp),%eax
   156f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
   156f4:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->fs = fs;
   156f7:	8b 45 10             	mov    0x10(%ebp),%eax
   156fa:	8b 55 08             	mov    0x8(%ebp),%edx
   156fd:	89 50 44             	mov    %edx,0x44(%eax)
            file->pos = 0;
   15700:	8b 45 10             	mov    0x10(%ebp),%eax
   15703:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   1570a:	8b 45 10             	mov    0x10(%ebp),%eax
   1570d:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   15714:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15717:	8b 40 08             	mov    0x8(%eax),%eax
   1571a:	89 c2                	mov    %eax,%edx
   1571c:	8b 45 10             	mov    0x10(%ebp),%eax
   1571f:	89 50 20             	mov    %edx,0x20(%eax)
            return 0;
   15722:	b8 00 00 00 00       	mov    $0x0,%eax
   15727:	eb 13                	jmp    1573c <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15729:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1572d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15731:	0f 84 f2 fe ff ff    	je     15629 <devfs_open+0x12>
        }
    }

    return -1;
   15737:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1573c:	c9                   	leave  
   1573d:	c3                   	ret    

0001573e <devfs_read>:

/**
 * @brief 读写指定的文件系统
 */
int devfs_read (char * buf, int size, file_t * file) {
   1573e:	55                   	push   %ebp
   1573f:	89 e5                	mov    %esp,%ebp
   15741:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   15744:	8b 45 10             	mov    0x10(%ebp),%eax
   15747:	8b 50 30             	mov    0x30(%eax),%edx
   1574a:	8b 45 10             	mov    0x10(%ebp),%eax
   1574d:	8b 40 2c             	mov    0x2c(%eax),%eax
   15750:	ff 75 0c             	pushl  0xc(%ebp)
   15753:	ff 75 08             	pushl  0x8(%ebp)
   15756:	52                   	push   %edx
   15757:	50                   	push   %eax
   15758:	e8 6a e7 ff ff       	call   13ec7 <dev_read>
   1575d:	83 c4 10             	add    $0x10,%esp
}
   15760:	c9                   	leave  
   15761:	c3                   	ret    

00015762 <devfs_write>:

/**
 * @brief 写设备文件系统
 */
int devfs_write (char * buf, int size, file_t * file) {
   15762:	55                   	push   %ebp
   15763:	89 e5                	mov    %esp,%ebp
   15765:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   15768:	8b 45 10             	mov    0x10(%ebp),%eax
   1576b:	8b 50 30             	mov    0x30(%eax),%edx
   1576e:	8b 45 10             	mov    0x10(%ebp),%eax
   15771:	8b 40 2c             	mov    0x2c(%eax),%eax
   15774:	ff 75 0c             	pushl  0xc(%ebp)
   15777:	ff 75 08             	pushl  0x8(%ebp)
   1577a:	52                   	push   %edx
   1577b:	50                   	push   %eax
   1577c:	e8 92 e7 ff ff       	call   13f13 <dev_write>
   15781:	83 c4 10             	add    $0x10,%esp
}
   15784:	c9                   	leave  
   15785:	c3                   	ret    

00015786 <devfs_close>:

/**
 * @brief 关闭设备文件
 */
void devfs_close (file_t * file) {
   15786:	55                   	push   %ebp
   15787:	89 e5                	mov    %esp,%ebp
   15789:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   1578c:	8b 45 08             	mov    0x8(%ebp),%eax
   1578f:	8b 40 2c             	mov    0x2c(%eax),%eax
   15792:	83 ec 0c             	sub    $0xc,%esp
   15795:	50                   	push   %eax
   15796:	e8 10 e8 ff ff       	call   13fab <dev_close>
   1579b:	83 c4 10             	add    $0x10,%esp
}
   1579e:	90                   	nop
   1579f:	c9                   	leave  
   157a0:	c3                   	ret    

000157a1 <devfs_seek>:

/**
 * @brief 文件读写定位
 */
int devfs_seek (file_t * file, uint32_t offset, int dir) {
   157a1:	55                   	push   %ebp
   157a2:	89 e5                	mov    %esp,%ebp
    return -1;  // 不支持定位
   157a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   157a9:	5d                   	pop    %ebp
   157aa:	c3                   	ret    

000157ab <devfs_stat>:

/**
 * @brief 获取文件信息
 */
int devfs_stat(file_t * file, struct stat *st) {
   157ab:	55                   	push   %ebp
   157ac:	89 e5                	mov    %esp,%ebp
    return -1;
   157ae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   157b3:	5d                   	pop    %ebp
   157b4:	c3                   	ret    

000157b5 <devfs_ioctl>:

int devfs_ioctl(file_t * file, int cmd, int arg0, int arg1) {
   157b5:	55                   	push   %ebp
   157b6:	89 e5                	mov    %esp,%ebp
   157b8:	83 ec 08             	sub    $0x8,%esp
    return dev_control(file->dev_id, cmd, arg0, arg1);
   157bb:	8b 45 08             	mov    0x8(%ebp),%eax
   157be:	8b 40 2c             	mov    0x2c(%eax),%eax
   157c1:	ff 75 14             	pushl  0x14(%ebp)
   157c4:	ff 75 10             	pushl  0x10(%ebp)
   157c7:	ff 75 0c             	pushl  0xc(%ebp)
   157ca:	50                   	push   %eax
   157cb:	e8 8f e7 ff ff       	call   13f5f <dev_control>
   157d0:	83 c4 10             	add    $0x10,%esp
}
   157d3:	c9                   	leave  
   157d4:	c3                   	ret    

000157d5 <up2>:
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   157d5:	55                   	push   %ebp
   157d6:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   157d8:	8b 55 08             	mov    0x8(%ebp),%edx
   157db:	8b 45 0c             	mov    0xc(%ebp),%eax
   157de:	01 d0                	add    %edx,%eax
   157e0:	8d 50 ff             	lea    -0x1(%eax),%edx
   157e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   157e6:	f7 d8                	neg    %eax
   157e8:	21 d0                	and    %edx,%eax
}
   157ea:	5d                   	pop    %ebp
   157eb:	c3                   	ret    

000157ec <bread_sector>:

/**
 * @brief 缓存读取磁盘数据，用于目录的遍历等
 */
static int bread_sector(fat_t *fat, int sector)
{
   157ec:	55                   	push   %ebp
   157ed:	89 e5                	mov    %esp,%ebp
   157ef:	83 ec 18             	sub    $0x18,%esp
    if (sector == fat->curr_sector)
   157f2:	8b 45 08             	mov    0x8(%ebp),%eax
   157f5:	8b 40 28             	mov    0x28(%eax),%eax
   157f8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   157fb:	75 07                	jne    15804 <bread_sector+0x18>
    {
        return 0;
   157fd:	b8 00 00 00 00       	mov    $0x0,%eax
   15802:	eb 3f                	jmp    15843 <bread_sector+0x57>
    }

    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15804:	8b 45 08             	mov    0x8(%ebp),%eax
   15807:	8b 50 24             	mov    0x24(%eax),%edx
   1580a:	8b 45 08             	mov    0x8(%ebp),%eax
   1580d:	8b 40 2c             	mov    0x2c(%eax),%eax
   15810:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   15816:	6a 01                	push   $0x1
   15818:	52                   	push   %edx
   15819:	ff 75 0c             	pushl  0xc(%ebp)
   1581c:	50                   	push   %eax
   1581d:	e8 a5 e6 ff ff       	call   13ec7 <dev_read>
   15822:	83 c4 10             	add    $0x10,%esp
   15825:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1)
   15828:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1582c:	75 10                	jne    1583e <bread_sector+0x52>
    {
        fat->curr_sector = sector;
   1582e:	8b 45 08             	mov    0x8(%ebp),%eax
   15831:	8b 55 0c             	mov    0xc(%ebp),%edx
   15834:	89 50 28             	mov    %edx,0x28(%eax)
        return 0;
   15837:	b8 00 00 00 00       	mov    $0x0,%eax
   1583c:	eb 05                	jmp    15843 <bread_sector+0x57>
    }
    return -1;
   1583e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15843:	c9                   	leave  
   15844:	c3                   	ret    

00015845 <bwrite_sector>:

static int bwrite_sector(fat_t *fat, int sector)
{
   15845:	55                   	push   %ebp
   15846:	89 e5                	mov    %esp,%ebp
   15848:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   1584b:	8b 45 08             	mov    0x8(%ebp),%eax
   1584e:	8b 50 24             	mov    0x24(%eax),%edx
   15851:	8b 45 08             	mov    0x8(%ebp),%eax
   15854:	8b 40 2c             	mov    0x2c(%eax),%eax
   15857:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1585d:	6a 01                	push   $0x1
   1585f:	52                   	push   %edx
   15860:	ff 75 0c             	pushl  0xc(%ebp)
   15863:	50                   	push   %eax
   15864:	e8 aa e6 ff ff       	call   13f13 <dev_write>
   15869:	83 c4 10             	add    $0x10,%esp
   1586c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cnt == 1 ? 0 : -1;
   1586f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15873:	75 07                	jne    1587c <bwrite_sector+0x37>
   15875:	b8 00 00 00 00       	mov    $0x0,%eax
   1587a:	eb 05                	jmp    15881 <bwrite_sector+0x3c>
   1587c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15881:	c9                   	leave  
   15882:	c3                   	ret    

00015883 <to_sfn>:

/**
 * @brief 转换文件名为diritem中的短文件名，如a.txt 转换成a      txt
 */
static void to_sfn(char *dest, const char *src)
{
   15883:	55                   	push   %ebp
   15884:	89 e5                	mov    %esp,%ebp
   15886:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15889:	83 ec 04             	sub    $0x4,%esp
   1588c:	6a 0b                	push   $0xb
   1588e:	6a 20                	push   $0x20
   15890:	ff 75 08             	pushl  0x8(%ebp)
   15893:	e8 61 2a 00 00       	call   182f9 <kernel_memset>
   15898:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char *curr = dest;
   1589b:	8b 45 08             	mov    0x8(%ebp),%eax
   1589e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *end = dest + SFN_LEN;
   158a1:	8b 45 08             	mov    0x8(%ebp),%eax
   158a4:	83 c0 0b             	add    $0xb,%eax
   158a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end))
   158aa:	eb 49                	jmp    158f5 <to_sfn+0x72>
    {
        char c = *src++;
   158ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   158af:	8d 50 01             	lea    0x1(%eax),%edx
   158b2:	89 55 0c             	mov    %edx,0xc(%ebp)
   158b5:	0f b6 00             	movzbl (%eax),%eax
   158b8:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c)
   158bb:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   158bf:	83 f8 2e             	cmp    $0x2e,%eax
   158c2:	75 0b                	jne    158cf <to_sfn+0x4c>
        {
        case '.': // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   158c4:	8b 45 08             	mov    0x8(%ebp),%eax
   158c7:	83 c0 08             	add    $0x8,%eax
   158ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   158cd:	eb 26                	jmp    158f5 <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z'))
   158cf:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   158d3:	7e 10                	jle    158e5 <to_sfn+0x62>
   158d5:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   158d9:	7f 0a                	jg     158e5 <to_sfn+0x62>
            {
                c = c - 'a' + 'A';
   158db:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   158df:	83 e8 20             	sub    $0x20,%eax
   158e2:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   158e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158e8:	8d 50 01             	lea    0x1(%eax),%edx
   158eb:	89 55 f4             	mov    %edx,-0xc(%ebp)
   158ee:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   158f2:	88 10                	mov    %dl,(%eax)
            break;
   158f4:	90                   	nop
    while (*src && (curr < end))
   158f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   158f8:	0f b6 00             	movzbl (%eax),%eax
   158fb:	84 c0                	test   %al,%al
   158fd:	74 08                	je     15907 <to_sfn+0x84>
   158ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15902:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15905:	72 a5                	jb     158ac <to_sfn+0x29>
        }
    }
}
   15907:	90                   	nop
   15908:	c9                   	leave  
   15909:	c3                   	ret    

0001590a <diritem_name_match>:

/**
 * @brief 判断item项是否与指定的名称相匹配
 */
int diritem_name_match(diritem_t *item, const char *path)
{
   1590a:	55                   	push   %ebp
   1590b:	89 e5                	mov    %esp,%ebp
   1590d:	83 ec 18             	sub    $0x18,%esp
    char buf[SFN_LEN];
    to_sfn(buf, path);
   15910:	83 ec 08             	sub    $0x8,%esp
   15913:	ff 75 0c             	pushl  0xc(%ebp)
   15916:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15919:	50                   	push   %eax
   1591a:	e8 64 ff ff ff       	call   15883 <to_sfn>
   1591f:	83 c4 10             	add    $0x10,%esp
    return kernel_memcmp(buf, item->DIR_Name, SFN_LEN) == 0;
   15922:	8b 45 08             	mov    0x8(%ebp),%eax
   15925:	83 ec 04             	sub    $0x4,%esp
   15928:	6a 0b                	push   $0xb
   1592a:	50                   	push   %eax
   1592b:	8d 45 ed             	lea    -0x13(%ebp),%eax
   1592e:	50                   	push   %eax
   1592f:	e8 06 2a 00 00       	call   1833a <kernel_memcmp>
   15934:	83 c4 10             	add    $0x10,%esp
   15937:	85 c0                	test   %eax,%eax
   15939:	0f 94 c0             	sete   %al
   1593c:	0f b6 c0             	movzbl %al,%eax
}
   1593f:	c9                   	leave  
   15940:	c3                   	ret    

00015941 <diritem_get_name>:

/**
 * @brief 获取diritem中的名称，转换成合适
 */
void diritem_get_name(diritem_t *item, char *dest)
{
   15941:	55                   	push   %ebp
   15942:	89 e5                	mov    %esp,%ebp
   15944:	83 ec 18             	sub    $0x18,%esp
    char *c = dest;
   15947:	8b 45 0c             	mov    0xc(%ebp),%eax
   1594a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *ext = (char *)0;
   1594d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    kernel_memset(dest, 0, SFN_LEN + 1); // 最多11个字符
   15954:	83 ec 04             	sub    $0x4,%esp
   15957:	6a 0c                	push   $0xc
   15959:	6a 00                	push   $0x0
   1595b:	ff 75 0c             	pushl  0xc(%ebp)
   1595e:	e8 96 29 00 00       	call   182f9 <kernel_memset>
   15963:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; i++)
   15966:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1596d:	eb 43                	jmp    159b2 <diritem_get_name+0x71>
    {
        if (item->DIR_Name[i] != ' ')
   1596f:	8b 55 08             	mov    0x8(%ebp),%edx
   15972:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15975:	01 d0                	add    %edx,%eax
   15977:	0f b6 00             	movzbl (%eax),%eax
   1597a:	3c 20                	cmp    $0x20,%al
   1597c:	74 18                	je     15996 <diritem_get_name+0x55>
        {
            *c++ = item->DIR_Name[i];
   1597e:	8b 55 08             	mov    0x8(%ebp),%edx
   15981:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15984:	01 d0                	add    %edx,%eax
   15986:	0f b6 08             	movzbl (%eax),%ecx
   15989:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1598c:	8d 50 01             	lea    0x1(%eax),%edx
   1598f:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15992:	89 ca                	mov    %ecx,%edx
   15994:	88 10                	mov    %dl,(%eax)
        }

        if (i == 7)
   15996:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   1599a:	75 12                	jne    159ae <diritem_get_name+0x6d>
        {
            ext = c;
   1599c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1599f:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *c++ = '.';
   159a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   159a5:	8d 50 01             	lea    0x1(%eax),%edx
   159a8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   159ab:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; i++)
   159ae:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   159b2:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   159b6:	7e b7                	jle    1596f <diritem_get_name+0x2e>
        }
    }

    // 没有扩展名的情况
    if (ext && (ext[1] == '\0'))
   159b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   159bc:	74 13                	je     159d1 <diritem_get_name+0x90>
   159be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159c1:	83 c0 01             	add    $0x1,%eax
   159c4:	0f b6 00             	movzbl (%eax),%eax
   159c7:	84 c0                	test   %al,%al
   159c9:	75 06                	jne    159d1 <diritem_get_name+0x90>
    {
        ext[0] = '\0';
   159cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   159ce:	c6 00 00             	movb   $0x0,(%eax)
    }
}
   159d1:	90                   	nop
   159d2:	c9                   	leave  
   159d3:	c3                   	ret    

000159d4 <diritem_get_type>:

/**
 * @brief 获取文件类型
 */
file_type_t diritem_get_type(diritem_t *item)
{
   159d4:	55                   	push   %ebp
   159d5:	89 e5                	mov    %esp,%ebp
   159d7:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   159da:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 长文件名和volum id
    if (item->DIR_Attr & (DIRITEM_ATTR_VOLUME_ID | DIRITEM_ATTR_HIDDEN | DIRITEM_ATTR_SYSTEM))
   159e1:	8b 45 08             	mov    0x8(%ebp),%eax
   159e4:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   159e8:	0f b6 c0             	movzbl %al,%eax
   159eb:	83 e0 0e             	and    $0xe,%eax
   159ee:	85 c0                	test   %eax,%eax
   159f0:	74 07                	je     159f9 <diritem_get_type+0x25>
    {
        return FILE_UNKNOWN;
   159f2:	b8 00 00 00 00       	mov    $0x0,%eax
   159f7:	eb 1d                	jmp    15a16 <diritem_get_type+0x42>
    }

    return item->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   159f9:	8b 45 08             	mov    0x8(%ebp),%eax
   159fc:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15a00:	0f b6 c0             	movzbl %al,%eax
   15a03:	83 e0 10             	and    $0x10,%eax
   15a06:	85 c0                	test   %eax,%eax
   15a08:	74 07                	je     15a11 <diritem_get_type+0x3d>
   15a0a:	b8 03 00 00 00       	mov    $0x3,%eax
   15a0f:	eb 05                	jmp    15a16 <diritem_get_type+0x42>
   15a11:	b8 02 00 00 00       	mov    $0x2,%eax
}
   15a16:	c9                   	leave  
   15a17:	c3                   	ret    

00015a18 <read_dir_entry>:

/**
 * @brief 在root目录中读取diritem
 */
static diritem_t *read_dir_entry(fat_t *fat, int index)
{
   15a18:	55                   	push   %ebp
   15a19:	89 e5                	mov    %esp,%ebp
   15a1b:	53                   	push   %ebx
   15a1c:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt))
   15a1f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15a23:	78 0d                	js     15a32 <read_dir_entry+0x1a>
   15a25:	8b 45 08             	mov    0x8(%ebp),%eax
   15a28:	8b 50 14             	mov    0x14(%eax),%edx
   15a2b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a2e:	39 c2                	cmp    %eax,%edx
   15a30:	77 07                	ja     15a39 <read_dir_entry+0x21>
    {
        return (diritem_t *)0;
   15a32:	b8 00 00 00 00       	mov    $0x0,%eax
   15a37:	eb 5a                	jmp    15a93 <read_dir_entry+0x7b>
    }

    int offset = index * sizeof(diritem_t);
   15a39:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a3c:	c1 e0 05             	shl    $0x5,%eax
   15a3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int err = bread_sector(fat, fat->root_start + offset / fat->bytes_per_sec);
   15a42:	8b 45 08             	mov    0x8(%ebp),%eax
   15a45:	8b 48 18             	mov    0x18(%eax),%ecx
   15a48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a4b:	8b 55 08             	mov    0x8(%ebp),%edx
   15a4e:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15a51:	ba 00 00 00 00       	mov    $0x0,%edx
   15a56:	f7 f3                	div    %ebx
   15a58:	01 c8                	add    %ecx,%eax
   15a5a:	83 ec 08             	sub    $0x8,%esp
   15a5d:	50                   	push   %eax
   15a5e:	ff 75 08             	pushl  0x8(%ebp)
   15a61:	e8 86 fd ff ff       	call   157ec <bread_sector>
   15a66:	83 c4 10             	add    $0x10,%esp
   15a69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0)
   15a6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15a70:	79 07                	jns    15a79 <read_dir_entry+0x61>
    {
        return (diritem_t *)0;
   15a72:	b8 00 00 00 00       	mov    $0x0,%eax
   15a77:	eb 1a                	jmp    15a93 <read_dir_entry+0x7b>
    }
    return (diritem_t *)(fat->fat_buffer + offset % fat->bytes_per_sec);
   15a79:	8b 45 08             	mov    0x8(%ebp),%eax
   15a7c:	8b 48 24             	mov    0x24(%eax),%ecx
   15a7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a82:	8b 55 08             	mov    0x8(%ebp),%edx
   15a85:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15a88:	ba 00 00 00 00       	mov    $0x0,%edx
   15a8d:	f7 f3                	div    %ebx
   15a8f:	89 d0                	mov    %edx,%eax
   15a91:	01 c8                	add    %ecx,%eax
}
   15a93:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15a96:	c9                   	leave  
   15a97:	c3                   	ret    

00015a98 <cluster_is_valid>:

int cluster_is_valid(cluster_t cluster)
{
   15a98:	55                   	push   %ebp
   15a99:	89 e5                	mov    %esp,%ebp
   15a9b:	83 ec 04             	sub    $0x4,%esp
   15a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   15aa1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < FAT_CLUSTER_INVALID) && (cluster >= 0x2);
   15aa5:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   15aaa:	77 0e                	ja     15aba <cluster_is_valid+0x22>
   15aac:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15ab1:	76 07                	jbe    15aba <cluster_is_valid+0x22>
   15ab3:	b8 01 00 00 00       	mov    $0x1,%eax
   15ab8:	eb 05                	jmp    15abf <cluster_is_valid+0x27>
   15aba:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15abf:	c9                   	leave  
   15ac0:	c3                   	ret    

00015ac1 <cluster_get_next>:
/**
 * @brief 获取簇的下一个簇
 */
int cluster_get_next(fat_t *fat, cluster_t curr)
{
   15ac1:	55                   	push   %ebp
   15ac2:	89 e5                	mov    %esp,%ebp
   15ac4:	83 ec 28             	sub    $0x28,%esp
   15ac7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15aca:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    if (!cluster_is_valid(curr))
   15ace:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ad2:	50                   	push   %eax
   15ad3:	e8 c0 ff ff ff       	call   15a98 <cluster_is_valid>
   15ad8:	83 c4 04             	add    $0x4,%esp
   15adb:	85 c0                	test   %eax,%eax
   15add:	75 1a                	jne    15af9 <cluster_get_next+0x38>
    {
        log_printf("invalid cluster.");
   15adf:	83 ec 0c             	sub    $0xc,%esp
   15ae2:	68 30 99 01 00       	push   $0x19930
   15ae7:	e8 b7 2d 00 00       	call   188a3 <log_printf>
   15aec:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15aef:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15af4:	e9 9f 00 00 00       	jmp    15b98 <cluster_get_next+0xd7>
    }
    int offset = curr * sizeof(cluster_t);
   15af9:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15afd:	01 c0                	add    %eax,%eax
   15aff:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int sector = offset / fat->bytes_per_sec;
   15b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b05:	8b 55 08             	mov    0x8(%ebp),%edx
   15b08:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b0b:	ba 00 00 00 00       	mov    $0x0,%edx
   15b10:	f7 f1                	div    %ecx
   15b12:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int off_sector = offset % fat->bytes_per_sec;
   15b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b18:	8b 55 08             	mov    0x8(%ebp),%edx
   15b1b:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b1e:	ba 00 00 00 00       	mov    $0x0,%edx
   15b23:	f7 f1                	div    %ecx
   15b25:	89 d0                	mov    %edx,%eax
   15b27:	89 45 ec             	mov    %eax,-0x14(%ebp)

    if (sector > fat->tbl_sectors)
   15b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b2d:	8b 50 08             	mov    0x8(%eax),%edx
   15b30:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15b33:	39 c2                	cmp    %eax,%edx
   15b35:	73 17                	jae    15b4e <cluster_get_next+0x8d>
    {
        log_printf("cluster too large.");
   15b37:	83 ec 0c             	sub    $0xc,%esp
   15b3a:	68 41 99 01 00       	push   $0x19941
   15b3f:	e8 5f 2d 00 00       	call   188a3 <log_printf>
   15b44:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15b47:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15b4c:	eb 4a                	jmp    15b98 <cluster_get_next+0xd7>
    }

    int err = bread_sector(fat, fat->tbl_start + sector);
   15b4e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b51:	8b 10                	mov    (%eax),%edx
   15b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15b56:	01 d0                	add    %edx,%eax
   15b58:	83 ec 08             	sub    $0x8,%esp
   15b5b:	50                   	push   %eax
   15b5c:	ff 75 08             	pushl  0x8(%ebp)
   15b5f:	e8 88 fc ff ff       	call   157ec <bread_sector>
   15b64:	83 c4 10             	add    $0x10,%esp
   15b67:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   15b6a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15b6e:	79 17                	jns    15b87 <cluster_get_next+0xc6>
    {
        log_printf("read fat table failed.");
   15b70:	83 ec 0c             	sub    $0xc,%esp
   15b73:	68 54 99 01 00       	push   $0x19954
   15b78:	e8 26 2d 00 00       	call   188a3 <log_printf>
   15b7d:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15b80:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15b85:	eb 11                	jmp    15b98 <cluster_get_next+0xd7>
    }
    return *(cluster_t *)(fat->fat_buffer + off_sector);
   15b87:	8b 45 08             	mov    0x8(%ebp),%eax
   15b8a:	8b 50 24             	mov    0x24(%eax),%edx
   15b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b90:	01 d0                	add    %edx,%eax
   15b92:	0f b7 00             	movzwl (%eax),%eax
   15b95:	0f b7 c0             	movzwl %ax,%eax
}
   15b98:	c9                   	leave  
   15b99:	c3                   	ret    

00015b9a <move_file_pos>:

/**
 * @brief 移动文件指针
 */
static int move_file_pos(file_t *file, fat_t *fat, uint32_t move_bytes, int expand)
{
   15b9a:	55                   	push   %ebp
   15b9b:	89 e5                	mov    %esp,%ebp
   15b9d:	83 ec 18             	sub    $0x18,%esp
    uint32_t c_offset = file->pos % fat->cluster_byte_size;
   15ba0:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba3:	8b 40 30             	mov    0x30(%eax),%eax
   15ba6:	89 c2                	mov    %eax,%edx
   15ba8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bab:	8b 48 20             	mov    0x20(%eax),%ecx
   15bae:	89 d0                	mov    %edx,%eax
   15bb0:	ba 00 00 00 00       	mov    $0x0,%edx
   15bb5:	f7 f1                	div    %ecx
   15bb7:	89 55 f4             	mov    %edx,-0xc(%ebp)

    // 跨簇，则调整curr_cluster。注意，如果已经是最后一个簇了，则curr_cluster不会调整
    if (c_offset + move_bytes >= fat->cluster_byte_size)
   15bba:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15bbd:	8b 45 10             	mov    0x10(%ebp),%eax
   15bc0:	01 c2                	add    %eax,%edx
   15bc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bc5:	8b 40 20             	mov    0x20(%eax),%eax
   15bc8:	39 c2                	cmp    %eax,%edx
   15bca:	72 34                	jb     15c00 <move_file_pos+0x66>
    {
        cluster_t next_cluster = cluster_get_next(fat, file->cblk);
   15bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   15bcf:	8b 40 38             	mov    0x38(%eax),%eax
   15bd2:	0f b7 c0             	movzwl %ax,%eax
   15bd5:	83 ec 08             	sub    $0x8,%esp
   15bd8:	50                   	push   %eax
   15bd9:	ff 75 0c             	pushl  0xc(%ebp)
   15bdc:	e8 e0 fe ff ff       	call   15ac1 <cluster_get_next>
   15be1:	83 c4 10             	add    $0x10,%esp
   15be4:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
        if (next_cluster == FAT_CLUSTER_INVALID)
   15be8:	66 83 7d f2 f8       	cmpw   $0xfff8,-0xe(%ebp)
   15bed:	75 07                	jne    15bf6 <move_file_pos+0x5c>
        {
            return -1;
   15bef:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15bf4:	eb 24                	jmp    15c1a <move_file_pos+0x80>
        }
        file->cblk = next_cluster;
   15bf6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
   15bfa:	8b 45 08             	mov    0x8(%ebp),%eax
   15bfd:	89 50 38             	mov    %edx,0x38(%eax)
    }

    file->pos += move_bytes;
   15c00:	8b 45 08             	mov    0x8(%ebp),%eax
   15c03:	8b 40 30             	mov    0x30(%eax),%eax
   15c06:	89 c2                	mov    %eax,%edx
   15c08:	8b 45 10             	mov    0x10(%ebp),%eax
   15c0b:	01 d0                	add    %edx,%eax
   15c0d:	89 c2                	mov    %eax,%edx
   15c0f:	8b 45 08             	mov    0x8(%ebp),%eax
   15c12:	89 50 30             	mov    %edx,0x30(%eax)
    return 0;
   15c15:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15c1a:	c9                   	leave  
   15c1b:	c3                   	ret    

00015c1c <diritem_init>:

int diritem_init(diritem_t *item, uint8_t attr, const char *name)
{
   15c1c:	55                   	push   %ebp
   15c1d:	89 e5                	mov    %esp,%ebp
   15c1f:	83 ec 18             	sub    $0x18,%esp
   15c22:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c25:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15c28:	8b 45 08             	mov    0x8(%ebp),%eax
   15c2b:	83 ec 08             	sub    $0x8,%esp
   15c2e:	ff 75 10             	pushl  0x10(%ebp)
   15c31:	50                   	push   %eax
   15c32:	e8 4c fc ff ff       	call   15883 <to_sfn>
   15c37:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t)(FAT_CLUSTER_INVALID >> 16);
   15c3a:	8b 45 08             	mov    0x8(%ebp),%eax
   15c3d:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t)(FAT_CLUSTER_INVALID & 0xFFFF);
   15c43:	8b 45 08             	mov    0x8(%ebp),%eax
   15c46:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c4f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15c56:	8b 45 08             	mov    0x8(%ebp),%eax
   15c59:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15c5d:	88 50 0b             	mov    %dl,0xb(%eax)
    item->DIR_NTRes = 0;
   15c60:	8b 45 08             	mov    0x8(%ebp),%eax
   15c63:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

    // 时间写固定值，简单方便
    item->DIR_CrtTime = 0;
   15c67:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6a:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%eax)
    item->DIR_CrtDate = 0;
   15c70:	8b 45 08             	mov    0x8(%ebp),%eax
   15c73:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    item->DIR_WrtTime = item->DIR_CrtTime;
   15c79:	8b 45 08             	mov    0x8(%ebp),%eax
   15c7c:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15c80:	8b 45 08             	mov    0x8(%ebp),%eax
   15c83:	66 89 50 16          	mov    %dx,0x16(%eax)
    item->DIR_WrtDate = item->DIR_CrtDate;
   15c87:	8b 45 08             	mov    0x8(%ebp),%eax
   15c8a:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15c8e:	8b 45 08             	mov    0x8(%ebp),%eax
   15c91:	66 89 50 18          	mov    %dx,0x18(%eax)
    item->DIR_LastAccDate = item->DIR_CrtDate;
   15c95:	8b 45 08             	mov    0x8(%ebp),%eax
   15c98:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c9f:	66 89 50 12          	mov    %dx,0x12(%eax)
    return 0;
   15ca3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15ca8:	c9                   	leave  
   15ca9:	c3                   	ret    

00015caa <write_dir_entry>:

static int write_dir_entry(fat_t *fat, diritem_t *item, int index)
{
   15caa:	55                   	push   %ebp
   15cab:	89 e5                	mov    %esp,%ebp
   15cad:	53                   	push   %ebx
   15cae:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt))
   15cb1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15cb5:	78 0d                	js     15cc4 <write_dir_entry+0x1a>
   15cb7:	8b 45 08             	mov    0x8(%ebp),%eax
   15cba:	8b 50 14             	mov    0x14(%eax),%edx
   15cbd:	8b 45 10             	mov    0x10(%ebp),%eax
   15cc0:	39 c2                	cmp    %eax,%edx
   15cc2:	77 0a                	ja     15cce <write_dir_entry+0x24>
    {
        return -1;
   15cc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15cc9:	e9 81 00 00 00       	jmp    15d4f <write_dir_entry+0xa5>
    }

    int offset = index * sizeof(diritem_t);
   15cce:	8b 45 10             	mov    0x10(%ebp),%eax
   15cd1:	c1 e0 05             	shl    $0x5,%eax
   15cd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start + offset / fat->bytes_per_sec;
   15cd7:	8b 45 08             	mov    0x8(%ebp),%eax
   15cda:	8b 48 18             	mov    0x18(%eax),%ecx
   15cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ce0:	8b 55 08             	mov    0x8(%ebp),%edx
   15ce3:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15ce6:	ba 00 00 00 00       	mov    $0x0,%edx
   15ceb:	f7 f3                	div    %ebx
   15ced:	01 c8                	add    %ecx,%eax
   15cef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = bread_sector(fat, sector);
   15cf2:	83 ec 08             	sub    $0x8,%esp
   15cf5:	ff 75 f0             	pushl  -0x10(%ebp)
   15cf8:	ff 75 08             	pushl  0x8(%ebp)
   15cfb:	e8 ec fa ff ff       	call   157ec <bread_sector>
   15d00:	83 c4 10             	add    $0x10,%esp
   15d03:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   15d06:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15d0a:	79 07                	jns    15d13 <write_dir_entry+0x69>
    {
        return -1;
   15d0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15d11:	eb 3c                	jmp    15d4f <write_dir_entry+0xa5>
    }
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sec, item, sizeof(diritem_t));
   15d13:	8b 45 08             	mov    0x8(%ebp),%eax
   15d16:	8b 48 24             	mov    0x24(%eax),%ecx
   15d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15d1c:	8b 55 08             	mov    0x8(%ebp),%edx
   15d1f:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15d22:	ba 00 00 00 00       	mov    $0x0,%edx
   15d27:	f7 f3                	div    %ebx
   15d29:	89 d0                	mov    %edx,%eax
   15d2b:	01 c8                	add    %ecx,%eax
   15d2d:	83 ec 04             	sub    $0x4,%esp
   15d30:	6a 20                	push   $0x20
   15d32:	ff 75 0c             	pushl  0xc(%ebp)
   15d35:	50                   	push   %eax
   15d36:	e8 6f 25 00 00       	call   182aa <kernel_memcpy>
   15d3b:	83 c4 10             	add    $0x10,%esp
    return bwrite_sector(fat, sector);
   15d3e:	83 ec 08             	sub    $0x8,%esp
   15d41:	ff 75 f0             	pushl  -0x10(%ebp)
   15d44:	ff 75 08             	pushl  0x8(%ebp)
   15d47:	e8 f9 fa ff ff       	call   15845 <bwrite_sector>
   15d4c:	83 c4 10             	add    $0x10,%esp
}
   15d4f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15d52:	c9                   	leave  
   15d53:	c3                   	ret    

00015d54 <fatfs_mount>:

/**
 * @brief 挂载fat文件系统
 */
int fatfs_mount(struct _fs_t *fs, int dev_major, int dev_minor)
{
   15d54:	55                   	push   %ebp
   15d55:	89 e5                	mov    %esp,%ebp
   15d57:	83 ec 18             	sub    $0x18,%esp
    // 打开设备
    int dev_id = dev_open(dev_major, dev_minor, (void *)0);
   15d5a:	83 ec 04             	sub    $0x4,%esp
   15d5d:	6a 00                	push   $0x0
   15d5f:	ff 75 10             	pushl  0x10(%ebp)
   15d62:	ff 75 0c             	pushl  0xc(%ebp)
   15d65:	e8 11 e0 ff ff       	call   13d7b <dev_open>
   15d6a:	83 c4 10             	add    $0x10,%esp
   15d6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dev_id < 0)
   15d70:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15d74:	79 20                	jns    15d96 <fatfs_mount+0x42>
    {
        log_printf("open disk failed. major: %x, minor: %x", dev_major, dev_minor);
   15d76:	83 ec 04             	sub    $0x4,%esp
   15d79:	ff 75 10             	pushl  0x10(%ebp)
   15d7c:	ff 75 0c             	pushl  0xc(%ebp)
   15d7f:	68 6c 99 01 00       	push   $0x1996c
   15d84:	e8 1a 2b 00 00       	call   188a3 <log_printf>
   15d89:	83 c4 10             	add    $0x10,%esp
        return -1;
   15d8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15d91:	e9 fb 01 00 00       	jmp    15f91 <fatfs_mount+0x23d>
    }

    // 读取dbr扇区并进行检查
    dbr_t *dbr = (dbr_t *)memory_alloc_page();
   15d96:	e8 d7 ae ff ff       	call   10c72 <memory_alloc_page>
   15d9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!dbr)
   15d9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15da2:	75 15                	jne    15db9 <fatfs_mount+0x65>
    {
        log_printf("mount fat failed: can't alloc buf.");
   15da4:	83 ec 0c             	sub    $0xc,%esp
   15da7:	68 94 99 01 00       	push   $0x19994
   15dac:	e8 f2 2a 00 00       	call   188a3 <log_printf>
   15db1:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15db4:	e9 b0 01 00 00       	jmp    15f69 <fatfs_mount+0x215>
    }

    // 这里需要使用查询的方式来读取，因为此时多进程还没有跑起来，只在初始化阶段？
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   15db9:	6a 01                	push   $0x1
   15dbb:	ff 75 f0             	pushl  -0x10(%ebp)
   15dbe:	6a 00                	push   $0x0
   15dc0:	ff 75 f4             	pushl  -0xc(%ebp)
   15dc3:	e8 ff e0 ff ff       	call   13ec7 <dev_read>
   15dc8:	83 c4 10             	add    $0x10,%esp
   15dcb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1)
   15dce:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15dd2:	7f 15                	jg     15de9 <fatfs_mount+0x95>
    {
        log_printf("read dbr failed.");
   15dd4:	83 ec 0c             	sub    $0xc,%esp
   15dd7:	68 b7 99 01 00       	push   $0x199b7
   15ddc:	e8 c2 2a 00 00       	call   188a3 <log_printf>
   15de1:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15de4:	e9 80 01 00 00       	jmp    15f69 <fatfs_mount+0x215>
    }

    // 解析DBR参数，解析出有用的参数
    fat_t *fat = &fs->fat_data;
   15de9:	8b 45 08             	mov    0x8(%ebp),%eax
   15dec:	05 18 02 00 00       	add    $0x218,%eax
   15df1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->fat_buffer = (uint8_t *)dbr;
   15df4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15df7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15dfa:	89 50 24             	mov    %edx,0x24(%eax)
    fat->bytes_per_sec = dbr->BPB_BytsPerSec;
   15dfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e00:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15e04:	0f b7 d0             	movzwl %ax,%edx
   15e07:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e0a:	89 50 0c             	mov    %edx,0xc(%eax)
    fat->tbl_start = dbr->BPB_RsvdSecCnt;
   15e0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e10:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15e14:	0f b7 d0             	movzwl %ax,%edx
   15e17:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e1a:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   15e1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e1f:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   15e23:	0f b7 d0             	movzwl %ax,%edx
   15e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e29:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   15e2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e2f:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   15e33:	0f b6 d0             	movzbl %al,%edx
   15e36:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e39:	89 50 04             	mov    %edx,0x4(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   15e3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e3f:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   15e43:	0f b7 d0             	movzwl %ax,%edx
   15e46:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e49:	89 50 14             	mov    %edx,0x14(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   15e4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e4f:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   15e53:	0f b6 d0             	movzbl %al,%edx
   15e56:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e59:	89 50 10             	mov    %edx,0x10(%eax)
    fat->cluster_byte_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   15e5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e5f:	8b 50 10             	mov    0x10(%eax),%edx
   15e62:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15e65:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   15e69:	0f b7 c0             	movzwl %ax,%eax
   15e6c:	0f af d0             	imul   %eax,%edx
   15e6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e72:	89 50 20             	mov    %edx,0x20(%eax)
    fat->root_start = fat->tbl_start + fat->tbl_sectors * fat->tbl_cnt;
   15e75:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e78:	8b 10                	mov    (%eax),%edx
   15e7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e7d:	8b 48 08             	mov    0x8(%eax),%ecx
   15e80:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e83:	8b 40 04             	mov    0x4(%eax),%eax
   15e86:	0f af c1             	imul   %ecx,%eax
   15e89:	01 c2                	add    %eax,%edx
   15e8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e8e:	89 50 18             	mov    %edx,0x18(%eax)
    fat->data_start = fat->root_start + fat->root_ent_cnt * 32 / SECTOR_SIZE;
   15e91:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e94:	8b 50 18             	mov    0x18(%eax),%edx
   15e97:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15e9a:	8b 40 14             	mov    0x14(%eax),%eax
   15e9d:	c1 e0 05             	shl    $0x5,%eax
   15ea0:	c1 e8 09             	shr    $0x9,%eax
   15ea3:	01 c2                	add    %eax,%edx
   15ea5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ea8:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->curr_sector = -1;
   15eab:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15eae:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    fat->fs = fs;
   15eb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15eb8:	8b 55 08             	mov    0x8(%ebp),%edx
   15ebb:	89 50 2c             	mov    %edx,0x2c(%eax)
    mutex_init(&fat->mutex);
   15ebe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ec1:	83 c0 30             	add    $0x30,%eax
   15ec4:	83 ec 0c             	sub    $0xc,%esp
   15ec7:	50                   	push   %eax
   15ec8:	e8 e1 1c 00 00       	call   17bae <mutex_init>
   15ecd:	83 c4 10             	add    $0x10,%esp

    fs->mutex = &fat->mutex;
   15ed0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ed3:	8d 50 30             	lea    0x30(%eax),%edx
   15ed6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ed9:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)
    // 简单检查是否是fat16文件系统, 可以在下边做进一步的更多检查。此处只检查做一点点检查
    if (fat->tbl_cnt != 2)
   15edf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15ee2:	8b 40 04             	mov    0x4(%eax),%eax
   15ee5:	83 f8 02             	cmp    $0x2,%eax
   15ee8:	74 18                	je     15f02 <fatfs_mount+0x1ae>
    {
        log_printf("fat table num error, major: %x, minor: %x", dev_major, dev_minor);
   15eea:	83 ec 04             	sub    $0x4,%esp
   15eed:	ff 75 10             	pushl  0x10(%ebp)
   15ef0:	ff 75 0c             	pushl  0xc(%ebp)
   15ef3:	68 c8 99 01 00       	push   $0x199c8
   15ef8:	e8 a6 29 00 00       	call   188a3 <log_printf>
   15efd:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15f00:	eb 67                	jmp    15f69 <fatfs_mount+0x215>
    }

    if (kernel_memcmp(dbr->BS_FileSysType, "FAT16", 5) != 0)
   15f02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f05:	83 c0 36             	add    $0x36,%eax
   15f08:	83 ec 04             	sub    $0x4,%esp
   15f0b:	6a 05                	push   $0x5
   15f0d:	68 f2 99 01 00       	push   $0x199f2
   15f12:	50                   	push   %eax
   15f13:	e8 22 24 00 00       	call   1833a <kernel_memcmp>
   15f18:	83 c4 10             	add    $0x10,%esp
   15f1b:	85 c0                	test   %eax,%eax
   15f1d:	74 18                	je     15f37 <fatfs_mount+0x1e3>
    {
        log_printf("not a fat16 file system, major: %x, minor: %x", dev_major, dev_minor);
   15f1f:	83 ec 04             	sub    $0x4,%esp
   15f22:	ff 75 10             	pushl  0x10(%ebp)
   15f25:	ff 75 0c             	pushl  0xc(%ebp)
   15f28:	68 f8 99 01 00       	push   $0x199f8
   15f2d:	e8 71 29 00 00       	call   188a3 <log_printf>
   15f32:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   15f35:	eb 32                	jmp    15f69 <fatfs_mount+0x215>
    }

    // 记录相关的打开信息
    fs->type = FS_FAT16;
   15f37:	8b 45 08             	mov    0x8(%ebp),%eax
   15f3a:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   15f41:	00 00 00 
    fs->data = &fs->fat_data;
   15f44:	8b 45 08             	mov    0x8(%ebp),%eax
   15f47:	8d 90 18 02 00 00    	lea    0x218(%eax),%edx
   15f4d:	8b 45 08             	mov    0x8(%ebp),%eax
   15f50:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   15f56:	8b 45 08             	mov    0x8(%ebp),%eax
   15f59:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15f5c:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)
    return 0;
   15f62:	b8 00 00 00 00       	mov    $0x0,%eax
   15f67:	eb 28                	jmp    15f91 <fatfs_mount+0x23d>

mount_failed:
    if (dbr)
   15f69:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15f6d:	74 0f                	je     15f7e <fatfs_mount+0x22a>
    {
        memory_free_page((uint32_t)dbr);
   15f6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f72:	83 ec 0c             	sub    $0xc,%esp
   15f75:	50                   	push   %eax
   15f76:	e8 11 ad ff ff       	call   10c8c <memory_free_page>
   15f7b:	83 c4 10             	add    $0x10,%esp
    }
    dev_close(dev_id);
   15f7e:	83 ec 0c             	sub    $0xc,%esp
   15f81:	ff 75 f4             	pushl  -0xc(%ebp)
   15f84:	e8 22 e0 ff ff       	call   13fab <dev_close>
   15f89:	83 c4 10             	add    $0x10,%esp
    return -1;
   15f8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15f91:	c9                   	leave  
   15f92:	c3                   	ret    

00015f93 <fatfs_unmount>:

/**
 * @brief 卸载fatfs文件系统
 */
void fatfs_unmount(struct _fs_t *fs)
{
   15f93:	55                   	push   %ebp
   15f94:	89 e5                	mov    %esp,%ebp
   15f96:	83 ec 18             	sub    $0x18,%esp
    fat_t *fat = (fat_t *)fs->data;
   15f99:	8b 45 08             	mov    0x8(%ebp),%eax
   15f9c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   15fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dev_close(fs->dev_id);
   15fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   15fa8:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   15fae:	83 ec 0c             	sub    $0xc,%esp
   15fb1:	50                   	push   %eax
   15fb2:	e8 f4 df ff ff       	call   13fab <dev_close>
   15fb7:	83 c4 10             	add    $0x10,%esp
    memory_free_page((uint32_t)fat->fat_buffer);
   15fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15fbd:	8b 40 24             	mov    0x24(%eax),%eax
   15fc0:	83 ec 0c             	sub    $0xc,%esp
   15fc3:	50                   	push   %eax
   15fc4:	e8 c3 ac ff ff       	call   10c8c <memory_free_page>
   15fc9:	83 c4 10             	add    $0x10,%esp
}
   15fcc:	90                   	nop
   15fcd:	c9                   	leave  
   15fce:	c3                   	ret    

00015fcf <read_from_diritem>:

/**
 * @brief 从diritem中读取相应的文件信息
 */
static void read_from_diritem(fat_t *fat, file_t *file, diritem_t *item, int index)
{
   15fcf:	55                   	push   %ebp
   15fd0:	89 e5                	mov    %esp,%ebp
    file->type = diritem_get_type(item);
   15fd2:	ff 75 10             	pushl  0x10(%ebp)
   15fd5:	e8 fa f9 ff ff       	call   159d4 <diritem_get_type>
   15fda:	83 c4 04             	add    $0x4,%esp
   15fdd:	89 c2                	mov    %eax,%edx
   15fdf:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fe2:	89 50 20             	mov    %edx,0x20(%eax)
    file->size = (int)item->DIR_FileSize;
   15fe5:	8b 45 10             	mov    0x10(%ebp),%eax
   15fe8:	8b 50 1c             	mov    0x1c(%eax),%edx
   15feb:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fee:	89 50 24             	mov    %edx,0x24(%eax)
    file->pos = 0;
   15ff1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ff4:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   15ffb:	8b 45 10             	mov    0x10(%ebp),%eax
   15ffe:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16002:	0f b7 c0             	movzwl %ax,%eax
   16005:	c1 e0 10             	shl    $0x10,%eax
   16008:	89 c2                	mov    %eax,%edx
   1600a:	8b 45 10             	mov    0x10(%ebp),%eax
   1600d:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16011:	0f b7 c0             	movzwl %ax,%eax
   16014:	09 c2                	or     %eax,%edx
   16016:	8b 45 0c             	mov    0xc(%ebp),%eax
   16019:	89 50 34             	mov    %edx,0x34(%eax)
    file->cblk = file->sblk;
   1601c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1601f:	8b 50 34             	mov    0x34(%eax),%edx
   16022:	8b 45 0c             	mov    0xc(%ebp),%eax
   16025:	89 50 38             	mov    %edx,0x38(%eax)
    file->p_index = index;
   16028:	8b 45 0c             	mov    0xc(%ebp),%eax
   1602b:	8b 55 14             	mov    0x14(%ebp),%edx
   1602e:	89 50 3c             	mov    %edx,0x3c(%eax)
}
   16031:	90                   	nop
   16032:	c9                   	leave  
   16033:	c3                   	ret    

00016034 <cluster_set_next>:

/**
 * @brief 修改簇链
 */
int cluster_set_next(fat_t *fat, cluster_t curr, cluster_t next)
{
   16034:	55                   	push   %ebp
   16035:	89 e5                	mov    %esp,%ebp
   16037:	83 ec 38             	sub    $0x38,%esp
   1603a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1603d:	8b 45 10             	mov    0x10(%ebp),%eax
   16040:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   16044:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    if (!cluster_is_valid(curr))
   16048:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   1604c:	50                   	push   %eax
   1604d:	e8 46 fa ff ff       	call   15a98 <cluster_is_valid>
   16052:	83 c4 04             	add    $0x4,%esp
   16055:	85 c0                	test   %eax,%eax
   16057:	75 0a                	jne    16063 <cluster_set_next+0x2f>
    {
        return -1;
   16059:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1605e:	e9 09 01 00 00       	jmp    1616c <cluster_set_next+0x138>
    }
    int offset = curr * sizeof(cluster_t);
   16063:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   16067:	01 c0                	add    %eax,%eax
   16069:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int sector = offset / fat->bytes_per_sec;
   1606c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1606f:	8b 55 08             	mov    0x8(%ebp),%edx
   16072:	8b 4a 0c             	mov    0xc(%edx),%ecx
   16075:	ba 00 00 00 00       	mov    $0x0,%edx
   1607a:	f7 f1                	div    %ecx
   1607c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int off_sector = offset % fat->bytes_per_sec;
   1607f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16082:	8b 55 08             	mov    0x8(%ebp),%edx
   16085:	8b 4a 0c             	mov    0xc(%edx),%ecx
   16088:	ba 00 00 00 00       	mov    $0x0,%edx
   1608d:	f7 f1                	div    %ecx
   1608f:	89 d0                	mov    %edx,%eax
   16091:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (sector > fat->tbl_sectors)
   16094:	8b 45 08             	mov    0x8(%ebp),%eax
   16097:	8b 50 08             	mov    0x8(%eax),%edx
   1609a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1609d:	39 c2                	cmp    %eax,%edx
   1609f:	73 1a                	jae    160bb <cluster_set_next+0x87>
    {
        log_printf("cluster too large.");
   160a1:	83 ec 0c             	sub    $0xc,%esp
   160a4:	68 41 99 01 00       	push   $0x19941
   160a9:	e8 f5 27 00 00       	call   188a3 <log_printf>
   160ae:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   160b1:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   160b6:	e9 b1 00 00 00       	jmp    1616c <cluster_set_next+0x138>
    }

    int err = bread_sector(fat, fat->tbl_start + sector);
   160bb:	8b 45 08             	mov    0x8(%ebp),%eax
   160be:	8b 10                	mov    (%eax),%edx
   160c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160c3:	01 d0                	add    %edx,%eax
   160c5:	83 ec 08             	sub    $0x8,%esp
   160c8:	50                   	push   %eax
   160c9:	ff 75 08             	pushl  0x8(%ebp)
   160cc:	e8 1b f7 ff ff       	call   157ec <bread_sector>
   160d1:	83 c4 10             	add    $0x10,%esp
   160d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0)
   160d7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   160db:	79 17                	jns    160f4 <cluster_set_next+0xc0>
    {
        log_printf("read fat table failed.");
   160dd:	83 ec 0c             	sub    $0xc,%esp
   160e0:	68 54 99 01 00       	push   $0x19954
   160e5:	e8 b9 27 00 00       	call   188a3 <log_printf>
   160ea:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   160ed:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   160f2:	eb 78                	jmp    1616c <cluster_set_next+0x138>
    }
    *(cluster_t *)(fat->fat_buffer + off_sector) = next;
   160f4:	8b 45 08             	mov    0x8(%ebp),%eax
   160f7:	8b 50 24             	mov    0x24(%eax),%edx
   160fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   160fd:	01 c2                	add    %eax,%edx
   160ff:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   16103:	66 89 02             	mov    %ax,(%edx)

    for (int i = 0; i < fat->tbl_cnt; i++)
   16106:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1610d:	eb 4b                	jmp    1615a <cluster_set_next+0x126>
    {
        err = bwrite_sector(fat, fat->tbl_start + sector);
   1610f:	8b 45 08             	mov    0x8(%ebp),%eax
   16112:	8b 10                	mov    (%eax),%edx
   16114:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16117:	01 d0                	add    %edx,%eax
   16119:	83 ec 08             	sub    $0x8,%esp
   1611c:	50                   	push   %eax
   1611d:	ff 75 08             	pushl  0x8(%ebp)
   16120:	e8 20 f7 ff ff       	call   15845 <bwrite_sector>
   16125:	83 c4 10             	add    $0x10,%esp
   16128:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   1612b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1612f:	79 17                	jns    16148 <cluster_set_next+0x114>
        {
            log_printf("write fat table failed.");
   16131:	83 ec 0c             	sub    $0xc,%esp
   16134:	68 26 9a 01 00       	push   $0x19a26
   16139:	e8 65 27 00 00       	call   188a3 <log_printf>
   1613e:	83 c4 10             	add    $0x10,%esp
            return -1;
   16141:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16146:	eb 24                	jmp    1616c <cluster_set_next+0x138>
        }
        sector += fat->tbl_sectors;
   16148:	8b 45 08             	mov    0x8(%ebp),%eax
   1614b:	8b 50 08             	mov    0x8(%eax),%edx
   1614e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16151:	01 d0                	add    %edx,%eax
   16153:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; i++)
   16156:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1615a:	8b 45 08             	mov    0x8(%ebp),%eax
   1615d:	8b 50 04             	mov    0x4(%eax),%edx
   16160:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16163:	39 c2                	cmp    %eax,%edx
   16165:	77 a8                	ja     1610f <cluster_set_next+0xdb>
    }
    return 0;
   16167:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1616c:	c9                   	leave  
   1616d:	c3                   	ret    

0001616e <cluster_free_chain>:

/**
 * @brief 释放簇链
 */
void cluster_free_chain(fat_t *fat, cluster_t start)
{
   1616e:	55                   	push   %ebp
   1616f:	89 e5                	mov    %esp,%ebp
   16171:	83 ec 28             	sub    $0x28,%esp
   16174:	8b 45 0c             	mov    0xc(%ebp),%eax
   16177:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start))
   1617b:	eb 34                	jmp    161b1 <cluster_free_chain+0x43>
    {
        cluster_t next = cluster_get_next(fat, start);
   1617d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   16181:	83 ec 08             	sub    $0x8,%esp
   16184:	50                   	push   %eax
   16185:	ff 75 08             	pushl  0x8(%ebp)
   16188:	e8 34 f9 ff ff       	call   15ac1 <cluster_get_next>
   1618d:	83 c4 10             	add    $0x10,%esp
   16190:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, FAT_CLUSTER_FREE);
   16194:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   16198:	83 ec 04             	sub    $0x4,%esp
   1619b:	6a 00                	push   $0x0
   1619d:	50                   	push   %eax
   1619e:	ff 75 08             	pushl  0x8(%ebp)
   161a1:	e8 8e fe ff ff       	call   16034 <cluster_set_next>
   161a6:	83 c4 10             	add    $0x10,%esp
        start = next;
   161a9:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   161ad:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start))
   161b1:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   161b5:	83 ec 0c             	sub    $0xc,%esp
   161b8:	50                   	push   %eax
   161b9:	e8 da f8 ff ff       	call   15a98 <cluster_is_valid>
   161be:	83 c4 10             	add    $0x10,%esp
   161c1:	85 c0                	test   %eax,%eax
   161c3:	75 b8                	jne    1617d <cluster_free_chain+0xf>
    }
}
   161c5:	90                   	nop
   161c6:	c9                   	leave  
   161c7:	c3                   	ret    

000161c8 <cluster_alloc_free>:

cluster_t cluster_alloc_free(fat_t *fat, int cnt)
{
   161c8:	55                   	push   %ebp
   161c9:	89 e5                	mov    %esp,%ebp
   161cb:	83 ec 28             	sub    $0x28,%esp
    cluster_t pre, curr, start;
    int c_total = fat->tbl_sectors * fat->bytes_per_sec / sizeof(cluster_t);
   161ce:	8b 45 08             	mov    0x8(%ebp),%eax
   161d1:	8b 50 08             	mov    0x8(%eax),%edx
   161d4:	8b 45 08             	mov    0x8(%ebp),%eax
   161d7:	8b 40 0c             	mov    0xc(%eax),%eax
   161da:	0f af c2             	imul   %edx,%eax
   161dd:	d1 e8                	shr    %eax
   161df:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pre = start = FAT_CLUSTER_INVALID;
   161e2:	66 c7 45 f2 f8 ff    	movw   $0xfff8,-0xe(%ebp)
   161e8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   161ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    for (curr = 2; (curr < c_total) && cnt; curr++)
   161f0:	66 c7 45 f4 02 00    	movw   $0x2,-0xc(%ebp)
   161f6:	e9 a0 00 00 00       	jmp    1629b <cluster_alloc_free+0xd3>
    {
        cluster_t free = cluster_get_next(fat, curr);
   161fb:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   161ff:	83 ec 08             	sub    $0x8,%esp
   16202:	50                   	push   %eax
   16203:	ff 75 08             	pushl  0x8(%ebp)
   16206:	e8 b6 f8 ff ff       	call   15ac1 <cluster_get_next>
   1620b:	83 c4 10             	add    $0x10,%esp
   1620e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        if (free == FAT_CLUSTER_FREE)
   16212:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   16217:	75 77                	jne    16290 <cluster_alloc_free+0xc8>
        {
            // 记录首个簇
            if (!cluster_is_valid(start))
   16219:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   1621d:	83 ec 0c             	sub    $0xc,%esp
   16220:	50                   	push   %eax
   16221:	e8 72 f8 ff ff       	call   15a98 <cluster_is_valid>
   16226:	83 c4 10             	add    $0x10,%esp
   16229:	85 c0                	test   %eax,%eax
   1622b:	75 08                	jne    16235 <cluster_alloc_free+0x6d>
            {
                start = curr;
   1622d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   16231:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            }

            // 前一簇如果有效，则设置。否则忽略掉
            if (cluster_is_valid(pre))
   16235:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16239:	83 ec 0c             	sub    $0xc,%esp
   1623c:	50                   	push   %eax
   1623d:	e8 56 f8 ff ff       	call   15a98 <cluster_is_valid>
   16242:	83 c4 10             	add    $0x10,%esp
   16245:	85 c0                	test   %eax,%eax
   16247:	74 3b                	je     16284 <cluster_alloc_free+0xbc>
            {
                // 找到空表项，设置前一表项的链接
                int err = cluster_set_next(fat, pre, curr);
   16249:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
   1624d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16251:	83 ec 04             	sub    $0x4,%esp
   16254:	52                   	push   %edx
   16255:	50                   	push   %eax
   16256:	ff 75 08             	pushl  0x8(%ebp)
   16259:	e8 d6 fd ff ff       	call   16034 <cluster_set_next>
   1625e:	83 c4 10             	add    $0x10,%esp
   16261:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0)
   16264:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16268:	79 1a                	jns    16284 <cluster_alloc_free+0xbc>
                {
                    cluster_free_chain(fat, start);
   1626a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   1626e:	83 ec 08             	sub    $0x8,%esp
   16271:	50                   	push   %eax
   16272:	ff 75 08             	pushl  0x8(%ebp)
   16275:	e8 f4 fe ff ff       	call   1616e <cluster_free_chain>
   1627a:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   1627d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   16282:	eb 6f                	jmp    162f3 <cluster_alloc_free+0x12b>
                }
            }

            pre = curr;
   16284:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   16288:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            cnt--;
   1628c:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; (curr < c_total) && cnt; curr++)
   16290:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   16294:	83 c0 01             	add    $0x1,%eax
   16297:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   1629b:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   1629f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   162a2:	7e 0a                	jle    162ae <cluster_alloc_free+0xe6>
   162a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   162a8:	0f 85 4d ff ff ff    	jne    161fb <cluster_alloc_free+0x33>
        }
    }

    // 最后的结点
    if (cnt == 0)
   162ae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   162b2:	75 27                	jne    162db <cluster_alloc_free+0x113>
    {
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   162b4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   162b8:	83 ec 04             	sub    $0x4,%esp
   162bb:	68 f8 ff 00 00       	push   $0xfff8
   162c0:	50                   	push   %eax
   162c1:	ff 75 08             	pushl  0x8(%ebp)
   162c4:	e8 6b fd ff ff       	call   16034 <cluster_set_next>
   162c9:	83 c4 10             	add    $0x10,%esp
   162cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err == 0)
   162cf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   162d3:	75 06                	jne    162db <cluster_alloc_free+0x113>
        {
            return start;
   162d5:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   162d9:	eb 18                	jmp    162f3 <cluster_alloc_free+0x12b>
        }
    }

    // 失败，空间不够等问题
    cluster_free_chain(fat, start);
   162db:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   162df:	83 ec 08             	sub    $0x8,%esp
   162e2:	50                   	push   %eax
   162e3:	ff 75 08             	pushl  0x8(%ebp)
   162e6:	e8 83 fe ff ff       	call   1616e <cluster_free_chain>
   162eb:	83 c4 10             	add    $0x10,%esp
    return FAT_CLUSTER_INVALID;
   162ee:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
}
   162f3:	c9                   	leave  
   162f4:	c3                   	ret    

000162f5 <expand_file>:

/**
 * @brief 更改文件大小, 此时当前族号已经到达了最后的簇号
 */
static int expand_file(file_t *file, int inc_bytes)
{
   162f5:	55                   	push   %ebp
   162f6:	89 e5                	mov    %esp,%ebp
   162f8:	53                   	push   %ebx
   162f9:	83 ec 24             	sub    $0x24,%esp
    fat_t *fat = (fat_t *)file->fs->data;
   162fc:	8b 45 08             	mov    0x8(%ebp),%eax
   162ff:	8b 40 44             	mov    0x44(%eax),%eax
   16302:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16308:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int cluster_cnt;
    if ((file->size == 0) || (file->size % fat->cluster_byte_size == 0))
   1630b:	8b 45 08             	mov    0x8(%ebp),%eax
   1630e:	8b 40 24             	mov    0x24(%eax),%eax
   16311:	85 c0                	test   %eax,%eax
   16313:	74 19                	je     1632e <expand_file+0x39>
   16315:	8b 45 08             	mov    0x8(%ebp),%eax
   16318:	8b 40 24             	mov    0x24(%eax),%eax
   1631b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1631e:	8b 4a 20             	mov    0x20(%edx),%ecx
   16321:	ba 00 00 00 00       	mov    $0x0,%edx
   16326:	f7 f1                	div    %ecx
   16328:	89 d0                	mov    %edx,%eax
   1632a:	85 c0                	test   %eax,%eax
   1632c:	75 29                	jne    16357 <expand_file+0x62>
    {
        // 文件为空，或者刚好达到的簇的末尾
        cluster_cnt = up2(inc_bytes, fat->cluster_byte_size) / fat->cluster_byte_size;
   1632e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16331:	8b 50 20             	mov    0x20(%eax),%edx
   16334:	8b 45 0c             	mov    0xc(%ebp),%eax
   16337:	52                   	push   %edx
   16338:	50                   	push   %eax
   16339:	e8 97 f4 ff ff       	call   157d5 <up2>
   1633e:	83 c4 08             	add    $0x8,%esp
   16341:	89 c1                	mov    %eax,%ecx
   16343:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16346:	8b 58 20             	mov    0x20(%eax),%ebx
   16349:	89 c8                	mov    %ecx,%eax
   1634b:	ba 00 00 00 00       	mov    $0x0,%edx
   16350:	f7 f3                	div    %ebx
   16352:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16355:	eb 6b                	jmp    163c2 <expand_file+0xcd>
    }
    else
    {
        // 文件非空，当前簇的空闲量，如果空间够增长，则直接退出了
        // 例如：大小为2048，再扩充1024,簇大小为1024
        int cfree = fat->cluster_byte_size - (file->size % fat->cluster_byte_size);
   16357:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1635a:	8b 48 20             	mov    0x20(%eax),%ecx
   1635d:	8b 45 08             	mov    0x8(%ebp),%eax
   16360:	8b 40 24             	mov    0x24(%eax),%eax
   16363:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16366:	8b 5a 20             	mov    0x20(%edx),%ebx
   16369:	ba 00 00 00 00       	mov    $0x0,%edx
   1636e:	f7 f3                	div    %ebx
   16370:	89 d0                	mov    %edx,%eax
   16372:	29 c1                	sub    %eax,%ecx
   16374:	89 c8                	mov    %ecx,%eax
   16376:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cfree > inc_bytes)
   16379:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1637c:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1637f:	7e 0a                	jle    1638b <expand_file+0x96>
        {
            return 0;
   16381:	b8 00 00 00 00       	mov    $0x0,%eax
   16386:	e9 da 00 00 00       	jmp    16465 <expand_file+0x170>
        }

        cluster_cnt = up2(inc_bytes - cfree, fat->cluster_byte_size) / fat->cluster_byte_size;
   1638b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1638e:	8b 40 20             	mov    0x20(%eax),%eax
   16391:	8b 55 0c             	mov    0xc(%ebp),%edx
   16394:	2b 55 ec             	sub    -0x14(%ebp),%edx
   16397:	50                   	push   %eax
   16398:	52                   	push   %edx
   16399:	e8 37 f4 ff ff       	call   157d5 <up2>
   1639e:	83 c4 08             	add    $0x8,%esp
   163a1:	89 c1                	mov    %eax,%ecx
   163a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163a6:	8b 58 20             	mov    0x20(%eax),%ebx
   163a9:	89 c8                	mov    %ecx,%eax
   163ab:	ba 00 00 00 00       	mov    $0x0,%edx
   163b0:	f7 f3                	div    %ebx
   163b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (cluster_cnt == 0)
   163b5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   163b9:	75 07                	jne    163c2 <expand_file+0xcd>
        {
            cluster_cnt = 1;
   163bb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        }
    }

    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   163c2:	83 ec 08             	sub    $0x8,%esp
   163c5:	ff 75 f4             	pushl  -0xc(%ebp)
   163c8:	ff 75 f0             	pushl  -0x10(%ebp)
   163cb:	e8 f8 fd ff ff       	call   161c8 <cluster_alloc_free>
   163d0:	83 c4 10             	add    $0x10,%esp
   163d3:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start))
   163d7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   163db:	83 ec 0c             	sub    $0xc,%esp
   163de:	50                   	push   %eax
   163df:	e8 b4 f6 ff ff       	call   15a98 <cluster_is_valid>
   163e4:	83 c4 10             	add    $0x10,%esp
   163e7:	85 c0                	test   %eax,%eax
   163e9:	75 17                	jne    16402 <expand_file+0x10d>
    {
        log_printf("no cluster for file write");
   163eb:	83 ec 0c             	sub    $0xc,%esp
   163ee:	68 3e 9a 01 00       	push   $0x19a3e
   163f3:	e8 ab 24 00 00       	call   188a3 <log_printf>
   163f8:	83 c4 10             	add    $0x10,%esp
        return -1;
   163fb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16400:	eb 63                	jmp    16465 <expand_file+0x170>
    }

    // 在文件关闭时，回写
    if (!cluster_is_valid(file->sblk))
   16402:	8b 45 08             	mov    0x8(%ebp),%eax
   16405:	8b 40 34             	mov    0x34(%eax),%eax
   16408:	0f b7 c0             	movzwl %ax,%eax
   1640b:	83 ec 0c             	sub    $0xc,%esp
   1640e:	50                   	push   %eax
   1640f:	e8 84 f6 ff ff       	call   15a98 <cluster_is_valid>
   16414:	83 c4 10             	add    $0x10,%esp
   16417:	85 c0                	test   %eax,%eax
   16419:	75 18                	jne    16433 <expand_file+0x13e>
    {
        file->cblk = file->sblk = start;
   1641b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   1641f:	8b 45 08             	mov    0x8(%ebp),%eax
   16422:	89 50 34             	mov    %edx,0x34(%eax)
   16425:	8b 45 08             	mov    0x8(%ebp),%eax
   16428:	8b 50 34             	mov    0x34(%eax),%edx
   1642b:	8b 45 08             	mov    0x8(%ebp),%eax
   1642e:	89 50 38             	mov    %edx,0x38(%eax)
   16431:	eb 2d                	jmp    16460 <expand_file+0x16b>
    }
    else
    {
        // 建立链接关系
        int err = cluster_set_next(fat, file->cblk, start);
   16433:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16437:	8b 45 08             	mov    0x8(%ebp),%eax
   1643a:	8b 40 38             	mov    0x38(%eax),%eax
   1643d:	0f b7 c0             	movzwl %ax,%eax
   16440:	83 ec 04             	sub    $0x4,%esp
   16443:	52                   	push   %edx
   16444:	50                   	push   %eax
   16445:	ff 75 f0             	pushl  -0x10(%ebp)
   16448:	e8 e7 fb ff ff       	call   16034 <cluster_set_next>
   1644d:	83 c4 10             	add    $0x10,%esp
   16450:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   16453:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16457:	79 07                	jns    16460 <expand_file+0x16b>
        {
            return -1;
   16459:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1645e:	eb 05                	jmp    16465 <expand_file+0x170>
        }
    }

    return 0;
   16460:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16468:	c9                   	leave  
   16469:	c3                   	ret    

0001646a <fatfs_open>:

/**
 * @brief 打开指定的文件
 */
int fatfs_open(struct _fs_t *fs, const char *path, file_t *file)
{
   1646a:	55                   	push   %ebp
   1646b:	89 e5                	mov    %esp,%ebp
   1646d:	83 ec 48             	sub    $0x48,%esp
    fat_t *fat = (fat_t *)fs->data;
   16470:	8b 45 08             	mov    0x8(%ebp),%eax
   16473:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16479:	89 45 e8             	mov    %eax,-0x18(%ebp)
    diritem_t *file_item = (diritem_t *)0;
   1647c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;
   16483:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++)
   1648a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   16491:	eb 6f                	jmp    16502 <fatfs_open+0x98>
    {
        diritem_t *item = read_dir_entry(fat, i);
   16493:	83 ec 08             	sub    $0x8,%esp
   16496:	ff 75 ec             	pushl  -0x14(%ebp)
   16499:	ff 75 e8             	pushl  -0x18(%ebp)
   1649c:	e8 77 f5 ff ff       	call   15a18 <read_dir_entry>
   164a1:	83 c4 10             	add    $0x10,%esp
   164a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0)
   164a7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   164ab:	75 0a                	jne    164b7 <fatfs_open+0x4d>
        {
            return -1;
   164ad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   164b2:	e9 3f 01 00 00       	jmp    165f6 <fatfs_open+0x18c>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END)
   164b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   164ba:	0f b6 00             	movzbl (%eax),%eax
   164bd:	84 c0                	test   %al,%al
   164bf:	75 08                	jne    164c9 <fatfs_open+0x5f>
        {
            p_index = i;
   164c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   164c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   164c7:	eb 46                	jmp    1650f <fatfs_open+0xa5>
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE)
   164c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   164cc:	0f b6 00             	movzbl (%eax),%eax
   164cf:	3c e5                	cmp    $0xe5,%al
   164d1:	75 08                	jne    164db <fatfs_open+0x71>
        {
            p_index = i;
   164d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   164d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
            continue;
   164d9:	eb 23                	jmp    164fe <fatfs_open+0x94>
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path))
   164db:	83 ec 08             	sub    $0x8,%esp
   164de:	ff 75 0c             	pushl  0xc(%ebp)
   164e1:	ff 75 e4             	pushl  -0x1c(%ebp)
   164e4:	e8 21 f4 ff ff       	call   1590a <diritem_name_match>
   164e9:	83 c4 10             	add    $0x10,%esp
   164ec:	85 c0                	test   %eax,%eax
   164ee:	74 0e                	je     164fe <fatfs_open+0x94>
        {
            file_item = item;
   164f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   164f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   164f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   164f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   164fc:	eb 11                	jmp    1650f <fatfs_open+0xa5>
    for (int i = 0; i < fat->root_ent_cnt; i++)
   164fe:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16502:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16505:	8b 50 14             	mov    0x14(%eax),%edx
   16508:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1650b:	39 c2                	cmp    %eax,%edx
   1650d:	77 84                	ja     16493 <fatfs_open+0x29>
        }
    }

    if (file_item)
   1650f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16513:	74 62                	je     16577 <fatfs_open+0x10d>
    {
        read_from_diritem(fat, file, file_item, p_index);
   16515:	ff 75 f0             	pushl  -0x10(%ebp)
   16518:	ff 75 f4             	pushl  -0xc(%ebp)
   1651b:	ff 75 10             	pushl  0x10(%ebp)
   1651e:	ff 75 e8             	pushl  -0x18(%ebp)
   16521:	e8 a9 fa ff ff       	call   15fcf <read_from_diritem>
   16526:	83 c4 10             	add    $0x10,%esp
        // 如果要截断，则清空
        if (file->mode & O_TRUNC)
   16529:	8b 45 10             	mov    0x10(%ebp),%eax
   1652c:	8b 40 40             	mov    0x40(%eax),%eax
   1652f:	25 00 04 00 00       	and    $0x400,%eax
   16534:	85 c0                	test   %eax,%eax
   16536:	74 38                	je     16570 <fatfs_open+0x106>
        {
            cluster_free_chain(fat, file->sblk);
   16538:	8b 45 10             	mov    0x10(%ebp),%eax
   1653b:	8b 40 34             	mov    0x34(%eax),%eax
   1653e:	0f b7 c0             	movzwl %ax,%eax
   16541:	83 ec 08             	sub    $0x8,%esp
   16544:	50                   	push   %eax
   16545:	ff 75 e8             	pushl  -0x18(%ebp)
   16548:	e8 21 fc ff ff       	call   1616e <cluster_free_chain>
   1654d:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   16550:	8b 45 10             	mov    0x10(%ebp),%eax
   16553:	c7 40 34 f8 ff 00 00 	movl   $0xfff8,0x34(%eax)
   1655a:	8b 45 10             	mov    0x10(%ebp),%eax
   1655d:	8b 50 34             	mov    0x34(%eax),%edx
   16560:	8b 45 10             	mov    0x10(%ebp),%eax
   16563:	89 50 38             	mov    %edx,0x38(%eax)
            file->size = 0;
   16566:	8b 45 10             	mov    0x10(%ebp),%eax
   16569:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        }
        return 0;
   16570:	b8 00 00 00 00       	mov    $0x0,%eax
   16575:	eb 7f                	jmp    165f6 <fatfs_open+0x18c>
    }
    else if ((file->mode & O_CREAT) && (p_index >= 0))
   16577:	8b 45 10             	mov    0x10(%ebp),%eax
   1657a:	8b 40 40             	mov    0x40(%eax),%eax
   1657d:	25 00 02 00 00       	and    $0x200,%eax
   16582:	85 c0                	test   %eax,%eax
   16584:	74 6b                	je     165f1 <fatfs_open+0x187>
   16586:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1658a:	78 65                	js     165f1 <fatfs_open+0x187>
    {
        // 创建一个空闲的diritem项
        diritem_t item;
        diritem_init(&item, 0, path);
   1658c:	83 ec 04             	sub    $0x4,%esp
   1658f:	ff 75 0c             	pushl  0xc(%ebp)
   16592:	6a 00                	push   $0x0
   16594:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16597:	50                   	push   %eax
   16598:	e8 7f f6 ff ff       	call   15c1c <diritem_init>
   1659d:	83 c4 10             	add    $0x10,%esp
        int err = write_dir_entry(fat, &item, p_index);
   165a0:	83 ec 04             	sub    $0x4,%esp
   165a3:	ff 75 f0             	pushl  -0x10(%ebp)
   165a6:	8d 45 c0             	lea    -0x40(%ebp),%eax
   165a9:	50                   	push   %eax
   165aa:	ff 75 e8             	pushl  -0x18(%ebp)
   165ad:	e8 f8 f6 ff ff       	call   15caa <write_dir_entry>
   165b2:	83 c4 10             	add    $0x10,%esp
   165b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   165b8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   165bc:	79 17                	jns    165d5 <fatfs_open+0x16b>
        {
            log_printf("create file failed.");
   165be:	83 ec 0c             	sub    $0xc,%esp
   165c1:	68 58 9a 01 00       	push   $0x19a58
   165c6:	e8 d8 22 00 00       	call   188a3 <log_printf>
   165cb:	83 c4 10             	add    $0x10,%esp
            return -1;
   165ce:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   165d3:	eb 21                	jmp    165f6 <fatfs_open+0x18c>
        }

        read_from_diritem(fat, file, &item, p_index);
   165d5:	ff 75 f0             	pushl  -0x10(%ebp)
   165d8:	8d 45 c0             	lea    -0x40(%ebp),%eax
   165db:	50                   	push   %eax
   165dc:	ff 75 10             	pushl  0x10(%ebp)
   165df:	ff 75 e8             	pushl  -0x18(%ebp)
   165e2:	e8 e8 f9 ff ff       	call   15fcf <read_from_diritem>
   165e7:	83 c4 10             	add    $0x10,%esp
        return 0;
   165ea:	b8 00 00 00 00       	mov    $0x0,%eax
   165ef:	eb 05                	jmp    165f6 <fatfs_open+0x18c>
    }

    return -1;
   165f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   165f6:	c9                   	leave  
   165f7:	c3                   	ret    

000165f8 <fatfs_read>:

/**
 * @brief 读文件
 */
int fatfs_read(char *buf, int size, file_t *file)
{
   165f8:	55                   	push   %ebp
   165f9:	89 e5                	mov    %esp,%ebp
   165fb:	53                   	push   %ebx
   165fc:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t *)file->fs->data;
   165ff:	8b 45 10             	mov    0x10(%ebp),%eax
   16602:	8b 40 44             	mov    0x44(%eax),%eax
   16605:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1660b:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 调整读取量，不要超过文件总量
    uint32_t nbytes = size;
   1660e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16611:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size)
   16614:	8b 45 10             	mov    0x10(%ebp),%eax
   16617:	8b 40 30             	mov    0x30(%eax),%eax
   1661a:	89 c2                	mov    %eax,%edx
   1661c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1661f:	01 c2                	add    %eax,%edx
   16621:	8b 45 10             	mov    0x10(%ebp),%eax
   16624:	8b 40 24             	mov    0x24(%eax),%eax
   16627:	39 c2                	cmp    %eax,%edx
   16629:	76 13                	jbe    1663e <fatfs_read+0x46>
    {
        nbytes = file->size - file->pos;
   1662b:	8b 45 10             	mov    0x10(%ebp),%eax
   1662e:	8b 50 24             	mov    0x24(%eax),%edx
   16631:	8b 45 10             	mov    0x10(%ebp),%eax
   16634:	8b 40 30             	mov    0x30(%eax),%eax
   16637:	29 c2                	sub    %eax,%edx
   16639:	89 d0                	mov    %edx,%eax
   1663b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   1663e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0)
   16645:	e9 41 01 00 00       	jmp    1678b <fatfs_read+0x193>
    {
        uint32_t curr_read = nbytes;
   1664a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1664d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   16650:	8b 45 10             	mov    0x10(%ebp),%eax
   16653:	8b 40 30             	mov    0x30(%eax),%eax
   16656:	89 c2                	mov    %eax,%edx
   16658:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1665b:	8b 48 20             	mov    0x20(%eax),%ecx
   1665e:	89 d0                	mov    %edx,%eax
   16660:	ba 00 00 00 00       	mov    $0x0,%edx
   16665:	f7 f1                	div    %ecx
   16667:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2) * fat->sec_per_cluster; // 从2开始
   1666a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1666d:	8b 50 1c             	mov    0x1c(%eax),%edx
   16670:	8b 45 10             	mov    0x10(%ebp),%eax
   16673:	8b 40 38             	mov    0x38(%eax),%eax
   16676:	83 e8 02             	sub    $0x2,%eax
   16679:	89 c1                	mov    %eax,%ecx
   1667b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1667e:	8b 40 10             	mov    0x10(%eax),%eax
   16681:	0f af c1             	imul   %ecx,%eax
   16684:	01 d0                	add    %edx,%eax
   16686:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 如果是整簇, 只读一簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size))
   16689:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1668d:	75 4c                	jne    166db <fatfs_read+0xe3>
   1668f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16692:	8b 40 20             	mov    0x20(%eax),%eax
   16695:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16698:	75 41                	jne    166db <fatfs_read+0xe3>
        {
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   1669a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1669d:	8b 40 10             	mov    0x10(%eax),%eax
   166a0:	89 c1                	mov    %eax,%ecx
   166a2:	8b 55 e0             	mov    -0x20(%ebp),%edx
   166a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166a8:	8b 40 2c             	mov    0x2c(%eax),%eax
   166ab:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   166b1:	51                   	push   %ecx
   166b2:	ff 75 08             	pushl  0x8(%ebp)
   166b5:	52                   	push   %edx
   166b6:	50                   	push   %eax
   166b7:	e8 0b d8 ff ff       	call   13ec7 <dev_read>
   166bc:	83 c4 10             	add    $0x10,%esp
   166bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0)
   166c2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   166c6:	79 08                	jns    166d0 <fatfs_read+0xd8>
            {
                return total_read;
   166c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   166cb:	e9 c8 00 00 00       	jmp    16798 <fatfs_read+0x1a0>
            }

            curr_read = fat->cluster_byte_size;
   166d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166d3:	8b 40 20             	mov    0x20(%eax),%eax
   166d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
   166d9:	eb 7d                	jmp    16758 <fatfs_read+0x160>
        }
        else
        {
            // 如果跨簇，只读第一个簇内的一部分
            if (cluster_offset + curr_read > fat->cluster_byte_size)
   166db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   166de:	8b 45 ec             	mov    -0x14(%ebp),%eax
   166e1:	01 c2                	add    %eax,%edx
   166e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166e6:	8b 40 20             	mov    0x20(%eax),%eax
   166e9:	39 c2                	cmp    %eax,%edx
   166eb:	76 0c                	jbe    166f9 <fatfs_read+0x101>
            {
                curr_read = fat->cluster_byte_size - cluster_offset;
   166ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166f0:	8b 40 20             	mov    0x20(%eax),%eax
   166f3:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   166f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            // 读取整个簇，然后从中拷贝
            fat->curr_sector = -1;
   166f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   166fc:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16703:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16706:	8b 40 10             	mov    0x10(%eax),%eax
   16709:	89 c3                	mov    %eax,%ebx
   1670b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1670e:	8b 48 24             	mov    0x24(%eax),%ecx
   16711:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16714:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16717:	8b 40 2c             	mov    0x2c(%eax),%eax
   1671a:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16720:	53                   	push   %ebx
   16721:	51                   	push   %ecx
   16722:	52                   	push   %edx
   16723:	50                   	push   %eax
   16724:	e8 9e d7 ff ff       	call   13ec7 <dev_read>
   16729:	83 c4 10             	add    $0x10,%esp
   1672c:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0)
   1672f:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   16733:	79 05                	jns    1673a <fatfs_read+0x142>
            {
                return total_read;
   16735:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16738:	eb 5e                	jmp    16798 <fatfs_read+0x1a0>
            }
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   1673a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1673d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16740:	8b 4a 24             	mov    0x24(%edx),%ecx
   16743:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16746:	01 ca                	add    %ecx,%edx
   16748:	83 ec 04             	sub    $0x4,%esp
   1674b:	50                   	push   %eax
   1674c:	52                   	push   %edx
   1674d:	ff 75 08             	pushl  0x8(%ebp)
   16750:	e8 55 1b 00 00       	call   182aa <kernel_memcpy>
   16755:	83 c4 10             	add    $0x10,%esp
        }

        buf += curr_read;
   16758:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1675b:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   1675e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16761:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   16764:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16767:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 前移文件指针
        int err = move_file_pos(file, fat, curr_read, 0);
   1676a:	6a 00                	push   $0x0
   1676c:	ff 75 ec             	pushl  -0x14(%ebp)
   1676f:	ff 75 e8             	pushl  -0x18(%ebp)
   16772:	ff 75 10             	pushl  0x10(%ebp)
   16775:	e8 20 f4 ff ff       	call   15b9a <move_file_pos>
   1677a:	83 c4 10             	add    $0x10,%esp
   1677d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0)
   16780:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16784:	79 05                	jns    1678b <fatfs_read+0x193>
        {
            return total_read;
   16786:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16789:	eb 0d                	jmp    16798 <fatfs_read+0x1a0>
    while (nbytes > 0)
   1678b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1678f:	0f 85 b5 fe ff ff    	jne    1664a <fatfs_read+0x52>
        }
    }

    return total_read;
   16795:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16798:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1679b:	c9                   	leave  
   1679c:	c3                   	ret    

0001679d <fatfs_write>:

/**
 * @brief 写文件数据
 */
int fatfs_write(char *buf, int size, file_t *file)
{
   1679d:	55                   	push   %ebp
   1679e:	89 e5                	mov    %esp,%ebp
   167a0:	53                   	push   %ebx
   167a1:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t *)file->fs->data;
   167a4:	8b 45 10             	mov    0x10(%ebp),%eax
   167a7:	8b 40 44             	mov    0x44(%eax),%eax
   167aa:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   167b0:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 如果文件大小不够，则先扩展文件大小
    if (file->pos + size > file->size)
   167b3:	8b 45 10             	mov    0x10(%ebp),%eax
   167b6:	8b 50 30             	mov    0x30(%eax),%edx
   167b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   167bc:	01 d0                	add    %edx,%eax
   167be:	89 c2                	mov    %eax,%edx
   167c0:	8b 45 10             	mov    0x10(%ebp),%eax
   167c3:	8b 40 24             	mov    0x24(%eax),%eax
   167c6:	39 c2                	cmp    %eax,%edx
   167c8:	76 3e                	jbe    16808 <fatfs_write+0x6b>
    {
        int inc_size = file->pos + size - file->size;
   167ca:	8b 45 10             	mov    0x10(%ebp),%eax
   167cd:	8b 50 30             	mov    0x30(%eax),%edx
   167d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   167d3:	01 d0                	add    %edx,%eax
   167d5:	89 c2                	mov    %eax,%edx
   167d7:	8b 45 10             	mov    0x10(%ebp),%eax
   167da:	8b 40 24             	mov    0x24(%eax),%eax
   167dd:	29 c2                	sub    %eax,%edx
   167df:	89 d0                	mov    %edx,%eax
   167e1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = expand_file(file, inc_size);
   167e4:	83 ec 08             	sub    $0x8,%esp
   167e7:	ff 75 e4             	pushl  -0x1c(%ebp)
   167ea:	ff 75 10             	pushl  0x10(%ebp)
   167ed:	e8 03 fb ff ff       	call   162f5 <expand_file>
   167f2:	83 c4 10             	add    $0x10,%esp
   167f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   167f8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   167fc:	79 0a                	jns    16808 <fatfs_write+0x6b>
        {
            return 0;
   167fe:	b8 00 00 00 00       	mov    $0x0,%eax
   16803:	e9 ae 01 00 00       	jmp    169b6 <fatfs_write+0x219>
        }
    }

    uint32_t nbytes = size;
   16808:	8b 45 0c             	mov    0xc(%ebp),%eax
   1680b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   1680e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes)
   16815:	e9 8f 01 00 00       	jmp    169a9 <fatfs_write+0x20c>
    {
        // 每次写的数据量取决于当前簇中剩余的空间，以及size的量综合
        uint32_t curr_write = nbytes;
   1681a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1681d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   16820:	8b 45 10             	mov    0x10(%ebp),%eax
   16823:	8b 40 30             	mov    0x30(%eax),%eax
   16826:	89 c2                	mov    %eax,%edx
   16828:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1682b:	8b 48 20             	mov    0x20(%eax),%ecx
   1682e:	89 d0                	mov    %edx,%eax
   16830:	ba 00 00 00 00       	mov    $0x0,%edx
   16835:	f7 f1                	div    %ecx
   16837:	89 55 dc             	mov    %edx,-0x24(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2) * fat->sec_per_cluster; // 从2开始
   1683a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1683d:	8b 50 1c             	mov    0x1c(%eax),%edx
   16840:	8b 45 10             	mov    0x10(%ebp),%eax
   16843:	8b 40 38             	mov    0x38(%eax),%eax
   16846:	83 e8 02             	sub    $0x2,%eax
   16849:	89 c1                	mov    %eax,%ecx
   1684b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1684e:	8b 40 10             	mov    0x10(%eax),%eax
   16851:	0f af c1             	imul   %ecx,%eax
   16854:	01 d0                	add    %edx,%eax
   16856:	89 45 d8             	mov    %eax,-0x28(%ebp)

        // 如果是整簇, 写整簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size))
   16859:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   1685d:	75 4f                	jne    168ae <fatfs_write+0x111>
   1685f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16862:	8b 40 20             	mov    0x20(%eax),%eax
   16865:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16868:	75 44                	jne    168ae <fatfs_write+0x111>
        {
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   1686a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1686d:	8b 40 10             	mov    0x10(%eax),%eax
   16870:	89 c1                	mov    %eax,%ecx
   16872:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16875:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16878:	8b 40 2c             	mov    0x2c(%eax),%eax
   1687b:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16881:	51                   	push   %ecx
   16882:	ff 75 08             	pushl  0x8(%ebp)
   16885:	52                   	push   %edx
   16886:	50                   	push   %eax
   16887:	e8 87 d6 ff ff       	call   13f13 <dev_write>
   1688c:	83 c4 10             	add    $0x10,%esp
   1688f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0)
   16892:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16896:	79 08                	jns    168a0 <fatfs_write+0x103>
            {
                return total_write;
   16898:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1689b:	e9 16 01 00 00       	jmp    169b6 <fatfs_write+0x219>
            }

            curr_write = fat->cluster_byte_size;
   168a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168a3:	8b 40 20             	mov    0x20(%eax),%eax
   168a6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
   168a9:	e9 b7 00 00 00       	jmp    16965 <fatfs_write+0x1c8>
        }
        else
        {
            // 如果跨簇，只写第一个簇内的一部分
            if (cluster_offset + curr_write > fat->cluster_byte_size)
   168ae:	8b 55 dc             	mov    -0x24(%ebp),%edx
   168b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168b4:	01 c2                	add    %eax,%edx
   168b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168b9:	8b 40 20             	mov    0x20(%eax),%eax
   168bc:	39 c2                	cmp    %eax,%edx
   168be:	76 0c                	jbe    168cc <fatfs_write+0x12f>
            {
                curr_write = fat->cluster_byte_size - cluster_offset;
   168c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168c3:	8b 40 20             	mov    0x20(%eax),%eax
   168c6:	2b 45 dc             	sub    -0x24(%ebp),%eax
   168c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   168cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168cf:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   168d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168d9:	8b 40 10             	mov    0x10(%eax),%eax
   168dc:	89 c3                	mov    %eax,%ebx
   168de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168e1:	8b 48 24             	mov    0x24(%eax),%ecx
   168e4:	8b 55 d8             	mov    -0x28(%ebp),%edx
   168e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168ea:	8b 40 2c             	mov    0x2c(%eax),%eax
   168ed:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   168f3:	53                   	push   %ebx
   168f4:	51                   	push   %ecx
   168f5:	52                   	push   %edx
   168f6:	50                   	push   %eax
   168f7:	e8 cb d5 ff ff       	call   13ec7 <dev_read>
   168fc:	83 c4 10             	add    $0x10,%esp
   168ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0)
   16902:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16906:	79 08                	jns    16910 <fatfs_write+0x173>
            {
                return total_write;
   16908:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1690b:	e9 a6 00 00 00       	jmp    169b6 <fatfs_write+0x219>
            }
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);
   16910:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16913:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16916:	8b 4a 24             	mov    0x24(%edx),%ecx
   16919:	8b 55 dc             	mov    -0x24(%ebp),%edx
   1691c:	01 ca                	add    %ecx,%edx
   1691e:	83 ec 04             	sub    $0x4,%esp
   16921:	50                   	push   %eax
   16922:	ff 75 08             	pushl  0x8(%ebp)
   16925:	52                   	push   %edx
   16926:	e8 7f 19 00 00       	call   182aa <kernel_memcpy>
   1692b:	83 c4 10             	add    $0x10,%esp

            // 写整个簇，然后从中拷贝
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   1692e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16931:	8b 40 10             	mov    0x10(%eax),%eax
   16934:	89 c3                	mov    %eax,%ebx
   16936:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16939:	8b 48 24             	mov    0x24(%eax),%ecx
   1693c:	8b 55 d8             	mov    -0x28(%ebp),%edx
   1693f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16942:	8b 40 2c             	mov    0x2c(%eax),%eax
   16945:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1694b:	53                   	push   %ebx
   1694c:	51                   	push   %ecx
   1694d:	52                   	push   %edx
   1694e:	50                   	push   %eax
   1694f:	e8 bf d5 ff ff       	call   13f13 <dev_write>
   16954:	83 c4 10             	add    $0x10,%esp
   16957:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0)
   1695a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   1695e:	79 05                	jns    16965 <fatfs_write+0x1c8>
            {
                return total_write;
   16960:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16963:	eb 51                	jmp    169b6 <fatfs_write+0x219>
            }
        }

        buf += curr_write;
   16965:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16968:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   1696b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1696e:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16971:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16974:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 不考虑不截断文件的写入，这样计算文件大小略麻烦
        file->size += curr_write;
   16977:	8b 45 10             	mov    0x10(%ebp),%eax
   1697a:	8b 50 24             	mov    0x24(%eax),%edx
   1697d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16980:	01 c2                	add    %eax,%edx
   16982:	8b 45 10             	mov    0x10(%ebp),%eax
   16985:	89 50 24             	mov    %edx,0x24(%eax)

        // 前移文件指针
        int err = move_file_pos(file, fat, curr_write, 1);
   16988:	6a 01                	push   $0x1
   1698a:	ff 75 ec             	pushl  -0x14(%ebp)
   1698d:	ff 75 e8             	pushl  -0x18(%ebp)
   16990:	ff 75 10             	pushl  0x10(%ebp)
   16993:	e8 02 f2 ff ff       	call   15b9a <move_file_pos>
   16998:	83 c4 10             	add    $0x10,%esp
   1699b:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if (err < 0)
   1699e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   169a2:	79 05                	jns    169a9 <fatfs_write+0x20c>
        {
            return total_write;
   169a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   169a7:	eb 0d                	jmp    169b6 <fatfs_write+0x219>
    while (nbytes)
   169a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   169ad:	0f 85 67 fe ff ff    	jne    1681a <fatfs_write+0x7d>
        }
    }

    return total_write;
   169b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   169b6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   169b9:	c9                   	leave  
   169ba:	c3                   	ret    

000169bb <fatfs_close>:

void fatfs_close(file_t *file)
{
   169bb:	55                   	push   %ebp
   169bc:	89 e5                	mov    %esp,%ebp
   169be:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY)
   169c1:	8b 45 08             	mov    0x8(%ebp),%eax
   169c4:	8b 40 40             	mov    0x40(%eax),%eax
   169c7:	85 c0                	test   %eax,%eax
   169c9:	74 74                	je     16a3f <fatfs_close+0x84>
    {
        return;
    }

    fat_t *fat = (fat_t *)file->fs->data;
   169cb:	8b 45 08             	mov    0x8(%ebp),%eax
   169ce:	8b 40 44             	mov    0x44(%eax),%eax
   169d1:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   169d7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    diritem_t *item = read_dir_entry(fat, file->p_index);
   169da:	8b 45 08             	mov    0x8(%ebp),%eax
   169dd:	8b 40 3c             	mov    0x3c(%eax),%eax
   169e0:	83 ec 08             	sub    $0x8,%esp
   169e3:	50                   	push   %eax
   169e4:	ff 75 f4             	pushl  -0xc(%ebp)
   169e7:	e8 2c f0 ff ff       	call   15a18 <read_dir_entry>
   169ec:	83 c4 10             	add    $0x10,%esp
   169ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0)
   169f2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   169f6:	74 4a                	je     16a42 <fatfs_close+0x87>
    {
        return;
    }

    item->DIR_FileSize = file->size;
   169f8:	8b 45 08             	mov    0x8(%ebp),%eax
   169fb:	8b 50 24             	mov    0x24(%eax),%edx
   169fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a01:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t)(file->sblk >> 16);
   16a04:	8b 45 08             	mov    0x8(%ebp),%eax
   16a07:	8b 40 34             	mov    0x34(%eax),%eax
   16a0a:	c1 f8 10             	sar    $0x10,%eax
   16a0d:	89 c2                	mov    %eax,%edx
   16a0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a12:	66 89 50 14          	mov    %dx,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t)(file->sblk & 0xFFFF);
   16a16:	8b 45 08             	mov    0x8(%ebp),%eax
   16a19:	8b 40 34             	mov    0x34(%eax),%eax
   16a1c:	89 c2                	mov    %eax,%edx
   16a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a21:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16a25:	8b 45 08             	mov    0x8(%ebp),%eax
   16a28:	8b 40 3c             	mov    0x3c(%eax),%eax
   16a2b:	83 ec 04             	sub    $0x4,%esp
   16a2e:	50                   	push   %eax
   16a2f:	ff 75 f0             	pushl  -0x10(%ebp)
   16a32:	ff 75 f4             	pushl  -0xc(%ebp)
   16a35:	e8 70 f2 ff ff       	call   15caa <write_dir_entry>
   16a3a:	83 c4 10             	add    $0x10,%esp
   16a3d:	eb 04                	jmp    16a43 <fatfs_close+0x88>
        return;
   16a3f:	90                   	nop
   16a40:	eb 01                	jmp    16a43 <fatfs_close+0x88>
        return;
   16a42:	90                   	nop
}
   16a43:	c9                   	leave  
   16a44:	c3                   	ret    

00016a45 <fatfs_seek>:

/**
 * @brief 文件读写位置的调整
 */
int fatfs_seek(file_t *file, uint32_t offset, int dir)
{
   16a45:	55                   	push   %ebp
   16a46:	89 e5                	mov    %esp,%ebp
   16a48:	83 ec 28             	sub    $0x28,%esp
    if (dir != 0)
   16a4b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16a4f:	74 0a                	je     16a5b <fatfs_seek+0x16>
    {
        return -1;
   16a51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16a56:	e9 c7 00 00 00       	jmp    16b22 <fatfs_seek+0xdd>
    }
    fat_t *fat = (fat_t *)file->fs->data;
   16a5b:	8b 45 08             	mov    0x8(%ebp),%eax
   16a5e:	8b 40 44             	mov    0x44(%eax),%eax
   16a61:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16a67:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t current_cluster = file->sblk;
   16a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   16a6d:	8b 40 34             	mov    0x34(%eax),%eax
   16a70:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16a74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16a7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a7e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (offset_to_move > 0)
   16a81:	eb 7d                	jmp    16b00 <fatfs_seek+0xbb>
    {
        uint32_t c_offset = curr_pos % fat->cluster_byte_size;
   16a83:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a86:	8b 48 20             	mov    0x20(%eax),%ecx
   16a89:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a8c:	ba 00 00 00 00       	mov    $0x0,%edx
   16a91:	f7 f1                	div    %ecx
   16a93:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t curr_move = offset_to_move;
   16a96:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a99:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if (c_offset + curr_move < fat->cluster_byte_size)
   16a9c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16a9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16aa2:	01 c2                	add    %eax,%edx
   16aa4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16aa7:	8b 40 20             	mov    0x20(%eax),%eax
   16aaa:	39 c2                	cmp    %eax,%edx
   16aac:	73 08                	jae    16ab6 <fatfs_seek+0x71>
        {
            curr_pos += curr_move;
   16aae:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16ab1:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16ab4:	eb 54                	jmp    16b0a <fatfs_seek+0xc5>
        }
        curr_move = fat->cluster_byte_size - c_offset;
   16ab6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ab9:	8b 40 20             	mov    0x20(%eax),%eax
   16abc:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16abf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16ac2:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16ac5:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16ac8:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16acb:	29 45 ec             	sub    %eax,-0x14(%ebp)

        current_cluster = cluster_get_next(fat, current_cluster);
   16ace:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16ad2:	83 ec 08             	sub    $0x8,%esp
   16ad5:	50                   	push   %eax
   16ad6:	ff 75 e8             	pushl  -0x18(%ebp)
   16ad9:	e8 e3 ef ff ff       	call   15ac1 <cluster_get_next>
   16ade:	83 c4 10             	add    $0x10,%esp
   16ae1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

        if (!cluster_is_valid(current_cluster))
   16ae5:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16ae9:	83 ec 0c             	sub    $0xc,%esp
   16aec:	50                   	push   %eax
   16aed:	e8 a6 ef ff ff       	call   15a98 <cluster_is_valid>
   16af2:	83 c4 10             	add    $0x10,%esp
   16af5:	85 c0                	test   %eax,%eax
   16af7:	75 07                	jne    16b00 <fatfs_seek+0xbb>
        {
            return -1;
   16af9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16afe:	eb 22                	jmp    16b22 <fatfs_seek+0xdd>
    while (offset_to_move > 0)
   16b00:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16b04:	0f 85 79 ff ff ff    	jne    16a83 <fatfs_seek+0x3e>
        }
    }
    file->pos = curr_pos;
   16b0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16b0d:	8b 45 08             	mov    0x8(%ebp),%eax
   16b10:	89 50 30             	mov    %edx,0x30(%eax)
    file->cblk = current_cluster;
   16b13:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16b17:	8b 45 08             	mov    0x8(%ebp),%eax
   16b1a:	89 50 38             	mov    %edx,0x38(%eax)
    return 0; // 不支持，只允许应用程序连续读取
   16b1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16b22:	c9                   	leave  
   16b23:	c3                   	ret    

00016b24 <fatfs_stat>:

int fatfs_stat(file_t *file, struct stat *st)
{
   16b24:	55                   	push   %ebp
   16b25:	89 e5                	mov    %esp,%ebp
    return -1;
   16b27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16b2c:	5d                   	pop    %ebp
   16b2d:	c3                   	ret    

00016b2e <fatfs_opendir>:

/**
 * @brief 打开目录。只是简单地读取位置重设为0
 */
int fatfs_opendir(struct _fs_t *fs, const char *name, DIR *dir)
{
   16b2e:	55                   	push   %ebp
   16b2f:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16b31:	8b 45 10             	mov    0x10(%ebp),%eax
   16b34:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16b3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16b3f:	5d                   	pop    %ebp
   16b40:	c3                   	ret    

00016b41 <fatfs_readdir>:

/**
 * @brief 读取一个目录项
 */
int fatfs_readdir(struct _fs_t *fs, DIR *dir, struct dirent *dirent)
{
   16b41:	55                   	push   %ebp
   16b42:	89 e5                	mov    %esp,%ebp
   16b44:	83 ec 18             	sub    $0x18,%esp
    fat_t *fat = (fat_t *)fs->data;
   16b47:	8b 45 08             	mov    0x8(%ebp),%eax
   16b4a:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16b50:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 做一些简单的判断，检查
    while (dir->index < fat->root_ent_cnt)
   16b53:	e9 be 00 00 00       	jmp    16c16 <fatfs_readdir+0xd5>
    {
        diritem_t *item = read_dir_entry(fat, dir->index);
   16b58:	8b 45 0c             	mov    0xc(%ebp),%eax
   16b5b:	8b 00                	mov    (%eax),%eax
   16b5d:	83 ec 08             	sub    $0x8,%esp
   16b60:	50                   	push   %eax
   16b61:	ff 75 f4             	pushl  -0xc(%ebp)
   16b64:	e8 af ee ff ff       	call   15a18 <read_dir_entry>
   16b69:	83 c4 10             	add    $0x10,%esp
   16b6c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0)
   16b6f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16b73:	75 0a                	jne    16b7f <fatfs_readdir+0x3e>
        {
            return -1;
   16b75:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16b7a:	e9 b4 00 00 00       	jmp    16c33 <fatfs_readdir+0xf2>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END)
   16b7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b82:	0f b6 00             	movzbl (%eax),%eax
   16b85:	84 c0                	test   %al,%al
   16b87:	0f 84 a0 00 00 00    	je     16c2d <fatfs_readdir+0xec>
        {
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] != DIRITEM_NAME_FREE)
   16b8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b90:	0f b6 00             	movzbl (%eax),%eax
   16b93:	3c e5                	cmp    $0xe5,%al
   16b95:	74 72                	je     16c09 <fatfs_readdir+0xc8>
        {
            file_type_t type = diritem_get_type(item);
   16b97:	83 ec 0c             	sub    $0xc,%esp
   16b9a:	ff 75 f0             	pushl  -0x10(%ebp)
   16b9d:	e8 32 ee ff ff       	call   159d4 <diritem_get_type>
   16ba2:	83 c4 10             	add    $0x10,%esp
   16ba5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR))
   16ba8:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16bac:	74 06                	je     16bb4 <fatfs_readdir+0x73>
   16bae:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16bb2:	75 55                	jne    16c09 <fatfs_readdir+0xc8>
            {
                dirent->index = dir->index++;
   16bb4:	8b 45 0c             	mov    0xc(%ebp),%eax
   16bb7:	8b 00                	mov    (%eax),%eax
   16bb9:	8d 48 01             	lea    0x1(%eax),%ecx
   16bbc:	8b 55 0c             	mov    0xc(%ebp),%edx
   16bbf:	89 0a                	mov    %ecx,(%edx)
   16bc1:	8b 55 10             	mov    0x10(%ebp),%edx
   16bc4:	89 02                	mov    %eax,(%edx)
                dirent->type = diritem_get_type(item);
   16bc6:	83 ec 0c             	sub    $0xc,%esp
   16bc9:	ff 75 f0             	pushl  -0x10(%ebp)
   16bcc:	e8 03 ee ff ff       	call   159d4 <diritem_get_type>
   16bd1:	83 c4 10             	add    $0x10,%esp
   16bd4:	89 c2                	mov    %eax,%edx
   16bd6:	8b 45 10             	mov    0x10(%ebp),%eax
   16bd9:	89 50 04             	mov    %edx,0x4(%eax)
                dirent->size = item->DIR_FileSize;
   16bdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16bdf:	8b 40 1c             	mov    0x1c(%eax),%eax
   16be2:	89 c2                	mov    %eax,%edx
   16be4:	8b 45 10             	mov    0x10(%ebp),%eax
   16be7:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
                diritem_get_name(item, dirent->name);
   16bed:	8b 45 10             	mov    0x10(%ebp),%eax
   16bf0:	83 c0 08             	add    $0x8,%eax
   16bf3:	83 ec 08             	sub    $0x8,%esp
   16bf6:	50                   	push   %eax
   16bf7:	ff 75 f0             	pushl  -0x10(%ebp)
   16bfa:	e8 42 ed ff ff       	call   15941 <diritem_get_name>
   16bff:	83 c4 10             	add    $0x10,%esp
                return 0;
   16c02:	b8 00 00 00 00       	mov    $0x0,%eax
   16c07:	eb 2a                	jmp    16c33 <fatfs_readdir+0xf2>
            }
        }

        dir->index++;
   16c09:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c0c:	8b 00                	mov    (%eax),%eax
   16c0e:	8d 50 01             	lea    0x1(%eax),%edx
   16c11:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c14:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt)
   16c16:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c19:	8b 00                	mov    (%eax),%eax
   16c1b:	89 c2                	mov    %eax,%edx
   16c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16c20:	8b 40 14             	mov    0x14(%eax),%eax
   16c23:	39 c2                	cmp    %eax,%edx
   16c25:	0f 82 2d ff ff ff    	jb     16b58 <fatfs_readdir+0x17>
   16c2b:	eb 01                	jmp    16c2e <fatfs_readdir+0xed>
            break;
   16c2d:	90                   	nop
    }

    return -1;
   16c2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16c33:	c9                   	leave  
   16c34:	c3                   	ret    

00016c35 <fatfs_closedir>:

/**
 * @brief 关闭文件扫描读取
 */
int fatfs_closedir(struct _fs_t *fs, DIR *dir)
{
   16c35:	55                   	push   %ebp
   16c36:	89 e5                	mov    %esp,%ebp
    return 0;
   16c38:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16c3d:	5d                   	pop    %ebp
   16c3e:	c3                   	ret    

00016c3f <unlink>:

/**
 * @brief 删除文件
 */
int unlink(struct _fs_t *fs, const char *name)
{
   16c3f:	55                   	push   %ebp
   16c40:	89 e5                	mov    %esp,%ebp
   16c42:	83 ec 38             	sub    $0x38,%esp
    fat_t *fat = (fat_t *)fs->data;
   16c45:	8b 45 08             	mov    0x8(%ebp),%eax
   16c48:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16c4e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++)
   16c51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16c58:	e9 b3 00 00 00       	jmp    16d10 <unlink+0xd1>
    {
        diritem_t *item = read_dir_entry(fat, i);
   16c5d:	83 ec 08             	sub    $0x8,%esp
   16c60:	ff 75 f4             	pushl  -0xc(%ebp)
   16c63:	ff 75 f0             	pushl  -0x10(%ebp)
   16c66:	e8 ad ed ff ff       	call   15a18 <read_dir_entry>
   16c6b:	83 c4 10             	add    $0x10,%esp
   16c6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0)
   16c71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16c75:	75 0a                	jne    16c81 <unlink+0x42>
        {
            return -1;
   16c77:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c7c:	e9 a8 00 00 00       	jmp    16d29 <unlink+0xea>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END)
   16c81:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c84:	0f b6 00             	movzbl (%eax),%eax
   16c87:	84 c0                	test   %al,%al
   16c89:	0f 84 94 00 00 00    	je     16d23 <unlink+0xe4>
        {
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE)
   16c8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c92:	0f b6 00             	movzbl (%eax),%eax
   16c95:	3c e5                	cmp    $0xe5,%al
   16c97:	74 72                	je     16d0b <unlink+0xcc>
        {
            continue;
        }

        // 找到要打开的目录
        if (diritem_name_match(item, name))
   16c99:	83 ec 08             	sub    $0x8,%esp
   16c9c:	ff 75 0c             	pushl  0xc(%ebp)
   16c9f:	ff 75 ec             	pushl  -0x14(%ebp)
   16ca2:	e8 63 ec ff ff       	call   1590a <diritem_name_match>
   16ca7:	83 c4 10             	add    $0x10,%esp
   16caa:	85 c0                	test   %eax,%eax
   16cac:	74 5e                	je     16d0c <unlink+0xcd>
        {

            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16cae:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16cb1:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16cb5:	0f b7 c0             	movzwl %ax,%eax
   16cb8:	c1 e0 10             	shl    $0x10,%eax
   16cbb:	89 c2                	mov    %eax,%edx
   16cbd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16cc0:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16cc4:	0f b7 c0             	movzwl %ax,%eax
   16cc7:	09 d0                	or     %edx,%eax
   16cc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16ccc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ccf:	0f b7 c0             	movzwl %ax,%eax
   16cd2:	83 ec 08             	sub    $0x8,%esp
   16cd5:	50                   	push   %eax
   16cd6:	ff 75 f0             	pushl  -0x10(%ebp)
   16cd9:	e8 90 f4 ff ff       	call   1616e <cluster_free_chain>
   16cde:	83 c4 10             	add    $0x10,%esp
            diritem_t item;
            kernel_memset(&item, 0, sizeof(diritem_t));
   16ce1:	83 ec 04             	sub    $0x4,%esp
   16ce4:	6a 20                	push   $0x20
   16ce6:	6a 00                	push   $0x0
   16ce8:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16ceb:	50                   	push   %eax
   16cec:	e8 08 16 00 00       	call   182f9 <kernel_memset>
   16cf1:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &item, i);
   16cf4:	83 ec 04             	sub    $0x4,%esp
   16cf7:	ff 75 f4             	pushl  -0xc(%ebp)
   16cfa:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16cfd:	50                   	push   %eax
   16cfe:	ff 75 f0             	pushl  -0x10(%ebp)
   16d01:	e8 a4 ef ff ff       	call   15caa <write_dir_entry>
   16d06:	83 c4 10             	add    $0x10,%esp
   16d09:	eb 1e                	jmp    16d29 <unlink+0xea>
            continue;
   16d0b:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; i++)
   16d0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d13:	8b 50 14             	mov    0x14(%eax),%edx
   16d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16d19:	39 c2                	cmp    %eax,%edx
   16d1b:	0f 87 3c ff ff ff    	ja     16c5d <unlink+0x1e>
   16d21:	eb 01                	jmp    16d24 <unlink+0xe5>
            break;
   16d23:	90                   	nop
        }
    }

    return -1;
   16d24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16d29:	c9                   	leave  
   16d2a:	c3                   	ret    

00016d2b <file_alloc>:
static mutex_t file_alloc_mutex;                // 访问file_table的互斥信号量

/**
 * @brief 分配一个文件描述符
 */
file_t * file_alloc (void) {
   16d2b:	55                   	push   %ebp
   16d2c:	89 e5                	mov    %esp,%ebp
   16d2e:	83 ec 18             	sub    $0x18,%esp
    file_t * file = (file_t *)0;
   16d31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   16d38:	83 ec 0c             	sub    $0xc,%esp
   16d3b:	68 a0 c8 05 00       	push   $0x5c8a0
   16d40:	e8 97 0e 00 00       	call   17bdc <mutex_lock>
   16d45:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16d48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16d4f:	eb 47                	jmp    16d98 <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   16d51:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16d54:	89 d0                	mov    %edx,%eax
   16d56:	c1 e0 03             	shl    $0x3,%eax
   16d59:	01 d0                	add    %edx,%eax
   16d5b:	c1 e0 03             	shl    $0x3,%eax
   16d5e:	05 a0 88 03 00       	add    $0x388a0,%eax
   16d63:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) {
   16d66:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16d69:	8b 40 28             	mov    0x28(%eax),%eax
   16d6c:	85 c0                	test   %eax,%eax
   16d6e:	75 24                	jne    16d94 <file_alloc+0x69>
			kernel_memset(p_file, 0, sizeof(file_t));
   16d70:	83 ec 04             	sub    $0x4,%esp
   16d73:	6a 48                	push   $0x48
   16d75:	6a 00                	push   $0x0
   16d77:	ff 75 ec             	pushl  -0x14(%ebp)
   16d7a:	e8 7a 15 00 00       	call   182f9 <kernel_memset>
   16d7f:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   16d82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16d85:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
			file = p_file;
   16d8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16d8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   16d92:	eb 0d                	jmp    16da1 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16d94:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   16d98:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   16d9f:	7e b0                	jle    16d51 <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   16da1:	83 ec 0c             	sub    $0xc,%esp
   16da4:	68 a0 c8 05 00       	push   $0x5c8a0
   16da9:	e8 c5 0e 00 00       	call   17c73 <mutex_unlock>
   16dae:	83 c4 10             	add    $0x10,%esp
    return file;
   16db1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16db4:	c9                   	leave  
   16db5:	c3                   	ret    

00016db6 <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free (file_t * file) {
   16db6:	55                   	push   %ebp
   16db7:	89 e5                	mov    %esp,%ebp
   16db9:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16dbc:	83 ec 0c             	sub    $0xc,%esp
   16dbf:	68 a0 c8 05 00       	push   $0x5c8a0
   16dc4:	e8 13 0e 00 00       	call   17bdc <mutex_lock>
   16dc9:	83 c4 10             	add    $0x10,%esp
    if (file->ref) {
   16dcc:	8b 45 08             	mov    0x8(%ebp),%eax
   16dcf:	8b 40 28             	mov    0x28(%eax),%eax
   16dd2:	85 c0                	test   %eax,%eax
   16dd4:	74 0f                	je     16de5 <file_free+0x2f>
        file->ref--;
   16dd6:	8b 45 08             	mov    0x8(%ebp),%eax
   16dd9:	8b 40 28             	mov    0x28(%eax),%eax
   16ddc:	8d 50 ff             	lea    -0x1(%eax),%edx
   16ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   16de2:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   16de5:	83 ec 0c             	sub    $0xc,%esp
   16de8:	68 a0 c8 05 00       	push   $0x5c8a0
   16ded:	e8 81 0e 00 00       	call   17c73 <mutex_unlock>
   16df2:	83 c4 10             	add    $0x10,%esp
}
   16df5:	90                   	nop
   16df6:	c9                   	leave  
   16df7:	c3                   	ret    

00016df8 <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref (file_t * file) {
   16df8:	55                   	push   %ebp
   16df9:	89 e5                	mov    %esp,%ebp
   16dfb:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16dfe:	83 ec 0c             	sub    $0xc,%esp
   16e01:	68 a0 c8 05 00       	push   $0x5c8a0
   16e06:	e8 d1 0d 00 00       	call   17bdc <mutex_lock>
   16e0b:	83 c4 10             	add    $0x10,%esp
	file->ref++;
   16e0e:	8b 45 08             	mov    0x8(%ebp),%eax
   16e11:	8b 40 28             	mov    0x28(%eax),%eax
   16e14:	8d 50 01             	lea    0x1(%eax),%edx
   16e17:	8b 45 08             	mov    0x8(%ebp),%eax
   16e1a:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   16e1d:	83 ec 0c             	sub    $0xc,%esp
   16e20:	68 a0 c8 05 00       	push   $0x5c8a0
   16e25:	e8 49 0e 00 00       	call   17c73 <mutex_unlock>
   16e2a:	83 c4 10             	add    $0x10,%esp
}
   16e2d:	90                   	nop
   16e2e:	c9                   	leave  
   16e2f:	c3                   	ret    

00016e30 <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init (void) {
   16e30:	55                   	push   %ebp
   16e31:	89 e5                	mov    %esp,%ebp
   16e33:	83 ec 08             	sub    $0x8,%esp
	// 文件描述符表初始化
	kernel_memset(&file_table, 0, sizeof(file_table));
   16e36:	83 ec 04             	sub    $0x4,%esp
   16e39:	68 00 40 02 00       	push   $0x24000
   16e3e:	6a 00                	push   $0x0
   16e40:	68 a0 88 03 00       	push   $0x388a0
   16e45:	e8 af 14 00 00       	call   182f9 <kernel_memset>
   16e4a:	83 c4 10             	add    $0x10,%esp
	mutex_init(&file_alloc_mutex);
   16e4d:	83 ec 0c             	sub    $0xc,%esp
   16e50:	68 a0 c8 05 00       	push   $0x5c8a0
   16e55:	e8 54 0d 00 00       	call   17bae <mutex_init>
   16e5a:	83 c4 10             	add    $0x10,%esp
}
   16e5d:	90                   	nop
   16e5e:	c9                   	leave  
   16e5f:	c3                   	ret    

00016e60 <list_node_next>:
static inline list_node_t * list_node_next(list_node_t *node) {
   16e60:	55                   	push   %ebp
   16e61:	89 e5                	mov    %esp,%ebp
    return node->next;
   16e63:	8b 45 08             	mov    0x8(%ebp),%eax
   16e66:	8b 40 04             	mov    0x4(%eax),%eax
}
   16e69:	5d                   	pop    %ebp
   16e6a:	c3                   	ret    

00016e6b <list_first>:
static inline list_node_t* list_first(list_t *list) {
   16e6b:	55                   	push   %ebp
   16e6c:	89 e5                	mov    %esp,%ebp
    return list->first;
   16e6e:	8b 45 08             	mov    0x8(%ebp),%eax
   16e71:	8b 00                	mov    (%eax),%eax
}
   16e73:	5d                   	pop    %ebp
   16e74:	c3                   	ret    

00016e75 <is_fd_bad>:


/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad (int file) {
   16e75:	55                   	push   %ebp
   16e76:	89 e5                	mov    %esp,%ebp
	if ((file < 0) && (file >= TASK_OFILE_NR)) {
   16e78:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16e7c:	79 0d                	jns    16e8b <is_fd_bad+0x16>
   16e7e:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   16e82:	7e 07                	jle    16e8b <is_fd_bad+0x16>
		return 1;
   16e84:	b8 01 00 00 00       	mov    $0x1,%eax
   16e89:	eb 05                	jmp    16e90 <is_fd_bad+0x1b>
	}

	return 0;
   16e8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16e90:	5d                   	pop    %ebp
   16e91:	c3                   	ret    

00016e92 <get_fs_op>:

/**
 * @brief 获取指定文件系统的操作接口
 */
static fs_op_t * get_fs_op (fs_type_t type, int major) {
   16e92:	55                   	push   %ebp
   16e93:	89 e5                	mov    %esp,%ebp
	switch (type) {
   16e95:	8b 45 08             	mov    0x8(%ebp),%eax
   16e98:	85 c0                	test   %eax,%eax
   16e9a:	74 07                	je     16ea3 <get_fs_op+0x11>
   16e9c:	83 f8 01             	cmp    $0x1,%eax
   16e9f:	74 09                	je     16eaa <get_fs_op+0x18>
   16ea1:	eb 0e                	jmp    16eb1 <get_fs_op+0x1f>
	case FS_FAT16:
		return &fatfs_op;
   16ea3:	b8 40 a1 01 00       	mov    $0x1a140,%eax
   16ea8:	eb 0c                	jmp    16eb6 <get_fs_op+0x24>
	case FS_DEVFS:
		return &devfs_op;
   16eaa:	b8 00 a1 01 00       	mov    $0x1a100,%eax
   16eaf:	eb 05                	jmp    16eb6 <get_fs_op+0x24>
	default:
		return (fs_op_t *)0;
   16eb1:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
   16eb6:	5d                   	pop    %ebp
   16eb7:	c3                   	ret    

00016eb8 <mount>:

/**
 * @brief 挂载文件系统
 */
static fs_t * mount (fs_type_t type, char * mount_point, int dev_major, int dev_minor) {
   16eb8:	55                   	push   %ebp
   16eb9:	89 e5                	mov    %esp,%ebp
   16ebb:	83 ec 28             	sub    $0x28,%esp
	fs_t * fs = (fs_t *)0;
   16ebe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   16ec5:	83 ec 04             	sub    $0x4,%esp
   16ec8:	ff 75 10             	pushl  0x10(%ebp)
   16ecb:	ff 75 0c             	pushl  0xc(%ebp)
   16ece:	68 6c 9a 01 00       	push   $0x19a6c
   16ed3:	e8 cb 19 00 00       	call   188a3 <log_printf>
   16ed8:	83 c4 10             	add    $0x10,%esp

	// 遍历，查找是否已经有挂载
 	list_node_t * curr = list_first(&mounted_list);
   16edb:	83 ec 0c             	sub    $0xc,%esp
   16ede:	68 c0 c8 05 00       	push   $0x5c8c0
   16ee3:	e8 83 ff ff ff       	call   16e6b <list_first>
   16ee8:	83 c4 10             	add    $0x10,%esp
   16eeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   16eee:	eb 59                	jmp    16f49 <mount+0x91>
		fs_t * fs = list_node_parent(curr, fs_t, node);
   16ef0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16ef4:	74 0a                	je     16f00 <mount+0x48>
   16ef6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ef9:	2d 10 02 00 00       	sub    $0x210,%eax
   16efe:	eb 05                	jmp    16f05 <mount+0x4d>
   16f00:	b8 00 00 00 00       	mov    $0x0,%eax
   16f05:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNTP_SIZE) == 0) {
   16f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16f0b:	83 ec 04             	sub    $0x4,%esp
   16f0e:	68 00 02 00 00       	push   $0x200
   16f13:	ff 75 0c             	pushl  0xc(%ebp)
   16f16:	50                   	push   %eax
   16f17:	e8 10 13 00 00       	call   1822c <kernel_strncmp>
   16f1c:	83 c4 10             	add    $0x10,%esp
   16f1f:	85 c0                	test   %eax,%eax
   16f21:	75 15                	jne    16f38 <mount+0x80>
			log_printf("fs alreay mounted.");
   16f23:	83 ec 0c             	sub    $0xc,%esp
   16f26:	68 91 9a 01 00       	push   $0x19a91
   16f2b:	e8 73 19 00 00       	call   188a3 <log_printf>
   16f30:	83 c4 10             	add    $0x10,%esp
			goto mount_failed;
   16f33:	e9 21 01 00 00       	jmp    17059 <mount+0x1a1>
		}
		curr = list_node_next(curr);
   16f38:	83 ec 0c             	sub    $0xc,%esp
   16f3b:	ff 75 f0             	pushl  -0x10(%ebp)
   16f3e:	e8 1d ff ff ff       	call   16e60 <list_node_next>
   16f43:	83 c4 10             	add    $0x10,%esp
   16f46:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   16f49:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16f4d:	75 a1                	jne    16ef0 <mount+0x38>
	}

	// 分配新的fs结构
	list_node_t * free_node = list_remove_first(&free_list);
   16f4f:	83 ec 0c             	sub    $0xc,%esp
   16f52:	68 cc c8 05 00       	push   $0x5c8cc
   16f57:	e8 1b 18 00 00       	call   18777 <list_remove_first>
   16f5c:	83 c4 10             	add    $0x10,%esp
   16f5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!free_node) {
   16f62:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16f66:	75 15                	jne    16f7d <mount+0xc5>
		log_printf("no free fs, mount failed.");
   16f68:	83 ec 0c             	sub    $0xc,%esp
   16f6b:	68 a4 9a 01 00       	push   $0x19aa4
   16f70:	e8 2e 19 00 00       	call   188a3 <log_printf>
   16f75:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   16f78:	e9 dc 00 00 00       	jmp    17059 <mount+0x1a1>
	}
	fs = list_node_parent(free_node, fs_t, node);
   16f7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16f81:	74 0a                	je     16f8d <mount+0xd5>
   16f83:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f86:	2d 10 02 00 00       	sub    $0x210,%eax
   16f8b:	eb 05                	jmp    16f92 <mount+0xda>
   16f8d:	b8 00 00 00 00       	mov    $0x0,%eax
   16f92:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 检查挂载的文件系统类型：不检查实际
	fs_op_t * op = get_fs_op(type, dev_major);
   16f95:	83 ec 08             	sub    $0x8,%esp
   16f98:	ff 75 10             	pushl  0x10(%ebp)
   16f9b:	ff 75 08             	pushl  0x8(%ebp)
   16f9e:	e8 ef fe ff ff       	call   16e92 <get_fs_op>
   16fa3:	83 c4 10             	add    $0x10,%esp
   16fa6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (!op) {
   16fa9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   16fad:	75 18                	jne    16fc7 <mount+0x10f>
		log_printf("unsupported fs type: %d", type);
   16faf:	83 ec 08             	sub    $0x8,%esp
   16fb2:	ff 75 08             	pushl  0x8(%ebp)
   16fb5:	68 be 9a 01 00       	push   $0x19abe
   16fba:	e8 e4 18 00 00       	call   188a3 <log_printf>
   16fbf:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   16fc2:	e9 92 00 00 00       	jmp    17059 <mount+0x1a1>
	}

	// 给定数据一些缺省的值
	kernel_memset(fs, 0, sizeof(fs_t));
   16fc7:	83 ec 04             	sub    $0x4,%esp
   16fca:	68 60 02 00 00       	push   $0x260
   16fcf:	6a 00                	push   $0x0
   16fd1:	ff 75 f4             	pushl  -0xc(%ebp)
   16fd4:	e8 20 13 00 00       	call   182f9 <kernel_memset>
   16fd9:	83 c4 10             	add    $0x10,%esp
	kernel_strncpy(fs->mount_point, mount_point, FS_MOUNTP_SIZE);
   16fdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16fdf:	83 ec 04             	sub    $0x4,%esp
   16fe2:	68 00 02 00 00       	push   $0x200
   16fe7:	ff 75 0c             	pushl  0xc(%ebp)
   16fea:	50                   	push   %eax
   16feb:	e8 91 11 00 00       	call   18181 <kernel_strncpy>
   16ff0:	83 c4 10             	add    $0x10,%esp
	fs->op = op;
   16ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16ff6:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16ff9:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)
	fs->mutex = (mutex_t *)0;
   16fff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17002:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%eax)
   17009:	00 00 00 

	// 挂载文件系统
	if (op->mount(fs, dev_major, dev_minor) < 0) {
   1700c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1700f:	8b 00                	mov    (%eax),%eax
   17011:	83 ec 04             	sub    $0x4,%esp
   17014:	ff 75 14             	pushl  0x14(%ebp)
   17017:	ff 75 10             	pushl  0x10(%ebp)
   1701a:	ff 75 f4             	pushl  -0xc(%ebp)
   1701d:	ff d0                	call   *%eax
   1701f:	83 c4 10             	add    $0x10,%esp
   17022:	85 c0                	test   %eax,%eax
   17024:	79 15                	jns    1703b <mount+0x183>
		log_printf("mount fs %s failed", mount_point);
   17026:	83 ec 08             	sub    $0x8,%esp
   17029:	ff 75 0c             	pushl  0xc(%ebp)
   1702c:	68 d6 9a 01 00       	push   $0x19ad6
   17031:	e8 6d 18 00 00       	call   188a3 <log_printf>
   17036:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   17039:	eb 1e                	jmp    17059 <mount+0x1a1>
	}
	list_insert_last(&mounted_list, &fs->node);
   1703b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1703e:	05 10 02 00 00       	add    $0x210,%eax
   17043:	83 ec 08             	sub    $0x8,%esp
   17046:	50                   	push   %eax
   17047:	68 c0 c8 05 00       	push   $0x5c8c0
   1704c:	e8 c2 16 00 00       	call   18713 <list_insert_last>
   17051:	83 c4 10             	add    $0x10,%esp
	return fs;
   17054:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17057:	eb 24                	jmp    1707d <mount+0x1c5>
mount_failed:
	if (fs) {
   17059:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1705d:	74 19                	je     17078 <mount+0x1c0>
		// 回收fs
		list_insert_first(&free_list, &fs->node);
   1705f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17062:	05 10 02 00 00       	add    $0x210,%eax
   17067:	83 ec 08             	sub    $0x8,%esp
   1706a:	50                   	push   %eax
   1706b:	68 cc c8 05 00       	push   $0x5c8cc
   17070:	e8 3f 16 00 00       	call   186b4 <list_insert_first>
   17075:	83 c4 10             	add    $0x10,%esp
	}
	return (fs_t *)0;
   17078:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1707d:	c9                   	leave  
   1707e:	c3                   	ret    

0001707f <mount_list_init>:

/**
 * @brief 初始化挂载列表
 */
static void mount_list_init (void) {
   1707f:	55                   	push   %ebp
   17080:	89 e5                	mov    %esp,%ebp
   17082:	83 ec 18             	sub    $0x18,%esp
	list_init(&free_list);
   17085:	83 ec 0c             	sub    $0xc,%esp
   17088:	68 cc c8 05 00       	push   $0x5c8cc
   1708d:	e8 fd 15 00 00       	call   1868f <list_init>
   17092:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17095:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1709c:	eb 28                	jmp    170c6 <mount_list_init+0x47>
		list_insert_first(&free_list, &fs_tbl[i].node);
   1709e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   170a1:	69 c0 60 02 00 00    	imul   $0x260,%eax,%eax
   170a7:	05 10 02 00 00       	add    $0x210,%eax
   170ac:	05 e0 c8 05 00       	add    $0x5c8e0,%eax
   170b1:	83 ec 08             	sub    $0x8,%esp
   170b4:	50                   	push   %eax
   170b5:	68 cc c8 05 00       	push   $0x5c8cc
   170ba:	e8 f5 15 00 00       	call   186b4 <list_insert_first>
   170bf:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   170c2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   170c6:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   170ca:	7e d2                	jle    1709e <mount_list_init+0x1f>
	}
	list_init(&mounted_list);
   170cc:	83 ec 0c             	sub    $0xc,%esp
   170cf:	68 c0 c8 05 00       	push   $0x5c8c0
   170d4:	e8 b6 15 00 00       	call   1868f <list_init>
   170d9:	83 c4 10             	add    $0x10,%esp
}
   170dc:	90                   	nop
   170dd:	c9                   	leave  
   170de:	c3                   	ret    

000170df <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init (void) {
   170df:	55                   	push   %ebp
   170e0:	89 e5                	mov    %esp,%ebp
   170e2:	83 ec 18             	sub    $0x18,%esp
	mount_list_init();
   170e5:	e8 95 ff ff ff       	call   1707f <mount_list_init>
    file_table_init();
   170ea:	e8 41 fd ff ff       	call   16e30 <file_table_init>

	// 磁盘检查
	disk_init();
   170ef:	e8 0f d5 ff ff       	call   14603 <disk_init>

	// 挂载设备文件系统，待后续完成。挂载点名称可随意
	fs_t * fs = mount(FS_DEVFS, "/dev", 0, 0);
   170f4:	6a 00                	push   $0x0
   170f6:	6a 00                	push   $0x0
   170f8:	68 e9 9a 01 00       	push   $0x19ae9
   170fd:	6a 01                	push   $0x1
   170ff:	e8 b4 fd ff ff       	call   16eb8 <mount>
   17104:	83 c4 10             	add    $0x10,%esp
   17107:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ASSERT(fs != (fs_t *)0);
   1710a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1710e:	75 1c                	jne    1712c <fs_init+0x4d>
   17110:	68 ee 9a 01 00       	push   $0x19aee
   17115:	68 dc 9b 01 00       	push   $0x19bdc
   1711a:	68 87 00 00 00       	push   $0x87
   1711f:	68 00 9b 01 00       	push   $0x19b00
   17124:	e8 1d 15 00 00       	call   18646 <panic>
   17129:	83 c4 10             	add    $0x10,%esp

	// 挂载根文件系统
	root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   1712c:	68 b1 00 00 00       	push   $0xb1
   17131:	6a 02                	push   $0x2
   17133:	68 31 9b 01 00       	push   $0x19b31
   17138:	6a 00                	push   $0x0
   1713a:	e8 79 fd ff ff       	call   16eb8 <mount>
   1713f:	83 c4 10             	add    $0x10,%esp
   17142:	a3 a0 e0 05 00       	mov    %eax,0x5e0a0
	ASSERT(root_fs != (fs_t *)0);
   17147:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   1714c:	85 c0                	test   %eax,%eax
   1714e:	75 1c                	jne    1716c <fs_init+0x8d>
   17150:	68 37 9b 01 00       	push   $0x19b37
   17155:	68 dc 9b 01 00       	push   $0x19bdc
   1715a:	68 8b 00 00 00       	push   $0x8b
   1715f:	68 00 9b 01 00       	push   $0x19b00
   17164:	e8 dd 14 00 00       	call   18646 <panic>
   17169:	83 c4 10             	add    $0x10,%esp
}
   1716c:	90                   	nop
   1716d:	c9                   	leave  
   1716e:	c3                   	ret    

0001716f <path_to_num>:

/**
 * @brief 转换目录为数字
 */
int path_to_num (const char * path, int * num) {
   1716f:	55                   	push   %ebp
   17170:	89 e5                	mov    %esp,%ebp
   17172:	83 ec 10             	sub    $0x10,%esp
	int n = 0;
   17175:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	const char * c = path;
   1717c:	8b 45 08             	mov    0x8(%ebp),%eax
   1717f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*c && *c != '/') {
   17182:	eb 23                	jmp    171a7 <path_to_num+0x38>
		n = n * 10 + *c - '0';
   17184:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17187:	89 d0                	mov    %edx,%eax
   17189:	c1 e0 02             	shl    $0x2,%eax
   1718c:	01 d0                	add    %edx,%eax
   1718e:	01 c0                	add    %eax,%eax
   17190:	89 c2                	mov    %eax,%edx
   17192:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17195:	0f b6 00             	movzbl (%eax),%eax
   17198:	0f be c0             	movsbl %al,%eax
   1719b:	01 d0                	add    %edx,%eax
   1719d:	83 e8 30             	sub    $0x30,%eax
   171a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
		c++;
   171a3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c && *c != '/') {
   171a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   171aa:	0f b6 00             	movzbl (%eax),%eax
   171ad:	84 c0                	test   %al,%al
   171af:	74 0a                	je     171bb <path_to_num+0x4c>
   171b1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   171b4:	0f b6 00             	movzbl (%eax),%eax
   171b7:	3c 2f                	cmp    $0x2f,%al
   171b9:	75 c9                	jne    17184 <path_to_num+0x15>
	}
	*num = n;
   171bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   171be:	8b 55 fc             	mov    -0x4(%ebp),%edx
   171c1:	89 10                	mov    %edx,(%eax)
	return 0;
   171c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   171c8:	c9                   	leave  
   171c9:	c3                   	ret    

000171ca <path_begin_with>:

/**
 * @brief 判断路径是否以xx开头
 */
int path_begin_with (const char * path, const char * str) {
   171ca:	55                   	push   %ebp
   171cb:	89 e5                	mov    %esp,%ebp
   171cd:	83 ec 10             	sub    $0x10,%esp
	const char * s1 = path, * s2 = str;
   171d0:	8b 45 08             	mov    0x8(%ebp),%eax
   171d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
   171d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   171d9:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   171dc:	eb 08                	jmp    171e6 <path_begin_with+0x1c>
		s1++;
   171de:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		s2++;
   171e2:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   171e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   171e9:	0f b6 00             	movzbl (%eax),%eax
   171ec:	84 c0                	test   %al,%al
   171ee:	74 1a                	je     1720a <path_begin_with+0x40>
   171f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   171f3:	0f b6 00             	movzbl (%eax),%eax
   171f6:	84 c0                	test   %al,%al
   171f8:	74 10                	je     1720a <path_begin_with+0x40>
   171fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   171fd:	0f b6 10             	movzbl (%eax),%edx
   17200:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17203:	0f b6 00             	movzbl (%eax),%eax
   17206:	38 c2                	cmp    %al,%dl
   17208:	74 d4                	je     171de <path_begin_with+0x14>
	}

	return *s2 == '\0';
   1720a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1720d:	0f b6 00             	movzbl (%eax),%eax
   17210:	84 c0                	test   %al,%al
   17212:	0f 94 c0             	sete   %al
   17215:	0f b6 c0             	movzbl %al,%eax
}
   17218:	c9                   	leave  
   17219:	c3                   	ret    

0001721a <path_next_child>:

/**
 * @brief 获取下一级子目录
 */
const char * path_next_child (const char * path) {
   1721a:	55                   	push   %ebp
   1721b:	89 e5                	mov    %esp,%ebp
   1721d:	83 ec 10             	sub    $0x10,%esp
   const char * c = path;
   17220:	8b 45 08             	mov    0x8(%ebp),%eax
   17223:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (*c && (*c++ == '/')) {}
   17226:	90                   	nop
   17227:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1722a:	0f b6 00             	movzbl (%eax),%eax
   1722d:	84 c0                	test   %al,%al
   1722f:	74 10                	je     17241 <path_next_child+0x27>
   17231:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17234:	8d 50 01             	lea    0x1(%eax),%edx
   17237:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1723a:	0f b6 00             	movzbl (%eax),%eax
   1723d:	3c 2f                	cmp    $0x2f,%al
   1723f:	74 e6                	je     17227 <path_next_child+0xd>
    while (*c && (*c++ != '/')) {}
   17241:	90                   	nop
   17242:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17245:	0f b6 00             	movzbl (%eax),%eax
   17248:	84 c0                	test   %al,%al
   1724a:	74 10                	je     1725c <path_next_child+0x42>
   1724c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1724f:	8d 50 01             	lea    0x1(%eax),%edx
   17252:	89 55 fc             	mov    %edx,-0x4(%ebp)
   17255:	0f b6 00             	movzbl (%eax),%eax
   17258:	3c 2f                	cmp    $0x2f,%al
   1725a:	75 e6                	jne    17242 <path_next_child+0x28>
    return *c ? c : (const char *)0;
   1725c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1725f:	0f b6 00             	movzbl (%eax),%eax
   17262:	84 c0                	test   %al,%al
   17264:	74 05                	je     1726b <path_next_child+0x51>
   17266:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17269:	eb 05                	jmp    17270 <path_next_child+0x56>
   1726b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17270:	c9                   	leave  
   17271:	c3                   	ret    

00017272 <fs_protect>:

static void fs_protect (fs_t * fs) {
   17272:	55                   	push   %ebp
   17273:	89 e5                	mov    %esp,%ebp
   17275:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   17278:	8b 45 08             	mov    0x8(%ebp),%eax
   1727b:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17281:	85 c0                	test   %eax,%eax
   17283:	74 15                	je     1729a <fs_protect+0x28>
		mutex_lock(fs->mutex);
   17285:	8b 45 08             	mov    0x8(%ebp),%eax
   17288:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1728e:	83 ec 0c             	sub    $0xc,%esp
   17291:	50                   	push   %eax
   17292:	e8 45 09 00 00       	call   17bdc <mutex_lock>
   17297:	83 c4 10             	add    $0x10,%esp
	}
}
   1729a:	90                   	nop
   1729b:	c9                   	leave  
   1729c:	c3                   	ret    

0001729d <fs_unprotect>:

static void fs_unprotect (fs_t * fs) {
   1729d:	55                   	push   %ebp
   1729e:	89 e5                	mov    %esp,%ebp
   172a0:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   172a3:	8b 45 08             	mov    0x8(%ebp),%eax
   172a6:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   172ac:	85 c0                	test   %eax,%eax
   172ae:	74 15                	je     172c5 <fs_unprotect+0x28>
		mutex_unlock(fs->mutex);
   172b0:	8b 45 08             	mov    0x8(%ebp),%eax
   172b3:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   172b9:	83 ec 0c             	sub    $0xc,%esp
   172bc:	50                   	push   %eax
   172bd:	e8 b1 09 00 00       	call   17c73 <mutex_unlock>
   172c2:	83 c4 10             	add    $0x10,%esp
	}
}
   172c5:	90                   	nop
   172c6:	c9                   	leave  
   172c7:	c3                   	ret    

000172c8 <sys_open>:

/**
 * 打开文件
 */
int sys_open(const char *name, int flags, ...) {
   172c8:	55                   	push   %ebp
   172c9:	89 e5                	mov    %esp,%ebp
   172cb:	83 ec 28             	sub    $0x28,%esp
	// 分配文件描述符链接
	file_t * file = file_alloc();
   172ce:	e8 58 fa ff ff       	call   16d2b <file_alloc>
   172d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!file) {
   172d6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   172da:	75 0a                	jne    172e6 <sys_open+0x1e>
		return -1;
   172dc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   172e1:	e9 62 01 00 00       	jmp    17448 <sys_open+0x180>
	}

	int fd = task_alloc_fd(file);
   172e6:	83 ec 0c             	sub    $0xc,%esp
   172e9:	ff 75 ec             	pushl  -0x14(%ebp)
   172ec:	e8 1b a4 ff ff       	call   1170c <task_alloc_fd>
   172f1:	83 c4 10             	add    $0x10,%esp
   172f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (fd < 0) {
   172f7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   172fb:	0f 88 1f 01 00 00    	js     17420 <sys_open+0x158>
		goto sys_open_failed;
	}

	// 检查名称是否以挂载点开头，如果没有，则认为name在根目录下
	// 即只允许根目录下的遍历
	fs_t * fs = (fs_t *)0;
   17301:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	list_node_t * node = list_first(&mounted_list);
   17308:	83 ec 0c             	sub    $0xc,%esp
   1730b:	68 c0 c8 05 00       	push   $0x5c8c0
   17310:	e8 56 fb ff ff       	call   16e6b <list_first>
   17315:	83 c4 10             	add    $0x10,%esp
   17318:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   1731b:	eb 47                	jmp    17364 <sys_open+0x9c>
		fs_t * curr = list_node_parent(node, fs_t, node);
   1731d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17321:	74 0a                	je     1732d <sys_open+0x65>
   17323:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17326:	2d 10 02 00 00       	sub    $0x210,%eax
   1732b:	eb 05                	jmp    17332 <sys_open+0x6a>
   1732d:	b8 00 00 00 00       	mov    $0x0,%eax
   17332:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (path_begin_with(name, curr->mount_point)) {
   17335:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17338:	83 ec 08             	sub    $0x8,%esp
   1733b:	50                   	push   %eax
   1733c:	ff 75 08             	pushl  0x8(%ebp)
   1733f:	e8 86 fe ff ff       	call   171ca <path_begin_with>
   17344:	83 c4 10             	add    $0x10,%esp
   17347:	85 c0                	test   %eax,%eax
   17349:	74 08                	je     17353 <sys_open+0x8b>
			fs = curr;
   1734b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1734e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
   17351:	eb 17                	jmp    1736a <sys_open+0xa2>
		}
		node = list_node_next(node);
   17353:	83 ec 0c             	sub    $0xc,%esp
   17356:	ff 75 f0             	pushl  -0x10(%ebp)
   17359:	e8 02 fb ff ff       	call   16e60 <list_node_next>
   1735e:	83 c4 10             	add    $0x10,%esp
   17361:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   17364:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17368:	75 b3                	jne    1731d <sys_open+0x55>
	}

	if (fs) {
   1736a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1736e:	74 13                	je     17383 <sys_open+0xbb>
		name = path_next_child(name);
   17370:	83 ec 0c             	sub    $0xc,%esp
   17373:	ff 75 08             	pushl  0x8(%ebp)
   17376:	e8 9f fe ff ff       	call   1721a <path_next_child>
   1737b:	83 c4 10             	add    $0x10,%esp
   1737e:	89 45 08             	mov    %eax,0x8(%ebp)
   17381:	eb 08                	jmp    1738b <sys_open+0xc3>
	} else {
		fs = root_fs;
   17383:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17388:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	file->mode = flags;
   1738b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1738e:	8b 55 0c             	mov    0xc(%ebp),%edx
   17391:	89 50 40             	mov    %edx,0x40(%eax)
	file->fs = fs;
   17394:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17397:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1739a:	89 50 44             	mov    %edx,0x44(%eax)
	kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   1739d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   173a0:	83 ec 04             	sub    $0x4,%esp
   173a3:	6a 20                	push   $0x20
   173a5:	ff 75 08             	pushl  0x8(%ebp)
   173a8:	50                   	push   %eax
   173a9:	e8 d3 0d 00 00       	call   18181 <kernel_strncpy>
   173ae:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   173b1:	83 ec 0c             	sub    $0xc,%esp
   173b4:	ff 75 f4             	pushl  -0xc(%ebp)
   173b7:	e8 b6 fe ff ff       	call   17272 <fs_protect>
   173bc:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->open(fs, name, file);
   173bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   173c2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   173c8:	8b 40 08             	mov    0x8(%eax),%eax
   173cb:	83 ec 04             	sub    $0x4,%esp
   173ce:	ff 75 ec             	pushl  -0x14(%ebp)
   173d1:	ff 75 08             	pushl  0x8(%ebp)
   173d4:	ff 75 f4             	pushl  -0xc(%ebp)
   173d7:	ff d0                	call   *%eax
   173d9:	83 c4 10             	add    $0x10,%esp
   173dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (err < 0) {
   173df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   173e3:	79 28                	jns    1740d <sys_open+0x145>
		fs_unprotect(fs);
   173e5:	83 ec 0c             	sub    $0xc,%esp
   173e8:	ff 75 f4             	pushl  -0xc(%ebp)
   173eb:	e8 ad fe ff ff       	call   1729d <fs_unprotect>
   173f0:	83 c4 10             	add    $0x10,%esp

		log_printf("open %s failed.", name);
   173f3:	83 ec 08             	sub    $0x8,%esp
   173f6:	ff 75 08             	pushl  0x8(%ebp)
   173f9:	68 4c 9b 01 00       	push   $0x19b4c
   173fe:	e8 a0 14 00 00       	call   188a3 <log_printf>
   17403:	83 c4 10             	add    $0x10,%esp
		return -1;
   17406:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1740b:	eb 3b                	jmp    17448 <sys_open+0x180>
	}
	fs_unprotect(fs);
   1740d:	83 ec 0c             	sub    $0xc,%esp
   17410:	ff 75 f4             	pushl  -0xc(%ebp)
   17413:	e8 85 fe ff ff       	call   1729d <fs_unprotect>
   17418:	83 c4 10             	add    $0x10,%esp

	return fd;
   1741b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1741e:	eb 28                	jmp    17448 <sys_open+0x180>
		goto sys_open_failed;
   17420:	90                   	nop

sys_open_failed:
	file_free(file);
   17421:	83 ec 0c             	sub    $0xc,%esp
   17424:	ff 75 ec             	pushl  -0x14(%ebp)
   17427:	e8 8a f9 ff ff       	call   16db6 <file_free>
   1742c:	83 c4 10             	add    $0x10,%esp
	if (fd >= 0) {
   1742f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17433:	78 0e                	js     17443 <sys_open+0x17b>
		task_remove_fd(fd);
   17435:	83 ec 0c             	sub    $0xc,%esp
   17438:	ff 75 e8             	pushl  -0x18(%ebp)
   1743b:	e8 1f a3 ff ff       	call   1175f <task_remove_fd>
   17440:	83 c4 10             	add    $0x10,%esp
	}
	return -1;
   17443:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17448:	c9                   	leave  
   17449:	c3                   	ret    

0001744a <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup (int file) {
   1744a:	55                   	push   %ebp
   1744b:	89 e5                	mov    %esp,%ebp
   1744d:	83 ec 18             	sub    $0x18,%esp
	// 超出进程所能打开的全部，退出
	if (is_fd_bad(file)) {
   17450:	ff 75 08             	pushl  0x8(%ebp)
   17453:	e8 1d fa ff ff       	call   16e75 <is_fd_bad>
   17458:	83 c4 04             	add    $0x4,%esp
   1745b:	85 c0                	test   %eax,%eax
   1745d:	74 1a                	je     17479 <sys_dup+0x2f>
        log_printf("file(%d) is not valid.", file);
   1745f:	83 ec 08             	sub    $0x8,%esp
   17462:	ff 75 08             	pushl  0x8(%ebp)
   17465:	68 5c 9b 01 00       	push   $0x19b5c
   1746a:	e8 34 14 00 00       	call   188a3 <log_printf>
   1746f:	83 c4 10             	add    $0x10,%esp
		return -1;
   17472:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17477:	eb 6d                	jmp    174e6 <sys_dup+0x9c>
	}

	file_t * p_file = task_file(file);
   17479:	83 ec 0c             	sub    $0xc,%esp
   1747c:	ff 75 08             	pushl  0x8(%ebp)
   1747f:	e8 56 a2 ff ff       	call   116da <task_file>
   17484:	83 c4 10             	add    $0x10,%esp
   17487:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   1748a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1748e:	75 17                	jne    174a7 <sys_dup+0x5d>
		log_printf("file not opened");
   17490:	83 ec 0c             	sub    $0xc,%esp
   17493:	68 73 9b 01 00       	push   $0x19b73
   17498:	e8 06 14 00 00       	call   188a3 <log_printf>
   1749d:	83 c4 10             	add    $0x10,%esp
		return -1;
   174a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   174a5:	eb 3f                	jmp    174e6 <sys_dup+0x9c>
	}

	int fd = task_alloc_fd(p_file);	// 新fd指向同一描述符
   174a7:	83 ec 0c             	sub    $0xc,%esp
   174aa:	ff 75 f4             	pushl  -0xc(%ebp)
   174ad:	e8 5a a2 ff ff       	call   1170c <task_alloc_fd>
   174b2:	83 c4 10             	add    $0x10,%esp
   174b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (fd >= 0) {
   174b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   174bc:	78 13                	js     174d1 <sys_dup+0x87>
		file_inc_ref(p_file);
   174be:	83 ec 0c             	sub    $0xc,%esp
   174c1:	ff 75 f4             	pushl  -0xc(%ebp)
   174c4:	e8 2f f9 ff ff       	call   16df8 <file_inc_ref>
   174c9:	83 c4 10             	add    $0x10,%esp
		return fd;
   174cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   174cf:	eb 15                	jmp    174e6 <sys_dup+0x9c>
	}

	log_printf("No task file avaliable");
   174d1:	83 ec 0c             	sub    $0xc,%esp
   174d4:	68 83 9b 01 00       	push   $0x19b83
   174d9:	e8 c5 13 00 00       	call   188a3 <log_printf>
   174de:	83 c4 10             	add    $0x10,%esp
    return -1;
   174e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   174e6:	c9                   	leave  
   174e7:	c3                   	ret    

000174e8 <sys_read>:

/**
 * 读取文件api
 */
int sys_read(int file, char *ptr, int len) {
   174e8:	55                   	push   %ebp
   174e9:	89 e5                	mov    %esp,%ebp
   174eb:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file) || !ptr || !len) {
   174ee:	ff 75 08             	pushl  0x8(%ebp)
   174f1:	e8 7f f9 ff ff       	call   16e75 <is_fd_bad>
   174f6:	83 c4 04             	add    $0x4,%esp
   174f9:	85 c0                	test   %eax,%eax
   174fb:	75 0c                	jne    17509 <sys_read+0x21>
   174fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17501:	74 06                	je     17509 <sys_read+0x21>
   17503:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17507:	75 0a                	jne    17513 <sys_read+0x2b>
		return 0;
   17509:	b8 00 00 00 00       	mov    $0x0,%eax
   1750e:	e9 98 00 00 00       	jmp    175ab <sys_read+0xc3>
	}

	file_t * p_file = task_file(file);
   17513:	83 ec 0c             	sub    $0xc,%esp
   17516:	ff 75 08             	pushl  0x8(%ebp)
   17519:	e8 bc a1 ff ff       	call   116da <task_file>
   1751e:	83 c4 10             	add    $0x10,%esp
   17521:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17524:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17528:	75 17                	jne    17541 <sys_read+0x59>
		log_printf("file not opened");
   1752a:	83 ec 0c             	sub    $0xc,%esp
   1752d:	68 73 9b 01 00       	push   $0x19b73
   17532:	e8 6c 13 00 00       	call   188a3 <log_printf>
   17537:	83 c4 10             	add    $0x10,%esp
		return -1;
   1753a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1753f:	eb 6a                	jmp    175ab <sys_read+0xc3>
	}

	if (p_file->mode == O_WRONLY) {
   17541:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17544:	8b 40 40             	mov    0x40(%eax),%eax
   17547:	83 f8 01             	cmp    $0x1,%eax
   1754a:	75 17                	jne    17563 <sys_read+0x7b>
		log_printf("file is write only");
   1754c:	83 ec 0c             	sub    $0xc,%esp
   1754f:	68 9a 9b 01 00       	push   $0x19b9a
   17554:	e8 4a 13 00 00       	call   188a3 <log_printf>
   17559:	83 c4 10             	add    $0x10,%esp
		return -1;
   1755c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17561:	eb 48                	jmp    175ab <sys_read+0xc3>
	}

	// 读取文件
	fs_t * fs = p_file->fs;
   17563:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17566:	8b 40 44             	mov    0x44(%eax),%eax
   17569:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   1756c:	83 ec 0c             	sub    $0xc,%esp
   1756f:	ff 75 f0             	pushl  -0x10(%ebp)
   17572:	e8 fb fc ff ff       	call   17272 <fs_protect>
   17577:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->read(ptr, len, p_file);
   1757a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1757d:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17583:	8b 40 0c             	mov    0xc(%eax),%eax
   17586:	83 ec 04             	sub    $0x4,%esp
   17589:	ff 75 f4             	pushl  -0xc(%ebp)
   1758c:	ff 75 10             	pushl  0x10(%ebp)
   1758f:	ff 75 0c             	pushl  0xc(%ebp)
   17592:	ff d0                	call   *%eax
   17594:	83 c4 10             	add    $0x10,%esp
   17597:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   1759a:	83 ec 0c             	sub    $0xc,%esp
   1759d:	ff 75 f0             	pushl  -0x10(%ebp)
   175a0:	e8 f8 fc ff ff       	call   1729d <fs_unprotect>
   175a5:	83 c4 10             	add    $0x10,%esp
	return err;
   175a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   175ab:	c9                   	leave  
   175ac:	c3                   	ret    

000175ad <sys_write>:

/**
 * 写文件
 */
int sys_write(int file, char *ptr, int len) {
   175ad:	55                   	push   %ebp
   175ae:	89 e5                	mov    %esp,%ebp
   175b0:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file) || !ptr || !len) {
   175b3:	ff 75 08             	pushl  0x8(%ebp)
   175b6:	e8 ba f8 ff ff       	call   16e75 <is_fd_bad>
   175bb:	83 c4 04             	add    $0x4,%esp
   175be:	85 c0                	test   %eax,%eax
   175c0:	75 0c                	jne    175ce <sys_write+0x21>
   175c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   175c6:	74 06                	je     175ce <sys_write+0x21>
   175c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   175cc:	75 0a                	jne    175d8 <sys_write+0x2b>
		return 0;
   175ce:	b8 00 00 00 00       	mov    $0x0,%eax
   175d3:	e9 97 00 00 00       	jmp    1766f <sys_write+0xc2>
	}

	file_t * p_file = task_file(file);
   175d8:	83 ec 0c             	sub    $0xc,%esp
   175db:	ff 75 08             	pushl  0x8(%ebp)
   175de:	e8 f7 a0 ff ff       	call   116da <task_file>
   175e3:	83 c4 10             	add    $0x10,%esp
   175e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   175e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   175ed:	75 17                	jne    17606 <sys_write+0x59>
		log_printf("file not opened");
   175ef:	83 ec 0c             	sub    $0xc,%esp
   175f2:	68 73 9b 01 00       	push   $0x19b73
   175f7:	e8 a7 12 00 00       	call   188a3 <log_printf>
   175fc:	83 c4 10             	add    $0x10,%esp
		return -1;
   175ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17604:	eb 69                	jmp    1766f <sys_write+0xc2>
	}

	if (p_file->mode == O_RDONLY) {
   17606:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17609:	8b 40 40             	mov    0x40(%eax),%eax
   1760c:	85 c0                	test   %eax,%eax
   1760e:	75 17                	jne    17627 <sys_write+0x7a>
		log_printf("file is write only");
   17610:	83 ec 0c             	sub    $0xc,%esp
   17613:	68 9a 9b 01 00       	push   $0x19b9a
   17618:	e8 86 12 00 00       	call   188a3 <log_printf>
   1761d:	83 c4 10             	add    $0x10,%esp
		return -1;
   17620:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17625:	eb 48                	jmp    1766f <sys_write+0xc2>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   17627:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1762a:	8b 40 44             	mov    0x44(%eax),%eax
   1762d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17630:	83 ec 0c             	sub    $0xc,%esp
   17633:	ff 75 f0             	pushl  -0x10(%ebp)
   17636:	e8 37 fc ff ff       	call   17272 <fs_protect>
   1763b:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->write(ptr, len, p_file);
   1763e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17641:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17647:	8b 40 10             	mov    0x10(%eax),%eax
   1764a:	83 ec 04             	sub    $0x4,%esp
   1764d:	ff 75 f4             	pushl  -0xc(%ebp)
   17650:	ff 75 10             	pushl  0x10(%ebp)
   17653:	ff 75 0c             	pushl  0xc(%ebp)
   17656:	ff d0                	call   *%eax
   17658:	83 c4 10             	add    $0x10,%esp
   1765b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   1765e:	83 ec 0c             	sub    $0xc,%esp
   17661:	ff 75 f0             	pushl  -0x10(%ebp)
   17664:	e8 34 fc ff ff       	call   1729d <fs_unprotect>
   17669:	83 c4 10             	add    $0x10,%esp
	return err;
   1766c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1766f:	c9                   	leave  
   17670:	c3                   	ret    

00017671 <sys_lseek>:

/**
 * 文件访问位置定位
 */
int sys_lseek(int file, int ptr, int dir) {
   17671:	55                   	push   %ebp
   17672:	89 e5                	mov    %esp,%ebp
   17674:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17677:	ff 75 08             	pushl  0x8(%ebp)
   1767a:	e8 f6 f7 ff ff       	call   16e75 <is_fd_bad>
   1767f:	83 c4 04             	add    $0x4,%esp
   17682:	85 c0                	test   %eax,%eax
   17684:	74 07                	je     1768d <sys_lseek+0x1c>
		return -1;
   17686:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1768b:	eb 77                	jmp    17704 <sys_lseek+0x93>
	}

	file_t * p_file = task_file(file);
   1768d:	83 ec 0c             	sub    $0xc,%esp
   17690:	ff 75 08             	pushl  0x8(%ebp)
   17693:	e8 42 a0 ff ff       	call   116da <task_file>
   17698:	83 c4 10             	add    $0x10,%esp
   1769b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   1769e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   176a2:	75 17                	jne    176bb <sys_lseek+0x4a>
		log_printf("file not opened");
   176a4:	83 ec 0c             	sub    $0xc,%esp
   176a7:	68 73 9b 01 00       	push   $0x19b73
   176ac:	e8 f2 11 00 00       	call   188a3 <log_printf>
   176b1:	83 c4 10             	add    $0x10,%esp
		return -1;
   176b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   176b9:	eb 49                	jmp    17704 <sys_lseek+0x93>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   176bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176be:	8b 40 44             	mov    0x44(%eax),%eax
   176c1:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   176c4:	83 ec 0c             	sub    $0xc,%esp
   176c7:	ff 75 f0             	pushl  -0x10(%ebp)
   176ca:	e8 a3 fb ff ff       	call   17272 <fs_protect>
   176cf:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->seek(p_file, ptr, dir);
   176d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176d5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   176db:	8b 40 18             	mov    0x18(%eax),%eax
   176de:	8b 55 0c             	mov    0xc(%ebp),%edx
   176e1:	83 ec 04             	sub    $0x4,%esp
   176e4:	ff 75 10             	pushl  0x10(%ebp)
   176e7:	52                   	push   %edx
   176e8:	ff 75 f4             	pushl  -0xc(%ebp)
   176eb:	ff d0                	call   *%eax
   176ed:	83 c4 10             	add    $0x10,%esp
   176f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   176f3:	83 ec 0c             	sub    $0xc,%esp
   176f6:	ff 75 f0             	pushl  -0x10(%ebp)
   176f9:	e8 9f fb ff ff       	call   1729d <fs_unprotect>
   176fe:	83 c4 10             	add    $0x10,%esp
	return err;
   17701:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17704:	c9                   	leave  
   17705:	c3                   	ret    

00017706 <sys_close>:

/**
 * 关闭文件
 */
int sys_close(int file) {
   17706:	55                   	push   %ebp
   17707:	89 e5                	mov    %esp,%ebp
   17709:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   1770c:	ff 75 08             	pushl  0x8(%ebp)
   1770f:	e8 61 f7 ff ff       	call   16e75 <is_fd_bad>
   17714:	83 c4 04             	add    $0x4,%esp
   17717:	85 c0                	test   %eax,%eax
   17719:	74 1a                	je     17735 <sys_close+0x2f>
		log_printf("file error");
   1771b:	83 ec 0c             	sub    $0xc,%esp
   1771e:	68 ad 9b 01 00       	push   $0x19bad
   17723:	e8 7b 11 00 00       	call   188a3 <log_printf>
   17728:	83 c4 10             	add    $0x10,%esp
		return -1;
   1772b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17730:	e9 cb 00 00 00       	jmp    17800 <sys_close+0xfa>
	}

	file_t * p_file = task_file(file);
   17735:	83 ec 0c             	sub    $0xc,%esp
   17738:	ff 75 08             	pushl  0x8(%ebp)
   1773b:	e8 9a 9f ff ff       	call   116da <task_file>
   17740:	83 c4 10             	add    $0x10,%esp
   17743:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17746:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1774a:	75 1d                	jne    17769 <sys_close+0x63>
		log_printf("file not opened. %d", file);
   1774c:	83 ec 08             	sub    $0x8,%esp
   1774f:	ff 75 08             	pushl  0x8(%ebp)
   17752:	68 b8 9b 01 00       	push   $0x19bb8
   17757:	e8 47 11 00 00       	call   188a3 <log_printf>
   1775c:	83 c4 10             	add    $0x10,%esp
		return -1;
   1775f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17764:	e9 97 00 00 00       	jmp    17800 <sys_close+0xfa>
	}

	ASSERT(p_file->ref > 0);
   17769:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1776c:	8b 40 28             	mov    0x28(%eax),%eax
   1776f:	85 c0                	test   %eax,%eax
   17771:	7f 1c                	jg     1778f <sys_close+0x89>
   17773:	68 cc 9b 01 00       	push   $0x19bcc
   17778:	68 e4 9b 01 00       	push   $0x19be4
   1777d:	68 71 01 00 00       	push   $0x171
   17782:	68 00 9b 01 00       	push   $0x19b00
   17787:	e8 ba 0e 00 00       	call   18646 <panic>
   1778c:	83 c4 10             	add    $0x10,%esp

	if (p_file->ref-- == 1) {
   1778f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17792:	8b 40 28             	mov    0x28(%eax),%eax
   17795:	8d 48 ff             	lea    -0x1(%eax),%ecx
   17798:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1779b:	89 4a 28             	mov    %ecx,0x28(%edx)
   1779e:	83 f8 01             	cmp    $0x1,%eax
   177a1:	75 4a                	jne    177ed <sys_close+0xe7>
		fs_t * fs = p_file->fs;
   177a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   177a6:	8b 40 44             	mov    0x44(%eax),%eax
   177a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		fs_protect(fs);
   177ac:	83 ec 0c             	sub    $0xc,%esp
   177af:	ff 75 f0             	pushl  -0x10(%ebp)
   177b2:	e8 bb fa ff ff       	call   17272 <fs_protect>
   177b7:	83 c4 10             	add    $0x10,%esp
		fs->op->close(p_file);
   177ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   177bd:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   177c3:	8b 40 14             	mov    0x14(%eax),%eax
   177c6:	83 ec 0c             	sub    $0xc,%esp
   177c9:	ff 75 f4             	pushl  -0xc(%ebp)
   177cc:	ff d0                	call   *%eax
   177ce:	83 c4 10             	add    $0x10,%esp
		fs_unprotect(fs);
   177d1:	83 ec 0c             	sub    $0xc,%esp
   177d4:	ff 75 f0             	pushl  -0x10(%ebp)
   177d7:	e8 c1 fa ff ff       	call   1729d <fs_unprotect>
   177dc:	83 c4 10             	add    $0x10,%esp
	    file_free(p_file);
   177df:	83 ec 0c             	sub    $0xc,%esp
   177e2:	ff 75 f4             	pushl  -0xc(%ebp)
   177e5:	e8 cc f5 ff ff       	call   16db6 <file_free>
   177ea:	83 c4 10             	add    $0x10,%esp
	}

	task_remove_fd(file);
   177ed:	83 ec 0c             	sub    $0xc,%esp
   177f0:	ff 75 08             	pushl  0x8(%ebp)
   177f3:	e8 67 9f ff ff       	call   1175f <task_remove_fd>
   177f8:	83 c4 10             	add    $0x10,%esp
	return 0;
   177fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17800:	c9                   	leave  
   17801:	c3                   	ret    

00017802 <sys_isatty>:


/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file) {
   17802:	55                   	push   %ebp
   17803:	89 e5                	mov    %esp,%ebp
   17805:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17808:	ff 75 08             	pushl  0x8(%ebp)
   1780b:	e8 65 f6 ff ff       	call   16e75 <is_fd_bad>
   17810:	83 c4 04             	add    $0x4,%esp
   17813:	85 c0                	test   %eax,%eax
   17815:	74 07                	je     1781e <sys_isatty+0x1c>
		return 0;
   17817:	b8 00 00 00 00       	mov    $0x0,%eax
   1781c:	eb 2d                	jmp    1784b <sys_isatty+0x49>
	}

	file_t * pfile = task_file(file);
   1781e:	83 ec 0c             	sub    $0xc,%esp
   17821:	ff 75 08             	pushl  0x8(%ebp)
   17824:	e8 b1 9e ff ff       	call   116da <task_file>
   17829:	83 c4 10             	add    $0x10,%esp
   1782c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   1782f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17833:	75 07                	jne    1783c <sys_isatty+0x3a>
		return 0;
   17835:	b8 00 00 00 00       	mov    $0x0,%eax
   1783a:	eb 0f                	jmp    1784b <sys_isatty+0x49>
	}

	return pfile->type == FILE_TTY;
   1783c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1783f:	8b 40 20             	mov    0x20(%eax),%eax
   17842:	83 f8 01             	cmp    $0x1,%eax
   17845:	0f 94 c0             	sete   %al
   17848:	0f b6 c0             	movzbl %al,%eax
}
   1784b:	c9                   	leave  
   1784c:	c3                   	ret    

0001784d <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st) {
   1784d:	55                   	push   %ebp
   1784e:	89 e5                	mov    %esp,%ebp
   17850:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17853:	ff 75 08             	pushl  0x8(%ebp)
   17856:	e8 1a f6 ff ff       	call   16e75 <is_fd_bad>
   1785b:	83 c4 04             	add    $0x4,%esp
   1785e:	85 c0                	test   %eax,%eax
   17860:	74 07                	je     17869 <sys_fstat+0x1c>
		return -1;
   17862:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17867:	eb 75                	jmp    178de <sys_fstat+0x91>
	}

	file_t * p_file = task_file(file);
   17869:	83 ec 0c             	sub    $0xc,%esp
   1786c:	ff 75 08             	pushl  0x8(%ebp)
   1786f:	e8 66 9e ff ff       	call   116da <task_file>
   17874:	83 c4 10             	add    $0x10,%esp
   17877:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   1787a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1787e:	75 07                	jne    17887 <sys_fstat+0x3a>
		return -1;
   17880:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17885:	eb 57                	jmp    178de <sys_fstat+0x91>
	}

	fs_t * fs = p_file->fs;
   17887:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1788a:	8b 40 44             	mov    0x44(%eax),%eax
   1788d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kernel_memset(st, 0, sizeof(struct stat));
   17890:	83 ec 04             	sub    $0x4,%esp
   17893:	6a 48                	push   $0x48
   17895:	6a 00                	push   $0x0
   17897:	ff 75 0c             	pushl  0xc(%ebp)
   1789a:	e8 5a 0a 00 00       	call   182f9 <kernel_memset>
   1789f:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   178a2:	83 ec 0c             	sub    $0xc,%esp
   178a5:	ff 75 f0             	pushl  -0x10(%ebp)
   178a8:	e8 c5 f9 ff ff       	call   17272 <fs_protect>
   178ad:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->stat(p_file, st);
   178b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   178b3:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   178b9:	8b 40 1c             	mov    0x1c(%eax),%eax
   178bc:	83 ec 08             	sub    $0x8,%esp
   178bf:	ff 75 0c             	pushl  0xc(%ebp)
   178c2:	ff 75 f4             	pushl  -0xc(%ebp)
   178c5:	ff d0                	call   *%eax
   178c7:	83 c4 10             	add    $0x10,%esp
   178ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   178cd:	83 ec 0c             	sub    $0xc,%esp
   178d0:	ff 75 f0             	pushl  -0x10(%ebp)
   178d3:	e8 c5 f9 ff ff       	call   1729d <fs_unprotect>
   178d8:	83 c4 10             	add    $0x10,%esp
	return err;
   178db:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   178de:	c9                   	leave  
   178df:	c3                   	ret    

000178e0 <sys_opendir>:

int sys_opendir(const char * name, DIR * dir) {
   178e0:	55                   	push   %ebp
   178e1:	89 e5                	mov    %esp,%ebp
   178e3:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   178e6:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   178eb:	83 ec 0c             	sub    $0xc,%esp
   178ee:	50                   	push   %eax
   178ef:	e8 7e f9 ff ff       	call   17272 <fs_protect>
   178f4:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->opendir(root_fs, name, dir);
   178f7:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   178fc:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17902:	8b 40 24             	mov    0x24(%eax),%eax
   17905:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   1790b:	83 ec 04             	sub    $0x4,%esp
   1790e:	ff 75 0c             	pushl  0xc(%ebp)
   17911:	ff 75 08             	pushl  0x8(%ebp)
   17914:	52                   	push   %edx
   17915:	ff d0                	call   *%eax
   17917:	83 c4 10             	add    $0x10,%esp
   1791a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   1791d:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17922:	83 ec 0c             	sub    $0xc,%esp
   17925:	50                   	push   %eax
   17926:	e8 72 f9 ff ff       	call   1729d <fs_unprotect>
   1792b:	83 c4 10             	add    $0x10,%esp
	return err;
   1792e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17931:	c9                   	leave  
   17932:	c3                   	ret    

00017933 <sys_readdir>:

int sys_readdir(DIR* dir, struct dirent * dirent) {
   17933:	55                   	push   %ebp
   17934:	89 e5                	mov    %esp,%ebp
   17936:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17939:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   1793e:	83 ec 0c             	sub    $0xc,%esp
   17941:	50                   	push   %eax
   17942:	e8 2b f9 ff ff       	call   17272 <fs_protect>
   17947:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->readdir(root_fs, dir, dirent);
   1794a:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   1794f:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17955:	8b 40 28             	mov    0x28(%eax),%eax
   17958:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   1795e:	83 ec 04             	sub    $0x4,%esp
   17961:	ff 75 0c             	pushl  0xc(%ebp)
   17964:	ff 75 08             	pushl  0x8(%ebp)
   17967:	52                   	push   %edx
   17968:	ff d0                	call   *%eax
   1796a:	83 c4 10             	add    $0x10,%esp
   1796d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17970:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17975:	83 ec 0c             	sub    $0xc,%esp
   17978:	50                   	push   %eax
   17979:	e8 1f f9 ff ff       	call   1729d <fs_unprotect>
   1797e:	83 c4 10             	add    $0x10,%esp
	return err;
   17981:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17984:	c9                   	leave  
   17985:	c3                   	ret    

00017986 <sys_closedir>:

int sys_closedir(DIR *dir) {
   17986:	55                   	push   %ebp
   17987:	89 e5                	mov    %esp,%ebp
   17989:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   1798c:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17991:	83 ec 0c             	sub    $0xc,%esp
   17994:	50                   	push   %eax
   17995:	e8 d8 f8 ff ff       	call   17272 <fs_protect>
   1799a:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->closedir(root_fs, dir);
   1799d:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   179a2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   179a8:	8b 40 2c             	mov    0x2c(%eax),%eax
   179ab:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   179b1:	83 ec 08             	sub    $0x8,%esp
   179b4:	ff 75 08             	pushl  0x8(%ebp)
   179b7:	52                   	push   %edx
   179b8:	ff d0                	call   *%eax
   179ba:	83 c4 10             	add    $0x10,%esp
   179bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   179c0:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   179c5:	83 ec 0c             	sub    $0xc,%esp
   179c8:	50                   	push   %eax
   179c9:	e8 cf f8 ff ff       	call   1729d <fs_unprotect>
   179ce:	83 c4 10             	add    $0x10,%esp
	return err;
   179d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   179d4:	c9                   	leave  
   179d5:	c3                   	ret    

000179d6 <sys_ioctl>:

int sys_ioctl(int file,int cmd, int arg0,int arg1) {
   179d6:	55                   	push   %ebp
   179d7:	89 e5                	mov    %esp,%ebp
   179d9:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file))
   179dc:	ff 75 08             	pushl  0x8(%ebp)
   179df:	e8 91 f4 ff ff       	call   16e75 <is_fd_bad>
   179e4:	83 c4 04             	add    $0x4,%esp
   179e7:	85 c0                	test   %eax,%eax
   179e9:	74 1a                	je     17a05 <sys_ioctl+0x2f>
	{
		log_printf("file(%d) is not valid.", file);
   179eb:	83 ec 08             	sub    $0x8,%esp
   179ee:	ff 75 08             	pushl  0x8(%ebp)
   179f1:	68 5c 9b 01 00       	push   $0x19b5c
   179f6:	e8 a8 0e 00 00       	call   188a3 <log_printf>
   179fb:	83 c4 10             	add    $0x10,%esp
		return -1;
   179fe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a03:	eb 76                	jmp    17a7b <sys_ioctl+0xa5>
	}

	file_t *p_file = task_file(file);
   17a05:	83 ec 0c             	sub    $0xc,%esp
   17a08:	ff 75 08             	pushl  0x8(%ebp)
   17a0b:	e8 ca 9c ff ff       	call   116da <task_file>
   17a10:	83 c4 10             	add    $0x10,%esp
   17a13:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file)
   17a16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a1a:	75 17                	jne    17a33 <sys_ioctl+0x5d>
	{
		log_printf("file not opened");
   17a1c:	83 ec 0c             	sub    $0xc,%esp
   17a1f:	68 73 9b 01 00       	push   $0x19b73
   17a24:	e8 7a 0e 00 00       	call   188a3 <log_printf>
   17a29:	83 c4 10             	add    $0x10,%esp
		return -1;
   17a2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a31:	eb 48                	jmp    17a7b <sys_ioctl+0xa5>
	}
	fs_t *fs = p_file->fs;
   17a33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a36:	8b 40 44             	mov    0x44(%eax),%eax
   17a39:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17a3c:	83 ec 0c             	sub    $0xc,%esp
   17a3f:	ff 75 f0             	pushl  -0x10(%ebp)
   17a42:	e8 2b f8 ff ff       	call   17272 <fs_protect>
   17a47:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->ioctl(p_file, cmd, arg0, arg1);
   17a4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17a4d:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a53:	8b 40 20             	mov    0x20(%eax),%eax
   17a56:	ff 75 14             	pushl  0x14(%ebp)
   17a59:	ff 75 10             	pushl  0x10(%ebp)
   17a5c:	ff 75 0c             	pushl  0xc(%ebp)
   17a5f:	ff 75 f4             	pushl  -0xc(%ebp)
   17a62:	ff d0                	call   *%eax
   17a64:	83 c4 10             	add    $0x10,%esp
   17a67:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17a6a:	83 ec 0c             	sub    $0xc,%esp
   17a6d:	ff 75 f0             	pushl  -0x10(%ebp)
   17a70:	e8 28 f8 ff ff       	call   1729d <fs_unprotect>
   17a75:	83 c4 10             	add    $0x10,%esp
	return err;
   17a78:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17a7b:	c9                   	leave  
   17a7c:	c3                   	ret    

00017a7d <sys_unlink>:

int sys_unlink(const char *name) {
   17a7d:	55                   	push   %ebp
   17a7e:	89 e5                	mov    %esp,%ebp
   17a80:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17a83:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a88:	83 ec 0c             	sub    $0xc,%esp
   17a8b:	50                   	push   %eax
   17a8c:	e8 e1 f7 ff ff       	call   17272 <fs_protect>
   17a91:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->unlink(root_fs, name);
   17a94:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17a99:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17a9f:	8b 40 30             	mov    0x30(%eax),%eax
   17aa2:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17aa8:	83 ec 08             	sub    $0x8,%esp
   17aab:	ff 75 08             	pushl  0x8(%ebp)
   17aae:	52                   	push   %edx
   17aaf:	ff d0                	call   *%eax
   17ab1:	83 c4 10             	add    $0x10,%esp
   17ab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17ab7:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17abc:	83 ec 0c             	sub    $0xc,%esp
   17abf:	50                   	push   %eax
   17ac0:	e8 d8 f7 ff ff       	call   1729d <fs_unprotect>
   17ac5:	83 c4 10             	add    $0x10,%esp
	return err;
   17ac8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17acb:	c9                   	leave  
   17acc:	c3                   	ret    

00017acd <kernel_init>:
static boot_info_t * init_boot_info;        // 启动信息

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   17acd:	55                   	push   %ebp
   17ace:	89 e5                	mov    %esp,%ebp
   17ad0:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   17ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   17ad6:	a3 a4 e0 05 00       	mov    %eax,0x5e0a4

    // 初始化CPU，再重新加载
    cpu_init();
   17adb:	e8 2d ac ff ff       	call   1270d <cpu_init>
    irq_init();
   17ae0:	e8 e0 b2 ff ff       	call   12dc5 <irq_init>
    log_init();
   17ae5:	e8 8a 0d 00 00       	call   18874 <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   17aea:	83 ec 0c             	sub    $0xc,%esp
   17aed:	ff 75 08             	pushl  0x8(%ebp)
   17af0:	e8 30 92 ff ff       	call   10d25 <memory_init>
   17af5:	83 c4 10             	add    $0x10,%esp
    fs_init();
   17af8:	e8 e2 f5 ff ff       	call   170df <fs_init>

    time_init();
   17afd:	e8 4f d5 ff ff       	call   15051 <time_init>

    task_manager_init();
   17b02:	e8 e6 99 ff ff       	call   114ed <task_manager_init>
}
   17b07:	90                   	nop
   17b08:	c9                   	leave  
   17b09:	c3                   	ret    

00017b0a <move_to_first_task>:


/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void) {
   17b0a:	55                   	push   %ebp
   17b0b:	89 e5                	mov    %esp,%ebp
   17b0d:	56                   	push   %esi
   17b0e:	53                   	push   %ebx
   17b0f:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t * curr = task_current();
   17b12:	e8 b9 9b ff ff       	call   116d0 <task_current>
   17b17:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17b1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17b1e:	75 19                	jne    17b39 <move_to_first_task+0x2f>
   17b20:	68 f0 9b 01 00       	push   $0x19bf0
   17b25:	68 78 9c 01 00       	push   $0x19c78
   17b2a:	6a 37                	push   $0x37
   17b2c:	68 fc 9b 01 00       	push   $0x19bfc
   17b31:	e8 10 0b 00 00       	call   18646 <panic>
   17b36:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   17b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b3c:	05 44 02 00 00       	add    $0x244,%eax
   17b41:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   17b44:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17b47:	8b 40 50             	mov    0x50(%eax),%eax
   17b4a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17b4d:	8b 52 38             	mov    0x38(%edx),%edx
   17b50:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17b53:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip));
   17b56:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17b59:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17b5c:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17b5f:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   17b62:	50                   	push   %eax
   17b63:	52                   	push   %edx
   17b64:	51                   	push   %ecx
   17b65:	53                   	push   %ebx
   17b66:	56                   	push   %esi
   17b67:	cf                   	iret   
}
   17b68:	90                   	nop
   17b69:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17b6c:	5b                   	pop    %ebx
   17b6d:	5e                   	pop    %esi
   17b6e:	5d                   	pop    %ebp
   17b6f:	c3                   	ret    

00017b70 <init_main>:

void init_main(void) {
   17b70:	55                   	push   %ebp
   17b71:	89 e5                	mov    %esp,%ebp
   17b73:	83 ec 08             	sub    $0x8,%esp
    log_printf("Kernel is running....");
   17b76:	83 ec 0c             	sub    $0xc,%esp
   17b79:	68 31 9c 01 00       	push   $0x19c31
   17b7e:	e8 20 0d 00 00       	call   188a3 <log_printf>
   17b83:	83 c4 10             	add    $0x10,%esp
    // log_printf("Version: %s, name: %s", OS_VERSION, "tiny x86 os");
    log_printf("Welcome to YesOS , a simple but powerful OS.");
   17b86:	83 ec 0c             	sub    $0xc,%esp
   17b89:	68 48 9c 01 00       	push   $0x19c48
   17b8e:	e8 10 0d 00 00       	call   188a3 <log_printf>
   17b93:	83 c4 10             	add    $0x10,%esp
    
    // 初始化任务
    task_first_init();
   17b96:	e8 4f 98 ff ff       	call   113ea <task_first_init>
    move_to_first_task();
   17b9b:	e8 6a ff ff ff       	call   17b0a <move_to_first_task>
}
   17ba0:	90                   	nop
   17ba1:	c9                   	leave  
   17ba2:	c3                   	ret    

00017ba3 <list_count>:
static inline int list_count(list_t *list) {
   17ba3:	55                   	push   %ebp
   17ba4:	89 e5                	mov    %esp,%ebp
    return list->count;
   17ba6:	8b 45 08             	mov    0x8(%ebp),%eax
   17ba9:	8b 40 08             	mov    0x8(%eax),%eax
}
   17bac:	5d                   	pop    %ebp
   17bad:	c3                   	ret    

00017bae <mutex_init>:
#include "ipc/mutex.h"

/**
 * 锁初始化
 */
void mutex_init (mutex_t * mutex) {
   17bae:	55                   	push   %ebp
   17baf:	89 e5                	mov    %esp,%ebp
   17bb1:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   17bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   17bb7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   17bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   17bc1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   17bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   17bca:	83 c0 08             	add    $0x8,%eax
   17bcd:	83 ec 0c             	sub    $0xc,%esp
   17bd0:	50                   	push   %eax
   17bd1:	e8 b9 0a 00 00       	call   1868f <list_init>
   17bd6:	83 c4 10             	add    $0x10,%esp
}
   17bd9:	90                   	nop
   17bda:	c9                   	leave  
   17bdb:	c3                   	ret    

00017bdc <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock (mutex_t * mutex) {
   17bdc:	55                   	push   %ebp
   17bdd:	89 e5                	mov    %esp,%ebp
   17bdf:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17be2:	e8 ee b4 ff ff       	call   130d5 <irq_enter_protection>
   17be7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   17bea:	e8 e1 9a ff ff       	call   116d0 <task_current>
   17bef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   17bf2:	8b 45 08             	mov    0x8(%ebp),%eax
   17bf5:	8b 40 04             	mov    0x4(%eax),%eax
   17bf8:	85 c0                	test   %eax,%eax
   17bfa:	75 14                	jne    17c10 <mutex_lock+0x34>
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   17bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   17bff:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   17c06:	8b 45 08             	mov    0x8(%ebp),%eax
   17c09:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17c0c:	89 10                	mov    %edx,(%eax)
   17c0e:	eb 52                	jmp    17c62 <mutex_lock+0x86>
    } else if (mutex->owner == curr) {
   17c10:	8b 45 08             	mov    0x8(%ebp),%eax
   17c13:	8b 00                	mov    (%eax),%eax
   17c15:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17c18:	75 11                	jne    17c2b <mutex_lock+0x4f>
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   17c1a:	8b 45 08             	mov    0x8(%ebp),%eax
   17c1d:	8b 40 04             	mov    0x4(%eax),%eax
   17c20:	8d 50 01             	lea    0x1(%eax),%edx
   17c23:	8b 45 08             	mov    0x8(%ebp),%eax
   17c26:	89 50 04             	mov    %edx,0x4(%eax)
   17c29:	eb 37                	jmp    17c62 <mutex_lock+0x86>
    } else {
        // 有其它任务占用，则进入队列等待
        task_t * curr = task_current();
   17c2b:	e8 a0 9a ff ff       	call   116d0 <task_current>
   17c30:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   17c33:	83 ec 0c             	sub    $0xc,%esp
   17c36:	ff 75 ec             	pushl  -0x14(%ebp)
   17c39:	e8 c4 99 ff ff       	call   11602 <task_set_block>
   17c3e:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   17c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17c44:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17c4a:	8b 45 08             	mov    0x8(%ebp),%eax
   17c4d:	83 c0 08             	add    $0x8,%eax
   17c50:	83 ec 08             	sub    $0x8,%esp
   17c53:	52                   	push   %edx
   17c54:	50                   	push   %eax
   17c55:	e8 b9 0a 00 00       	call   18713 <list_insert_last>
   17c5a:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17c5d:	e8 85 9b ff ff       	call   117e7 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17c62:	83 ec 0c             	sub    $0xc,%esp
   17c65:	ff 75 f4             	pushl  -0xc(%ebp)
   17c68:	e8 80 b4 ff ff       	call   130ed <irq_leave_protection>
   17c6d:	83 c4 10             	add    $0x10,%esp
}
   17c70:	90                   	nop
   17c71:	c9                   	leave  
   17c72:	c3                   	ret    

00017c73 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock (mutex_t * mutex) {
   17c73:	55                   	push   %ebp
   17c74:	89 e5                	mov    %esp,%ebp
   17c76:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17c79:	e8 57 b4 ff ff       	call   130d5 <irq_enter_protection>
   17c7e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t * curr = task_current();
   17c81:	e8 4a 9a ff ff       	call   116d0 <task_current>
   17c86:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   17c89:	8b 45 08             	mov    0x8(%ebp),%eax
   17c8c:	8b 00                	mov    (%eax),%eax
   17c8e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17c91:	0f 85 8a 00 00 00    	jne    17d21 <mutex_unlock+0xae>
        if (--mutex->locked_count == 0) {
   17c97:	8b 45 08             	mov    0x8(%ebp),%eax
   17c9a:	8b 40 04             	mov    0x4(%eax),%eax
   17c9d:	8d 50 ff             	lea    -0x1(%eax),%edx
   17ca0:	8b 45 08             	mov    0x8(%ebp),%eax
   17ca3:	89 50 04             	mov    %edx,0x4(%eax)
   17ca6:	8b 45 08             	mov    0x8(%ebp),%eax
   17ca9:	8b 40 04             	mov    0x4(%eax),%eax
   17cac:	85 c0                	test   %eax,%eax
   17cae:	75 71                	jne    17d21 <mutex_unlock+0xae>
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   17cb0:	8b 45 08             	mov    0x8(%ebp),%eax
   17cb3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list)) {
   17cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   17cbc:	83 c0 08             	add    $0x8,%eax
   17cbf:	83 ec 0c             	sub    $0xc,%esp
   17cc2:	50                   	push   %eax
   17cc3:	e8 db fe ff ff       	call   17ba3 <list_count>
   17cc8:	83 c4 10             	add    $0x10,%esp
   17ccb:	85 c0                	test   %eax,%eax
   17ccd:	74 52                	je     17d21 <mutex_unlock+0xae>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   17ccf:	8b 45 08             	mov    0x8(%ebp),%eax
   17cd2:	83 c0 08             	add    $0x8,%eax
   17cd5:	83 ec 0c             	sub    $0xc,%esp
   17cd8:	50                   	push   %eax
   17cd9:	e8 99 0a 00 00       	call   18777 <list_remove_first>
   17cde:	83 c4 10             	add    $0x10,%esp
   17ce1:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   17ce4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17ce8:	74 0a                	je     17cf4 <mutex_unlock+0x81>
   17cea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17ced:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17cf2:	eb 05                	jmp    17cf9 <mutex_unlock+0x86>
   17cf4:	b8 00 00 00 00       	mov    $0x0,%eax
   17cf9:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   17cfc:	83 ec 0c             	sub    $0xc,%esp
   17cff:	ff 75 e8             	pushl  -0x18(%ebp)
   17d02:	e8 c7 98 ff ff       	call   115ce <task_set_ready>
   17d07:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   17d0a:	8b 45 08             	mov    0x8(%ebp),%eax
   17d0d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   17d14:	8b 45 08             	mov    0x8(%ebp),%eax
   17d17:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17d1a:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   17d1c:	e8 c6 9a ff ff       	call   117e7 <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   17d21:	83 ec 0c             	sub    $0xc,%esp
   17d24:	ff 75 f4             	pushl  -0xc(%ebp)
   17d27:	e8 c1 b3 ff ff       	call   130ed <irq_leave_protection>
   17d2c:	83 c4 10             	add    $0x10,%esp
}
   17d2f:	90                   	nop
   17d30:	c9                   	leave  
   17d31:	c3                   	ret    

00017d32 <list_count>:
static inline int list_count(list_t *list) {
   17d32:	55                   	push   %ebp
   17d33:	89 e5                	mov    %esp,%ebp
    return list->count;
   17d35:	8b 45 08             	mov    0x8(%ebp),%eax
   17d38:	8b 40 08             	mov    0x8(%eax),%eax
}
   17d3b:	5d                   	pop    %ebp
   17d3c:	c3                   	ret    

00017d3d <sem_init>:
#include "ipc/sem.h"

/**
 * 信号量初始化
 */
void sem_init (sem_t * sem, int init_count) {
   17d3d:	55                   	push   %ebp
   17d3e:	89 e5                	mov    %esp,%ebp
   17d40:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   17d43:	8b 45 08             	mov    0x8(%ebp),%eax
   17d46:	8b 55 0c             	mov    0xc(%ebp),%edx
   17d49:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17d4b:	8b 45 08             	mov    0x8(%ebp),%eax
   17d4e:	83 c0 04             	add    $0x4,%eax
   17d51:	83 ec 0c             	sub    $0xc,%esp
   17d54:	50                   	push   %eax
   17d55:	e8 35 09 00 00       	call   1868f <list_init>
   17d5a:	83 c4 10             	add    $0x10,%esp
}
   17d5d:	90                   	nop
   17d5e:	c9                   	leave  
   17d5f:	c3                   	ret    

00017d60 <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait (sem_t * sem) {
   17d60:	55                   	push   %ebp
   17d61:	89 e5                	mov    %esp,%ebp
   17d63:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17d66:	e8 6a b3 ff ff       	call   130d5 <irq_enter_protection>
   17d6b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   17d6e:	8b 45 08             	mov    0x8(%ebp),%eax
   17d71:	8b 00                	mov    (%eax),%eax
   17d73:	85 c0                	test   %eax,%eax
   17d75:	7e 0f                	jle    17d86 <sem_wait+0x26>
        sem->count--;
   17d77:	8b 45 08             	mov    0x8(%ebp),%eax
   17d7a:	8b 00                	mov    (%eax),%eax
   17d7c:	8d 50 ff             	lea    -0x1(%eax),%edx
   17d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   17d82:	89 10                	mov    %edx,(%eax)
   17d84:	eb 37                	jmp    17dbd <sem_wait+0x5d>
    } else {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t * curr = task_current();
   17d86:	e8 45 99 ff ff       	call   116d0 <task_current>
   17d8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   17d8e:	83 ec 0c             	sub    $0xc,%esp
   17d91:	ff 75 f0             	pushl  -0x10(%ebp)
   17d94:	e8 69 98 ff ff       	call   11602 <task_set_block>
   17d99:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   17d9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17d9f:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17da5:	8b 45 08             	mov    0x8(%ebp),%eax
   17da8:	83 c0 04             	add    $0x4,%eax
   17dab:	83 ec 08             	sub    $0x8,%esp
   17dae:	52                   	push   %edx
   17daf:	50                   	push   %eax
   17db0:	e8 5e 09 00 00       	call   18713 <list_insert_last>
   17db5:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17db8:	e8 2a 9a ff ff       	call   117e7 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17dbd:	83 ec 0c             	sub    $0xc,%esp
   17dc0:	ff 75 f4             	pushl  -0xc(%ebp)
   17dc3:	e8 25 b3 ff ff       	call   130ed <irq_leave_protection>
   17dc8:	83 c4 10             	add    $0x10,%esp
}
   17dcb:	90                   	nop
   17dcc:	c9                   	leave  
   17dcd:	c3                   	ret    

00017dce <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify (sem_t * sem) {
   17dce:	55                   	push   %ebp
   17dcf:	89 e5                	mov    %esp,%ebp
   17dd1:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17dd4:	e8 fc b2 ff ff       	call   130d5 <irq_enter_protection>
   17dd9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   17ddc:	8b 45 08             	mov    0x8(%ebp),%eax
   17ddf:	83 c0 04             	add    $0x4,%eax
   17de2:	83 ec 0c             	sub    $0xc,%esp
   17de5:	50                   	push   %eax
   17de6:	e8 47 ff ff ff       	call   17d32 <list_count>
   17deb:	83 c4 10             	add    $0x10,%esp
   17dee:	85 c0                	test   %eax,%eax
   17df0:	74 42                	je     17e34 <sem_notify+0x66>
        // 有进程等待，则唤醒加入就绪队列
        list_node_t * node = list_remove_first(&sem->wait_list);
   17df2:	8b 45 08             	mov    0x8(%ebp),%eax
   17df5:	83 c0 04             	add    $0x4,%eax
   17df8:	83 ec 0c             	sub    $0xc,%esp
   17dfb:	50                   	push   %eax
   17dfc:	e8 76 09 00 00       	call   18777 <list_remove_first>
   17e01:	83 c4 10             	add    $0x10,%esp
   17e04:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   17e07:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17e0b:	74 0a                	je     17e17 <sem_notify+0x49>
   17e0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17e10:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17e15:	eb 05                	jmp    17e1c <sem_notify+0x4e>
   17e17:	b8 00 00 00 00       	mov    $0x0,%eax
   17e1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   17e1f:	83 ec 0c             	sub    $0xc,%esp
   17e22:	ff 75 ec             	pushl  -0x14(%ebp)
   17e25:	e8 a4 97 ff ff       	call   115ce <task_set_ready>
   17e2a:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   17e2d:	e8 b5 99 ff ff       	call   117e7 <task_dispatch>
   17e32:	eb 0d                	jmp    17e41 <sem_notify+0x73>
    } else {
        sem->count++;
   17e34:	8b 45 08             	mov    0x8(%ebp),%eax
   17e37:	8b 00                	mov    (%eax),%eax
   17e39:	8d 50 01             	lea    0x1(%eax),%edx
   17e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   17e3f:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   17e41:	83 ec 0c             	sub    $0xc,%esp
   17e44:	ff 75 f4             	pushl  -0xc(%ebp)
   17e47:	e8 a1 b2 ff ff       	call   130ed <irq_leave_protection>
   17e4c:	83 c4 10             	add    $0x10,%esp
}
   17e4f:	90                   	nop
   17e50:	c9                   	leave  
   17e51:	c3                   	ret    

00017e52 <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count (sem_t * sem) {
   17e52:	55                   	push   %ebp
   17e53:	89 e5                	mov    %esp,%ebp
   17e55:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17e58:	e8 78 b2 ff ff       	call   130d5 <irq_enter_protection>
   17e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   17e60:	8b 45 08             	mov    0x8(%ebp),%eax
   17e63:	8b 00                	mov    (%eax),%eax
   17e65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   17e68:	83 ec 0c             	sub    $0xc,%esp
   17e6b:	ff 75 f4             	pushl  -0xc(%ebp)
   17e6e:	e8 7a b2 ff ff       	call   130ed <irq_leave_protection>
   17e73:	83 c4 10             	add    $0x10,%esp
    return count;
   17e76:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   17e79:	c9                   	leave  
   17e7a:	c3                   	ret    

00017e7b <bitmap_byte_count>:
#include "tools/klib.h"

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count (int bit_count) {
   17e7b:	55                   	push   %ebp
   17e7c:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         // 向上取整
   17e7e:	8b 45 08             	mov    0x8(%ebp),%eax
   17e81:	83 c0 07             	add    $0x7,%eax
   17e84:	8d 50 07             	lea    0x7(%eax),%edx
   17e87:	85 c0                	test   %eax,%eax
   17e89:	0f 48 c2             	cmovs  %edx,%eax
   17e8c:	c1 f8 03             	sar    $0x3,%eax
}
   17e8f:	5d                   	pop    %ebp
   17e90:	c3                   	ret    

00017e91 <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   17e91:	55                   	push   %ebp
   17e92:	89 e5                	mov    %esp,%ebp
   17e94:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   17e97:	8b 45 08             	mov    0x8(%ebp),%eax
   17e9a:	8b 55 10             	mov    0x10(%ebp),%edx
   17e9d:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   17e9f:	8b 45 08             	mov    0x8(%ebp),%eax
   17ea2:	8b 55 0c             	mov    0xc(%ebp),%edx
   17ea5:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   17ea8:	8b 45 08             	mov    0x8(%ebp),%eax
   17eab:	8b 00                	mov    (%eax),%eax
   17ead:	50                   	push   %eax
   17eae:	e8 c8 ff ff ff       	call   17e7b <bitmap_byte_count>
   17eb3:	83 c4 04             	add    $0x4,%esp
   17eb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   17eb9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17ebd:	74 07                	je     17ec6 <bitmap_init+0x35>
   17ebf:	ba ff 00 00 00       	mov    $0xff,%edx
   17ec4:	eb 05                	jmp    17ecb <bitmap_init+0x3a>
   17ec6:	ba 00 00 00 00       	mov    $0x0,%edx
   17ecb:	8b 45 08             	mov    0x8(%ebp),%eax
   17ece:	8b 40 04             	mov    0x4(%eax),%eax
   17ed1:	83 ec 04             	sub    $0x4,%esp
   17ed4:	ff 75 f4             	pushl  -0xc(%ebp)
   17ed7:	52                   	push   %edx
   17ed8:	50                   	push   %eax
   17ed9:	e8 1b 04 00 00       	call   182f9 <kernel_memset>
   17ede:	83 c4 10             	add    $0x10,%esp
}
   17ee1:	90                   	nop
   17ee2:	c9                   	leave  
   17ee3:	c3                   	ret    

00017ee4 <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   17ee4:	55                   	push   %ebp
   17ee5:	89 e5                	mov    %esp,%ebp
   17ee7:	56                   	push   %esi
   17ee8:	53                   	push   %ebx
   17ee9:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   17eec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17ef3:	e9 a2 00 00 00       	jmp    17f9a <bitmap_set_bit+0xb6>
        // 可以考虑进行一定程序的优化!!
        if (bit) {
   17ef8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   17efc:	74 4a                	je     17f48 <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   17efe:	8b 45 08             	mov    0x8(%ebp),%eax
   17f01:	8b 50 04             	mov    0x4(%eax),%edx
   17f04:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f07:	8d 48 07             	lea    0x7(%eax),%ecx
   17f0a:	85 c0                	test   %eax,%eax
   17f0c:	0f 48 c1             	cmovs  %ecx,%eax
   17f0f:	c1 f8 03             	sar    $0x3,%eax
   17f12:	89 c3                	mov    %eax,%ebx
   17f14:	89 d8                	mov    %ebx,%eax
   17f16:	01 d0                	add    %edx,%eax
   17f18:	0f b6 00             	movzbl (%eax),%eax
   17f1b:	89 c6                	mov    %eax,%esi
   17f1d:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f20:	99                   	cltd   
   17f21:	c1 ea 1d             	shr    $0x1d,%edx
   17f24:	01 d0                	add    %edx,%eax
   17f26:	83 e0 07             	and    $0x7,%eax
   17f29:	29 d0                	sub    %edx,%eax
   17f2b:	ba 01 00 00 00       	mov    $0x1,%edx
   17f30:	89 c1                	mov    %eax,%ecx
   17f32:	d3 e2                	shl    %cl,%edx
   17f34:	89 d0                	mov    %edx,%eax
   17f36:	89 f2                	mov    %esi,%edx
   17f38:	09 c2                	or     %eax,%edx
   17f3a:	8b 45 08             	mov    0x8(%ebp),%eax
   17f3d:	8b 40 04             	mov    0x4(%eax),%eax
   17f40:	89 d9                	mov    %ebx,%ecx
   17f42:	01 c8                	add    %ecx,%eax
   17f44:	88 10                	mov    %dl,(%eax)
   17f46:	eb 4a                	jmp    17f92 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   17f48:	8b 45 08             	mov    0x8(%ebp),%eax
   17f4b:	8b 50 04             	mov    0x4(%eax),%edx
   17f4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f51:	8d 48 07             	lea    0x7(%eax),%ecx
   17f54:	85 c0                	test   %eax,%eax
   17f56:	0f 48 c1             	cmovs  %ecx,%eax
   17f59:	c1 f8 03             	sar    $0x3,%eax
   17f5c:	89 c3                	mov    %eax,%ebx
   17f5e:	89 d8                	mov    %ebx,%eax
   17f60:	01 d0                	add    %edx,%eax
   17f62:	0f b6 00             	movzbl (%eax),%eax
   17f65:	89 c6                	mov    %eax,%esi
   17f67:	8b 45 0c             	mov    0xc(%ebp),%eax
   17f6a:	99                   	cltd   
   17f6b:	c1 ea 1d             	shr    $0x1d,%edx
   17f6e:	01 d0                	add    %edx,%eax
   17f70:	83 e0 07             	and    $0x7,%eax
   17f73:	29 d0                	sub    %edx,%eax
   17f75:	ba 01 00 00 00       	mov    $0x1,%edx
   17f7a:	89 c1                	mov    %eax,%ecx
   17f7c:	d3 e2                	shl    %cl,%edx
   17f7e:	89 d0                	mov    %edx,%eax
   17f80:	f7 d0                	not    %eax
   17f82:	89 f2                	mov    %esi,%edx
   17f84:	21 c2                	and    %eax,%edx
   17f86:	8b 45 08             	mov    0x8(%ebp),%eax
   17f89:	8b 40 04             	mov    0x4(%eax),%eax
   17f8c:	89 d9                	mov    %ebx,%ecx
   17f8e:	01 c8                	add    %ecx,%eax
   17f90:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   17f92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17f96:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   17f9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17f9d:	3b 45 10             	cmp    0x10(%ebp),%eax
   17fa0:	7d 0e                	jge    17fb0 <bitmap_set_bit+0xcc>
   17fa2:	8b 45 08             	mov    0x8(%ebp),%eax
   17fa5:	8b 00                	mov    (%eax),%eax
   17fa7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   17faa:	0f 8c 48 ff ff ff    	jl     17ef8 <bitmap_set_bit+0x14>
        }
    }
} 
   17fb0:	90                   	nop
   17fb1:	83 c4 10             	add    $0x10,%esp
   17fb4:	5b                   	pop    %ebx
   17fb5:	5e                   	pop    %esi
   17fb6:	5d                   	pop    %ebp
   17fb7:	c3                   	ret    

00017fb8 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit (bitmap_t * bitmap, int index) {
   17fb8:	55                   	push   %ebp
   17fb9:	89 e5                	mov    %esp,%ebp
   17fbb:	53                   	push   %ebx
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   17fbc:	8b 45 08             	mov    0x8(%ebp),%eax
   17fbf:	8b 50 04             	mov    0x4(%eax),%edx
   17fc2:	8b 45 0c             	mov    0xc(%ebp),%eax
   17fc5:	8d 48 07             	lea    0x7(%eax),%ecx
   17fc8:	85 c0                	test   %eax,%eax
   17fca:	0f 48 c1             	cmovs  %ecx,%eax
   17fcd:	c1 f8 03             	sar    $0x3,%eax
   17fd0:	01 d0                	add    %edx,%eax
   17fd2:	0f b6 00             	movzbl (%eax),%eax
   17fd5:	0f b6 d8             	movzbl %al,%ebx
   17fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
   17fdb:	99                   	cltd   
   17fdc:	c1 ea 1d             	shr    $0x1d,%edx
   17fdf:	01 d0                	add    %edx,%eax
   17fe1:	83 e0 07             	and    $0x7,%eax
   17fe4:	29 d0                	sub    %edx,%eax
   17fe6:	89 c1                	mov    %eax,%ecx
   17fe8:	d3 fb                	sar    %cl,%ebx
   17fea:	89 d8                	mov    %ebx,%eax
   17fec:	83 e0 01             	and    $0x1,%eax
}
   17fef:	5b                   	pop    %ebx
   17ff0:	5d                   	pop    %ebp
   17ff1:	c3                   	ret    

00017ff2 <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set (bitmap_t * bitmap, int index) {
   17ff2:	55                   	push   %ebp
   17ff3:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   17ff5:	ff 75 0c             	pushl  0xc(%ebp)
   17ff8:	ff 75 08             	pushl  0x8(%ebp)
   17ffb:	e8 b8 ff ff ff       	call   17fb8 <bitmap_get_bit>
   18000:	83 c4 08             	add    $0x8,%esp
   18003:	85 c0                	test   %eax,%eax
   18005:	0f 95 c0             	setne  %al
   18008:	0f b6 c0             	movzbl %al,%eax
}
   1800b:	c9                   	leave  
   1800c:	c3                   	ret    

0001800d <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   1800d:	55                   	push   %ebp
   1800e:	89 e5                	mov    %esp,%ebp
   18010:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   18013:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1801a:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   18021:	e9 85 00 00 00       	jmp    180ab <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   18026:	ff 75 fc             	pushl  -0x4(%ebp)
   18029:	ff 75 08             	pushl  0x8(%ebp)
   1802c:	e8 87 ff ff ff       	call   17fb8 <bitmap_get_bit>
   18031:	83 c4 08             	add    $0x8,%esp
   18034:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18037:	74 06                	je     1803f <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   18039:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1803d:	eb 6c                	jmp    180ab <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1803f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18042:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   18045:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1804c:	eb 27                	jmp    18075 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   1804e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18051:	8d 50 01             	lea    0x1(%eax),%edx
   18054:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18057:	50                   	push   %eax
   18058:	ff 75 08             	pushl  0x8(%ebp)
   1805b:	e8 58 ff ff ff       	call   17fb8 <bitmap_get_bit>
   18060:	83 c4 08             	add    $0x8,%esp
   18063:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18066:	74 09                	je     18071 <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   18068:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1806f:	eb 16                	jmp    18087 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   18071:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18075:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18078:	3b 45 10             	cmp    0x10(%ebp),%eax
   1807b:	7d 0a                	jge    18087 <bitmap_alloc_nbits+0x7a>
   1807d:	8b 45 08             	mov    0x8(%ebp),%eax
   18080:	8b 00                	mov    (%eax),%eax
   18082:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18085:	7c c7                	jl     1804e <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   18087:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1808a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1808d:	7c 1c                	jl     180ab <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1808f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18092:	f7 d0                	not    %eax
   18094:	50                   	push   %eax
   18095:	ff 75 10             	pushl  0x10(%ebp)
   18098:	ff 75 f8             	pushl  -0x8(%ebp)
   1809b:	ff 75 08             	pushl  0x8(%ebp)
   1809e:	e8 41 fe ff ff       	call   17ee4 <bitmap_set_bit>
   180a3:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   180a6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   180a9:	eb 13                	jmp    180be <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   180ab:	8b 45 08             	mov    0x8(%ebp),%eax
   180ae:	8b 00                	mov    (%eax),%eax
   180b0:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   180b3:	0f 8c 6d ff ff ff    	jl     18026 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   180b9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   180be:	c9                   	leave  
   180bf:	c3                   	ret    

000180c0 <hlt>:
static inline void hlt(void) {
   180c0:	55                   	push   %ebp
   180c1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   180c3:	f4                   	hlt    
}
   180c4:	90                   	nop
   180c5:	5d                   	pop    %ebp
   180c6:	c3                   	ret    

000180c7 <strings_count>:
#include "comm/cpu_instr.h"

/**
 * @brief 计算字符串的数量
 */
int strings_count (char ** start) {
   180c7:	55                   	push   %ebp
   180c8:	89 e5                	mov    %esp,%ebp
   180ca:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   180cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   180d4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   180d8:	74 15                	je     180ef <strings_count+0x28>
        while (*start++) {
   180da:	eb 04                	jmp    180e0 <strings_count+0x19>
            count++;
   180dc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   180e0:	8b 45 08             	mov    0x8(%ebp),%eax
   180e3:	8d 50 04             	lea    0x4(%eax),%edx
   180e6:	89 55 08             	mov    %edx,0x8(%ebp)
   180e9:	8b 00                	mov    (%eax),%eax
   180eb:	85 c0                	test   %eax,%eax
   180ed:	75 ed                	jne    180dc <strings_count+0x15>
        }
    }
    return count;
   180ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   180f2:	c9                   	leave  
   180f3:	c3                   	ret    

000180f4 <get_file_name>:


/**
 * @brief 从路径中解释文件名
 */
char * get_file_name (char * name) {
   180f4:	55                   	push   %ebp
   180f5:	89 e5                	mov    %esp,%ebp
   180f7:	83 ec 10             	sub    $0x10,%esp
    char * s = name;
   180fa:	8b 45 08             	mov    0x8(%ebp),%eax
   180fd:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0') {
   18100:	eb 04                	jmp    18106 <get_file_name+0x12>
        s++;
   18102:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   18106:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18109:	0f b6 00             	movzbl (%eax),%eax
   1810c:	84 c0                	test   %al,%al
   1810e:	75 f2                	jne    18102 <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   18110:	eb 04                	jmp    18116 <get_file_name+0x22>
        s--;
   18112:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   18116:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18119:	0f b6 00             	movzbl (%eax),%eax
   1811c:	3c 5c                	cmp    $0x5c,%al
   1811e:	74 12                	je     18132 <get_file_name+0x3e>
   18120:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18123:	0f b6 00             	movzbl (%eax),%eax
   18126:	3c 2f                	cmp    $0x2f,%al
   18128:	74 08                	je     18132 <get_file_name+0x3e>
   1812a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1812d:	3b 45 08             	cmp    0x8(%ebp),%eax
   18130:	73 e0                	jae    18112 <get_file_name+0x1e>
    }
    return s + 1;
   18132:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18135:	83 c0 01             	add    $0x1,%eax
}
   18138:	c9                   	leave  
   18139:	c3                   	ret    

0001813a <kernel_strcpy>:

void kernel_strcpy (char * dest, const char * src) {
   1813a:	55                   	push   %ebp
   1813b:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   1813d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18141:	74 3b                	je     1817e <kernel_strcpy+0x44>
   18143:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18147:	74 35                	je     1817e <kernel_strcpy+0x44>
        return;
    }

    while (*dest && *src) {
   18149:	eb 17                	jmp    18162 <kernel_strcpy+0x28>
        *dest++ = *src++;
   1814b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1814e:	8d 42 01             	lea    0x1(%edx),%eax
   18151:	89 45 0c             	mov    %eax,0xc(%ebp)
   18154:	8b 45 08             	mov    0x8(%ebp),%eax
   18157:	8d 48 01             	lea    0x1(%eax),%ecx
   1815a:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1815d:	0f b6 12             	movzbl (%edx),%edx
   18160:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   18162:	8b 45 08             	mov    0x8(%ebp),%eax
   18165:	0f b6 00             	movzbl (%eax),%eax
   18168:	84 c0                	test   %al,%al
   1816a:	74 0a                	je     18176 <kernel_strcpy+0x3c>
   1816c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1816f:	0f b6 00             	movzbl (%eax),%eax
   18172:	84 c0                	test   %al,%al
   18174:	75 d5                	jne    1814b <kernel_strcpy+0x11>
    }
    *dest = '\0';
   18176:	8b 45 08             	mov    0x8(%ebp),%eax
   18179:	c6 00 00             	movb   $0x0,(%eax)
   1817c:	eb 01                	jmp    1817f <kernel_strcpy+0x45>
        return;
   1817e:	90                   	nop
}
   1817f:	5d                   	pop    %ebp
   18180:	c3                   	ret    

00018181 <kernel_strncpy>:

void kernel_strncpy(char * dest, const char * src, int size) {
   18181:	55                   	push   %ebp
   18182:	89 e5                	mov    %esp,%ebp
   18184:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   18187:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1818b:	74 61                	je     181ee <kernel_strncpy+0x6d>
   1818d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18191:	74 5b                	je     181ee <kernel_strncpy+0x6d>
   18193:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18197:	74 55                	je     181ee <kernel_strncpy+0x6d>
        return;
    }

    char * d = dest;
   18199:	8b 45 08             	mov    0x8(%ebp),%eax
   1819c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1819f:	8b 45 0c             	mov    0xc(%ebp),%eax
   181a2:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   181a5:	eb 17                	jmp    181be <kernel_strncpy+0x3d>
        *d++ = *s++;
   181a7:	8b 55 f8             	mov    -0x8(%ebp),%edx
   181aa:	8d 42 01             	lea    0x1(%edx),%eax
   181ad:	89 45 f8             	mov    %eax,-0x8(%ebp)
   181b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181b3:	8d 48 01             	lea    0x1(%eax),%ecx
   181b6:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   181b9:	0f b6 12             	movzbl (%edx),%edx
   181bc:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   181be:	8b 45 10             	mov    0x10(%ebp),%eax
   181c1:	8d 50 ff             	lea    -0x1(%eax),%edx
   181c4:	89 55 10             	mov    %edx,0x10(%ebp)
   181c7:	85 c0                	test   %eax,%eax
   181c9:	7e 0a                	jle    181d5 <kernel_strncpy+0x54>
   181cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   181ce:	0f b6 00             	movzbl (%eax),%eax
   181d1:	84 c0                	test   %al,%al
   181d3:	75 d2                	jne    181a7 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   181d5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   181d9:	75 0b                	jne    181e6 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   181db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181de:	83 e8 01             	sub    $0x1,%eax
   181e1:	c6 00 00             	movb   $0x0,(%eax)
   181e4:	eb 09                	jmp    181ef <kernel_strncpy+0x6e>
    } else {
        *d = '\0';
   181e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181e9:	c6 00 00             	movb   $0x0,(%eax)
   181ec:	eb 01                	jmp    181ef <kernel_strncpy+0x6e>
        return;
   181ee:	90                   	nop
    }
}
   181ef:	c9                   	leave  
   181f0:	c3                   	ret    

000181f1 <kernel_strlen>:

int kernel_strlen(const char * str) {
   181f1:	55                   	push   %ebp
   181f2:	89 e5                	mov    %esp,%ebp
   181f4:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   181f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   181fb:	75 07                	jne    18204 <kernel_strlen+0x13>
        return 0;
   181fd:	b8 00 00 00 00       	mov    $0x0,%eax
   18202:	eb 26                	jmp    1822a <kernel_strlen+0x39>
    }

	const char * c = str;
   18204:	8b 45 08             	mov    0x8(%ebp),%eax
   18207:	89 45 fc             	mov    %eax,-0x4(%ebp)

	int len = 0;
   1820a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while (*c++) {
   18211:	eb 04                	jmp    18217 <kernel_strlen+0x26>
		len++;
   18213:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c++) {
   18217:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1821a:	8d 50 01             	lea    0x1(%eax),%edx
   1821d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18220:	0f b6 00             	movzbl (%eax),%eax
   18223:	84 c0                	test   %al,%al
   18225:	75 ec                	jne    18213 <kernel_strlen+0x22>
	}

	return len;
   18227:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1822a:	c9                   	leave  
   1822b:	c3                   	ret    

0001822c <kernel_strncmp>:

/**
 * 比较两个字符串，最多比较size个字符
 * 如果某一字符串提前比较完成，也算相同
 */
int kernel_strncmp (const char * s1, const char * s2, int size) {
   1822c:	55                   	push   %ebp
   1822d:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   1822f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18233:	74 06                	je     1823b <kernel_strncmp+0xf>
   18235:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18239:	75 13                	jne    1824e <kernel_strncmp+0x22>
        return -1;
   1823b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18240:	eb 66                	jmp    182a8 <kernel_strncmp+0x7c>
    }

    // 2023-3-18 这里size没有用到
    while (*s1 && *s2 && (*s1 == *s2) && size) {
    	s1++;
   18242:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    	s2++;
   18246:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    	size--;
   1824a:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   1824e:	8b 45 08             	mov    0x8(%ebp),%eax
   18251:	0f b6 00             	movzbl (%eax),%eax
   18254:	84 c0                	test   %al,%al
   18256:	74 20                	je     18278 <kernel_strncmp+0x4c>
   18258:	8b 45 0c             	mov    0xc(%ebp),%eax
   1825b:	0f b6 00             	movzbl (%eax),%eax
   1825e:	84 c0                	test   %al,%al
   18260:	74 16                	je     18278 <kernel_strncmp+0x4c>
   18262:	8b 45 08             	mov    0x8(%ebp),%eax
   18265:	0f b6 10             	movzbl (%eax),%edx
   18268:	8b 45 0c             	mov    0xc(%ebp),%eax
   1826b:	0f b6 00             	movzbl (%eax),%eax
   1826e:	38 c2                	cmp    %al,%dl
   18270:	75 06                	jne    18278 <kernel_strncmp+0x4c>
   18272:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18276:	75 ca                	jne    18242 <kernel_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   18278:	8b 45 08             	mov    0x8(%ebp),%eax
   1827b:	0f b6 00             	movzbl (%eax),%eax
   1827e:	84 c0                	test   %al,%al
   18280:	74 21                	je     182a3 <kernel_strncmp+0x77>
   18282:	8b 45 0c             	mov    0xc(%ebp),%eax
   18285:	0f b6 00             	movzbl (%eax),%eax
   18288:	84 c0                	test   %al,%al
   1828a:	74 17                	je     182a3 <kernel_strncmp+0x77>
   1828c:	8b 45 08             	mov    0x8(%ebp),%eax
   1828f:	0f b6 10             	movzbl (%eax),%edx
   18292:	8b 45 0c             	mov    0xc(%ebp),%eax
   18295:	0f b6 00             	movzbl (%eax),%eax
   18298:	38 c2                	cmp    %al,%dl
   1829a:	74 07                	je     182a3 <kernel_strncmp+0x77>
   1829c:	b8 01 00 00 00       	mov    $0x1,%eax
   182a1:	eb 05                	jmp    182a8 <kernel_strncmp+0x7c>
   182a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   182a8:	5d                   	pop    %ebp
   182a9:	c3                   	ret    

000182aa <kernel_memcpy>:

void kernel_memcpy (void * dest, void * src, int size) {
   182aa:	55                   	push   %ebp
   182ab:	89 e5                	mov    %esp,%ebp
   182ad:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   182b0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182b4:	74 40                	je     182f6 <kernel_memcpy+0x4c>
   182b6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   182ba:	74 3a                	je     182f6 <kernel_memcpy+0x4c>
   182bc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   182c0:	74 34                	je     182f6 <kernel_memcpy+0x4c>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   182c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   182c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   182c8:	8b 45 08             	mov    0x8(%ebp),%eax
   182cb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   182ce:	eb 17                	jmp    182e7 <kernel_memcpy+0x3d>
        *d++ = *s++;
   182d0:	8b 55 fc             	mov    -0x4(%ebp),%edx
   182d3:	8d 42 01             	lea    0x1(%edx),%eax
   182d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
   182d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   182dc:	8d 48 01             	lea    0x1(%eax),%ecx
   182df:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   182e2:	0f b6 12             	movzbl (%edx),%edx
   182e5:	88 10                	mov    %dl,(%eax)
    while (size--) {
   182e7:	8b 45 10             	mov    0x10(%ebp),%eax
   182ea:	8d 50 ff             	lea    -0x1(%eax),%edx
   182ed:	89 55 10             	mov    %edx,0x10(%ebp)
   182f0:	85 c0                	test   %eax,%eax
   182f2:	75 dc                	jne    182d0 <kernel_memcpy+0x26>
   182f4:	eb 01                	jmp    182f7 <kernel_memcpy+0x4d>
        return;
   182f6:	90                   	nop
    }
}
   182f7:	c9                   	leave  
   182f8:	c3                   	ret    

000182f9 <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   182f9:	55                   	push   %ebp
   182fa:	89 e5                	mov    %esp,%ebp
   182fc:	83 ec 14             	sub    $0x14,%esp
   182ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   18302:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   18305:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18309:	74 2c                	je     18337 <kernel_memset+0x3e>
   1830b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1830f:	74 26                	je     18337 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   18311:	8b 45 08             	mov    0x8(%ebp),%eax
   18314:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   18317:	eb 0f                	jmp    18328 <kernel_memset+0x2f>
        *d++ = v;
   18319:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1831c:	8d 50 01             	lea    0x1(%eax),%edx
   1831f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18322:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   18326:	88 10                	mov    %dl,(%eax)
    while (size--) {
   18328:	8b 45 10             	mov    0x10(%ebp),%eax
   1832b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1832e:	89 55 10             	mov    %edx,0x10(%ebp)
   18331:	85 c0                	test   %eax,%eax
   18333:	75 e4                	jne    18319 <kernel_memset+0x20>
   18335:	eb 01                	jmp    18338 <kernel_memset+0x3f>
        return;
   18337:	90                   	nop
    }
}
   18338:	c9                   	leave  
   18339:	c3                   	ret    

0001833a <kernel_memcmp>:

int kernel_memcmp (void * d1, void * d2, int size) {
   1833a:	55                   	push   %ebp
   1833b:	89 e5                	mov    %esp,%ebp
   1833d:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   18340:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18344:	74 06                	je     1834c <kernel_memcmp+0x12>
   18346:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1834a:	75 07                	jne    18353 <kernel_memcmp+0x19>
        return 1;
   1834c:	b8 01 00 00 00       	mov    $0x1,%eax
   18351:	eb 43                	jmp    18396 <kernel_memcmp+0x5c>
    }

	uint8_t * p_d1 = (uint8_t *)d1;
   18353:	8b 45 08             	mov    0x8(%ebp),%eax
   18356:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t * p_d2 = (uint8_t *)d2;
   18359:	8b 45 0c             	mov    0xc(%ebp),%eax
   1835c:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (size--) {
   1835f:	eb 23                	jmp    18384 <kernel_memcmp+0x4a>
		if (*p_d1++ != *p_d2++) {
   18361:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18364:	8d 50 01             	lea    0x1(%eax),%edx
   18367:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1836a:	0f b6 08             	movzbl (%eax),%ecx
   1836d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18370:	8d 50 01             	lea    0x1(%eax),%edx
   18373:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18376:	0f b6 00             	movzbl (%eax),%eax
   18379:	38 c1                	cmp    %al,%cl
   1837b:	74 07                	je     18384 <kernel_memcmp+0x4a>
			return 1;
   1837d:	b8 01 00 00 00       	mov    $0x1,%eax
   18382:	eb 12                	jmp    18396 <kernel_memcmp+0x5c>
	while (size--) {
   18384:	8b 45 10             	mov    0x10(%ebp),%eax
   18387:	8d 50 ff             	lea    -0x1(%eax),%edx
   1838a:	89 55 10             	mov    %edx,0x10(%ebp)
   1838d:	85 c0                	test   %eax,%eax
   1838f:	75 d0                	jne    18361 <kernel_memcmp+0x27>
		}
	}

	return 0;
   18391:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18396:	c9                   	leave  
   18397:	c3                   	ret    

00018398 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   18398:	55                   	push   %ebp
   18399:	89 e5                	mov    %esp,%ebp
   1839b:	53                   	push   %ebx
   1839c:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   1839f:	8b 45 08             	mov    0x8(%ebp),%eax
   183a2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   183a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   183a8:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   183ab:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   183af:	74 1d                	je     183ce <kernel_itoa+0x36>
   183b1:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   183b5:	74 17                	je     183ce <kernel_itoa+0x36>
   183b7:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   183bb:	74 11                	je     183ce <kernel_itoa+0x36>
   183bd:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   183c1:	74 0b                	je     183ce <kernel_itoa+0x36>
        *p = '\0';
   183c3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   183c6:	c6 00 00             	movb   $0x0,(%eax)
        return;
   183c9:	e9 03 01 00 00       	jmp    184d1 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   183ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   183d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   183d9:	79 19                	jns    183f4 <kernel_itoa+0x5c>
   183db:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   183df:	75 13                	jne    183f4 <kernel_itoa+0x5c>
        *p++ = '-';
   183e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   183e4:	8d 50 01             	lea    0x1(%eax),%edx
   183e7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   183ea:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   183ed:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   183f4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   183f8:	74 3b                	je     18435 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   183fa:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   18400:	8b 45 0c             	mov    0xc(%ebp),%eax
   18403:	99                   	cltd   
   18404:	f7 7d 10             	idivl  0x10(%ebp)
   18407:	89 d0                	mov    %edx,%eax
   18409:	83 c0 0f             	add    $0xf,%eax
   1840c:	01 c8                	add    %ecx,%eax
   1840e:	0f b6 00             	movzbl (%eax),%eax
   18411:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   18414:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18417:	8d 50 01             	lea    0x1(%eax),%edx
   1841a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1841d:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   18421:	88 10                	mov    %dl,(%eax)
            num /= base;
   18423:	8b 45 0c             	mov    0xc(%ebp),%eax
   18426:	99                   	cltd   
   18427:	f7 7d 10             	idivl  0x10(%ebp)
   1842a:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   1842d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18431:	75 c7                	jne    183fa <kernel_itoa+0x62>
   18433:	eb 4b                	jmp    18480 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   18435:	8b 45 0c             	mov    0xc(%ebp),%eax
   18438:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   1843b:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   18441:	8b 5d 10             	mov    0x10(%ebp),%ebx
   18444:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18447:	ba 00 00 00 00       	mov    $0x0,%edx
   1844c:	f7 f3                	div    %ebx
   1844e:	89 d0                	mov    %edx,%eax
   18450:	83 c0 0f             	add    $0xf,%eax
   18453:	01 c8                	add    %ecx,%eax
   18455:	0f b6 00             	movzbl (%eax),%eax
   18458:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   1845b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1845e:	8d 50 01             	lea    0x1(%eax),%edx
   18461:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18464:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   18468:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   1846a:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1846d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18470:	ba 00 00 00 00       	mov    $0x0,%edx
   18475:	f7 f3                	div    %ebx
   18477:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1847a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1847e:	75 bb                	jne    1843b <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   18480:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18483:	8d 50 ff             	lea    -0x1(%eax),%edx
   18486:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18489:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   1848c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18490:	74 08                	je     1849a <kernel_itoa+0x102>
   18492:	8b 45 08             	mov    0x8(%ebp),%eax
   18495:	83 c0 01             	add    $0x1,%eax
   18498:	eb 03                	jmp    1849d <kernel_itoa+0x105>
   1849a:	8b 45 08             	mov    0x8(%ebp),%eax
   1849d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   184a0:	eb 27                	jmp    184c9 <kernel_itoa+0x131>
        char ch = *start;
   184a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   184a5:	0f b6 00             	movzbl (%eax),%eax
   184a8:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   184ab:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184ae:	0f b6 10             	movzbl (%eax),%edx
   184b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   184b4:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   184b6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184b9:	8d 50 ff             	lea    -0x1(%eax),%edx
   184bc:	89 55 f8             	mov    %edx,-0x8(%ebp)
   184bf:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   184c3:	88 10                	mov    %dl,(%eax)
        start++;
   184c5:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   184c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   184cc:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   184cf:	72 d1                	jb     184a2 <kernel_itoa+0x10a>
    }
}
   184d1:	83 c4 20             	add    $0x20,%esp
   184d4:	5b                   	pop    %ebx
   184d5:	5d                   	pop    %ebp
   184d6:	c3                   	ret    

000184d7 <kernel_sprintf>:

/**
 * @brief 格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   184d7:	55                   	push   %ebp
   184d8:	89 e5                	mov    %esp,%ebp
   184da:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   184dd:	8d 45 10             	lea    0x10(%ebp),%eax
   184e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   184e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   184e6:	83 ec 04             	sub    $0x4,%esp
   184e9:	50                   	push   %eax
   184ea:	ff 75 0c             	pushl  0xc(%ebp)
   184ed:	ff 75 08             	pushl  0x8(%ebp)
   184f0:	e8 06 00 00 00       	call   184fb <kernel_vsprintf>
   184f5:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   184f8:	90                   	nop
   184f9:	c9                   	leave  
   184fa:	c3                   	ret    

000184fb <kernel_vsprintf>:

/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   184fb:	55                   	push   %ebp
   184fc:	89 e5                	mov    %esp,%ebp
   184fe:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   18501:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   18508:	8b 45 08             	mov    0x8(%ebp),%eax
   1850b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   1850e:	e9 17 01 00 00       	jmp    1862a <kernel_vsprintf+0x12f>
        switch (state) {
   18513:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18516:	85 c0                	test   %eax,%eax
   18518:	74 0a                	je     18524 <kernel_vsprintf+0x29>
   1851a:	83 f8 01             	cmp    $0x1,%eax
   1851d:	74 2b                	je     1854a <kernel_vsprintf+0x4f>
   1851f:	e9 06 01 00 00       	jmp    1862a <kernel_vsprintf+0x12f>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   18524:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   18528:	75 0c                	jne    18536 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   1852a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   18531:	e9 f4 00 00 00       	jmp    1862a <kernel_vsprintf+0x12f>
                } else {
                    *curr++ = ch;
   18536:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18539:	8d 50 01             	lea    0x1(%eax),%edx
   1853c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1853f:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   18543:	88 10                	mov    %dl,(%eax)
                }
                break;
   18545:	e9 e0 00 00 00       	jmp    1862a <kernel_vsprintf+0x12f>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   1854a:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   1854e:	75 31                	jne    18581 <kernel_vsprintf+0x86>
                    int num = va_arg(args, int);
   18550:	8b 45 10             	mov    0x10(%ebp),%eax
   18553:	8d 50 04             	lea    0x4(%eax),%edx
   18556:	89 55 10             	mov    %edx,0x10(%ebp)
   18559:	8b 00                	mov    (%eax),%eax
   1855b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   1855e:	6a 0a                	push   $0xa
   18560:	ff 75 e4             	pushl  -0x1c(%ebp)
   18563:	ff 75 f8             	pushl  -0x8(%ebp)
   18566:	e8 2d fe ff ff       	call   18398 <kernel_itoa>
   1856b:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   1856e:	ff 75 f8             	pushl  -0x8(%ebp)
   18571:	e8 7b fc ff ff       	call   181f1 <kernel_strlen>
   18576:	83 c4 04             	add    $0x4,%esp
   18579:	01 45 f8             	add    %eax,-0x8(%ebp)
   1857c:	e9 a1 00 00 00       	jmp    18622 <kernel_vsprintf+0x127>
                } else if (ch == 'x') {
   18581:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   18585:	75 2e                	jne    185b5 <kernel_vsprintf+0xba>
                    int num = va_arg(args, int);
   18587:	8b 45 10             	mov    0x10(%ebp),%eax
   1858a:	8d 50 04             	lea    0x4(%eax),%edx
   1858d:	89 55 10             	mov    %edx,0x10(%ebp)
   18590:	8b 00                	mov    (%eax),%eax
   18592:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   18595:	6a 10                	push   $0x10
   18597:	ff 75 e8             	pushl  -0x18(%ebp)
   1859a:	ff 75 f8             	pushl  -0x8(%ebp)
   1859d:	e8 f6 fd ff ff       	call   18398 <kernel_itoa>
   185a2:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   185a5:	ff 75 f8             	pushl  -0x8(%ebp)
   185a8:	e8 44 fc ff ff       	call   181f1 <kernel_strlen>
   185ad:	83 c4 04             	add    $0x4,%esp
   185b0:	01 45 f8             	add    %eax,-0x8(%ebp)
   185b3:	eb 6d                	jmp    18622 <kernel_vsprintf+0x127>
                } else if (ch == 'c') {
   185b5:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   185b9:	75 1f                	jne    185da <kernel_vsprintf+0xdf>
                    char c = va_arg(args, int);
   185bb:	8b 45 10             	mov    0x10(%ebp),%eax
   185be:	8d 50 04             	lea    0x4(%eax),%edx
   185c1:	89 55 10             	mov    %edx,0x10(%ebp)
   185c4:	8b 00                	mov    (%eax),%eax
   185c6:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   185c9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   185cc:	8d 50 01             	lea    0x1(%eax),%edx
   185cf:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185d2:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   185d6:	88 10                	mov    %dl,(%eax)
   185d8:	eb 48                	jmp    18622 <kernel_vsprintf+0x127>
                } else if (ch == 's') {
   185da:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   185de:	75 42                	jne    18622 <kernel_vsprintf+0x127>
                    const char * str = va_arg(args, char *);
   185e0:	8b 45 10             	mov    0x10(%ebp),%eax
   185e3:	8d 50 04             	lea    0x4(%eax),%edx
   185e6:	89 55 10             	mov    %edx,0x10(%ebp)
   185e9:	8b 00                	mov    (%eax),%eax
   185eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   185ee:	ff 75 f4             	pushl  -0xc(%ebp)
   185f1:	e8 fb fb ff ff       	call   181f1 <kernel_strlen>
   185f6:	83 c4 04             	add    $0x4,%esp
   185f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   185fc:	eb 17                	jmp    18615 <kernel_vsprintf+0x11a>
                        *curr++ = *str++;
   185fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
   18601:	8d 42 01             	lea    0x1(%edx),%eax
   18604:	89 45 f4             	mov    %eax,-0xc(%ebp)
   18607:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1860a:	8d 48 01             	lea    0x1(%eax),%ecx
   1860d:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   18610:	0f b6 12             	movzbl (%edx),%edx
   18613:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   18615:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18618:	8d 50 ff             	lea    -0x1(%eax),%edx
   1861b:	89 55 f0             	mov    %edx,-0x10(%ebp)
   1861e:	85 c0                	test   %eax,%eax
   18620:	75 dc                	jne    185fe <kernel_vsprintf+0x103>
                    }
                }
                state = NORMAL;
   18622:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   18629:	90                   	nop
    while ((ch = *fmt++)) {
   1862a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1862d:	8d 50 01             	lea    0x1(%eax),%edx
   18630:	89 55 0c             	mov    %edx,0xc(%ebp)
   18633:	0f b6 00             	movzbl (%eax),%eax
   18636:	88 45 ef             	mov    %al,-0x11(%ebp)
   18639:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   1863d:	0f 85 d0 fe ff ff    	jne    18513 <kernel_vsprintf+0x18>
        }
    }
}
   18643:	90                   	nop
   18644:	c9                   	leave  
   18645:	c3                   	ret    

00018646 <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   18646:	55                   	push   %ebp
   18647:	89 e5                	mov    %esp,%ebp
   18649:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   1864c:	83 ec 08             	sub    $0x8,%esp
   1864f:	ff 75 14             	pushl  0x14(%ebp)
   18652:	68 8c 9c 01 00       	push   $0x19c8c
   18657:	e8 47 02 00 00       	call   188a3 <log_printf>
   1865c:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   1865f:	ff 75 10             	pushl  0x10(%ebp)
   18662:	ff 75 0c             	pushl  0xc(%ebp)
   18665:	ff 75 08             	pushl  0x8(%ebp)
   18668:	68 9e 9c 01 00       	push   $0x19c9e
   1866d:	e8 31 02 00 00       	call   188a3 <log_printf>
   18672:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   18675:	e8 46 fa ff ff       	call   180c0 <hlt>
   1867a:	eb f9                	jmp    18675 <panic+0x2f>

0001867c <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   1867c:	55                   	push   %ebp
   1867d:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   1867f:	8b 45 08             	mov    0x8(%ebp),%eax
   18682:	8b 40 08             	mov    0x8(%eax),%eax
   18685:	85 c0                	test   %eax,%eax
   18687:	0f 94 c0             	sete   %al
   1868a:	0f b6 c0             	movzbl %al,%eax
}
   1868d:	5d                   	pop    %ebp
   1868e:	c3                   	ret    

0001868f <list_init>:

/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list) {
   1868f:	55                   	push   %ebp
   18690:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   18692:	8b 45 08             	mov    0x8(%ebp),%eax
   18695:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1869c:	8b 45 08             	mov    0x8(%ebp),%eax
   1869f:	8b 50 04             	mov    0x4(%eax),%edx
   186a2:	8b 45 08             	mov    0x8(%ebp),%eax
   186a5:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   186a7:	8b 45 08             	mov    0x8(%ebp),%eax
   186aa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   186b1:	90                   	nop
   186b2:	5d                   	pop    %ebp
   186b3:	c3                   	ret    

000186b4 <list_insert_first>:
/**
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node) {
   186b4:	55                   	push   %ebp
   186b5:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   186b7:	8b 45 08             	mov    0x8(%ebp),%eax
   186ba:	8b 10                	mov    (%eax),%edx
   186bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   186bf:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   186c2:	8b 45 0c             	mov    0xc(%ebp),%eax
   186c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list)) {
   186cb:	ff 75 08             	pushl  0x8(%ebp)
   186ce:	e8 a9 ff ff ff       	call   1867c <list_is_empty>
   186d3:	83 c4 04             	add    $0x4,%esp
   186d6:	85 c0                	test   %eax,%eax
   186d8:	74 15                	je     186ef <list_insert_first+0x3b>
        list->last = list->first = node;
   186da:	8b 45 08             	mov    0x8(%ebp),%eax
   186dd:	8b 55 0c             	mov    0xc(%ebp),%edx
   186e0:	89 10                	mov    %edx,(%eax)
   186e2:	8b 45 08             	mov    0x8(%ebp),%eax
   186e5:	8b 10                	mov    (%eax),%edx
   186e7:	8b 45 08             	mov    0x8(%ebp),%eax
   186ea:	89 50 04             	mov    %edx,0x4(%eax)
   186ed:	eb 12                	jmp    18701 <list_insert_first+0x4d>
    } else {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   186ef:	8b 45 08             	mov    0x8(%ebp),%eax
   186f2:	8b 00                	mov    (%eax),%eax
   186f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   186f7:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   186f9:	8b 45 08             	mov    0x8(%ebp),%eax
   186fc:	8b 55 0c             	mov    0xc(%ebp),%edx
   186ff:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   18701:	8b 45 08             	mov    0x8(%ebp),%eax
   18704:	8b 40 08             	mov    0x8(%eax),%eax
   18707:	8d 50 01             	lea    0x1(%eax),%edx
   1870a:	8b 45 08             	mov    0x8(%ebp),%eax
   1870d:	89 50 08             	mov    %edx,0x8(%eax)
}
   18710:	90                   	nop
   18711:	c9                   	leave  
   18712:	c3                   	ret    

00018713 <list_insert_last>:
/**
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node) {
   18713:	55                   	push   %ebp
   18714:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   18716:	8b 45 08             	mov    0x8(%ebp),%eax
   18719:	8b 50 04             	mov    0x4(%eax),%edx
   1871c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1871f:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   18721:	8b 45 0c             	mov    0xc(%ebp),%eax
   18724:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list)) {
   1872b:	ff 75 08             	pushl  0x8(%ebp)
   1872e:	e8 49 ff ff ff       	call   1867c <list_is_empty>
   18733:	83 c4 04             	add    $0x4,%esp
   18736:	85 c0                	test   %eax,%eax
   18738:	74 16                	je     18750 <list_insert_last+0x3d>
        list->first = list->last = node;
   1873a:	8b 45 08             	mov    0x8(%ebp),%eax
   1873d:	8b 55 0c             	mov    0xc(%ebp),%edx
   18740:	89 50 04             	mov    %edx,0x4(%eax)
   18743:	8b 45 08             	mov    0x8(%ebp),%eax
   18746:	8b 50 04             	mov    0x4(%eax),%edx
   18749:	8b 45 08             	mov    0x8(%ebp),%eax
   1874c:	89 10                	mov    %edx,(%eax)
   1874e:	eb 15                	jmp    18765 <list_insert_last+0x52>
    } else {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   18750:	8b 45 08             	mov    0x8(%ebp),%eax
   18753:	8b 40 04             	mov    0x4(%eax),%eax
   18756:	8b 55 0c             	mov    0xc(%ebp),%edx
   18759:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   1875c:	8b 45 08             	mov    0x8(%ebp),%eax
   1875f:	8b 55 0c             	mov    0xc(%ebp),%edx
   18762:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   18765:	8b 45 08             	mov    0x8(%ebp),%eax
   18768:	8b 40 08             	mov    0x8(%eax),%eax
   1876b:	8d 50 01             	lea    0x1(%eax),%edx
   1876e:	8b 45 08             	mov    0x8(%ebp),%eax
   18771:	89 50 08             	mov    %edx,0x8(%eax)
}
   18774:	90                   	nop
   18775:	c9                   	leave  
   18776:	c3                   	ret    

00018777 <list_remove_first>:
/**
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
   18777:	55                   	push   %ebp
   18778:	89 e5                	mov    %esp,%ebp
   1877a:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list)) {
   1877d:	ff 75 08             	pushl  0x8(%ebp)
   18780:	e8 f7 fe ff ff       	call   1867c <list_is_empty>
   18785:	83 c4 04             	add    $0x4,%esp
   18788:	85 c0                	test   %eax,%eax
   1878a:	74 07                	je     18793 <list_remove_first+0x1c>
        return (list_node_t*)0;
   1878c:	b8 00 00 00 00       	mov    $0x0,%eax
   18791:	eb 5a                	jmp    187ed <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   18793:	8b 45 08             	mov    0x8(%ebp),%eax
   18796:	8b 00                	mov    (%eax),%eax
   18798:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   1879b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1879e:	8b 50 04             	mov    0x4(%eax),%edx
   187a1:	8b 45 08             	mov    0x8(%ebp),%eax
   187a4:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   187a6:	8b 45 08             	mov    0x8(%ebp),%eax
   187a9:	8b 00                	mov    (%eax),%eax
   187ab:	85 c0                	test   %eax,%eax
   187ad:	75 0c                	jne    187bb <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   187af:	8b 45 08             	mov    0x8(%ebp),%eax
   187b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   187b9:	eb 0c                	jmp    187c7 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   187bb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   187be:	8b 40 04             	mov    0x4(%eax),%eax
   187c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   187c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   187ca:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   187d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   187d3:	8b 10                	mov    (%eax),%edx
   187d5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   187d8:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   187db:	8b 45 08             	mov    0x8(%ebp),%eax
   187de:	8b 40 08             	mov    0x8(%eax),%eax
   187e1:	8d 50 ff             	lea    -0x1(%eax),%edx
   187e4:	8b 45 08             	mov    0x8(%ebp),%eax
   187e7:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   187ea:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   187ed:	c9                   	leave  
   187ee:	c3                   	ret    

000187ef <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   187ef:	55                   	push   %ebp
   187f0:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   187f2:	8b 45 08             	mov    0x8(%ebp),%eax
   187f5:	8b 00                	mov    (%eax),%eax
   187f7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   187fa:	75 0b                	jne    18807 <list_remove+0x18>
        list->first = remove_node->next;
   187fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   187ff:	8b 50 04             	mov    0x4(%eax),%edx
   18802:	8b 45 08             	mov    0x8(%ebp),%eax
   18805:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   18807:	8b 45 08             	mov    0x8(%ebp),%eax
   1880a:	8b 40 04             	mov    0x4(%eax),%eax
   1880d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18810:	75 0b                	jne    1881d <list_remove+0x2e>
        list->last = remove_node->pre;
   18812:	8b 45 0c             	mov    0xc(%ebp),%eax
   18815:	8b 10                	mov    (%eax),%edx
   18817:	8b 45 08             	mov    0x8(%ebp),%eax
   1881a:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   1881d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18820:	8b 00                	mov    (%eax),%eax
   18822:	85 c0                	test   %eax,%eax
   18824:	74 0e                	je     18834 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   18826:	8b 45 0c             	mov    0xc(%ebp),%eax
   18829:	8b 00                	mov    (%eax),%eax
   1882b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1882e:	8b 52 04             	mov    0x4(%edx),%edx
   18831:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   18834:	8b 45 0c             	mov    0xc(%ebp),%eax
   18837:	8b 40 04             	mov    0x4(%eax),%eax
   1883a:	85 c0                	test   %eax,%eax
   1883c:	74 0d                	je     1884b <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   1883e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18841:	8b 40 04             	mov    0x4(%eax),%eax
   18844:	8b 55 0c             	mov    0xc(%ebp),%edx
   18847:	8b 12                	mov    (%edx),%edx
   18849:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   1884b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1884e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18855:	8b 45 0c             	mov    0xc(%ebp),%eax
   18858:	8b 50 04             	mov    0x4(%eax),%edx
   1885b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1885e:	89 10                	mov    %edx,(%eax)
    --list->count;
   18860:	8b 45 08             	mov    0x8(%ebp),%eax
   18863:	8b 40 08             	mov    0x8(%eax),%eax
   18866:	8d 50 ff             	lea    -0x1(%eax),%edx
   18869:	8b 45 08             	mov    0x8(%ebp),%eax
   1886c:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1886f:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   18872:	5d                   	pop    %ebp
   18873:	c3                   	ret    

00018874 <log_init>:
static int log_dev_id;

/**
 * @brief 初始化日志输出
 */
void log_init (void) {
   18874:	55                   	push   %ebp
   18875:	89 e5                	mov    %esp,%ebp
   18877:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1887a:	83 ec 0c             	sub    $0xc,%esp
   1887d:	68 a8 e0 05 00       	push   $0x5e0a8
   18882:	e8 27 f3 ff ff       	call   17bae <mutex_init>
   18887:	83 c4 10             	add    $0x10,%esp

    log_dev_id = dev_open(DEV_TTY, 0, 0);
   1888a:	83 ec 04             	sub    $0x4,%esp
   1888d:	6a 00                	push   $0x0
   1888f:	6a 00                	push   $0x0
   18891:	6a 01                	push   $0x1
   18893:	e8 e3 b4 ff ff       	call   13d7b <dev_open>
   18898:	83 c4 10             	add    $0x10,%esp
   1889b:	a3 bc e0 05 00       	mov    %eax,0x5e0bc
  
    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
#endif
}
   188a0:	90                   	nop
   188a1:	c9                   	leave  
   188a2:	c3                   	ret    

000188a3 <log_printf>:

/**
 * @brief 日志打印
 */
void log_printf(const char * fmt, ...) {
   188a3:	55                   	push   %ebp
   188a4:	89 e5                	mov    %esp,%ebp
   188a6:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   188ac:	83 ec 04             	sub    $0x4,%esp
   188af:	68 80 00 00 00       	push   $0x80
   188b4:	6a 00                	push   $0x0
   188b6:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   188bc:	50                   	push   %eax
   188bd:	e8 37 fa ff ff       	call   182f9 <kernel_memset>
   188c2:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   188c5:	8d 45 0c             	lea    0xc(%ebp),%eax
   188c8:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   188ce:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   188d4:	83 ec 04             	sub    $0x4,%esp
   188d7:	50                   	push   %eax
   188d8:	ff 75 08             	pushl  0x8(%ebp)
   188db:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   188e1:	50                   	push   %eax
   188e2:	e8 14 fc ff ff       	call   184fb <kernel_vsprintf>
   188e7:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 显示，如果发送速度太慢，会造成这里关中断太长时间
    // 所以，这里这样做不是好办法
    mutex_lock(&mutex);
   188ea:	83 ec 0c             	sub    $0xc,%esp
   188ed:	68 a8 e0 05 00       	push   $0x5e0a8
   188f2:	e8 e5 f2 ff ff       	call   17bdc <mutex_lock>
   188f7:	83 c4 10             	add    $0x10,%esp

    outb(COM1_PORT, '\r');
    outb(COM1_PORT, '\n');
#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, "[log]", 5);
   188fa:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   188ff:	6a 05                	push   $0x5
   18901:	68 dc 9c 01 00       	push   $0x19cdc
   18906:	6a 00                	push   $0x0
   18908:	50                   	push   %eax
   18909:	e8 05 b6 ff ff       	call   13f13 <dev_write>
   1890e:	83 c4 10             	add    $0x10,%esp
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   18911:	83 ec 0c             	sub    $0xc,%esp
   18914:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   1891a:	50                   	push   %eax
   1891b:	e8 d1 f8 ff ff       	call   181f1 <kernel_strlen>
   18920:	83 c4 10             	add    $0x10,%esp
   18923:	89 c2                	mov    %eax,%edx
   18925:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   1892a:	52                   	push   %edx
   1892b:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   18931:	52                   	push   %edx
   18932:	6a 00                	push   $0x0
   18934:	50                   	push   %eax
   18935:	e8 d9 b5 ff ff       	call   13f13 <dev_write>
   1893a:	83 c4 10             	add    $0x10,%esp

    char c = '\n';
   1893d:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    //console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   18944:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18949:	6a 01                	push   $0x1
   1894b:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   18951:	52                   	push   %edx
   18952:	6a 00                	push   $0x0
   18954:	50                   	push   %eax
   18955:	e8 b9 b5 ff ff       	call   13f13 <dev_write>
   1895a:	83 c4 10             	add    $0x10,%esp

#endif
    mutex_unlock(&mutex);
   1895d:	83 ec 0c             	sub    $0xc,%esp
   18960:	68 a8 e0 05 00       	push   $0x5e0a8
   18965:	e8 09 f3 ff ff       	call   17c73 <mutex_unlock>
   1896a:	83 c4 10             	add    $0x10,%esp
}
   1896d:	90                   	nop
   1896e:	c9                   	leave  
   1896f:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
 * 联系邮箱: 2900226123@qq.com
 */
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main (void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
        print_msg("task id = %d", pid);
        msleep(1000);
    }
#endif

    for (int i = 0; i < TTY_NR; i++) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
        int pid = fork();
80000022:	e8 62 01 00 00       	call   80000189 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 e2 9c 01 00       	push   $0x19ce2
8000003a:	e8 23 01 00 00       	call   80000162 <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        } else if (pid == 0) {
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 fb 9c 01 00       	push   $0x19cfb
80000082:	e8 1d 01 00 00       	call   800001a4 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 e2 9c 01 00       	push   $0x19ce2
80000094:	e8 c9 00 00 00       	call   80000162 <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1) {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++) {
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>
    }

    while (1) {
        // 不断收集孤儿进程
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 24 01 00 00       	call   800001ec <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    while (1) {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:
#include "malloc.h"

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep (int ms) {
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7f 07                	jg     8000012c <msleep+0x13>
        return 0;
80000125:	b8 00 00 00 00       	mov    $0x0,%eax
8000012a:	eb 19                	jmp    80000145 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000012c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000133:	8b 45 08             	mov    0x8(%ebp),%eax
80000136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000139:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013c:	50                   	push   %eax
8000013d:	e8 8b ff ff ff       	call   800000cd <sys_call>
80000142:	83 c4 04             	add    $0x4,%esp
}
80000145:	c9                   	leave  
80000146:	c3                   	ret    

80000147 <getpid>:

int getpid() {
80000147:	55                   	push   %ebp
80000148:	89 e5                	mov    %esp,%ebp
8000014a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000154:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000157:	50                   	push   %eax
80000158:	e8 70 ff ff ff       	call   800000cd <sys_call>
8000015d:	83 c4 04             	add    $0x4,%esp
}
80000160:	c9                   	leave  
80000161:	c3                   	ret    

80000162 <print_msg>:

int print_msg(char * fmt, int arg) {
80000162:	55                   	push   %ebp
80000163:	89 e5                	mov    %esp,%ebp
80000165:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000168:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016f:	8b 45 08             	mov    0x8(%ebp),%eax
80000172:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000175:	8b 45 0c             	mov    0xc(%ebp),%eax
80000178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8000017b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017e:	50                   	push   %eax
8000017f:	e8 49 ff ff ff       	call   800000cd <sys_call>
80000184:	83 c4 04             	add    $0x4,%esp
}
80000187:	c9                   	leave  
80000188:	c3                   	ret    

80000189 <fork>:

int fork() {
80000189:	55                   	push   %ebp
8000018a:	89 e5                	mov    %esp,%ebp
8000018c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018f:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000196:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000199:	50                   	push   %eax
8000019a:	e8 2e ff ff ff       	call   800000cd <sys_call>
8000019f:	83 c4 04             	add    $0x4,%esp
}
800001a2:	c9                   	leave  
800001a3:	c3                   	ret    

800001a4 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
800001a4:	55                   	push   %ebp
800001a5:	89 e5                	mov    %esp,%ebp
800001a7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001aa:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b1:	8b 45 08             	mov    0x8(%ebp),%eax
800001b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b7:	8b 45 0c             	mov    0xc(%ebp),%eax
800001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bd:	8b 45 10             	mov    0x10(%ebp),%eax
800001c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c6:	50                   	push   %eax
800001c7:	e8 01 ff ff ff       	call   800000cd <sys_call>
800001cc:	83 c4 04             	add    $0x4,%esp
}
800001cf:	c9                   	leave  
800001d0:	c3                   	ret    

800001d1 <yield>:

int yield (void) {
800001d1:	55                   	push   %ebp
800001d2:	89 e5                	mov    %esp,%ebp
800001d4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001de:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e1:	50                   	push   %eax
800001e2:	e8 e6 fe ff ff       	call   800000cd <sys_call>
800001e7:	83 c4 04             	add    $0x4,%esp
}
800001ea:	c9                   	leave  
800001eb:	c3                   	ret    

800001ec <wait>:

int wait(int* status) {
800001ec:	55                   	push   %ebp
800001ed:	89 e5                	mov    %esp,%ebp
800001ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
800001f2:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
800001f9:	8b 45 08             	mov    0x8(%ebp),%eax
800001fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800001ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000202:	50                   	push   %eax
80000203:	e8 c5 fe ff ff       	call   800000cd <sys_call>
80000208:	83 c4 04             	add    $0x4,%esp
}
8000020b:	c9                   	leave  
8000020c:	c3                   	ret    

8000020d <_exit>:

void _exit(int status) {
8000020d:	55                   	push   %ebp
8000020e:	89 e5                	mov    %esp,%ebp
80000210:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000213:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8000021a:	8b 45 08             	mov    0x8(%ebp),%eax
8000021d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000220:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000223:	50                   	push   %eax
80000224:	e8 a4 fe ff ff       	call   800000cd <sys_call>
80000229:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
8000022c:	eb fe                	jmp    8000022c <_exit+0x1f>

8000022e <open>:
}

int open(const char *name, int flags, ...) {
8000022e:	55                   	push   %ebp
8000022f:	89 e5                	mov    %esp,%ebp
80000231:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000234:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000023b:	8b 45 08             	mov    0x8(%ebp),%eax
8000023e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000241:	8b 45 0c             	mov    0xc(%ebp),%eax
80000244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000247:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024a:	50                   	push   %eax
8000024b:	e8 7d fe ff ff       	call   800000cd <sys_call>
80000250:	83 c4 04             	add    $0x4,%esp
}
80000253:	c9                   	leave  
80000254:	c3                   	ret    

80000255 <read>:

int read(int file, char *ptr, int len) {
80000255:	55                   	push   %ebp
80000256:	89 e5                	mov    %esp,%ebp
80000258:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000025b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000262:	8b 45 08             	mov    0x8(%ebp),%eax
80000265:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000268:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000026e:	8b 45 10             	mov    0x10(%ebp),%eax
80000271:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000274:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000277:	50                   	push   %eax
80000278:	e8 50 fe ff ff       	call   800000cd <sys_call>
8000027d:	83 c4 04             	add    $0x4,%esp
}
80000280:	c9                   	leave  
80000281:	c3                   	ret    

80000282 <write>:

int write(int file, char *ptr, int len) {
80000282:	55                   	push   %ebp
80000283:	89 e5                	mov    %esp,%ebp
80000285:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000288:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000028f:	8b 45 08             	mov    0x8(%ebp),%eax
80000292:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000295:	8b 45 0c             	mov    0xc(%ebp),%eax
80000298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000029b:	8b 45 10             	mov    0x10(%ebp),%eax
8000029e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a4:	50                   	push   %eax
800002a5:	e8 23 fe ff ff       	call   800000cd <sys_call>
800002aa:	83 c4 04             	add    $0x4,%esp
}
800002ad:	c9                   	leave  
800002ae:	c3                   	ret    

800002af <close>:

int close(int file) {
800002af:	55                   	push   %ebp
800002b0:	89 e5                	mov    %esp,%ebp
800002b2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002b5:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002bc:	8b 45 08             	mov    0x8(%ebp),%eax
800002bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c5:	50                   	push   %eax
800002c6:	e8 02 fe ff ff       	call   800000cd <sys_call>
800002cb:	83 c4 04             	add    $0x4,%esp
}
800002ce:	c9                   	leave  
800002cf:	c3                   	ret    

800002d0 <lseek>:

int lseek(int file, int ptr, int dir) {
800002d0:	55                   	push   %ebp
800002d1:	89 e5                	mov    %esp,%ebp
800002d3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002d6:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002dd:	8b 45 08             	mov    0x8(%ebp),%eax
800002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002e3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002e9:	8b 45 10             	mov    0x10(%ebp),%eax
800002ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f2:	50                   	push   %eax
800002f3:	e8 d5 fd ff ff       	call   800000cd <sys_call>
800002f8:	83 c4 04             	add    $0x4,%esp
}
800002fb:	c9                   	leave  
800002fc:	c3                   	ret    

800002fd <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
800002fd:	55                   	push   %ebp
800002fe:	89 e5                	mov    %esp,%ebp
80000300:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000303:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000030a:	8b 45 08             	mov    0x8(%ebp),%eax
8000030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000310:	8b 45 0c             	mov    0xc(%ebp),%eax
80000313:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000316:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000319:	50                   	push   %eax
8000031a:	e8 ae fd ff ff       	call   800000cd <sys_call>
8000031f:	83 c4 04             	add    $0x4,%esp
}
80000322:	c9                   	leave  
80000323:	c3                   	ret    

80000324 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
80000324:	55                   	push   %ebp
80000325:	89 e5                	mov    %esp,%ebp
80000327:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000032a:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000331:	8b 45 08             	mov    0x8(%ebp),%eax
80000334:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000337:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033a:	50                   	push   %eax
8000033b:	e8 8d fd ff ff       	call   800000cd <sys_call>
80000340:	83 c4 04             	add    $0x4,%esp
}
80000343:	c9                   	leave  
80000344:	c3                   	ret    

80000345 <sbrk>:

void * sbrk(ptrdiff_t incr) {
80000345:	55                   	push   %ebp
80000346:	89 e5                	mov    %esp,%ebp
80000348:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000034b:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000352:	8b 45 08             	mov    0x8(%ebp),%eax
80000355:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000358:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035b:	50                   	push   %eax
8000035c:	e8 6c fd ff ff       	call   800000cd <sys_call>
80000361:	83 c4 04             	add    $0x4,%esp
}
80000364:	c9                   	leave  
80000365:	c3                   	ret    

80000366 <dup>:

int dup (int file) {
80000366:	55                   	push   %ebp
80000367:	89 e5                	mov    %esp,%ebp
80000369:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000036c:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000373:	8b 45 08             	mov    0x8(%ebp),%eax
80000376:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000379:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037c:	50                   	push   %eax
8000037d:	e8 4b fd ff ff       	call   800000cd <sys_call>
80000382:	83 c4 04             	add    $0x4,%esp
}
80000385:	c9                   	leave  
80000386:	c3                   	ret    
